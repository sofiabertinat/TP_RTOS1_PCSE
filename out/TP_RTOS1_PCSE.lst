
TrabajoFinal/TP_RTOS1_PCSE/out/TP_RTOS1_PCSE.elf:     file format elf32-littlearm
TrabajoFinal/TP_RTOS1_PCSE/out/TP_RTOS1_PCSE.elf
architecture: armv7e-m, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x1a0008b9

Program Header:
0x70000001 off    0x0001b564 vaddr 0x1a00b564 paddr 0x1a00b564 align 2**2
         filesz 0x00000008 memsz 0x00000008 flags r--
    LOAD off    0x00000000 vaddr 0x10000000 paddr 0x10000000 align 2**16
         filesz 0x000000b4 memsz 0x00003698 flags rw-
    LOAD off    0x00010000 vaddr 0x1a000000 paddr 0x1a000000 align 2**16
         filesz 0x0000b56c memsz 0x0000b56c flags rwx
    LOAD off    0x00020000 vaddr 0x10000000 paddr 0x1a00b56c align 2**16
         filesz 0x000009fc memsz 0x000009fc flags rw-
private flags = 5000400: [Version5 EABI] [hard-float ABI]

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000b560  1a000000  1a000000  00010000  2**6
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000009fc  10000000  1a00b56c  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  2 .data_RAM2    00000000  10080000  10080000  000209fc  2**2
                  CONTENTS
  3 .data_RAM3    00000000  20000000  20000000  000209fc  2**2
                  CONTENTS
  4 .data_RAM4    00000000  20008000  20008000  000209fc  2**2
                  CONTENTS
  5 .data_RAM5    00000000  2000c000  2000c000  000209fc  2**2
                  CONTENTS
  6 .bss          00002c98  10000a00  10000a00  00000a00  2**3
                  ALLOC
  7 .bss_RAM2     00000000  10080000  10080000  000209fc  2**2
                  CONTENTS
  8 .bss_RAM3     00000000  20000000  20000000  000209fc  2**2
                  CONTENTS
  9 .bss_RAM4     00000000  20008000  20008000  000209fc  2**2
                  CONTENTS
 10 .bss_RAM5     00000000  2000c000  2000c000  000209fc  2**2
                  CONTENTS
 11 .init_array   00000004  1a00b560  1a00b560  0001b560  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 12 .ARM.exidx    00000008  1a00b564  1a00b564  0001b564  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 13 .uninit_RESERVED 00000000  10000000  10000000  000209fc  2**2
                  CONTENTS
 14 .noinit_RAM2  00000000  10080000  10080000  000209fc  2**2
                  CONTENTS
 15 .noinit_RAM3  00000000  20000000  20000000  000209fc  2**2
                  CONTENTS
 16 .noinit_RAM4  00000000  20008000  20008000  000209fc  2**2
                  CONTENTS
 17 .noinit_RAM5  00000000  2000c000  2000c000  000209fc  2**2
                  CONTENTS
 18 .noinit       00000000  10003698  10003698  000209fc  2**2
                  CONTENTS
 19 .debug_info   0003e37c  00000000  00000000  000209fc  2**0
                  CONTENTS, READONLY, DEBUGGING
 20 .debug_abbrev 00007d26  00000000  00000000  0005ed78  2**0
                  CONTENTS, READONLY, DEBUGGING
 21 .debug_loc    0000f494  00000000  00000000  00066a9e  2**0
                  CONTENTS, READONLY, DEBUGGING
 22 .debug_aranges 00001330  00000000  00000000  00075f32  2**0
                  CONTENTS, READONLY, DEBUGGING
 23 .debug_ranges 000014e8  00000000  00000000  00077262  2**0
                  CONTENTS, READONLY, DEBUGGING
 24 .debug_macro  0000ca1c  00000000  00000000  0007874a  2**0
                  CONTENTS, READONLY, DEBUGGING
 25 .debug_line   0002395d  00000000  00000000  00085166  2**0
                  CONTENTS, READONLY, DEBUGGING
 26 .debug_str    00031994  00000000  00000000  000a8ac3  2**0
                  CONTENTS, READONLY, DEBUGGING
 27 .comment      00000068  00000000  00000000  000da457  2**0
                  CONTENTS, READONLY
 28 .ARM.attributes 00000032  00000000  00000000  000da4bf  2**0
                  CONTENTS, READONLY
 29 .debug_frame  00004244  00000000  00000000  000da4f4  2**2
                  CONTENTS, READONLY, DEBUGGING
SYMBOL TABLE:
1a000000 l    d  .text	00000000 .text
10000000 l    d  .data	00000000 .data
10080000 l    d  .data_RAM2	00000000 .data_RAM2
20000000 l    d  .data_RAM3	00000000 .data_RAM3
20008000 l    d  .data_RAM4	00000000 .data_RAM4
2000c000 l    d  .data_RAM5	00000000 .data_RAM5
10000a00 l    d  .bss	00000000 .bss
10080000 l    d  .bss_RAM2	00000000 .bss_RAM2
20000000 l    d  .bss_RAM3	00000000 .bss_RAM3
20008000 l    d  .bss_RAM4	00000000 .bss_RAM4
2000c000 l    d  .bss_RAM5	00000000 .bss_RAM5
1a00b560 l    d  .init_array	00000000 .init_array
1a00b564 l    d  .ARM.exidx	00000000 .ARM.exidx
10000000 l    d  .uninit_RESERVED	00000000 .uninit_RESERVED
10080000 l    d  .noinit_RAM2	00000000 .noinit_RAM2
20000000 l    d  .noinit_RAM3	00000000 .noinit_RAM3
20008000 l    d  .noinit_RAM4	00000000 .noinit_RAM4
2000c000 l    d  .noinit_RAM5	00000000 .noinit_RAM5
10003698 l    d  .noinit	00000000 .noinit
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    d  .debug_macro	00000000 .debug_macro
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .ARM.attributes	00000000 .ARM.attributes
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    df *ABS*	00000000 armv7m_startup.c
00000000 l    df *ABS*	00000000 vendor_interrupt.c
00000000 l    df *ABS*	00000000 crp.c
00000000 l    df *ABS*	00000000 leds.c
00000000 l    df *ABS*	00000000 main.c
10000a00 l     O .bss	00000001 debugPrint
10000a04 l     O .bss	00000004 duracionSensado
10000a08 l     O .bss	00000004 promedioAlturaPasto
10000a0c l     O .bss	00000004 xBinarySemaphore
10000a18 l     O .bss	00000004 xMutexSemaphore
10000000 l     O .data	00000004 contador
00000000 l    df *ABS*	00000000 BotonActivo.c
10000a1c l     O .bss	00000001 EstadoTec
10000a20 l     O .bss	00000004 contFalling.13866
10000a24 l     O .bss	00000004 contRising.13867
10000a28 l     O .bss	00000001 flagFalling.13864
10000a29 l     O .bss	00000001 flagRising.13865
00000000 l    df *ABS*	00000000 funAux.c
1a00af04 l     O .text	00000025 num.13836
00000000 l    df *ABS*	00000000 AlturaPasto.c
10000a2c l     O .bss	00000010 estadoSensor
10000a3c l     O .bss	00000004 suma
00000000 l    df *ABS*	00000000 SensorIR.c
1a00af5c l     O .text	00000004 s
00000000 l    df *ABS*	00000000 system.c
10000a40 l     O .bss	00000004 heap_end.5864
00000000 l    df *ABS*	00000000 heap_4.c
1a000a0c l     F .text	00000064 prvHeapInit
10000a48 l     O .bss	00002000 ucHeap
1a000a70 l     F .text	00000058 prvInsertBlockIntoFreeList
10000a44 l     O .bss	00000004 pxEnd
10002a48 l     O .bss	00000004 xBlockAllocatedBit
10002a4c l     O .bss	00000004 xFreeBytesRemaining
10002a50 l     O .bss	00000004 xMinimumEverFreeBytesRemaining
10002a54 l     O .bss	00000008 xStart
00000000 l    df *ABS*	00000000 queue.c
1a000c54 l     F .text	00000012 prvGetDisinheritPriorityAfterTimeout
1a000c66 l     F .text	0000001e prvIsQueueFull
1a000c84 l     F .text	0000001a prvIsQueueEmpty
1a000c9e l     F .text	00000076 prvCopyDataToQueue
1a000d14 l     F .text	00000024 prvCopyDataFromQueue
1a000d38 l     F .text	0000006e prvUnlockQueue
1a000e2c l     F .text	00000022 prvInitialiseNewQueue
1a0010b0 l     F .text	00000018 prvInitialiseMutex
00000000 l    df *ABS*	00000000 list.c
00000000 l    df *ABS*	00000000 static_provider.c
10002a5c l     O .bss	00000168 uxIdleTaskStack.10813
10002bc4 l     O .bss	000005a0 uxTimerTaskStack.10820
10003164 l     O .bss	00000060 xIdleTaskTCB.10812
100031c4 l     O .bss	00000060 xTimerTaskTCB.10819
00000000 l    df *ABS*	00000000 hooks.c
00000000 l    df *ABS*	00000000 tasks.c
1a001648 l     F .text	0000002c prvResetNextTaskUnblockTime
1a001674 l     F .text	00000090 prvInitialiseNewTask
1a001704 l     F .text	00000068 prvInitialiseTaskLists
1a00176c l     F .text	000000ac prvAddNewTaskToReadyList
1a001818 l     F .text	00000038 prvDeleteTCB
1a001850 l     F .text	0000004c prvCheckTasksWaitingTermination
1a00189c l     F .text	00000028 prvIdleTask
1a0018c4 l     F .text	00000098 prvAddCurrentTaskToDelayedList
10003228 l     O .bss	00000004 pxDelayedTaskList
1000322c l     O .bss	00000004 pxOverflowDelayedTaskList
10003230 l     O .bss	0000008c pxReadyTasksLists
100032bc l     O .bss	00000004 uxCurrentNumberOfTasks
100032c0 l     O .bss	00000004 uxDeletedTasksWaitingCleanUp
100032c4 l     O .bss	00000004 uxPendedTicks
100032c8 l     O .bss	00000004 uxSchedulerSuspended
100032cc l     O .bss	00000004 uxTaskNumber
100032d0 l     O .bss	00000004 uxTopReadyPriority
100032d4 l     O .bss	00000014 xDelayedTaskList1
100032e8 l     O .bss	00000014 xDelayedTaskList2
100032fc l     O .bss	00000004 xNextTaskUnblockTime
10003300 l     O .bss	00000004 xNumOfOverflows
10003304 l     O .bss	00000014 xPendingReadyList
10003318 l     O .bss	00000004 xSchedulerRunning
1000331c l     O .bss	00000014 xSuspendedTaskList
10003330 l     O .bss	00000014 xTasksWaitingTermination
10003344 l     O .bss	00000004 xTickCount
10003348 l     O .bss	00000004 xYieldPending
00000000 l    df *ABS*	00000000 timers.c
1a002350 l     F .text	00000020 prvGetNextExpireTime
1a002370 l     F .text	00000048 prvInsertTimerInActiveList
1a0023b8 l     F .text	00000070 prvCheckForValidListAndQueue
1a00276c l     F .text	00000016 prvTimerTask
1a0024f8 l     F .text	00000078 prvSwitchTimerLists
1a002570 l     F .text	0000002c prvSampleTimeNow
1a00259c l     F .text	00000060 prvProcessExpiredTimer
1a0025fc l     F .text	00000074 prvProcessTimerOrBlockTask
1a002670 l     F .text	000000fc prvProcessReceivedCommands
1000334c l     O .bss	00000004 pxCurrentTimerList
10003350 l     O .bss	00000004 pxOverflowTimerList
10003354 l     O .bss	000000a0 ucStaticTimerQueueStorage.11914
100033f4 l     O .bss	00000014 xActiveTimerList1
10003408 l     O .bss	00000014 xActiveTimerList2
1000341c l     O .bss	00000004 xLastTime.11863
10003420 l     O .bss	00000050 xStaticTimerQueue.11913
10003470 l     O .bss	00000004 xTimerQueue
10003474 l     O .bss	00000004 xTimerTaskHandle
00000000 l    df *ABS*	00000000 port.c
1a002784 l     F .text	00000040 prvTaskExitError
1a0027c4 l     F .text	00000022 prvPortStartFirstTask
1a0027ec l     F .text	0000000e vPortEnableVFP
1a002850 l       .text	00000000 pxCurrentTCBConst2
1a002930 l       .text	00000000 pxCurrentTCBConst
10003478 l     O .bss	00000001 ucMaxSysCallPriority
1000347c l     O .bss	00000004 ulMaxPRIGROUPValue
10000004 l     O .data	00000004 uxCriticalNesting
00000000 l    df *ABS*	00000000 freertos_cm_support.c
00000000 l    df *ABS*	00000000 board.c
1a002b24 l     F .text	00000044 Board_LED_Init
1a002b68 l     F .text	00000040 Board_TEC_Init
1a002ba8 l     F .text	00000040 Board_GPIO_Init
1a002be8 l     F .text	00000030 Board_ADC_Init
1a002c18 l     F .text	00000038 Board_SPI_Init
1a002c50 l     F .text	00000024 Board_I2C_Init
1a00b030 l     O .text	00000008 GpioButtons
1a00b038 l     O .text	0000000c GpioLeds
1a00b044 l     O .text	00000012 GpioPorts
00000000 l    df *ABS*	00000000 board_sysinit.c
1a00b05c l     O .text	00000004 InitClkStates
1a00b060 l     O .text	00000074 pinmuxing
00000000 l    df *ABS*	00000000 i2c_18xx_43xx.c
10000008 l     O .data	00000038 i2c
00000000 l    df *ABS*	00000000 uart_18xx_43xx.c
1a003010 l     F .text	0000002c Chip_UART_GetIndex
1a00b0d4 l     O .text	00000008 UART_BClock
1a00b0dc l     O .text	00000008 UART_PClock
00000000 l    df *ABS*	00000000 adc_18xx_43xx.c
1a0031ac l     F .text	00000014 Chip_ADC_GetClockIndex
1a0031c0 l     F .text	00000032 getClkDiv
00000000 l    df *ABS*	00000000 clock_18xx_43xx.c
1a003378 l     F .text	000000a0 pll_calc_divs
1a003418 l     F .text	0000010c pll_get_frac
1a003524 l     F .text	0000004c Chip_Clock_FindBaseClock
1a003798 l     F .text	00000022 Chip_Clock_GetDivRate
10003484 l     O .bss	00000008 audio_usb_pll_freq
1a00b0f0 l     O .text	0000006c periph_to_base
00000000 l    df *ABS*	00000000 chip_18xx_43xx.c
00000000 l    df *ABS*	00000000 i2cm_18xx_43xx.c
00000000 l    df *ABS*	00000000 gpio_18xx_43xx.c
00000000 l    df *ABS*	00000000 sysinit_18xx_43xx.c
1a00b15c l     O .text	00000048 InitClkStates
00000000 l    df *ABS*	00000000 ssp_18xx_43xx.c
1a003bd8 l     F .text	00000014 Chip_SSP_GetClockIndex
1a003bec l     F .text	00000018 Chip_SSP_GetPeriphClockIndex
00000000 l    df *ABS*	00000000 sysinit.c
00000000 l    df *ABS*	00000000 sapi_cyclesCounter.c
10000040 l     O .data	00000004 ClockSpeed
00000000 l    df *ABS*	00000000 sapi_uart.c
1a00b1a4 l     O .text	00000048 lpcUarts
00000000 l    df *ABS*	00000000 sapi_tick.c
00000000 l    df *ABS*	00000000 sapi_i2c.c
1a003db0 l     F .text	00000030 i2cHardwareInit
1a003de0 l     F .text	00000040 i2cHardwareRead
1a003e20 l     F .text	00000040 i2cHardwareWrite
00000000 l    df *ABS*	00000000 sapi_adc.c
00000000 l    df *ABS*	00000000 sapi_gpio.c
1a003fc4 l     F .text	00000034 gpioObtainPinInit
00000000 l    df *ABS*	00000000 sapi_usb_device.c
1000348c l     O .bss	00000004 g_hUsb
00000000 l    df *ABS*	00000000 sapi_board.c
00000000 l    df *ABS*	00000000 sapi_delay.c
00000000 l    df *ABS*	00000000 sapi_print.c
00000000 l    df *ABS*	00000000 sapi_lcd.c
1a004400 l     F .text	00000038 pcf8574TGpioPortWrite
1a004438 l     F .text	00000028 pcf8574TGpioWrite
1a004460 l     F .text	00000008 lcdPinSet
1a004468 l     F .text	0000002e lcdSendNibble
1a004496 l     F .text	0000001c lcdEnablePulse
1a0044b4 l     F .text	0000002c pcf8574TGpioPortInit
1a0044e0 l     F .text	00000018 pcf8574TInit
10003490 l     O .bss	0000000a lcd
1000349a l     O .bss	00000001 pcf8574TGpioPortDirections
1000349b l     O .bss	00000001 pcf8574TGpioPortValue
10000050 l     O .data	00000001 pcf8574TI2cAddress
00000000 l    df *ABS*	00000000 sapi_imu_mpu9250.c
1a004678 l     F .text	00000080 mpu9250InitializeControlStructure
1a0046f8 l     F .text	00000038 mpu9250ReadRegisters
1a004730 l     F .text	00000020 mpu9250WhoAmI
1a004750 l     F .text	0000004c mpu9250WriteRegister
1a00479c l     F .text	0000005c mpu9250ReadAK8963Registers
1a0047f8 l     F .text	00000020 mpu9250WhoAmIAK8963
1a004818 l     F .text	00000078 mpu9250WriteAK8963Register
1a004890 l     F .text	00000094 mpu9250SetGyroRange
1a004924 l     F .text	000000f8 mpu9250SetDlpfBandwidth
1a004a1c l     F .text	000000b4 mpu9250SetSrd
1a004d7c l     F .text	0000015c mpu9250CalibrateGyro
100034a0 l     O .bss	00000158 control
00000000 l    df *ABS*	00000000 _arm_addsubdf3.o
00000000 l    df *ABS*	00000000 _arm_muldivdf3.o
00000000 l    df *ABS*	00000000 _arm_cmpdf2.o
00000000 l    df *ABS*	00000000 _arm_truncdfsf2.o
00000000 l    df *ABS*	00000000 _aeabi_uldivmod.o
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 _dvmd_tls.o
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 findfp.c
1a005f84 l     F .text	00000050 std
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 init.c
00000000 l    df *ABS*	00000000 lock.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 lib_a-memcpy.o
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 mlock.c
00000000 l    df *ABS*	00000000 printf.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 lib_a-strlen.o
00000000 l    df *ABS*	00000000 vfprintf.c
1a008874 l     F .text	00000084 __sbprintf
1a00b320 l     O .text	00000010 blanks.8693
1a00b330 l     O .text	00000010 zeroes.8694
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 dtoa.c
1a0089c8 l     F .text	00000124 quorem
00000000 l    df *ABS*	00000000 fclose.c
00000000 l    df *ABS*	00000000 fvwrite.c
00000000 l    df *ABS*	00000000 localeconv.c
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 lib_a-memchr.o
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 mprec.c
1a00b440 l     O .text	0000000c p05.7442
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 s_frexp.c
00000000 l    df *ABS*	00000000 strncpy.c
00000000 l    df *ABS*	00000000 vfprintf.c
1a00a9f0 l     F .text	00000076 __sprint_r.part.0
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fputwc.c
00000000 l    df *ABS*	00000000 locale.c
00000000 l    df *ABS*	00000000 mbtowc_r.c
00000000 l    df *ABS*	00000000 wbuf.c
00000000 l    df *ABS*	00000000 wcrtomb.c
00000000 l    df *ABS*	00000000 wctomb_r.c
00000000 l    df *ABS*	00000000 _arm_unorddf2.o
00000000 l    df *ABS*	00000000 _arm_fixdfsi.o
00000000 l    df *ABS*	00000000 ctype_.c
00000000 l    df *ABS*	00000000 impure.c
10000058 l     O .data	00000428 impure_data
00000000 l    df *ABS*	00000000 
1a00b564 l       .init_array	00000000 __init_array_end
1a00b560 l       .bss_RAM5	00000000 __preinit_array_end
1a00b560 l       .init_array	00000000 __init_array_start
1a00b560 l       .bss_RAM5	00000000 __preinit_array_start
1a0003e8 g     F .text	000000bc handlerIR
1a000620 g     F .text	0000000c BotonError
1a00ad18 g     F .text	0000002c .hidden __aeabi_dcmpun
1a0035bc g     F .text	0000001c Chip_Clock_GetDividerSource
1a000958 g     F .text	00000012 _isatty_r
1a003a4c g     F .text	0000000e Chip_I2CM_Xfer
1a0059fc g     F .text	00000012 .hidden __aeabi_dcmple
1a006b08 g     F .text	0000009c _puts_r
1a0001ba  w    F .text	00000002 TIMER2_IRQHandler
1a003cf8 g     F .text	00000014 uartRxRead
1a005938 g     F .text	0000007a .hidden __cmpdf2
1a003e60 g     F .text	0000000e i2cInit
1a00096a g     F .text	0000000a _lseek_r
1a000184  w    F .text	00000002 DebugMon_Handler
1a0001ba  w    F .text	00000002 RIT_IRQHandler
1a003258 g     F .text	00000016 Chip_ADC_DeInit
1a080000 g       *ABS*	00000000 __top_MFlashA512
1a005938 g     F .text	0000007a .hidden __eqdf2
1a0001ba  w    F .text	00000002 ADCHS_IRQHandler
1a000114 g       .text	00000000 __section_table_start
1a0001ba  w    F .text	00000002 FLASH_EEPROM_IRQHandler
1a002898 g     F .text	0000002c vPortExitCritical
1a0054a8 g     F .text	0000005a .hidden __floatdidf
1a0001ba  w    F .text	00000002 I2C0_IRQHandler
1a003d88 g     F .text	0000001e uartReadByte
1a006ae0 g     F .text	00000028 printf
1a002d0a g     F .text	00000008 __stdio_init
10003674 g     O .bss	00000001 __lock___atexit_recursive_mutex
1a00acc8 g     F .text	00000034 _wcrtomb_r
1a006c18 g     F .text	00000020 __sseek
1a005fe0 g     F .text	00000054 __sinit
1a00ac18 g     F .text	000000b0 __swbuf_r
1a00017a  w    F .text	00000002 HardFault_Handler
1a0014d4 g     F .text	00000052 vQueueWaitForMessageRestricted
1a002de4 g     F .text	00000120 handleMasterXferState
1a000000 g       *ABS*	00000000 __vectors_start__
1a003320 g     F .text	0000000c Chip_ADC_SetResolution
1a006ad4 g     F .text	0000000c __malloc_unlock
1a000314 g     F .text	0000006c tareaLCD
1a002934 g     F .text	0000002c SysTick_Handler
1a003090 g     F .text	00000040 Chip_UART_SetBaud
10003678 g     O .bss	00000001 __lock___arc4random_mutex
1a0008b4  w    F .text	00000002 initialise_monitor_handles
1a0001ba  w    F .text	00000002 SDIO_IRQHandler
1a002cac g     F .text	0000001c Board_UARTGetChar
1a0001ba  w    F .text	00000002 ATIMER_IRQHandler
1a009ec0 g     F .text	000000ce memmove
1a0028d0 g     F .text	00000064 PendSV_Handler
1a0010de g     F .text	000000ce xQueueGenericSendFromISR
1a000178  w    F .text	00000002 NMI_Handler
1a009f90 g     F .text	0000004c _Balloc
1a00b56c g       .ARM.exidx	00000000 __exidx_end
1a000150 g       .text	00000000 __data_section_table_end
1a0001ba  w    F .text	00000002 I2C1_IRQHandler
1a0001ba  w    F .text	00000002 UART1_IRQHandler
1a005928 g     F .text	0000008a .hidden __gtdf2
1a0001ba  w    F .text	00000002 GPIO5_IRQHandler
1a0001ba  w    F .text	00000002 CAN1_IRQHandler
1a003e6e g     F .text	00000028 i2cRead
10003224 g     O .bss	00000004 pxCurrentTCB
1a00094e g     F .text	0000000a _fstat_r
53ff6fd6 g       *ABS*	00000000 __valid_user_code_checksum
1a00b56c g       .ARM.exidx	00000000 _etext
1a0059c4 g     F .text	00000010 .hidden __aeabi_cdcmple
1a0001ba  w    F .text	00000002 USB1_IRQHandler
1a0001ba  w    F .text	00000002 I2S0_IRQHandler
1a00203c g     F .text	00000018 vTaskInternalSetTimeOutState
1a00030a g     F .text	0000000a LedApagar
1a0001ba  w    F .text	00000002 TIMER3_IRQHandler
1a00383a g     F .text	0000000c Chip_Clock_GetBaseClocktHz
1a0001ba  w    F .text	00000002 UART0_IRQHandler
1a000600 g     F .text	0000000e BotonPresionado
1a0001a8 g     F .text	00000012 bss_init
1a002998 g     F .text	00000110 xPortStartScheduler
1a0068f4 g     F .text	00000134 memcpy
1a001f48 g     F .text	00000030 vTaskPlaceOnEventList
1a0059b4 g     F .text	00000020 .hidden __aeabi_cdrcmple
1a0001ba  w    F .text	00000002 SGPIO_IRQHandler
1a005fd4 g     F .text	0000000c _cleanup_r
1a005430 g     F .text	00000022 .hidden __floatsidf
1a002960  w    F .text	00000038 vPortSetupTimerInterrupt
1a002f90 g     F .text	00000030 Chip_I2C_MasterStateHandler
1a005930 g     F .text	00000082 .hidden __ltdf2
1a005ad8 g     F .text	00000000 .hidden __aeabi_uldivmod
10003698 g       .noinit	00000000 _noinit
1a006ba4 g     F .text	00000010 puts
1a000be4 g     F .text	00000070 vPortFree
1000366c g     O .bss	00000004 SystemCoreClock
1a0004a4 g     F .text	00000060 Tecla_task
1a00303c g     F .text	00000054 Chip_UART_Init
1a001308 g     F .text	000001a4 xQueueSemaphoreTake
1a0001ba  w    F .text	00000002 ADC0_IRQHandler
1a002aa8 g     F .text	0000005c vPortValidateInterruptPriority
1a000638 g     F .text	000000e4 TEC_antirebote_MEF
1a003200 g     F .text	00000018 readAdcVal
1a00b378 g     O .text	000000c8 __mprec_tens
1a000180  w    F .text	00000002 UsageFault_Handler
1a0038ec g     F .text	0000004c Chip_Clock_GetRate
1a001542 g     F .text	00000016 vListInsertEnd
1a0001ba  w    F .text	00000002 GPIO6_IRQHandler
1a0043f0 g     F .text	00000010 printInitUart
10003628 g     O .bss	00000004 __malloc_top_pad
1a002d4c g     F .text	0000006c Board_SetupClocking
20008000 g       *ABS*	00000000 __top_RamAHB32
1a00071c g     F .text	000000a8 itoa
1a005410 g     F .text	0000001e .hidden __aeabi_ui2d
1a009d1c g     F .text	00000008 _localeconv_r
1a00a11c g     F .text	00000012 __i2b
1a009a14 g     F .text	00000308 __sfvwrite_r
1a002f60 g     F .text	00000030 Chip_I2C_SetMasterEventHandler
1a005b08 g     F .text	000002d0 .hidden __udivmoddi4
1a00518c g     F .text	00000000 .hidden __aeabi_drsub
1a004ed8 g     F .text	000002b4 mpu9250Init
1a0009ec g     F .text	00000020 _sbrk_r
1a00b02c g     O .text	00000004 ExtRateIn
1a0001ba  w    F .text	00000002 IntDefaultHandler
1a000300 g       .text	00000000 __CRP_WORD_END__
1a000974 g     F .text	0000004e _read_r
1a00153c g     F .text	00000006 vListInitialiseItem
1a000380 g     F .text	00000068 config_task
1a0059e8 g     F .text	00000012 .hidden __aeabi_dcmplt
1a009944 g     F .text	000000ce _fclose_r
1a0001ba  w    F .text	00000002 GPIO1_IRQHandler
1a0011ac g     F .text	0000015c xQueueReceive
1000362c g     O .bss	00000040 xQueueRegistry
10003620 g     O .bss	00000004 __malloc_max_sbrked_mem
1a005454 g     F .text	00000042 .hidden __extendsfdf2
1a005758 g     F .text	000001d0 .hidden __aeabi_ddiv
1a0015cc g     F .text	00000018 vApplicationGetTimerTaskMemory
1a0001ba  w    F .text	00000002 SSP0_IRQHandler
1a005198 g     F .text	00000276 .hidden __adddf3
1a003ce0 g     F .text	00000018 uartRxReady
1a00b564 g       .ARM.exidx	00000000 __exidx_start
1000367c g     O .bss	00000001 __lock___env_recursive_mutex
1a005504 g     F .text	00000254 .hidden __aeabi_dmul
1a0002fc g     O .text	00000004 CRP_WORD
1a0031f2 g     F .text	0000000e setStartMode
10003680 g     O .bss	00000001 __lock___sinit_recursive_mutex
1a00a5a4 g     F .text	0000036c _realloc_r
1a00632c g     F .text	00000048 __libc_init_array
1a00ab7c g     F .text	00000064 _fputwc_r
1a00b350 g     O .text	00000028 __mprec_bigtens
1a003eb0 g     F .text	000000bc adcInit
1a005410 g     F .text	0000001e .hidden __floatunsidf
1a0001ba  w    F .text	00000002 ADC1_IRQHandler
1a00a3b4 g     F .text	00000038 __mcmp
1a000ac8 g     F .text	0000011c pvPortMalloc
1a002cc8 g     F .text	00000030 Board_Init
1a000942  w    F .text	00000002 _init
1a001526 g     F .text	00000016 vListInitialise
1a000114 g       .text	00000000 __data_section_table
10000a14 g     O .bss	00000004 xHandleconfig_task
1a005a38 g     F .text	0000009e .hidden __aeabi_d2f
1a001bb8 g     F .text	0000000c xTaskGetTickCount
1a000f30 g     F .text	00000180 xQueueGenericSend
1a0001ba  w    F .text	00000002 RTC_IRQHandler
10003698 g       .bss	00000000 _ebss
1a00332c g     F .text	0000002a Chip_ADC_EnableChannel
1a0001ba  w    F .text	00000002 TIMER0_IRQHandler
1a0008b8 g     F .text	00000088 Reset_Handler
20010000 g       *ABS*	00000000 __top_RamAHB_ETB16
1a0001ba  w    F .text	00000002 SPI_IRQHandler
1a003a5a g     F .text	00000024 Chip_I2CM_XferBlocking
1a00a07c g     F .text	00000040 __hi0bits
1a002f28 g     F .text	00000038 Chip_I2C_SetClockRate
1a00ad44 g     F .text	0000004e .hidden __fixdfsi
1a0021c0 g     F .text	000000b4 xTaskPriorityDisinherit
1a0001ba  w    F .text	00000002 LCD_IRQHandler
1a003570 g     F .text	0000004c Chip_Clock_EnableCrystal
10003684 g     O .bss	00000001 __lock___malloc_recursive_mutex
1a00326e g     F .text	00000008 Chip_ADC_ReadValue
10008000 g       *ABS*	00000000 __top_RamLoc32
1a001fb0 g     F .text	0000008c xTaskRemoveFromEventList
1a001610  w    F .text	0000001c vApplicationMallocFailedHook
1a005198 g     F .text	00000276 .hidden __aeabi_dadd
1a00018a g     F .text	0000001e data_init
1a005930 g     F .text	00000082 .hidden __ledf2
1a0032ce g     F .text	00000020 Chip_ADC_SetStartMode
1a00a260 g     F .text	000000a0 __pow5mult
1a005498 g     F .text	0000006a .hidden __aeabi_ul2d
1a0001ba  w    F .text	00000002 TIMER1_IRQHandler
1a002f04 g     F .text	00000024 Chip_I2C_Init
1a001a34 g     F .text	000000e0 vTaskDelete
1a006380 g     F .text	00000002 __retarget_lock_release_recursive
1a0001ba  w    F .text	00000002 UART2_IRQHandler
1a00372c g     F .text	0000006c Chip_Clock_GetMainPLLHz
1a00b1ec g     O .text	000000e6 gpioPinsInit
1a0015e4  w    F .text	0000002c vAssertCalled
1a002334 g     F .text	0000001c pvTaskIncrementMutexHeldCount
1a003c04 g     F .text	00000012 Chip_SSP_SetClockRate
1a005a24 g     F .text	00000012 .hidden __aeabi_dcmpgt
1a0001ba  w    F .text	00000002 GPIO2_IRQHandler
1a006034 g     F .text	0000000c __sfp_lock_acquire
1a009e20 g     F .text	00000000 memchr
1a002054 g     F .text	00000084 xTaskCheckForTimeOut
1a0060ec g     F .text	000001ec _free_r
1a003f6c g     F .text	00000058 adcRead
1a003814 g     F .text	00000026 Chip_Clock_GetBaseClock
1a002104 g     F .text	000000bc xTaskPriorityInherit
1a00abe0 g     F .text	0000000c __locale_mb_cur_max
1a005a10 g     F .text	00000012 .hidden __aeabi_dcmpge
1a0045c4 g     F .text	0000009c lcdInit
10000a00 g       .bss	00000000 _bss
1a003276 g     F .text	00000036 Chip_ADC_ReadStatus
1a0032ee g     F .text	00000032 Chip_ADC_SetSampleRate
1a005194 g     F .text	0000027a .hidden __aeabi_dsub
10000888 g     O .data	00000004 __malloc_sbrk_base
10003480 g     O .bss	00000004 freeRtosInterruptCallback
1a001ba8 g     F .text	00000010 vTaskSuspendAll
1a005498 g     F .text	0000006a .hidden __floatundidf
1a00a300 g     F .text	000000b2 __lshift
1a0001ba  w    F .text	00000002 I2S1_IRQHandler
1a003c16 g     F .text	0000003e Chip_SSP_SetBitRate
1a00158c g     F .text	00000026 uxListRemove
1a004d64 g     F .text	0000000c mpu9250GetGyroY_rads
1a003a7e g     F .text	00000002 Chip_GPIO_Init
1a00b058 g     O .text	00000004 OscRateIn
1a004300 g     F .text	0000005a delayInaccurateMs
1a003d0c g     F .text	0000007c uartInit
1a00a130 g     F .text	00000130 __multiply
1a00195c g     F .text	00000072 xTaskCreateStatic
10003698 g       .noinit	00000000 _end_noinit
10008000 g       *ABS*	00000000 _vStackTop
1a00a97c g     F .text	00000072 strncpy
100035f8 g     O .bss	00000028 __malloc_current_mallinfo
1a00a4e4 g     F .text	000000be __d2b
1a001e7c g     F .text	000000cc vTaskSwitchContext
1a0001ba  w    F .text	00000002 SSP1_IRQHandler
1a004530 g     F .text	00000030 lcdData
1a000e4e g     F .text	00000092 xQueueGenericCreateStatic
1a001f78 g     F .text	00000038 vTaskPlaceOnEventListRestricted
1a000178 g       .text	00000000 __bss_section_table_end
1a000944 g     F .text	0000000a _close_r
1a005430 g     F .text	00000022 .hidden __aeabi_i2d
1a003ff8 g     F .text	000001ac gpioInit
1a0015b4 g     F .text	00000018 vApplicationGetIdleTaskMemory
1a000874 g     F .text	00000040 LecturaSensorIR
1a006378 g     F .text	00000002 __retarget_lock_close_recursive
1a00248c g     F .text	0000006c xTimerGenericCommand
1a0088f8 g     F .text	000000d0 __swsetup_r
1a00162c  w    F .text	0000001c vApplicationStackOverflowHook
1a005dd8  w    F .text	00000002 .hidden __aeabi_ldiv0
1a005758 g     F .text	000001d0 .hidden __divdf3
1a0044f8 g     F .text	00000038 lcdCommand
10000480 g     O .data	00000408 __malloc_av_
1a005504 g     F .text	00000254 .hidden __muldf3
1a006bb4 g     F .text	00000022 __sread
1a004278 g     F .text	0000001c USB0_IRQHandler
1a0038b8 g     F .text	00000034 Chip_Clock_Disable
1a0001ba  w    F .text	00000002 GPIO3_IRQHandler
1a006ac8 g     F .text	0000000c __malloc_lock
1a002c98 g     F .text	00000014 Board_UARTPutChar
1a002fc0 g     F .text	00000018 Chip_I2C_IsStateChanged
1a0001ba  w    F .text	00000002 SCT_IRQHandler
1a005f28 g     F .text	0000005a _fflush_r
1a00aa7c g     F .text	0000005e _calloc_r
1a0035d8 g     F .text	0000001c Chip_Clock_GetDividerDivisor
1a0002fc g       .text	00000000 __CRP_WORD_START__
1a00637c g     F .text	00000002 __retarget_lock_acquire_recursive
1a006a28 g     F .text	000000a0 memset
1a00017c  w    F .text	00000002 MemManage_Handler
1a000504 g     F .text	000000fc main
10003624 g     O .bss	00000004 __malloc_max_total_mem
1a0007f8 g     F .text	0000007c CalculoAlturaPasto
1a006374 g     F .text	00000002 __retarget_lock_init_recursive
1a0001ba  w    F .text	00000002 WDT_IRQHandler
1a001558 g     F .text	00000034 vListInsert
2000c000 g       *ABS*	00000000 __top_RamAHB16
1008a000 g       *ABS*	00000000 __top_RamLoc40
1a002830 g     F .text	00000024 SVC_Handler
1a006c38 g     F .text	00000008 __sclose
1a00062c g     F .text	0000000c TECInicializarMEF
1a002428 g     F .text	00000064 xTimerCreateTimerTask
1a005a38 g     F .text	0000009e .hidden __truncdfsf2
1a008af0 g     F .text	00000e54 _dtoa_r
1a006384 g     F .text	00000570 _malloc_r
1a00acfc g     F .text	0000001a __ascii_wctomb
10000a10 g     O .bss	00000004 xHandleTecla_task
1a0054a8 g     F .text	0000005a .hidden __aeabi_l2d
1a001dd8 g     F .text	000000a4 vTaskDelayUntil
1a0001ba  w    F .text	00000002 GPIO7_IRQHandler
1a003848 g     F .text	0000003c Chip_Clock_EnableOpts
1a002d02 g     F .text	00000008 __stdio_getchar
1a000ee0 g     F .text	0000004e xQueueGenericCreate
1a00604c g     F .text	000000a0 _malloc_trim_r
1a0035f4 g     F .text	000000b8 Chip_Clock_GetClockInputHz
1a0036ac g     F .text	00000080 Chip_Clock_CalcMainPLLValue
1a003c8c g     F .text	00000038 SystemInit
1a0001ba  w    F .text	00000002 SPIFI_IRQHandler
1a0043b8 g     F .text	00000038 delay
1a0001ba  w    F .text	00000002 QEI_IRQHandler
1a000150 g       .text	00000000 __bss_section_table
1a005938 g     F .text	0000007a .hidden __nedf2
1a0041a4 g     F .text	0000006a gpioWrite
1a000940  w    F .text	00000002 _fini
1a001cdc g     F .text	000000fc xTaskResumeAll
1a001b14 g     F .text	00000094 vTaskStartScheduler
1a003218 g     F .text	00000040 Chip_ADC_Init
10003670 g     O .bss	00000004 g_pUsbApi
1a002d14 g     F .text	00000038 Board_SetupMuxing
1a004560 g     F .text	00000050 lcdGoToXY
1a0030d0 g     F .text	000000dc Chip_UART_SetBaudFDR
1a003da6 g     F .text	0000000a tickRead
1a0009c2 g     F .text	00000028 _write_r
10000048 g     O .data	00000008 tickRateMS
1a003356 g     F .text	00000022 Chip_ADC_SetBurstCmd
1a004ad0 g     F .text	00000288 mpu9250Read
1a0001ba  w    F .text	00000002 ETH_IRQHandler
10000054 g     O .data	00000004 _impure_ptr
1a005ddc g     F .text	0000014a __sflush_r
10000000 g       .uninit_RESERVED	00000000 _end_uninit_RESERVED
1a004660 g     F .text	00000016 lcdSendStringRaw
1a0001ba  w    F .text	00000002 CAN0_IRQHandler
1a00394c g     F .text	00000100 Chip_I2CM_XferHandler
1a00abec g     F .text	0000002a __ascii_mbtowc
10000000 g       .data	00000000 _data
1a0020d8 g     F .text	0000000c vTaskMissedYield
10003698 g       .bss	00000000 _pvHeapStart
1a000178 g       .text	00000000 __section_table_end
1a003c54 g     F .text	00000038 Chip_SSP_Init
1a000300 g     F .text	0000000a LedEncender
1a002fd8 g     F .text	00000038 Chip_I2C_EventHandlerPolling
1a0014ac g     F .text	00000028 vQueueAddToRegistry
1a0001ba  w    F .text	00000002 GINT0_IRQHandler
1a001bc4 g     F .text	00000118 xTaskIncrementTick
1a0007c8 g     F .text	00000030 CalculoDuracionSensado
1a009d24 g     F .text	0000005c __swhatbuf_r
1a002b04 g     F .text	00000020 DAC_IRQHandler
1a003e96 g     F .text	00000018 i2cWrite
1a002c74 g     F .text	00000024 Board_Debug_Init
1a0059d4 g     F .text	00000012 .hidden __aeabi_dcmpeq
1a002cf8 g     F .text	0000000a __stdio_putchar
1a000da8 g     F .text	00000084 xQueueGenericReset
1a0032ac g     F .text	00000022 Chip_ADC_Int_SetChannelCmd
100009fc g       .data	00000000 _edata
1a002dc4 g     F .text	00000020 Chip_I2C_EventHandler
1a0001ba  w    F .text	00000002 M0SUB_IRQHandler
1a00aadc g     F .text	0000009e __fputwc
10003688 g     O .bss	00000001 __lock___at_quick_exit_mutex
1a0019ce g     F .text	00000066 xTaskCreate
1a003a80 g     F .text	00000158 Chip_SetupCoreClock
1a004d70 g     F .text	0000000c mpu9250GetGyroZ_rads
1a006bd8 g     F .text	0000003e __swrite
1a0001ba  w    F .text	00000002 GPIO0_IRQHandler
1000088c g     O .data	00000004 __malloc_trim_threshold
1a000000 g     O .text	00000040 g_pfnVectors
1a0062d8 g     F .text	00000052 _fwalk_reent
1a003938 g     F .text	00000014 SystemCoreClockUpdate
1a00a3ec g     F .text	000000f8 __mdiff
1a00ad44 g     F .text	0000004e .hidden __aeabi_d2iz
1a0001ba  w    F .text	00000002 DMA_IRQHandler
1a0001ba  w    F .text	00000002 EVRT_IRQHandler
1b080000 g       *ABS*	00000000 __top_MFlashB512
1a006040 g     F .text	0000000c __sfp_lock_release
1a0045b0 g     F .text	00000012 lcdClear
1a0020e4 g     F .text	00000020 xTaskGetSchedulerState
1a00b45c g     O .text	00000101 _ctype_
1a00435a g     F .text	0000005c delayInaccurateUs
1a002274 g     F .text	000000c0 vTaskPriorityDisinheritAfterTimeout
1a005dd8  w    F .text	00000002 .hidden __aeabi_idiv0
1a00ad18 g     F .text	0000002c .hidden __unorddf2
1a00017e  w    F .text	00000002 BusFault_Handler
1000368c g     O .bss	00000001 __lock___dd_hash_mutex
1a009d80 g     F .text	00000094 __smakebuf_r
10003690 g     O .bss	00000001 __lock___tz_mutex
1a006c40 g     F .text	000000dc strlen
1a002800 g     F .text	0000002c pxPortInitialiseStack
1a003884 g     F .text	00000034 Chip_Clock_Enable
1a0059c4 g     F .text	00000010 .hidden __aeabi_cdcmpeq
1a005928 g     F .text	0000008a .hidden __gedf2
1a0001ba  w    F .text	00000002 UART3_IRQHandler
1a0001ba  w    F .text	00000002 MCPWM_IRQHandler
1a004d58 g     F .text	0000000c mpu9250GetGyroX_rads
1a00aa68 g     F .text	00000014 __sprint_r
1a0001ba  w    F .text	00000002 M0APP_IRQHandler
1a00420e g     F .text	00000068 gpioRead
1a005454 g     F .text	00000042 .hidden __aeabi_f2d
1a004294 g     F .text	0000006c boardInit
1a002854 g     F .text	00000044 vPortEnterCritical
1a000040 g     O .text	000000d4 g_pfnVendorVectors
1a005194 g     F .text	0000027a .hidden __subdf3
1a006d20 g     F .text	00001b54 _vfprintf_r
1a0001ba  w    F .text	00000002 GINT1_IRQHandler
1a000610 g     F .text	00000010 BotonLiberado
1a00a0bc g     F .text	00000060 __lo0bits
1a0010c8 g     F .text	00000016 xQueueCreateMutex
1a00a910 g     F .text	0000006c frexp
10000890 g     O .data	0000016c __global_locale
1a0037bc g     F .text	00000058 Chip_Clock_SetBaseClock
1a003cc4 g     F .text	0000001c cyclesCounterInit
1a0001ba  w    F .text	00000002 GPIO4_IRQHandler
10003694 g     O .bss	00000001 __lock___sfp_recursive_mutex
1a002db8 g     F .text	0000000c Board_SystemInit
1a009ff0 g     F .text	0000008a __multadd
1a009fdc g     F .text	00000012 _Bfree



Disassembly of section .text:

1a000000 <g_pfnVectors>:
1a000000:	00 80 00 10 b9 08 00 1a 79 01 00 1a 7b 01 00 1a     ........y...{...
1a000010:	7d 01 00 1a 7f 01 00 1a 81 01 00 1a d6 6f ff 53     }............o.S
	...
1a00002c:	31 28 00 1a 85 01 00 1a 00 00 00 00 d1 28 00 1a     1(...........(..
1a00003c:	35 29 00 1a                                         5)..

1a000040 <g_pfnVendorVectors>:
1a000040:	05 2b 00 1a bb 01 00 1a bb 01 00 1a 00 00 00 00     .+..............
1a000050:	bb 01 00 1a bb 01 00 1a bb 01 00 1a bb 01 00 1a     ................
1a000060:	79 42 00 1a bb 01 00 1a bb 01 00 1a bb 01 00 1a     yB..............
1a000070:	bb 01 00 1a bb 01 00 1a bb 01 00 1a bb 01 00 1a     ................
1a000080:	bb 01 00 1a bb 01 00 1a bb 01 00 1a bb 01 00 1a     ................
1a000090:	bb 01 00 1a bb 01 00 1a bb 01 00 1a bb 01 00 1a     ................
1a0000a0:	bb 01 00 1a bb 01 00 1a bb 01 00 1a bb 01 00 1a     ................
1a0000b0:	bb 01 00 1a bb 01 00 1a bb 01 00 1a bb 01 00 1a     ................
1a0000c0:	bb 01 00 1a bb 01 00 1a bb 01 00 1a bb 01 00 1a     ................
1a0000d0:	bb 01 00 1a bb 01 00 1a bb 01 00 1a bb 01 00 1a     ................
1a0000e0:	bb 01 00 1a bb 01 00 1a bb 01 00 1a bb 01 00 1a     ................
1a0000f0:	00 00 00 00 bb 01 00 1a bb 01 00 1a bb 01 00 1a     ................
1a000100:	00 00 00 00 bb 01 00 1a bb 01 00 1a bb 01 00 1a     ................
1a000110:	bb 01 00 1a                                         ....

1a000114 <__data_section_table>:
1a000114:	1a00b56c 	.word	0x1a00b56c
1a000118:	10000000 	.word	0x10000000
1a00011c:	000009fc 	.word	0x000009fc
1a000120:	1a00b56c 	.word	0x1a00b56c
1a000124:	10080000 	.word	0x10080000
1a000128:	00000000 	.word	0x00000000
1a00012c:	1a00b56c 	.word	0x1a00b56c
1a000130:	20000000 	.word	0x20000000
1a000134:	00000000 	.word	0x00000000
1a000138:	1a00b56c 	.word	0x1a00b56c
1a00013c:	20008000 	.word	0x20008000
1a000140:	00000000 	.word	0x00000000
1a000144:	1a00b56c 	.word	0x1a00b56c
1a000148:	2000c000 	.word	0x2000c000
1a00014c:	00000000 	.word	0x00000000

1a000150 <__bss_section_table>:
1a000150:	10000a00 	.word	0x10000a00
1a000154:	00002c98 	.word	0x00002c98
1a000158:	10080000 	.word	0x10080000
1a00015c:	00000000 	.word	0x00000000
1a000160:	20000000 	.word	0x20000000
1a000164:	00000000 	.word	0x00000000
1a000168:	20008000 	.word	0x20008000
1a00016c:	00000000 	.word	0x00000000
1a000170:	2000c000 	.word	0x2000c000
1a000174:	00000000 	.word	0x00000000

1a000178 <NMI_Handler>:
}

__attribute__ ((section(".after_vectors")))
void NMI_Handler(void) {
    while (1) {
    }
1a000178:	e7fe      	b.n	1a000178 <NMI_Handler>

1a00017a <HardFault_Handler>:
}
__attribute__ ((section(".after_vectors")))
void HardFault_Handler(void) {
    while (1) {
    }
1a00017a:	e7fe      	b.n	1a00017a <HardFault_Handler>

1a00017c <MemManage_Handler>:
}
__attribute__ ((section(".after_vectors")))
void MemManage_Handler(void) {
    while (1) {
    }
1a00017c:	e7fe      	b.n	1a00017c <MemManage_Handler>

1a00017e <BusFault_Handler>:
}
__attribute__ ((section(".after_vectors")))
void BusFault_Handler(void) {
    while (1) {
    }
1a00017e:	e7fe      	b.n	1a00017e <BusFault_Handler>

1a000180 <UsageFault_Handler>:
}
__attribute__ ((section(".after_vectors")))
void UsageFault_Handler(void) {
    while (1) {
    }
1a000180:	e7fe      	b.n	1a000180 <UsageFault_Handler>
}
__attribute__ ((section(".after_vectors")))
void SVC_Handler(void) {
    while (1) {
    }
1a000182:	e7fe      	b.n	1a000182 <UsageFault_Handler+0x2>

1a000184 <DebugMon_Handler>:
}
__attribute__ ((section(".after_vectors")))
void DebugMon_Handler(void) {
    while (1) {
    }
1a000184:	e7fe      	b.n	1a000184 <DebugMon_Handler>
}
__attribute__ ((section(".after_vectors")))
void PendSV_Handler(void) {
    while (1) {
    }
1a000186:	e7fe      	b.n	1a000186 <DebugMon_Handler+0x2>
}
__attribute__ ((section(".after_vectors")))
void SysTick_Handler(void) {
    while (1) {
    }
1a000188:	e7fe      	b.n	1a000188 <DebugMon_Handler+0x4>

1a00018a <data_init>:
    for (loop = 0; loop < len; loop = loop + 4)
1a00018a:	2300      	movs	r3, #0
1a00018c:	4293      	cmp	r3, r2
1a00018e:	d20a      	bcs.n	1a0001a6 <data_init+0x1c>
void data_init(unsigned int romstart, unsigned int start, unsigned int len) {
1a000190:	b410      	push	{r4}
        *pulDest++ = *pulSrc++;
1a000192:	f850 4b04 	ldr.w	r4, [r0], #4
1a000196:	f841 4b04 	str.w	r4, [r1], #4
    for (loop = 0; loop < len; loop = loop + 4)
1a00019a:	3304      	adds	r3, #4
1a00019c:	4293      	cmp	r3, r2
1a00019e:	d3f8      	bcc.n	1a000192 <data_init+0x8>
}
1a0001a0:	f85d 4b04 	ldr.w	r4, [sp], #4
1a0001a4:	4770      	bx	lr
1a0001a6:	4770      	bx	lr

1a0001a8 <bss_init>:
    for (loop = 0; loop < len; loop = loop + 4)
1a0001a8:	2300      	movs	r3, #0
1a0001aa:	428b      	cmp	r3, r1
1a0001ac:	d204      	bcs.n	1a0001b8 <bss_init+0x10>
        *pulDest++ = 0;
1a0001ae:	2200      	movs	r2, #0
1a0001b0:	f840 2b04 	str.w	r2, [r0], #4
    for (loop = 0; loop < len; loop = loop + 4)
1a0001b4:	3304      	adds	r3, #4
1a0001b6:	e7f8      	b.n	1a0001aa <bss_init+0x2>
}
1a0001b8:	4770      	bx	lr

1a0001ba <ADC0_IRQHandler>:
};

__attribute__ ((section(".after_vectors")))
void IntDefaultHandler(void) {
    while (1) {
    }
1a0001ba:	e7fe      	b.n	1a0001ba <ADC0_IRQHandler>
1a0001bc:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001c0:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001c4:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001c8:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001cc:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001d0:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001d4:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001d8:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001dc:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001e0:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001e4:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001e8:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001ec:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001f0:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001f4:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001f8:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001fc:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000200:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000204:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000208:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00020c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000210:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000214:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000218:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00021c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000220:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000224:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000228:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00022c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000230:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000234:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000238:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00023c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000240:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000244:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000248:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00024c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000250:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000254:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000258:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00025c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000260:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000264:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000268:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00026c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000270:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000274:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000278:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00027c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000280:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000284:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000288:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00028c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000290:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000294:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000298:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00029c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002a0:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002a4:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002a8:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002ac:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002b0:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002b4:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002b8:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002bc:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002c0:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002c4:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002c8:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002cc:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002d0:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002d4:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002d8:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002dc:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002e0:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002e4:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002e8:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002ec:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002f0:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002f4:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002f8:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff

1a0002fc <CRP_WORD>:
1a0002fc:	ffff ffff                                   ....

1a000300 <LedEncender>:
 */
 
#include "leds.h"


void LedEncender(gpioMap_t lampara){
1a000300:	b508      	push	{r3, lr}

	gpioWrite( lampara, ON );
1a000302:	2101      	movs	r1, #1
1a000304:	f003 ff4e 	bl	1a0041a4 <gpioWrite>

}
1a000308:	bd08      	pop	{r3, pc}

1a00030a <LedApagar>:

void LedApagar(gpioMap_t lampara){
1a00030a:	b508      	push	{r3, lr}

	gpioWrite( lampara, OFF );
1a00030c:	2100      	movs	r1, #0
1a00030e:	f003 ff49 	bl	1a0041a4 <gpioWrite>

}
1a000312:	bd08      	pop	{r3, pc}

1a000314 <tareaLCD>:
}

/*-----------------------------------------------------------*/

/* Funcion que realiza la tarea LCD. Muestra valor promedio de las medidas en pantalla LCD*/
void tareaLCD(void* taskParmPtr){
1a000314:	b530      	push	{r4, r5, lr}
1a000316:	b083      	sub	sp, #12
1a000318:	4605      	mov	r5, r0

   char promedio;
   int AlturaPasto;

   lcdGoToXY( 0, 0 ); // Poner cursor en 0, 0
1a00031a:	2100      	movs	r1, #0
1a00031c:	4608      	mov	r0, r1
1a00031e:	f004 f91f 	bl	1a004560 <lcdGoToXY>
   lcdSendStringRaw( "Altura promedio" );
1a000322:	4814      	ldr	r0, [pc, #80]	; (1a000374 <tareaLCD+0x60>)
1a000324:	f004 f99c 	bl	1a004660 <lcdSendStringRaw>

   // Tarea periodica cada 100 ms
   portTickType xPeriodicityLCD =  10000 / portTICK_RATE_MS;
   portTickType xLastWakeTimeLCD = xTaskGetTickCount();
1a000328:	f001 fc46 	bl	1a001bb8 <xTaskGetTickCount>
1a00032c:	9000      	str	r0, [sp, #0]

	for( ;; ) {

		  xSemaphoreTake(xMutexSemaphore, portMAX_DELAY );
1a00032e:	4c12      	ldr	r4, [pc, #72]	; (1a000378 <tareaLCD+0x64>)
1a000330:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
1a000334:	6820      	ldr	r0, [r4, #0]
1a000336:	f000 ffe7 	bl	1a001308 <xQueueSemaphoreTake>
		  AlturaPasto = (*(int*) taskParmPtr);

		  itoa(AlturaPasto, &promedio);
1a00033a:	f10d 0107 	add.w	r1, sp, #7
1a00033e:	6828      	ldr	r0, [r5, #0]
1a000340:	f000 f9ec 	bl	1a00071c <itoa>
	      lcdGoToXY( 0, 1 );
1a000344:	2101      	movs	r1, #1
1a000346:	2000      	movs	r0, #0
1a000348:	f004 f90a 	bl	1a004560 <lcdGoToXY>
	      lcdSendStringRaw( &promedio );
1a00034c:	f10d 0007 	add.w	r0, sp, #7
1a000350:	f004 f986 	bl	1a004660 <lcdSendStringRaw>
	      lcdSendStringRaw( " cm" );
1a000354:	4809      	ldr	r0, [pc, #36]	; (1a00037c <tareaLCD+0x68>)
1a000356:	f004 f983 	bl	1a004660 <lcdSendStringRaw>

	      xSemaphoreGive(xMutexSemaphore);
1a00035a:	2300      	movs	r3, #0
1a00035c:	461a      	mov	r2, r3
1a00035e:	4619      	mov	r1, r3
1a000360:	6820      	ldr	r0, [r4, #0]
1a000362:	f000 fde5 	bl	1a000f30 <xQueueGenericSend>
	      //lcdCursorSet( LCD_CURSOR_OFF ); // Apaga el cursor
	      //lcdClear(); // Borrar la pantalla
	      //lcdGoToXY( 0, 0 );

	  	  // Envia la tarea al estado bloqueado durante xPeriodicity (delay periodico)
	  	  vTaskDelayUntil( &xLastWakeTimeLCD, xPeriodicityLCD );
1a000366:	f242 7110 	movw	r1, #10000	; 0x2710
1a00036a:	4668      	mov	r0, sp
1a00036c:	f001 fd34 	bl	1a001dd8 <vTaskDelayUntil>
1a000370:	e7dd      	b.n	1a00032e <tareaLCD+0x1a>
1a000372:	bf00      	nop
1a000374:	1a00aed8 	.word	0x1a00aed8
1a000378:	10000a18 	.word	0x10000a18
1a00037c:	1a00aee8 	.word	0x1a00aee8

1a000380 <config_task>:
}

/*-----------------------------------------------------------*/

/* Funcion que realiza la tarea de configuracion. Permite configurar equipo desde la UART*/
void config_task(void* taskParmPtr ){
1a000380:	b510      	push	{r4, lr}
1a000382:	b082      	sub	sp, #8

	uint8_t metros = 0;
1a000384:	2400      	movs	r4, #0
1a000386:	f88d 4007 	strb.w	r4, [sp, #7]
	bool recibido=0;

	printf( "Se espera a que el usuario escriba la cantidad de metros que quiere sensar,\r\n" );
1a00038a:	4812      	ldr	r0, [pc, #72]	; (1a0003d4 <config_task+0x54>)
1a00038c:	f006 fc0a 	bl	1a006ba4 <puts>
	bool recibido=0;
1a000390:	4620      	mov	r0, r4

	while(recibido==0){
1a000392:	b940      	cbnz	r0, 1a0003a6 <config_task+0x26>
		recibido = uartReadByte( UART_USB, &metros );
1a000394:	f10d 0107 	add.w	r1, sp, #7
1a000398:	2003      	movs	r0, #3
1a00039a:	f003 fcf5 	bl	1a003d88 <uartReadByte>
1a00039e:	3000      	adds	r0, #0
1a0003a0:	bf18      	it	ne
1a0003a2:	2001      	movne	r0, #1
1a0003a4:	e7f5      	b.n	1a000392 <config_task+0x12>
	}

	printf( "Se recibio la cantidad de metros que quiere sensar,\r\n" );
1a0003a6:	480c      	ldr	r0, [pc, #48]	; (1a0003d8 <config_task+0x58>)
1a0003a8:	f006 fbfc 	bl	1a006ba4 <puts>

    CalculoDuracionSensado(metros, &duracionSensado);
1a0003ac:	490b      	ldr	r1, [pc, #44]	; (1a0003dc <config_task+0x5c>)
1a0003ae:	f89d 0007 	ldrb.w	r0, [sp, #7]
1a0003b2:	f000 fa09 	bl	1a0007c8 <CalculoDuracionSensado>

    xSemaphoreGive(xMutexSemaphore);
1a0003b6:	2300      	movs	r3, #0
1a0003b8:	461a      	mov	r2, r3
1a0003ba:	4619      	mov	r1, r3
1a0003bc:	4808      	ldr	r0, [pc, #32]	; (1a0003e0 <config_task+0x60>)
1a0003be:	6800      	ldr	r0, [r0, #0]
1a0003c0:	f000 fdb6 	bl	1a000f30 <xQueueGenericSend>

    if( xHandleconfig_task != NULL )
1a0003c4:	4b07      	ldr	r3, [pc, #28]	; (1a0003e4 <config_task+0x64>)
1a0003c6:	6818      	ldr	r0, [r3, #0]
1a0003c8:	b108      	cbz	r0, 1a0003ce <config_task+0x4e>
    {
    	vTaskDelete( xHandleconfig_task );
1a0003ca:	f001 fb33 	bl	1a001a34 <vTaskDelete>
    }

}
1a0003ce:	b002      	add	sp, #8
1a0003d0:	bd10      	pop	{r4, pc}
1a0003d2:	bf00      	nop
1a0003d4:	1a00add8 	.word	0x1a00add8
1a0003d8:	1a00ae28 	.word	0x1a00ae28
1a0003dc:	10000a04 	.word	0x10000a04
1a0003e0:	10000a18 	.word	0x10000a18
1a0003e4:	10000a14 	.word	0x10000a14

1a0003e8 <handlerIR>:

/*-----------------------------------------------------------*/

/* Funcion que realiza la tarea de sensores IR. Adquiere datos de arreglo de sensores IR*/
void handlerIR(void* taskParmPtr){
1a0003e8:	b5f0      	push	{r4, r5, r6, r7, lr}
1a0003ea:	b085      	sub	sp, #20
1a0003ec:	4606      	mov	r6, r0

   int* promedioAltura;

   // Tarea periodica cada 5 ms
   portTickType xPeriodicityIR =  500 / portTICK_RATE_MS;
   portTickType xLastWakeTimeIR = xTaskGetTickCount();
1a0003ee:	f001 fbe3 	bl	1a001bb8 <xTaskGetTickCount>
1a0003f2:	9003      	str	r0, [sp, #12]

   bool_t semaforo=0;
1a0003f4:	2700      	movs	r7, #0
1a0003f6:	e00f      	b.n	1a000418 <handlerIR+0x30>

   for( ;; ) {

	  //printf(" handlerIR is ranning \r\n");
	  if(semaforo==0){
		  xSemaphoreTake( xBinarySemaphore, portMAX_DELAY );
1a0003f8:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
1a0003fc:	4b1f      	ldr	r3, [pc, #124]	; (1a00047c <handlerIR+0x94>)
1a0003fe:	6818      	ldr	r0, [r3, #0]
1a000400:	f000 ff82 	bl	1a001308 <xQueueSemaphoreTake>
		  semaforo=1;
1a000404:	2701      	movs	r7, #1
1a000406:	e009      	b.n	1a00041c <handlerIR+0x34>
  		  /* Tarea permite configurar equipo desde la UART*/
  		  xTaskCreate( config_task, (const char *)"equipoConfig", configMINIMAL_STACK_SIZE*2, 0,  tskIDLE_PRIORITY+5,   &xHandleconfig_task );
  		 // Crear tareas de Teclas en freeRTOS
  		  xTaskCreate( Tecla_task, (const char *)"Tec1", configMINIMAL_STACK_SIZE*2, 0, tskIDLE_PRIORITY+1, &xHandleTecla_task);
   	  }else{
   		  contador++;
1a000408:	3201      	adds	r2, #1
1a00040a:	4b1d      	ldr	r3, [pc, #116]	; (1a000480 <handlerIR+0x98>)
1a00040c:	601a      	str	r2, [r3, #0]
  	  }

  	  // Envia la tarea al estado bloqueado durante xPeriodicity (delay periodico)
  	  vTaskDelayUntil( &xLastWakeTimeIR, xPeriodicityIR );
1a00040e:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
1a000412:	a803      	add	r0, sp, #12
1a000414:	f001 fce0 	bl	1a001dd8 <vTaskDelayUntil>
	  if(semaforo==0){
1a000418:	2f00      	cmp	r7, #0
1a00041a:	d0ed      	beq.n	1a0003f8 <handlerIR+0x10>
	  xSemaphoreTake( xMutexSemaphore, portMAX_DELAY );
1a00041c:	4d19      	ldr	r5, [pc, #100]	; (1a000484 <handlerIR+0x9c>)
1a00041e:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
1a000422:	6828      	ldr	r0, [r5, #0]
1a000424:	f000 ff70 	bl	1a001308 <xQueueSemaphoreTake>
      CalculoAlturaPasto(promedioAltura, &contador);
1a000428:	4c15      	ldr	r4, [pc, #84]	; (1a000480 <handlerIR+0x98>)
1a00042a:	4621      	mov	r1, r4
1a00042c:	4630      	mov	r0, r6
1a00042e:	f000 f9e3 	bl	1a0007f8 <CalculoAlturaPasto>
      xSemaphoreGive(xMutexSemaphore);
1a000432:	2300      	movs	r3, #0
1a000434:	461a      	mov	r2, r3
1a000436:	4619      	mov	r1, r3
1a000438:	6828      	ldr	r0, [r5, #0]
1a00043a:	f000 fd79 	bl	1a000f30 <xQueueGenericSend>
  	  if(contador==duracionSensado){
1a00043e:	6822      	ldr	r2, [r4, #0]
1a000440:	4911      	ldr	r1, [pc, #68]	; (1a000488 <handlerIR+0xa0>)
1a000442:	6809      	ldr	r1, [r1, #0]
1a000444:	428a      	cmp	r2, r1
1a000446:	d1df      	bne.n	1a000408 <handlerIR+0x20>
  		  contador=0;
1a000448:	2700      	movs	r7, #0
1a00044a:	6027      	str	r7, [r4, #0]
  		  LedApagar(LUZ_VERDE);
1a00044c:	202d      	movs	r0, #45	; 0x2d
1a00044e:	f7ff ff5c 	bl	1a00030a <LedApagar>
  		  xTaskCreate( config_task, (const char *)"equipoConfig", configMINIMAL_STACK_SIZE*2, 0,  tskIDLE_PRIORITY+5,   &xHandleconfig_task );
1a000452:	4b0e      	ldr	r3, [pc, #56]	; (1a00048c <handlerIR+0xa4>)
1a000454:	9301      	str	r3, [sp, #4]
1a000456:	2305      	movs	r3, #5
1a000458:	9300      	str	r3, [sp, #0]
1a00045a:	463b      	mov	r3, r7
1a00045c:	22b4      	movs	r2, #180	; 0xb4
1a00045e:	490c      	ldr	r1, [pc, #48]	; (1a000490 <handlerIR+0xa8>)
1a000460:	480c      	ldr	r0, [pc, #48]	; (1a000494 <handlerIR+0xac>)
1a000462:	f001 fab4 	bl	1a0019ce <xTaskCreate>
  		  xTaskCreate( Tecla_task, (const char *)"Tec1", configMINIMAL_STACK_SIZE*2, 0, tskIDLE_PRIORITY+1, &xHandleTecla_task);
1a000466:	4b0c      	ldr	r3, [pc, #48]	; (1a000498 <handlerIR+0xb0>)
1a000468:	9301      	str	r3, [sp, #4]
1a00046a:	2301      	movs	r3, #1
1a00046c:	9300      	str	r3, [sp, #0]
1a00046e:	463b      	mov	r3, r7
1a000470:	22b4      	movs	r2, #180	; 0xb4
1a000472:	490a      	ldr	r1, [pc, #40]	; (1a00049c <handlerIR+0xb4>)
1a000474:	480a      	ldr	r0, [pc, #40]	; (1a0004a0 <handlerIR+0xb8>)
1a000476:	f001 faaa 	bl	1a0019ce <xTaskCreate>
1a00047a:	e7c8      	b.n	1a00040e <handlerIR+0x26>
1a00047c:	10000a0c 	.word	0x10000a0c
1a000480:	10000000 	.word	0x10000000
1a000484:	10000a18 	.word	0x10000a18
1a000488:	10000a04 	.word	0x10000a04
1a00048c:	10000a14 	.word	0x10000a14
1a000490:	1a00ae60 	.word	0x1a00ae60
1a000494:	1a000381 	.word	0x1a000381
1a000498:	10000a10 	.word	0x10000a10
1a00049c:	1a00ae70 	.word	0x1a00ae70
1a0004a0:	1a0004a5 	.word	0x1a0004a5

1a0004a4 <Tecla_task>:

/*-----------------------------------------------------------*/

// Implementacion de funcion de la tarea genérica Tecla
void Tecla_task( void* taskParmPtr )
{
1a0004a4:	b500      	push	{lr}
1a0004a6:	b083      	sub	sp, #12
	bool_t botonPresionado=0;
1a0004a8:	2300      	movs	r3, #0
1a0004aa:	f88d 3007 	strb.w	r3, [sp, #7]

	//for( ;; ) {

		TECInicializarMEF();
1a0004ae:	f000 f8bd 	bl	1a00062c <TECInicializarMEF>
		printf("Se espera el accionar del boton de inicio\r\n");
1a0004b2:	4810      	ldr	r0, [pc, #64]	; (1a0004f4 <Tecla_task+0x50>)
1a0004b4:	f006 fb76 	bl	1a006ba4 <puts>
		while(botonPresionado==0){
1a0004b8:	f89d 3007 	ldrb.w	r3, [sp, #7]
1a0004bc:	b92b      	cbnz	r3, 1a0004ca <Tecla_task+0x26>
			TEC_antirebote_MEF(TEC1,&botonPresionado);
1a0004be:	f10d 0107 	add.w	r1, sp, #7
1a0004c2:	2024      	movs	r0, #36	; 0x24
1a0004c4:	f000 f8b8 	bl	1a000638 <TEC_antirebote_MEF>
1a0004c8:	e7f6      	b.n	1a0004b8 <Tecla_task+0x14>
		}
		if(botonPresionado==1){
1a0004ca:	2b01      	cmp	r3, #1
1a0004cc:	d007      	beq.n	1a0004de <Tecla_task+0x3a>
			printf("Comienzo de sensado\r\n");
			xSemaphoreGive(xBinarySemaphore);
		}
	//}

	if( xHandleTecla_task != NULL )
1a0004ce:	4b0a      	ldr	r3, [pc, #40]	; (1a0004f8 <Tecla_task+0x54>)
1a0004d0:	6818      	ldr	r0, [r3, #0]
1a0004d2:	b108      	cbz	r0, 1a0004d8 <Tecla_task+0x34>
	{
		vTaskDelete( xHandleTecla_task );
1a0004d4:	f001 faae 	bl	1a001a34 <vTaskDelete>
	}
}
1a0004d8:	b003      	add	sp, #12
1a0004da:	f85d fb04 	ldr.w	pc, [sp], #4
			printf("Comienzo de sensado\r\n");
1a0004de:	4807      	ldr	r0, [pc, #28]	; (1a0004fc <Tecla_task+0x58>)
1a0004e0:	f006 fb60 	bl	1a006ba4 <puts>
			xSemaphoreGive(xBinarySemaphore);
1a0004e4:	2300      	movs	r3, #0
1a0004e6:	461a      	mov	r2, r3
1a0004e8:	4619      	mov	r1, r3
1a0004ea:	4805      	ldr	r0, [pc, #20]	; (1a000500 <Tecla_task+0x5c>)
1a0004ec:	6800      	ldr	r0, [r0, #0]
1a0004ee:	f000 fd1f 	bl	1a000f30 <xQueueGenericSend>
1a0004f2:	e7ec      	b.n	1a0004ce <Tecla_task+0x2a>
1a0004f4:	1a00ad94 	.word	0x1a00ad94
1a0004f8:	10000a10 	.word	0x10000a10
1a0004fc:	1a00adc0 	.word	0x1a00adc0
1a000500:	10000a0c 	.word	0x10000a0c

1a000504 <main>:
{
1a000504:	b500      	push	{lr}
1a000506:	b083      	sub	sp, #12
	   boardConfig();
1a000508:	f003 fec4 	bl	1a004294 <boardInit>
	   debugPrintConfigUart( UART_USB, 115200 );
1a00050c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
1a000510:	2103      	movs	r1, #3
1a000512:	482a      	ldr	r0, [pc, #168]	; (1a0005bc <main+0xb8>)
1a000514:	f003 ff6c 	bl	1a0043f0 <printInitUart>
	   printf( "Medida de la altura del pasto con freeRTOS y sAPI.\r\n" );
1a000518:	4829      	ldr	r0, [pc, #164]	; (1a0005c0 <main+0xbc>)
1a00051a:	f006 fb43 	bl	1a006ba4 <puts>
	   i2cInit( I2C0, 100000 );
1a00051e:	4929      	ldr	r1, [pc, #164]	; (1a0005c4 <main+0xc0>)
1a000520:	2000      	movs	r0, #0
1a000522:	f003 fc9d 	bl	1a003e60 <i2cInit>
       lcdInit( 16, 2, 5, 8 );
1a000526:	2308      	movs	r3, #8
1a000528:	2205      	movs	r2, #5
1a00052a:	2102      	movs	r1, #2
1a00052c:	2010      	movs	r0, #16
1a00052e:	f004 f849 	bl	1a0045c4 <lcdInit>
       lcdGoToXY( 0, 0 ); // Poner cursor en 0, 0
1a000532:	2100      	movs	r1, #0
1a000534:	4608      	mov	r0, r1
1a000536:	f004 f813 	bl	1a004560 <lcdGoToXY>
	   lcdSendStringRaw( "Bienvenidos" );
1a00053a:	4823      	ldr	r0, [pc, #140]	; (1a0005c8 <main+0xc4>)
1a00053c:	f004 f890 	bl	1a004660 <lcdSendStringRaw>
	   adcInit( ADC_ENABLE);
1a000540:	2000      	movs	r0, #0
1a000542:	f003 fcb5 	bl	1a003eb0 <adcInit>
	   mpu9250Init(MPU9250_ADDRESS_0 );
1a000546:	2068      	movs	r0, #104	; 0x68
1a000548:	f004 fcc6 	bl	1a004ed8 <mpu9250Init>
      xBinarySemaphore = xSemaphoreCreateBinary();
1a00054c:	2203      	movs	r2, #3
1a00054e:	2100      	movs	r1, #0
1a000550:	2001      	movs	r0, #1
1a000552:	f000 fcc5 	bl	1a000ee0 <xQueueGenericCreate>
1a000556:	4b1d      	ldr	r3, [pc, #116]	; (1a0005cc <main+0xc8>)
1a000558:	6018      	str	r0, [r3, #0]
      xMutexSemaphore = xSemaphoreCreateMutex();
1a00055a:	2001      	movs	r0, #1
1a00055c:	f000 fdb4 	bl	1a0010c8 <xQueueCreateMutex>
1a000560:	4b1b      	ldr	r3, [pc, #108]	; (1a0005d0 <main+0xcc>)
1a000562:	6018      	str	r0, [r3, #0]
	  xTaskCreate( handlerIR, (const char *)"HandlerlecturaSensoresIR", configMINIMAL_STACK_SIZE*10, &promedioAlturaPasto, tskIDLE_PRIORITY+2, NULL);
1a000564:	4d1b      	ldr	r5, [pc, #108]	; (1a0005d4 <main+0xd0>)
1a000566:	2400      	movs	r4, #0
1a000568:	9401      	str	r4, [sp, #4]
1a00056a:	2302      	movs	r3, #2
1a00056c:	9300      	str	r3, [sp, #0]
1a00056e:	462b      	mov	r3, r5
1a000570:	f44f 7261 	mov.w	r2, #900	; 0x384
1a000574:	4918      	ldr	r1, [pc, #96]	; (1a0005d8 <main+0xd4>)
1a000576:	4819      	ldr	r0, [pc, #100]	; (1a0005dc <main+0xd8>)
1a000578:	f001 fa29 	bl	1a0019ce <xTaskCreate>
	  xTaskCreate( Tecla_task, (const char *)"Tec1", configMINIMAL_STACK_SIZE*2, 0, tskIDLE_PRIORITY+1, &xHandleTecla_task);
1a00057c:	4b18      	ldr	r3, [pc, #96]	; (1a0005e0 <main+0xdc>)
1a00057e:	9301      	str	r3, [sp, #4]
1a000580:	2301      	movs	r3, #1
1a000582:	9300      	str	r3, [sp, #0]
1a000584:	4623      	mov	r3, r4
1a000586:	22b4      	movs	r2, #180	; 0xb4
1a000588:	4916      	ldr	r1, [pc, #88]	; (1a0005e4 <main+0xe0>)
1a00058a:	4817      	ldr	r0, [pc, #92]	; (1a0005e8 <main+0xe4>)
1a00058c:	f001 fa1f 	bl	1a0019ce <xTaskCreate>
	  xTaskCreate( config_task, (const char *)"equipoConfig", configMINIMAL_STACK_SIZE*2, 0,  tskIDLE_PRIORITY+5,  &xHandleconfig_task );
1a000590:	4b16      	ldr	r3, [pc, #88]	; (1a0005ec <main+0xe8>)
1a000592:	9301      	str	r3, [sp, #4]
1a000594:	2305      	movs	r3, #5
1a000596:	9300      	str	r3, [sp, #0]
1a000598:	4623      	mov	r3, r4
1a00059a:	22b4      	movs	r2, #180	; 0xb4
1a00059c:	4914      	ldr	r1, [pc, #80]	; (1a0005f0 <main+0xec>)
1a00059e:	4815      	ldr	r0, [pc, #84]	; (1a0005f4 <main+0xf0>)
1a0005a0:	f001 fa15 	bl	1a0019ce <xTaskCreate>
	  xTaskCreate(tareaLCD, (const char *)"lcd", configMINIMAL_STACK_SIZE*2,  &promedioAlturaPasto, tskIDLE_PRIORITY+4, 0 );
1a0005a4:	9401      	str	r4, [sp, #4]
1a0005a6:	2304      	movs	r3, #4
1a0005a8:	9300      	str	r3, [sp, #0]
1a0005aa:	462b      	mov	r3, r5
1a0005ac:	22b4      	movs	r2, #180	; 0xb4
1a0005ae:	4912      	ldr	r1, [pc, #72]	; (1a0005f8 <main+0xf4>)
1a0005b0:	4812      	ldr	r0, [pc, #72]	; (1a0005fc <main+0xf8>)
1a0005b2:	f001 fa0c 	bl	1a0019ce <xTaskCreate>
	   vTaskStartScheduler();
1a0005b6:	f001 faad 	bl	1a001b14 <vTaskStartScheduler>
	   }
1a0005ba:	e7fe      	b.n	1a0005ba <main+0xb6>
1a0005bc:	10000a00 	.word	0x10000a00
1a0005c0:	1a00ae78 	.word	0x1a00ae78
1a0005c4:	000186a0 	.word	0x000186a0
1a0005c8:	1a00aeac 	.word	0x1a00aeac
1a0005cc:	10000a0c 	.word	0x10000a0c
1a0005d0:	10000a18 	.word	0x10000a18
1a0005d4:	10000a08 	.word	0x10000a08
1a0005d8:	1a00aeb8 	.word	0x1a00aeb8
1a0005dc:	1a0003e9 	.word	0x1a0003e9
1a0005e0:	10000a10 	.word	0x10000a10
1a0005e4:	1a00ae70 	.word	0x1a00ae70
1a0005e8:	1a0004a5 	.word	0x1a0004a5
1a0005ec:	10000a14 	.word	0x10000a14
1a0005f0:	1a00ae60 	.word	0x1a00ae60
1a0005f4:	1a000381 	.word	0x1a000381
1a0005f8:	1a00aed4 	.word	0x1a00aed4
1a0005fc:	1a000315 	.word	0x1a000315

1a000600 <BotonPresionado>:
#include "BotonActivo.h"

static EstadoBoton_t EstadoTec;

void BotonPresionado( bool_t *botonPresionado)
{
1a000600:	b508      	push	{r3, lr}
	(*botonPresionado)=1;
1a000602:	2301      	movs	r3, #1
1a000604:	7003      	strb	r3, [r0, #0]
	LedEncender(LUZ_VERDE);
1a000606:	202d      	movs	r0, #45	; 0x2d
1a000608:	f7ff fe7a 	bl	1a000300 <LedEncender>

}
1a00060c:	bd08      	pop	{r3, pc}
1a00060e:	Address 0x000000001a00060e is out of bounds.


1a000610 <BotonLiberado>:

void BotonLiberado( void )
{
1a000610:	b508      	push	{r3, lr}
	printf("Boton inicio liberado\r\n");
1a000612:	4802      	ldr	r0, [pc, #8]	; (1a00061c <BotonLiberado+0xc>)
1a000614:	f006 fac6 	bl	1a006ba4 <puts>

}
1a000618:	bd08      	pop	{r3, pc}
1a00061a:	bf00      	nop
1a00061c:	1a00aeec 	.word	0x1a00aeec

1a000620 <BotonError>:

void BotonError( void )
{
   EstadoTec = BOTON_UP;
1a000620:	4b01      	ldr	r3, [pc, #4]	; (1a000628 <BotonError+0x8>)
1a000622:	2200      	movs	r2, #0
1a000624:	701a      	strb	r2, [r3, #0]
}
1a000626:	4770      	bx	lr
1a000628:	10000a1c 	.word	0x10000a1c

1a00062c <TECInicializarMEF>:

void TECInicializarMEF( void )
{
   EstadoTec = BOTON_UP; 
1a00062c:	4b01      	ldr	r3, [pc, #4]	; (1a000634 <TECInicializarMEF+0x8>)
1a00062e:	2200      	movs	r2, #0
1a000630:	701a      	strb	r2, [r3, #0]
}
1a000632:	4770      	bx	lr
1a000634:	10000a1c 	.word	0x10000a1c

1a000638 <TEC_antirebote_MEF>:


void TEC_antirebote_MEF( gpioMap_t tecla, bool_t *botonPresionado)
{
1a000638:	b510      	push	{r4, lr}
   static bool_t flagRising = FALSE;

   static int contFalling = 0;
   static int contRising = 0;

   switch( EstadoTec ){
1a00063a:	4b33      	ldr	r3, [pc, #204]	; (1a000708 <TEC_antirebote_MEF+0xd0>)
1a00063c:	781b      	ldrb	r3, [r3, #0]
1a00063e:	2b03      	cmp	r3, #3
1a000640:	d85f      	bhi.n	1a000702 <TEC_antirebote_MEF+0xca>
1a000642:	e8df f003 	tbb	[pc, r3]
1a000646:	0902      	.short	0x0902
1a000648:	3810      	.short	0x3810

      case BOTON_UP:
         
         if( !gpioRead(tecla) ){
1a00064a:	f003 fde0 	bl	1a00420e <gpioRead>
1a00064e:	bb00      	cbnz	r0, 1a000692 <TEC_antirebote_MEF+0x5a>
            EstadoTec = BOTON_FALLING;
1a000650:	4b2d      	ldr	r3, [pc, #180]	; (1a000708 <TEC_antirebote_MEF+0xd0>)
1a000652:	2202      	movs	r2, #2
1a000654:	701a      	strb	r2, [r3, #0]
1a000656:	e01c      	b.n	1a000692 <TEC_antirebote_MEF+0x5a>
         }
      break;

      case BOTON_DOWN:
         
         if( gpioRead(tecla) ){
1a000658:	f003 fdd9 	bl	1a00420e <gpioRead>
1a00065c:	b1c8      	cbz	r0, 1a000692 <TEC_antirebote_MEF+0x5a>
            EstadoTec = BOTON_RISING;
1a00065e:	4b2a      	ldr	r3, [pc, #168]	; (1a000708 <TEC_antirebote_MEF+0xd0>)
1a000660:	2203      	movs	r2, #3
1a000662:	701a      	strb	r2, [r3, #0]
1a000664:	e015      	b.n	1a000692 <TEC_antirebote_MEF+0x5a>
1a000666:	460c      	mov	r4, r1
         }
      break;

      case BOTON_FALLING:
        
         if( flagFalling == FALSE ){
1a000668:	4b28      	ldr	r3, [pc, #160]	; (1a00070c <TEC_antirebote_MEF+0xd4>)
1a00066a:	781b      	ldrb	r3, [r3, #0]
1a00066c:	b913      	cbnz	r3, 1a000674 <TEC_antirebote_MEF+0x3c>
            flagFalling = TRUE;
1a00066e:	4b27      	ldr	r3, [pc, #156]	; (1a00070c <TEC_antirebote_MEF+0xd4>)
1a000670:	2201      	movs	r2, #1
1a000672:	701a      	strb	r2, [r3, #0]
          }
       
         if( contFalling >= 10 ){
1a000674:	4b26      	ldr	r3, [pc, #152]	; (1a000710 <TEC_antirebote_MEF+0xd8>)
1a000676:	681b      	ldr	r3, [r3, #0]
1a000678:	2b09      	cmp	r3, #9
1a00067a:	dc0b      	bgt.n	1a000694 <TEC_antirebote_MEF+0x5c>
               EstadoTec = BOTON_UP;
            }
            contFalling = 0;
         }

         contFalling++;
1a00067c:	4a24      	ldr	r2, [pc, #144]	; (1a000710 <TEC_antirebote_MEF+0xd8>)
1a00067e:	6813      	ldr	r3, [r2, #0]
1a000680:	3301      	adds	r3, #1
1a000682:	6013      	str	r3, [r2, #0]
 
         if( EstadoTec != BOTON_FALLING ){
1a000684:	4b20      	ldr	r3, [pc, #128]	; (1a000708 <TEC_antirebote_MEF+0xd0>)
1a000686:	781b      	ldrb	r3, [r3, #0]
1a000688:	2b02      	cmp	r3, #2
1a00068a:	d002      	beq.n	1a000692 <TEC_antirebote_MEF+0x5a>
            flagFalling = FALSE;
1a00068c:	4b1f      	ldr	r3, [pc, #124]	; (1a00070c <TEC_antirebote_MEF+0xd4>)
1a00068e:	2200      	movs	r2, #0
1a000690:	701a      	strb	r2, [r3, #0]

      default:
         BotonError();
      break;
   }
}
1a000692:	bd10      	pop	{r4, pc}
            if( !gpioRead(tecla) ){
1a000694:	f003 fdbb 	bl	1a00420e <gpioRead>
1a000698:	b130      	cbz	r0, 1a0006a8 <TEC_antirebote_MEF+0x70>
               EstadoTec = BOTON_UP;
1a00069a:	4b1b      	ldr	r3, [pc, #108]	; (1a000708 <TEC_antirebote_MEF+0xd0>)
1a00069c:	2200      	movs	r2, #0
1a00069e:	701a      	strb	r2, [r3, #0]
            contFalling = 0;
1a0006a0:	4b1b      	ldr	r3, [pc, #108]	; (1a000710 <TEC_antirebote_MEF+0xd8>)
1a0006a2:	2200      	movs	r2, #0
1a0006a4:	601a      	str	r2, [r3, #0]
1a0006a6:	e7e9      	b.n	1a00067c <TEC_antirebote_MEF+0x44>
               EstadoTec = BOTON_DOWN;
1a0006a8:	4b17      	ldr	r3, [pc, #92]	; (1a000708 <TEC_antirebote_MEF+0xd0>)
1a0006aa:	2201      	movs	r2, #1
1a0006ac:	701a      	strb	r2, [r3, #0]
               BotonPresionado(botonPresionado);
1a0006ae:	4620      	mov	r0, r4
1a0006b0:	f7ff ffa6 	bl	1a000600 <BotonPresionado>
1a0006b4:	e7f4      	b.n	1a0006a0 <TEC_antirebote_MEF+0x68>
         if( flagRising == FALSE ){
1a0006b6:	4b17      	ldr	r3, [pc, #92]	; (1a000714 <TEC_antirebote_MEF+0xdc>)
1a0006b8:	781b      	ldrb	r3, [r3, #0]
1a0006ba:	b913      	cbnz	r3, 1a0006c2 <TEC_antirebote_MEF+0x8a>
            flagRising = TRUE;
1a0006bc:	4b15      	ldr	r3, [pc, #84]	; (1a000714 <TEC_antirebote_MEF+0xdc>)
1a0006be:	2201      	movs	r2, #1
1a0006c0:	701a      	strb	r2, [r3, #0]
         if( contRising >= 10 ){
1a0006c2:	4b15      	ldr	r3, [pc, #84]	; (1a000718 <TEC_antirebote_MEF+0xe0>)
1a0006c4:	681b      	ldr	r3, [r3, #0]
1a0006c6:	2b09      	cmp	r3, #9
1a0006c8:	dc0b      	bgt.n	1a0006e2 <TEC_antirebote_MEF+0xaa>
         contRising++;
1a0006ca:	4a13      	ldr	r2, [pc, #76]	; (1a000718 <TEC_antirebote_MEF+0xe0>)
1a0006cc:	6813      	ldr	r3, [r2, #0]
1a0006ce:	3301      	adds	r3, #1
1a0006d0:	6013      	str	r3, [r2, #0]
         if( EstadoTec != BOTON_RISING ){
1a0006d2:	4b0d      	ldr	r3, [pc, #52]	; (1a000708 <TEC_antirebote_MEF+0xd0>)
1a0006d4:	781b      	ldrb	r3, [r3, #0]
1a0006d6:	2b03      	cmp	r3, #3
1a0006d8:	d0db      	beq.n	1a000692 <TEC_antirebote_MEF+0x5a>
            flagRising = FALSE;
1a0006da:	4b0e      	ldr	r3, [pc, #56]	; (1a000714 <TEC_antirebote_MEF+0xdc>)
1a0006dc:	2200      	movs	r2, #0
1a0006de:	701a      	strb	r2, [r3, #0]
1a0006e0:	e7d7      	b.n	1a000692 <TEC_antirebote_MEF+0x5a>
            if( gpioRead(tecla) ){
1a0006e2:	f003 fd94 	bl	1a00420e <gpioRead>
1a0006e6:	b930      	cbnz	r0, 1a0006f6 <TEC_antirebote_MEF+0xbe>
            	EstadoTec = BOTON_DOWN;
1a0006e8:	4b07      	ldr	r3, [pc, #28]	; (1a000708 <TEC_antirebote_MEF+0xd0>)
1a0006ea:	2201      	movs	r2, #1
1a0006ec:	701a      	strb	r2, [r3, #0]
            contRising = 0;
1a0006ee:	4b0a      	ldr	r3, [pc, #40]	; (1a000718 <TEC_antirebote_MEF+0xe0>)
1a0006f0:	2200      	movs	r2, #0
1a0006f2:	601a      	str	r2, [r3, #0]
1a0006f4:	e7e9      	b.n	1a0006ca <TEC_antirebote_MEF+0x92>
            	EstadoTec = BOTON_UP;
1a0006f6:	4b04      	ldr	r3, [pc, #16]	; (1a000708 <TEC_antirebote_MEF+0xd0>)
1a0006f8:	2200      	movs	r2, #0
1a0006fa:	701a      	strb	r2, [r3, #0]
                BotonLiberado();
1a0006fc:	f7ff ff88 	bl	1a000610 <BotonLiberado>
1a000700:	e7f5      	b.n	1a0006ee <TEC_antirebote_MEF+0xb6>
         BotonError();
1a000702:	f7ff ff8d 	bl	1a000620 <BotonError>
}
1a000706:	e7c4      	b.n	1a000692 <TEC_antirebote_MEF+0x5a>
1a000708:	10000a1c 	.word	0x10000a1c
1a00070c:	10000a28 	.word	0x10000a28
1a000710:	10000a20 	.word	0x10000a20
1a000714:	10000a29 	.word	0x10000a29
1a000718:	10000a24 	.word	0x10000a24

1a00071c <itoa>:

	static char num[] = "0123456789abcdefghijklmnopqrstuvwxyz";
    char* wstr = str;
    int cociente, resto;

    *wstr='\0';
1a00071c:	2300      	movs	r3, #0
1a00071e:	700b      	strb	r3, [r1, #0]
    if(valor>99 && valor<1000){
1a000720:	f1a0 0364 	sub.w	r3, r0, #100	; 0x64
1a000724:	f5b3 7f61 	cmp.w	r3, #900	; 0x384
1a000728:	d225      	bcs.n	1a000776 <itoa+0x5a>
void itoa(int valor, char* str) {
1a00072a:	b410      	push	{r4}
    	cociente = valor/100;
1a00072c:	4b22      	ldr	r3, [pc, #136]	; (1a0007b8 <itoa+0x9c>)
1a00072e:	fb83 2300 	smull	r2, r3, r3, r0
1a000732:	17c2      	asrs	r2, r0, #31
1a000734:	ebc2 1263 	rsb	r2, r2, r3, asr #5
    	resto = valor % 100;
1a000738:	2364      	movs	r3, #100	; 0x64
1a00073a:	fb03 0312 	mls	r3, r3, r2, r0
    	*wstr++= num[cociente];
1a00073e:	4c1f      	ldr	r4, [pc, #124]	; (1a0007bc <itoa+0xa0>)
1a000740:	5ca2      	ldrb	r2, [r4, r2]
1a000742:	700a      	strb	r2, [r1, #0]
    	cociente = resto/10;
1a000744:	4a1e      	ldr	r2, [pc, #120]	; (1a0007c0 <itoa+0xa4>)
1a000746:	fb82 c003 	smull	ip, r0, r2, r3
1a00074a:	17db      	asrs	r3, r3, #31
1a00074c:	ebc3 03a0 	rsb	r3, r3, r0, asr #2
    	resto = cociente %10 ;
1a000750:	fb82 2003 	smull	r2, r0, r2, r3
1a000754:	17da      	asrs	r2, r3, #31
1a000756:	ebc2 02a0 	rsb	r2, r2, r0, asr #2
1a00075a:	eb02 0282 	add.w	r2, r2, r2, lsl #2
1a00075e:	0050      	lsls	r0, r2, #1
1a000760:	1a1a      	subs	r2, r3, r0
    	*wstr++= num[cociente];
1a000762:	5ce3      	ldrb	r3, [r4, r3]
1a000764:	704b      	strb	r3, [r1, #1]
    	*wstr++= num[resto];
1a000766:	1ccb      	adds	r3, r1, #3
1a000768:	5ca2      	ldrb	r2, [r4, r2]
1a00076a:	708a      	strb	r2, [r1, #2]
    	*wstr= num[valor];
    }else{
    	*wstr=num[0];
    }

    *wstr++='\0';
1a00076c:	2200      	movs	r2, #0
1a00076e:	701a      	strb	r2, [r3, #0]

    // Reverse string
    //strreverse(str,wstr-1);


}
1a000770:	f85d 4b04 	ldr.w	r4, [sp], #4
1a000774:	4770      	bx	lr
    }else if(valor>9 && valor<100){
1a000776:	f1a0 030a 	sub.w	r3, r0, #10
1a00077a:	2b59      	cmp	r3, #89	; 0x59
1a00077c:	d811      	bhi.n	1a0007a2 <itoa+0x86>
    	cociente = valor/10;
1a00077e:	4a10      	ldr	r2, [pc, #64]	; (1a0007c0 <itoa+0xa4>)
1a000780:	fb82 3200 	smull	r3, r2, r2, r0
1a000784:	17c3      	asrs	r3, r0, #31
1a000786:	ebc3 03a2 	rsb	r3, r3, r2, asr #2
    	resto = valor %10 ;
1a00078a:	eb03 0383 	add.w	r3, r3, r3, lsl #2
1a00078e:	005a      	lsls	r2, r3, #1
1a000790:	1a82      	subs	r2, r0, r2
    	*wstr++= num[resto];
1a000792:	460b      	mov	r3, r1
1a000794:	4909      	ldr	r1, [pc, #36]	; (1a0007bc <itoa+0xa0>)
1a000796:	5c8a      	ldrb	r2, [r1, r2]
1a000798:	f803 2b01 	strb.w	r2, [r3], #1
    *wstr++='\0';
1a00079c:	2200      	movs	r2, #0
1a00079e:	701a      	strb	r2, [r3, #0]
1a0007a0:	4770      	bx	lr
    }else if (valor<10){
1a0007a2:	2809      	cmp	r0, #9
1a0007a4:	dc04      	bgt.n	1a0007b0 <itoa+0x94>
    	*wstr= num[valor];
1a0007a6:	4b05      	ldr	r3, [pc, #20]	; (1a0007bc <itoa+0xa0>)
1a0007a8:	5c1b      	ldrb	r3, [r3, r0]
1a0007aa:	700b      	strb	r3, [r1, #0]
    char* wstr = str;
1a0007ac:	460b      	mov	r3, r1
1a0007ae:	e7f5      	b.n	1a00079c <itoa+0x80>
    	*wstr=num[0];
1a0007b0:	2330      	movs	r3, #48	; 0x30
1a0007b2:	700b      	strb	r3, [r1, #0]
    char* wstr = str;
1a0007b4:	460b      	mov	r3, r1
1a0007b6:	e7f1      	b.n	1a00079c <itoa+0x80>
1a0007b8:	51eb851f 	.word	0x51eb851f
1a0007bc:	1a00af04 	.word	0x1a00af04
1a0007c0:	66666667 	.word	0x66666667
1a0007c4:	ffffffff 	.word	0xffffffff

1a0007c8 <CalculoDuracionSensado>:


/*=====[Implementations of public functions]=================================*/

 // Función calculo duracón del sensado
 void CalculoDuracionSensado(int metros, int *duracionSensado){
1a0007c8:	b510      	push	{r4, lr}
1a0007ca:	460c      	mov	r4, r1

	float duracion=0;

	duracion = metros/0.0275; // si v = 5,5 m/s --> en 5ms recorre 0,0275m
1a0007cc:	f004 fe30 	bl	1a005430 <__aeabi_i2d>
1a0007d0:	a307      	add	r3, pc, #28	; (adr r3, 1a0007f0 <CalculoDuracionSensado+0x28>)
1a0007d2:	e9d3 2300 	ldrd	r2, r3, [r3]
1a0007d6:	f004 ffbf 	bl	1a005758 <__aeabi_ddiv>
1a0007da:	f005 f92d 	bl	1a005a38 <__aeabi_d2f>
	(*duracionSensado) = (int)duracion;
1a0007de:	ee07 0a90 	vmov	s15, r0
1a0007e2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
1a0007e6:	edc4 7a00 	vstr	s15, [r4]

 }
1a0007ea:	bd10      	pop	{r4, pc}
1a0007ec:	f3af 8000 	nop.w
1a0007f0:	c28f5c29 	.word	0xc28f5c29
1a0007f4:	3f9c28f5 	.word	0x3f9c28f5

1a0007f8 <CalculoAlturaPasto>:

 //  Función Actualizar MEF
 void CalculoAlturaPasto(int *promedioAlturaPasto, int *contador){
1a0007f8:	b570      	push	{r4, r5, r6, lr}
1a0007fa:	4605      	mov	r5, r0
1a0007fc:	460e      	mov	r6, r1
	 int i=0;
	 int cont=1;
	 bool_t desnivel;
	 uint16_t lecturaAnalog;

	if((*contador)==0){
1a0007fe:	680b      	ldr	r3, [r1, #0]
1a000800:	b913      	cbnz	r3, 1a000808 <CalculoAlturaPasto+0x10>
		suma=0;
1a000802:	4b19      	ldr	r3, [pc, #100]	; (1a000868 <CalculoAlturaPasto+0x70>)
1a000804:	2200      	movs	r2, #0
1a000806:	601a      	str	r2, [r3, #0]
 void CalculoAlturaPasto(int *promedioAlturaPasto, int *contador){
1a000808:	2401      	movs	r4, #1
1a00080a:	e003      	b.n	1a000814 <CalculoAlturaPasto+0x1c>
		lecturaAnalog=LecturaSensorIR(j);
		//printf("valor analogico %i \n\r",lecturaAnalog);
		if(lecturaAnalog>=1010){
			estadoSensor[j]=1;
		}else{
			estadoSensor[j]=0;
1a00080c:	4b17      	ldr	r3, [pc, #92]	; (1a00086c <CalculoAlturaPasto+0x74>)
1a00080e:	2200      	movs	r2, #0
1a000810:	551a      	strb	r2, [r3, r4]
	for (j=1; j<=CANT_SENSORES; j++){
1a000812:	3401      	adds	r4, #1
1a000814:	2c10      	cmp	r4, #16
1a000816:	dc0a      	bgt.n	1a00082e <CalculoAlturaPasto+0x36>
		lecturaAnalog=LecturaSensorIR(j);
1a000818:	4620      	mov	r0, r4
1a00081a:	f000 f82b 	bl	1a000874 <LecturaSensorIR>
		if(lecturaAnalog>=1010){
1a00081e:	f240 33f1 	movw	r3, #1009	; 0x3f1
1a000822:	4298      	cmp	r0, r3
1a000824:	d9f2      	bls.n	1a00080c <CalculoAlturaPasto+0x14>
			estadoSensor[j]=1;
1a000826:	4b11      	ldr	r3, [pc, #68]	; (1a00086c <CalculoAlturaPasto+0x74>)
1a000828:	2201      	movs	r2, #1
1a00082a:	551a      	strb	r2, [r3, r4]
1a00082c:	e7f1      	b.n	1a000812 <CalculoAlturaPasto+0x1a>
		}
		//printf("valor %d \n\r",estadoSensor[j]);
	}	
			  
	altura=0;
	i=CANT_SENSORES;
1a00082e:	2310      	movs	r3, #16
	altura=0;
1a000830:	2200      	movs	r2, #0
1a000832:	e000      	b.n	1a000836 <CalculoAlturaPasto+0x3e>
	while(i>0 && altura == 0){
		if(estadoSensor[i]==1){
			altura = 50 + (i-1)*20;
			//printf("altura %i \n\r",altura);
		}
		i--;
1a000834:	3b01      	subs	r3, #1
	while(i>0 && altura == 0){
1a000836:	2b00      	cmp	r3, #0
1a000838:	dd0a      	ble.n	1a000850 <CalculoAlturaPasto+0x58>
1a00083a:	b94a      	cbnz	r2, 1a000850 <CalculoAlturaPasto+0x58>
		if(estadoSensor[i]==1){
1a00083c:	490b      	ldr	r1, [pc, #44]	; (1a00086c <CalculoAlturaPasto+0x74>)
1a00083e:	5cc9      	ldrb	r1, [r1, r3]
1a000840:	2900      	cmp	r1, #0
1a000842:	d0f7      	beq.n	1a000834 <CalculoAlturaPasto+0x3c>
			altura = 50 + (i-1)*20;
1a000844:	1e59      	subs	r1, r3, #1
1a000846:	eb01 0181 	add.w	r1, r1, r1, lsl #2
1a00084a:	008a      	lsls	r2, r1, #2
1a00084c:	3232      	adds	r2, #50	; 0x32
1a00084e:	e7f1      	b.n	1a000834 <CalculoAlturaPasto+0x3c>

	//desnivel=0;
	//descartarMedida(&desnivel);
	//if(desnivel==0){
		//guardo la suma de todas las aturas del pasto para poder calcular el promedio
		suma = suma + altura;
1a000850:	4b05      	ldr	r3, [pc, #20]	; (1a000868 <CalculoAlturaPasto+0x70>)
1a000852:	6819      	ldr	r1, [r3, #0]
1a000854:	440a      	add	r2, r1
1a000856:	601a      	str	r2, [r3, #0]
		cont = (*contador);
1a000858:	6831      	ldr	r1, [r6, #0]
		//calculo el promedio de la altura del pasto hasta el momento
		(*promedioAlturaPasto) = suma/cont;
1a00085a:	fb92 f1f1 	sdiv	r1, r2, r1
1a00085e:	6029      	str	r1, [r5, #0]
		printf("La altura promedio del pasto en mm es: %i \n\r",(*promedioAlturaPasto));
1a000860:	4803      	ldr	r0, [pc, #12]	; (1a000870 <CalculoAlturaPasto+0x78>)
1a000862:	f006 f93d 	bl	1a006ae0 <printf>
	//}else {
		//printf("Se descarto la medida \n\r");
	//}

}
1a000866:	bd70      	pop	{r4, r5, r6, pc}
1a000868:	10000a3c 	.word	0x10000a3c
1a00086c:	10000a2c 	.word	0x10000a2c
1a000870:	1a00af2c 	.word	0x1a00af2c

1a000874 <LecturaSensorIR>:
 */

#include "../../../TrabajoFinal/TP_RTOS1_PCSE/inc/SensorIR.h"


uint16_t LecturaSensorIR(int sensor){
1a000874:	b538      	push	{r3, r4, r5, lr}
	int j=0;
    int i=0;
	bool_t valor=0;
	int aux, resto;

	aux = sensor - 1;
1a000876:	1e44      	subs	r4, r0, #1

	for(j=1; j<5; j++){
1a000878:	2501      	movs	r5, #1
1a00087a:	e006      	b.n	1a00088a <LecturaSensorIR+0x16>
		resto = aux % 2;
		aux = aux / 2;
		if(resto!=0){
			valor = 1;
		}else{
			valor = 0;
1a00087c:	2100      	movs	r1, #0
		}
        i=j-1;
1a00087e:	1e6b      	subs	r3, r5, #1
        gpioWrite( s[i], valor );
1a000880:	4a0b      	ldr	r2, [pc, #44]	; (1a0008b0 <LecturaSensorIR+0x3c>)
1a000882:	56d0      	ldrsb	r0, [r2, r3]
1a000884:	f003 fc8e 	bl	1a0041a4 <gpioWrite>
	for(j=1; j<5; j++){
1a000888:	3501      	adds	r5, #1
1a00088a:	2d04      	cmp	r5, #4
1a00088c:	dc0b      	bgt.n	1a0008a6 <LecturaSensorIR+0x32>
		resto = aux % 2;
1a00088e:	2c00      	cmp	r4, #0
1a000890:	f004 0301 	and.w	r3, r4, #1
1a000894:	bfb8      	it	lt
1a000896:	425b      	neglt	r3, r3
		aux = aux / 2;
1a000898:	eb04 74d4 	add.w	r4, r4, r4, lsr #31
1a00089c:	1064      	asrs	r4, r4, #1
		if(resto!=0){
1a00089e:	2b00      	cmp	r3, #0
1a0008a0:	d0ec      	beq.n	1a00087c <LecturaSensorIR+0x8>
			valor = 1;
1a0008a2:	2101      	movs	r1, #1
1a0008a4:	e7eb      	b.n	1a00087e <LecturaSensorIR+0xa>
	}
	return(adcRead( SENSOR_SIG));
1a0008a6:	2000      	movs	r0, #0
1a0008a8:	f003 fb60 	bl	1a003f6c <adcRead>

}
1a0008ac:	bd38      	pop	{r3, r4, r5, pc}
1a0008ae:	bf00      	nop
1a0008b0:	1a00af5c 	.word	0x1a00af5c

1a0008b4 <initialise_monitor_handles>:
}
1a0008b4:	4770      	bx	lr
1a0008b6:	Address 0x000000001a0008b6 is out of bounds.


1a0008b8 <Reset_Handler>:
void Reset_Handler(void) {
1a0008b8:	b510      	push	{r4, lr}
    __asm__ volatile("cpsid i");
1a0008ba:	b672      	cpsid	i
    *(RESET_CONTROL + 0) = 0x10DF1000;
1a0008bc:	4b19      	ldr	r3, [pc, #100]	; (1a000924 <Reset_Handler+0x6c>)
1a0008be:	4a1a      	ldr	r2, [pc, #104]	; (1a000928 <Reset_Handler+0x70>)
1a0008c0:	601a      	str	r2, [r3, #0]
    *(RESET_CONTROL + 1) = 0x01DFF7FF;
1a0008c2:	3304      	adds	r3, #4
1a0008c4:	4a19      	ldr	r2, [pc, #100]	; (1a00092c <Reset_Handler+0x74>)
1a0008c6:	601a      	str	r2, [r3, #0]
    for (irqpendloop = 0; irqpendloop < 8; irqpendloop++) {
1a0008c8:	2300      	movs	r3, #0
1a0008ca:	e005      	b.n	1a0008d8 <Reset_Handler+0x20>
        *(NVIC_ICPR + irqpendloop) = 0xFFFFFFFF;
1a0008cc:	4a18      	ldr	r2, [pc, #96]	; (1a000930 <Reset_Handler+0x78>)
1a0008ce:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
1a0008d2:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
    for (irqpendloop = 0; irqpendloop < 8; irqpendloop++) {
1a0008d6:	3301      	adds	r3, #1
1a0008d8:	2b07      	cmp	r3, #7
1a0008da:	d9f7      	bls.n	1a0008cc <Reset_Handler+0x14>
    __asm__ volatile("cpsie i");
1a0008dc:	b662      	cpsie	i
    SectionTableAddr = &__data_section_table;
1a0008de:	4b15      	ldr	r3, [pc, #84]	; (1a000934 <Reset_Handler+0x7c>)
    while (SectionTableAddr < &__data_section_table_end) {
1a0008e0:	e007      	b.n	1a0008f2 <Reset_Handler+0x3a>
        SectionLen = *SectionTableAddr++;
1a0008e2:	f103 040c 	add.w	r4, r3, #12
        data_init(LoadAddr, ExeAddr, SectionLen);
1a0008e6:	689a      	ldr	r2, [r3, #8]
1a0008e8:	6859      	ldr	r1, [r3, #4]
1a0008ea:	6818      	ldr	r0, [r3, #0]
1a0008ec:	f7ff fc4d 	bl	1a00018a <data_init>
        SectionLen = *SectionTableAddr++;
1a0008f0:	4623      	mov	r3, r4
    while (SectionTableAddr < &__data_section_table_end) {
1a0008f2:	4a11      	ldr	r2, [pc, #68]	; (1a000938 <Reset_Handler+0x80>)
1a0008f4:	4293      	cmp	r3, r2
1a0008f6:	d3f4      	bcc.n	1a0008e2 <Reset_Handler+0x2a>
1a0008f8:	e006      	b.n	1a000908 <Reset_Handler+0x50>
        ExeAddr = *SectionTableAddr++;
1a0008fa:	461c      	mov	r4, r3
        bss_init(ExeAddr, SectionLen);
1a0008fc:	6859      	ldr	r1, [r3, #4]
1a0008fe:	f854 0b08 	ldr.w	r0, [r4], #8
1a000902:	f7ff fc51 	bl	1a0001a8 <bss_init>
        SectionLen = *SectionTableAddr++;
1a000906:	4623      	mov	r3, r4
    while (SectionTableAddr < &__bss_section_table_end) {
1a000908:	4a0c      	ldr	r2, [pc, #48]	; (1a00093c <Reset_Handler+0x84>)
1a00090a:	4293      	cmp	r3, r2
1a00090c:	d3f5      	bcc.n	1a0008fa <Reset_Handler+0x42>
    SystemInit();
1a00090e:	f003 f9bd 	bl	1a003c8c <SystemInit>
    __libc_init_array();
1a000912:	f005 fd0b 	bl	1a00632c <__libc_init_array>
    initialise_monitor_handles();
1a000916:	f7ff ffcd 	bl	1a0008b4 <initialise_monitor_handles>
    main();
1a00091a:	f7ff fdf3 	bl	1a000504 <main>
        __asm__ volatile("wfi");
1a00091e:	bf30      	wfi
1a000920:	e7fd      	b.n	1a00091e <Reset_Handler+0x66>
1a000922:	bf00      	nop
1a000924:	40053100 	.word	0x40053100
1a000928:	10df1000 	.word	0x10df1000
1a00092c:	01dff7ff 	.word	0x01dff7ff
1a000930:	e000e280 	.word	0xe000e280
1a000934:	1a000114 	.word	0x1a000114
1a000938:	1a000150 	.word	0x1a000150
1a00093c:	1a000178 	.word	0x1a000178

1a000940 <_fini>:
void _fini(void) {}
1a000940:	4770      	bx	lr

1a000942 <_init>:
void _init(void) {}
1a000942:	4770      	bx	lr

1a000944 <_close_r>:
   (void) __params__;
}

int _close_r(struct _reent *r, int fd) {
   UNUSED(fd);
   SET_ERR(EBADF);
1a000944:	2309      	movs	r3, #9
1a000946:	6003      	str	r3, [r0, #0]
   return -1;
}
1a000948:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
1a00094c:	4770      	bx	lr

1a00094e <_fstat_r>:
}

int _fstat_r(struct _reent *r, int fd, struct stat *st) {
   UNUSED(fd);
   UNUSED(st);
   SET_ERR(ENOSYS);
1a00094e:	2358      	movs	r3, #88	; 0x58
1a000950:	6003      	str	r3, [r0, #0]
   return -1;
}
1a000952:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
1a000956:	4770      	bx	lr

1a000958 <_isatty_r>:
   UNUSED(r);
   return 1;
}

int _isatty_r(struct _reent *r, int fd) {
   switch (fd) {
1a000958:	2902      	cmp	r1, #2
1a00095a:	d904      	bls.n	1a000966 <_isatty_r+0xe>
   case 0:
   case 1:
   case 2:
       return 1;
   default:
       SET_ERR(EBADF);
1a00095c:	2309      	movs	r3, #9
1a00095e:	6003      	str	r3, [r0, #0]
       return -1;
1a000960:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
1a000964:	4770      	bx	lr
       return 1;
1a000966:	2001      	movs	r0, #1
   }
}
1a000968:	4770      	bx	lr

1a00096a <_lseek_r>:

_off_t _lseek_r(struct _reent *r, int fd, _off_t off, int w) {
   UNUSED(fd);
   UNUSED(off);
   UNUSED(w);
   SET_ERR(ENOSYS);
1a00096a:	2358      	movs	r3, #88	; 0x58
1a00096c:	6003      	str	r3, [r0, #0]
   return -1;
}
1a00096e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
1a000972:	4770      	bx	lr

1a000974 <_read_r>:
   }
}
*/
_ssize_t _read_r(struct _reent *r, int fd, void *b, size_t n) {
  size_t i = 0;
  switch (fd) {
1a000974:	2902      	cmp	r1, #2
1a000976:	d81f      	bhi.n	1a0009b8 <_read_r+0x44>
_ssize_t _read_r(struct _reent *r, int fd, void *b, size_t n) {
1a000978:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
1a00097c:	461d      	mov	r5, r3
1a00097e:	4617      	mov	r7, r2
1a000980:	4606      	mov	r6, r0
  size_t i = 0;
1a000982:	2400      	movs	r4, #0
  case 0:
  case 1:
  case 2:
      while( i < n ){
1a000984:	42ac      	cmp	r4, r5
1a000986:	d211      	bcs.n	1a0009ac <_read_r+0x38>
         int c = __stdio_getchar();
1a000988:	f002 f9bb 	bl	1a002d02 <__stdio_getchar>
         if( c != -1 ){
1a00098c:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
1a000990:	d0f8      	beq.n	1a000984 <_read_r+0x10>
            ((char*) b)[i++] = (char) c;
1a000992:	f104 0801 	add.w	r8, r4, #1
1a000996:	5538      	strb	r0, [r7, r4]
            if( c == '\r' || c == '\n' ){
1a000998:	280d      	cmp	r0, #13
1a00099a:	d003      	beq.n	1a0009a4 <_read_r+0x30>
1a00099c:	280a      	cmp	r0, #10
1a00099e:	d001      	beq.n	1a0009a4 <_read_r+0x30>
            ((char*) b)[i++] = (char) c;
1a0009a0:	4644      	mov	r4, r8
1a0009a2:	e7ef      	b.n	1a000984 <_read_r+0x10>
               // read anotherone to prevent \r\n
               (void) __stdio_getchar();
1a0009a4:	f002 f9ad 	bl	1a002d02 <__stdio_getchar>
               return i;
1a0009a8:	4640      	mov	r0, r8
1a0009aa:	e003      	b.n	1a0009b4 <_read_r+0x40>
            }
         }
      }
      SET_ERR(ENODEV);
1a0009ac:	2313      	movs	r3, #19
1a0009ae:	6033      	str	r3, [r6, #0]
      return -1;
1a0009b0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
  default:
      SET_ERR(ENODEV);
      return -1;
  }
}
1a0009b4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      SET_ERR(ENODEV);
1a0009b8:	2313      	movs	r3, #19
1a0009ba:	6003      	str	r3, [r0, #0]
      return -1;
1a0009bc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
1a0009c0:	4770      	bx	lr

1a0009c2 <_write_r>:
   return -1;
}

_ssize_t _write_r(struct _reent *r, int fd, const void *b, size_t n) {
   size_t i;
   switch (fd) {
1a0009c2:	2902      	cmp	r1, #2
1a0009c4:	d80c      	bhi.n	1a0009e0 <_write_r+0x1e>
_ssize_t _write_r(struct _reent *r, int fd, const void *b, size_t n) {
1a0009c6:	b570      	push	{r4, r5, r6, lr}
1a0009c8:	461d      	mov	r5, r3
1a0009ca:	4616      	mov	r6, r2
   case 0:
   case 1:
   case 2:
       for (i = 0; i < n; i++)
1a0009cc:	2400      	movs	r4, #0
1a0009ce:	42ac      	cmp	r4, r5
1a0009d0:	d204      	bcs.n	1a0009dc <_write_r+0x1a>
           __stdio_putchar(((char*) b)[i]);
1a0009d2:	5d30      	ldrb	r0, [r6, r4]
1a0009d4:	f002 f990 	bl	1a002cf8 <__stdio_putchar>
       for (i = 0; i < n; i++)
1a0009d8:	3401      	adds	r4, #1
1a0009da:	e7f8      	b.n	1a0009ce <_write_r+0xc>
       return n;
1a0009dc:	4628      	mov	r0, r5
   default:
       SET_ERR(ENODEV);
       return -1;
   }
}
1a0009de:	bd70      	pop	{r4, r5, r6, pc}
       SET_ERR(ENODEV);
1a0009e0:	2313      	movs	r3, #19
1a0009e2:	6003      	str	r3, [r0, #0]
       return -1;
1a0009e4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
1a0009e8:	4770      	bx	lr
1a0009ea:	Address 0x000000001a0009ea is out of bounds.


1a0009ec <_sbrk_r>:

void *_sbrk_r(struct _reent *r, ptrdiff_t incr) {
   extern int _pvHeapStart;
   static void *heap_end;
   void *prev_heap_end;
   if (heap_end == 0) {
1a0009ec:	4b05      	ldr	r3, [pc, #20]	; (1a000a04 <_sbrk_r+0x18>)
1a0009ee:	681b      	ldr	r3, [r3, #0]
1a0009f0:	b123      	cbz	r3, 1a0009fc <_sbrk_r+0x10>
       heap_end = &_pvHeapStart;
   }
   prev_heap_end = heap_end;
1a0009f2:	4b04      	ldr	r3, [pc, #16]	; (1a000a04 <_sbrk_r+0x18>)
1a0009f4:	6818      	ldr	r0, [r3, #0]
   heap_end += incr;
1a0009f6:	4401      	add	r1, r0
1a0009f8:	6019      	str	r1, [r3, #0]
   return prev_heap_end;
}
1a0009fa:	4770      	bx	lr
       heap_end = &_pvHeapStart;
1a0009fc:	4b01      	ldr	r3, [pc, #4]	; (1a000a04 <_sbrk_r+0x18>)
1a0009fe:	4a02      	ldr	r2, [pc, #8]	; (1a000a08 <_sbrk_r+0x1c>)
1a000a00:	601a      	str	r2, [r3, #0]
1a000a02:	e7f6      	b.n	1a0009f2 <_sbrk_r+0x6>
1a000a04:	10000a40 	.word	0x10000a40
1a000a08:	10003698 	.word	0x10003698

1a000a0c <prvHeapInit>:
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
1a000a0c:	4a12      	ldr	r2, [pc, #72]	; (1a000a58 <prvHeapInit+0x4c>)

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
1a000a0e:	f012 0f07 	tst.w	r2, #7
1a000a12:	d007      	beq.n	1a000a24 <prvHeapInit+0x18>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
1a000a14:	1dd1      	adds	r1, r2, #7
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
1a000a16:	f021 0107 	bic.w	r1, r1, #7
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
1a000a1a:	f5c1 5300 	rsb	r3, r1, #8192	; 0x2000
1a000a1e:	4413      	add	r3, r2
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
1a000a20:	460a      	mov	r2, r1
1a000a22:	e001      	b.n	1a000a28 <prvHeapInit+0x1c>
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
1a000a24:	f44f 5300 	mov.w	r3, #8192	; 0x2000

	pucAlignedHeap = ( uint8_t * ) uxAddress;

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
1a000a28:	480c      	ldr	r0, [pc, #48]	; (1a000a5c <prvHeapInit+0x50>)
1a000a2a:	6002      	str	r2, [r0, #0]
	xStart.xBlockSize = ( size_t ) 0;
1a000a2c:	2100      	movs	r1, #0
1a000a2e:	6041      	str	r1, [r0, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
1a000a30:	4413      	add	r3, r2
	uxAddress -= xHeapStructSize;
1a000a32:	3b08      	subs	r3, #8
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
1a000a34:	f023 0307 	bic.w	r3, r3, #7
	pxEnd = ( void * ) uxAddress;
1a000a38:	4809      	ldr	r0, [pc, #36]	; (1a000a60 <prvHeapInit+0x54>)
1a000a3a:	6003      	str	r3, [r0, #0]
	pxEnd->xBlockSize = 0;
1a000a3c:	6059      	str	r1, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
1a000a3e:	6019      	str	r1, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
1a000a40:	1a99      	subs	r1, r3, r2
1a000a42:	6051      	str	r1, [r2, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
1a000a44:	6013      	str	r3, [r2, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
1a000a46:	4b07      	ldr	r3, [pc, #28]	; (1a000a64 <prvHeapInit+0x58>)
1a000a48:	6019      	str	r1, [r3, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
1a000a4a:	4b07      	ldr	r3, [pc, #28]	; (1a000a68 <prvHeapInit+0x5c>)
1a000a4c:	6019      	str	r1, [r3, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
1a000a4e:	4b07      	ldr	r3, [pc, #28]	; (1a000a6c <prvHeapInit+0x60>)
1a000a50:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
1a000a54:	601a      	str	r2, [r3, #0]
}
1a000a56:	4770      	bx	lr
1a000a58:	10000a48 	.word	0x10000a48
1a000a5c:	10002a54 	.word	0x10002a54
1a000a60:	10000a44 	.word	0x10000a44
1a000a64:	10002a50 	.word	0x10002a50
1a000a68:	10002a4c 	.word	0x10002a4c
1a000a6c:	10002a48 	.word	0x10002a48

1a000a70 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
1a000a70:	b410      	push	{r4}
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
1a000a72:	4a13      	ldr	r2, [pc, #76]	; (1a000ac0 <prvInsertBlockIntoFreeList+0x50>)
1a000a74:	e000      	b.n	1a000a78 <prvInsertBlockIntoFreeList+0x8>
1a000a76:	461a      	mov	r2, r3
1a000a78:	6813      	ldr	r3, [r2, #0]
1a000a7a:	4283      	cmp	r3, r0
1a000a7c:	d3fb      	bcc.n	1a000a76 <prvInsertBlockIntoFreeList+0x6>
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
1a000a7e:	6851      	ldr	r1, [r2, #4]
1a000a80:	1854      	adds	r4, r2, r1
1a000a82:	4284      	cmp	r4, r0
1a000a84:	d00a      	beq.n	1a000a9c <prvInsertBlockIntoFreeList+0x2c>
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
1a000a86:	6841      	ldr	r1, [r0, #4]
1a000a88:	1844      	adds	r4, r0, r1
1a000a8a:	42a3      	cmp	r3, r4
1a000a8c:	d00b      	beq.n	1a000aa6 <prvInsertBlockIntoFreeList+0x36>
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
1a000a8e:	6003      	str	r3, [r0, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
1a000a90:	4290      	cmp	r0, r2
1a000a92:	d000      	beq.n	1a000a96 <prvInsertBlockIntoFreeList+0x26>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
1a000a94:	6010      	str	r0, [r2, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
1a000a96:	f85d 4b04 	ldr.w	r4, [sp], #4
1a000a9a:	4770      	bx	lr
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
1a000a9c:	6840      	ldr	r0, [r0, #4]
1a000a9e:	4401      	add	r1, r0
1a000aa0:	6051      	str	r1, [r2, #4]
		pxBlockToInsert = pxIterator;
1a000aa2:	4610      	mov	r0, r2
1a000aa4:	e7ef      	b.n	1a000a86 <prvInsertBlockIntoFreeList+0x16>
		if( pxIterator->pxNextFreeBlock != pxEnd )
1a000aa6:	4c07      	ldr	r4, [pc, #28]	; (1a000ac4 <prvInsertBlockIntoFreeList+0x54>)
1a000aa8:	6824      	ldr	r4, [r4, #0]
1a000aaa:	42a3      	cmp	r3, r4
1a000aac:	d006      	beq.n	1a000abc <prvInsertBlockIntoFreeList+0x4c>
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
1a000aae:	685b      	ldr	r3, [r3, #4]
1a000ab0:	4419      	add	r1, r3
1a000ab2:	6041      	str	r1, [r0, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
1a000ab4:	6813      	ldr	r3, [r2, #0]
1a000ab6:	681b      	ldr	r3, [r3, #0]
1a000ab8:	6003      	str	r3, [r0, #0]
1a000aba:	e7e9      	b.n	1a000a90 <prvInsertBlockIntoFreeList+0x20>
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
1a000abc:	6004      	str	r4, [r0, #0]
1a000abe:	e7e7      	b.n	1a000a90 <prvInsertBlockIntoFreeList+0x20>
1a000ac0:	10002a54 	.word	0x10002a54
1a000ac4:	10000a44 	.word	0x10000a44

1a000ac8 <pvPortMalloc>:
{
1a000ac8:	b570      	push	{r4, r5, r6, lr}
1a000aca:	4604      	mov	r4, r0
	vTaskSuspendAll();
1a000acc:	f001 f86c 	bl	1a001ba8 <vTaskSuspendAll>
		if( pxEnd == NULL )
1a000ad0:	4b3f      	ldr	r3, [pc, #252]	; (1a000bd0 <pvPortMalloc+0x108>)
1a000ad2:	681b      	ldr	r3, [r3, #0]
1a000ad4:	b1bb      	cbz	r3, 1a000b06 <pvPortMalloc+0x3e>
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
1a000ad6:	4b3f      	ldr	r3, [pc, #252]	; (1a000bd4 <pvPortMalloc+0x10c>)
1a000ad8:	681b      	ldr	r3, [r3, #0]
1a000ada:	421c      	tst	r4, r3
1a000adc:	d116      	bne.n	1a000b0c <pvPortMalloc+0x44>
			if( xWantedSize > 0 )
1a000ade:	b334      	cbz	r4, 1a000b2e <pvPortMalloc+0x66>
				xWantedSize += xHeapStructSize;
1a000ae0:	3408      	adds	r4, #8
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
1a000ae2:	f014 0f07 	tst.w	r4, #7
1a000ae6:	d022      	beq.n	1a000b2e <pvPortMalloc+0x66>
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
1a000ae8:	f024 0407 	bic.w	r4, r4, #7
1a000aec:	3408      	adds	r4, #8
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
1a000aee:	f004 0307 	and.w	r3, r4, #7
1a000af2:	b1e3      	cbz	r3, 1a000b2e <pvPortMalloc+0x66>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
1a000af4:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a000af8:	f383 8811 	msr	BASEPRI, r3
1a000afc:	f3bf 8f6f 	isb	sy
1a000b00:	f3bf 8f4f 	dsb	sy
1a000b04:	e7fe      	b.n	1a000b04 <pvPortMalloc+0x3c>
			prvHeapInit();
1a000b06:	f7ff ff81 	bl	1a000a0c <prvHeapInit>
1a000b0a:	e7e4      	b.n	1a000ad6 <pvPortMalloc+0xe>
	( void ) xTaskResumeAll();
1a000b0c:	f001 f8e6 	bl	1a001cdc <xTaskResumeAll>
void *pvReturn = NULL;
1a000b10:	2600      	movs	r6, #0
			vApplicationMallocFailedHook();
1a000b12:	f000 fd7d 	bl	1a001610 <vApplicationMallocFailedHook>
	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
1a000b16:	f016 0f07 	tst.w	r6, #7
1a000b1a:	d057      	beq.n	1a000bcc <pvPortMalloc+0x104>
1a000b1c:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a000b20:	f383 8811 	msr	BASEPRI, r3
1a000b24:	f3bf 8f6f 	isb	sy
1a000b28:	f3bf 8f4f 	dsb	sy
1a000b2c:	e7fe      	b.n	1a000b2c <pvPortMalloc+0x64>
			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
1a000b2e:	b134      	cbz	r4, 1a000b3e <pvPortMalloc+0x76>
1a000b30:	4b29      	ldr	r3, [pc, #164]	; (1a000bd8 <pvPortMalloc+0x110>)
1a000b32:	681b      	ldr	r3, [r3, #0]
1a000b34:	42a3      	cmp	r3, r4
1a000b36:	d306      	bcc.n	1a000b46 <pvPortMalloc+0x7e>
				pxBlock = xStart.pxNextFreeBlock;
1a000b38:	4b28      	ldr	r3, [pc, #160]	; (1a000bdc <pvPortMalloc+0x114>)
1a000b3a:	681d      	ldr	r5, [r3, #0]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
1a000b3c:	e009      	b.n	1a000b52 <pvPortMalloc+0x8a>
	( void ) xTaskResumeAll();
1a000b3e:	f001 f8cd 	bl	1a001cdc <xTaskResumeAll>
void *pvReturn = NULL;
1a000b42:	2600      	movs	r6, #0
1a000b44:	e7e5      	b.n	1a000b12 <pvPortMalloc+0x4a>
	( void ) xTaskResumeAll();
1a000b46:	f001 f8c9 	bl	1a001cdc <xTaskResumeAll>
void *pvReturn = NULL;
1a000b4a:	2600      	movs	r6, #0
1a000b4c:	e7e1      	b.n	1a000b12 <pvPortMalloc+0x4a>
					pxPreviousBlock = pxBlock;
1a000b4e:	462b      	mov	r3, r5
					pxBlock = pxBlock->pxNextFreeBlock;
1a000b50:	4615      	mov	r5, r2
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
1a000b52:	686a      	ldr	r2, [r5, #4]
1a000b54:	42a2      	cmp	r2, r4
1a000b56:	d202      	bcs.n	1a000b5e <pvPortMalloc+0x96>
1a000b58:	682a      	ldr	r2, [r5, #0]
1a000b5a:	2a00      	cmp	r2, #0
1a000b5c:	d1f7      	bne.n	1a000b4e <pvPortMalloc+0x86>
				if( pxBlock != pxEnd )
1a000b5e:	4a1c      	ldr	r2, [pc, #112]	; (1a000bd0 <pvPortMalloc+0x108>)
1a000b60:	6812      	ldr	r2, [r2, #0]
1a000b62:	42aa      	cmp	r2, r5
1a000b64:	d014      	beq.n	1a000b90 <pvPortMalloc+0xc8>
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
1a000b66:	681e      	ldr	r6, [r3, #0]
1a000b68:	3608      	adds	r6, #8
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
1a000b6a:	682a      	ldr	r2, [r5, #0]
1a000b6c:	601a      	str	r2, [r3, #0]
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
1a000b6e:	686b      	ldr	r3, [r5, #4]
1a000b70:	1b1b      	subs	r3, r3, r4
1a000b72:	2b10      	cmp	r3, #16
1a000b74:	d914      	bls.n	1a000ba0 <pvPortMalloc+0xd8>
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
1a000b76:	1928      	adds	r0, r5, r4
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
1a000b78:	f010 0f07 	tst.w	r0, #7
1a000b7c:	d00c      	beq.n	1a000b98 <pvPortMalloc+0xd0>
1a000b7e:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a000b82:	f383 8811 	msr	BASEPRI, r3
1a000b86:	f3bf 8f6f 	isb	sy
1a000b8a:	f3bf 8f4f 	dsb	sy
1a000b8e:	e7fe      	b.n	1a000b8e <pvPortMalloc+0xc6>
	( void ) xTaskResumeAll();
1a000b90:	f001 f8a4 	bl	1a001cdc <xTaskResumeAll>
void *pvReturn = NULL;
1a000b94:	2600      	movs	r6, #0
1a000b96:	e7bc      	b.n	1a000b12 <pvPortMalloc+0x4a>
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
1a000b98:	6043      	str	r3, [r0, #4]
						pxBlock->xBlockSize = xWantedSize;
1a000b9a:	606c      	str	r4, [r5, #4]
						prvInsertBlockIntoFreeList( pxNewBlockLink );
1a000b9c:	f7ff ff68 	bl	1a000a70 <prvInsertBlockIntoFreeList>
					xFreeBytesRemaining -= pxBlock->xBlockSize;
1a000ba0:	686a      	ldr	r2, [r5, #4]
1a000ba2:	490d      	ldr	r1, [pc, #52]	; (1a000bd8 <pvPortMalloc+0x110>)
1a000ba4:	680b      	ldr	r3, [r1, #0]
1a000ba6:	1a9b      	subs	r3, r3, r2
1a000ba8:	600b      	str	r3, [r1, #0]
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
1a000baa:	490d      	ldr	r1, [pc, #52]	; (1a000be0 <pvPortMalloc+0x118>)
1a000bac:	6809      	ldr	r1, [r1, #0]
1a000bae:	428b      	cmp	r3, r1
1a000bb0:	d201      	bcs.n	1a000bb6 <pvPortMalloc+0xee>
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
1a000bb2:	490b      	ldr	r1, [pc, #44]	; (1a000be0 <pvPortMalloc+0x118>)
1a000bb4:	600b      	str	r3, [r1, #0]
					pxBlock->xBlockSize |= xBlockAllocatedBit;
1a000bb6:	4b07      	ldr	r3, [pc, #28]	; (1a000bd4 <pvPortMalloc+0x10c>)
1a000bb8:	681b      	ldr	r3, [r3, #0]
1a000bba:	4313      	orrs	r3, r2
1a000bbc:	606b      	str	r3, [r5, #4]
					pxBlock->pxNextFreeBlock = NULL;
1a000bbe:	2300      	movs	r3, #0
1a000bc0:	602b      	str	r3, [r5, #0]
	( void ) xTaskResumeAll();
1a000bc2:	f001 f88b 	bl	1a001cdc <xTaskResumeAll>
		if( pvReturn == NULL )
1a000bc6:	2e00      	cmp	r6, #0
1a000bc8:	d1a5      	bne.n	1a000b16 <pvPortMalloc+0x4e>
1a000bca:	e7a2      	b.n	1a000b12 <pvPortMalloc+0x4a>
}
1a000bcc:	4630      	mov	r0, r6
1a000bce:	bd70      	pop	{r4, r5, r6, pc}
1a000bd0:	10000a44 	.word	0x10000a44
1a000bd4:	10002a48 	.word	0x10002a48
1a000bd8:	10002a4c 	.word	0x10002a4c
1a000bdc:	10002a54 	.word	0x10002a54
1a000be0:	10002a50 	.word	0x10002a50

1a000be4 <vPortFree>:
	if( pv != NULL )
1a000be4:	b380      	cbz	r0, 1a000c48 <vPortFree+0x64>
{
1a000be6:	b538      	push	{r3, r4, r5, lr}
1a000be8:	4604      	mov	r4, r0
		puc -= xHeapStructSize;
1a000bea:	f1a0 0508 	sub.w	r5, r0, #8
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
1a000bee:	f850 2c04 	ldr.w	r2, [r0, #-4]
1a000bf2:	4916      	ldr	r1, [pc, #88]	; (1a000c4c <vPortFree+0x68>)
1a000bf4:	6809      	ldr	r1, [r1, #0]
1a000bf6:	420a      	tst	r2, r1
1a000bf8:	d108      	bne.n	1a000c0c <vPortFree+0x28>
1a000bfa:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a000bfe:	f383 8811 	msr	BASEPRI, r3
1a000c02:	f3bf 8f6f 	isb	sy
1a000c06:	f3bf 8f4f 	dsb	sy
1a000c0a:	e7fe      	b.n	1a000c0a <vPortFree+0x26>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
1a000c0c:	f850 0c08 	ldr.w	r0, [r0, #-8]
1a000c10:	b140      	cbz	r0, 1a000c24 <vPortFree+0x40>
1a000c12:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a000c16:	f383 8811 	msr	BASEPRI, r3
1a000c1a:	f3bf 8f6f 	isb	sy
1a000c1e:	f3bf 8f4f 	dsb	sy
1a000c22:	e7fe      	b.n	1a000c22 <vPortFree+0x3e>
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
1a000c24:	ea22 0201 	bic.w	r2, r2, r1
1a000c28:	f844 2c04 	str.w	r2, [r4, #-4]
				vTaskSuspendAll();
1a000c2c:	f000 ffbc 	bl	1a001ba8 <vTaskSuspendAll>
					xFreeBytesRemaining += pxLink->xBlockSize;
1a000c30:	f854 1c04 	ldr.w	r1, [r4, #-4]
1a000c34:	4a06      	ldr	r2, [pc, #24]	; (1a000c50 <vPortFree+0x6c>)
1a000c36:	6813      	ldr	r3, [r2, #0]
1a000c38:	440b      	add	r3, r1
1a000c3a:	6013      	str	r3, [r2, #0]
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
1a000c3c:	4628      	mov	r0, r5
1a000c3e:	f7ff ff17 	bl	1a000a70 <prvInsertBlockIntoFreeList>
				( void ) xTaskResumeAll();
1a000c42:	f001 f84b 	bl	1a001cdc <xTaskResumeAll>
}
1a000c46:	bd38      	pop	{r3, r4, r5, pc}
1a000c48:	4770      	bx	lr
1a000c4a:	bf00      	nop
1a000c4c:	10002a48 	.word	0x10002a48
1a000c50:	10002a4c 	.word	0x10002a4c

1a000c54 <prvGetDisinheritPriorityAfterTimeout>:
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0 )
1a000c54:	6a43      	ldr	r3, [r0, #36]	; 0x24
1a000c56:	b123      	cbz	r3, 1a000c62 <prvGetDisinheritPriorityAfterTimeout+0xe>
		{
			uxHighestPriorityOfWaitingTasks = configMAX_PRIORITIES - listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
1a000c58:	6b03      	ldr	r3, [r0, #48]	; 0x30
1a000c5a:	6818      	ldr	r0, [r3, #0]
1a000c5c:	f1c0 0007 	rsb	r0, r0, #7
1a000c60:	4770      	bx	lr
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
1a000c62:	2000      	movs	r0, #0
		}

		return uxHighestPriorityOfWaitingTasks;
	}
1a000c64:	4770      	bx	lr

1a000c66 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
1a000c66:	b510      	push	{r4, lr}
1a000c68:	4604      	mov	r4, r0
BaseType_t xReturn;

	taskENTER_CRITICAL();
1a000c6a:	f001 fdf3 	bl	1a002854 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
1a000c6e:	6ba2      	ldr	r2, [r4, #56]	; 0x38
1a000c70:	6be3      	ldr	r3, [r4, #60]	; 0x3c
1a000c72:	429a      	cmp	r2, r3
1a000c74:	d004      	beq.n	1a000c80 <prvIsQueueFull+0x1a>
		{
			xReturn = pdTRUE;
		}
		else
		{
			xReturn = pdFALSE;
1a000c76:	2400      	movs	r4, #0
		}
	}
	taskEXIT_CRITICAL();
1a000c78:	f001 fe0e 	bl	1a002898 <vPortExitCritical>

	return xReturn;
}
1a000c7c:	4620      	mov	r0, r4
1a000c7e:	bd10      	pop	{r4, pc}
			xReturn = pdTRUE;
1a000c80:	2401      	movs	r4, #1
1a000c82:	e7f9      	b.n	1a000c78 <prvIsQueueFull+0x12>

1a000c84 <prvIsQueueEmpty>:
{
1a000c84:	b510      	push	{r4, lr}
1a000c86:	4604      	mov	r4, r0
	taskENTER_CRITICAL();
1a000c88:	f001 fde4 	bl	1a002854 <vPortEnterCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
1a000c8c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
1a000c8e:	b923      	cbnz	r3, 1a000c9a <prvIsQueueEmpty+0x16>
			xReturn = pdTRUE;
1a000c90:	2401      	movs	r4, #1
	taskEXIT_CRITICAL();
1a000c92:	f001 fe01 	bl	1a002898 <vPortExitCritical>
}
1a000c96:	4620      	mov	r0, r4
1a000c98:	bd10      	pop	{r4, pc}
			xReturn = pdFALSE;
1a000c9a:	2400      	movs	r4, #0
1a000c9c:	e7f9      	b.n	1a000c92 <prvIsQueueEmpty+0xe>

1a000c9e <prvCopyDataToQueue>:
{
1a000c9e:	b570      	push	{r4, r5, r6, lr}
1a000ca0:	4604      	mov	r4, r0
1a000ca2:	4616      	mov	r6, r2
	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
1a000ca4:	6b85      	ldr	r5, [r0, #56]	; 0x38
	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
1a000ca6:	6c02      	ldr	r2, [r0, #64]	; 0x40
1a000ca8:	b95a      	cbnz	r2, 1a000cc2 <prvCopyDataToQueue+0x24>
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
1a000caa:	6803      	ldr	r3, [r0, #0]
1a000cac:	b11b      	cbz	r3, 1a000cb6 <prvCopyDataToQueue+0x18>
BaseType_t xReturn = pdFALSE;
1a000cae:	2000      	movs	r0, #0
	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
1a000cb0:	3501      	adds	r5, #1
1a000cb2:	63a5      	str	r5, [r4, #56]	; 0x38
}
1a000cb4:	bd70      	pop	{r4, r5, r6, pc}
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
1a000cb6:	6840      	ldr	r0, [r0, #4]
1a000cb8:	f001 fa82 	bl	1a0021c0 <xTaskPriorityDisinherit>
				pxQueue->pxMutexHolder = NULL;
1a000cbc:	2300      	movs	r3, #0
1a000cbe:	6063      	str	r3, [r4, #4]
1a000cc0:	e7f6      	b.n	1a000cb0 <prvCopyDataToQueue+0x12>
	else if( xPosition == queueSEND_TO_BACK )
1a000cc2:	b96e      	cbnz	r6, 1a000ce0 <prvCopyDataToQueue+0x42>
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
1a000cc4:	6880      	ldr	r0, [r0, #8]
1a000cc6:	f005 fe15 	bl	1a0068f4 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
1a000cca:	6c22      	ldr	r2, [r4, #64]	; 0x40
1a000ccc:	68a3      	ldr	r3, [r4, #8]
1a000cce:	4413      	add	r3, r2
1a000cd0:	60a3      	str	r3, [r4, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
1a000cd2:	6862      	ldr	r2, [r4, #4]
1a000cd4:	4293      	cmp	r3, r2
1a000cd6:	d319      	bcc.n	1a000d0c <prvCopyDataToQueue+0x6e>
			pxQueue->pcWriteTo = pxQueue->pcHead;
1a000cd8:	6823      	ldr	r3, [r4, #0]
1a000cda:	60a3      	str	r3, [r4, #8]
BaseType_t xReturn = pdFALSE;
1a000cdc:	2000      	movs	r0, #0
1a000cde:	e7e7      	b.n	1a000cb0 <prvCopyDataToQueue+0x12>
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
1a000ce0:	68c0      	ldr	r0, [r0, #12]
1a000ce2:	f005 fe07 	bl	1a0068f4 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
1a000ce6:	6c22      	ldr	r2, [r4, #64]	; 0x40
1a000ce8:	4252      	negs	r2, r2
1a000cea:	68e3      	ldr	r3, [r4, #12]
1a000cec:	4413      	add	r3, r2
1a000cee:	60e3      	str	r3, [r4, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
1a000cf0:	6821      	ldr	r1, [r4, #0]
1a000cf2:	428b      	cmp	r3, r1
1a000cf4:	d202      	bcs.n	1a000cfc <prvCopyDataToQueue+0x5e>
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
1a000cf6:	6863      	ldr	r3, [r4, #4]
1a000cf8:	441a      	add	r2, r3
1a000cfa:	60e2      	str	r2, [r4, #12]
		if( xPosition == queueOVERWRITE )
1a000cfc:	2e02      	cmp	r6, #2
1a000cfe:	d001      	beq.n	1a000d04 <prvCopyDataToQueue+0x66>
BaseType_t xReturn = pdFALSE;
1a000d00:	2000      	movs	r0, #0
1a000d02:	e7d5      	b.n	1a000cb0 <prvCopyDataToQueue+0x12>
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
1a000d04:	b125      	cbz	r5, 1a000d10 <prvCopyDataToQueue+0x72>
				--uxMessagesWaiting;
1a000d06:	3d01      	subs	r5, #1
BaseType_t xReturn = pdFALSE;
1a000d08:	2000      	movs	r0, #0
1a000d0a:	e7d1      	b.n	1a000cb0 <prvCopyDataToQueue+0x12>
1a000d0c:	2000      	movs	r0, #0
1a000d0e:	e7cf      	b.n	1a000cb0 <prvCopyDataToQueue+0x12>
1a000d10:	2000      	movs	r0, #0
1a000d12:	e7cd      	b.n	1a000cb0 <prvCopyDataToQueue+0x12>

1a000d14 <prvCopyDataFromQueue>:
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
1a000d14:	6c02      	ldr	r2, [r0, #64]	; 0x40
1a000d16:	b172      	cbz	r2, 1a000d36 <prvCopyDataFromQueue+0x22>
{
1a000d18:	b510      	push	{r4, lr}
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
1a000d1a:	68c3      	ldr	r3, [r0, #12]
1a000d1c:	4413      	add	r3, r2
1a000d1e:	60c3      	str	r3, [r0, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
1a000d20:	6844      	ldr	r4, [r0, #4]
1a000d22:	42a3      	cmp	r3, r4
1a000d24:	d301      	bcc.n	1a000d2a <prvCopyDataFromQueue+0x16>
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
1a000d26:	6803      	ldr	r3, [r0, #0]
1a000d28:	60c3      	str	r3, [r0, #12]
1a000d2a:	460c      	mov	r4, r1
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
1a000d2c:	68c1      	ldr	r1, [r0, #12]
1a000d2e:	4620      	mov	r0, r4
1a000d30:	f005 fde0 	bl	1a0068f4 <memcpy>
}
1a000d34:	bd10      	pop	{r4, pc}
1a000d36:	4770      	bx	lr

1a000d38 <prvUnlockQueue>:
{
1a000d38:	b538      	push	{r3, r4, r5, lr}
1a000d3a:	4605      	mov	r5, r0
	taskENTER_CRITICAL();
1a000d3c:	f001 fd8a 	bl	1a002854 <vPortEnterCritical>
		int8_t cTxLock = pxQueue->cTxLock;
1a000d40:	f895 4045 	ldrb.w	r4, [r5, #69]	; 0x45
1a000d44:	b264      	sxtb	r4, r4
		while( cTxLock > queueLOCKED_UNMODIFIED )
1a000d46:	e003      	b.n	1a000d50 <prvUnlockQueue+0x18>
						vTaskMissedYield();
1a000d48:	f001 f9c6 	bl	1a0020d8 <vTaskMissedYield>
			--cTxLock;
1a000d4c:	3c01      	subs	r4, #1
1a000d4e:	b264      	sxtb	r4, r4
		while( cTxLock > queueLOCKED_UNMODIFIED )
1a000d50:	2c00      	cmp	r4, #0
1a000d52:	dd08      	ble.n	1a000d66 <prvUnlockQueue+0x2e>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
1a000d54:	6a6b      	ldr	r3, [r5, #36]	; 0x24
1a000d56:	b133      	cbz	r3, 1a000d66 <prvUnlockQueue+0x2e>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
1a000d58:	f105 0024 	add.w	r0, r5, #36	; 0x24
1a000d5c:	f001 f928 	bl	1a001fb0 <xTaskRemoveFromEventList>
1a000d60:	2800      	cmp	r0, #0
1a000d62:	d0f3      	beq.n	1a000d4c <prvUnlockQueue+0x14>
1a000d64:	e7f0      	b.n	1a000d48 <prvUnlockQueue+0x10>
		pxQueue->cTxLock = queueUNLOCKED;
1a000d66:	23ff      	movs	r3, #255	; 0xff
1a000d68:	f885 3045 	strb.w	r3, [r5, #69]	; 0x45
	taskEXIT_CRITICAL();
1a000d6c:	f001 fd94 	bl	1a002898 <vPortExitCritical>
	taskENTER_CRITICAL();
1a000d70:	f001 fd70 	bl	1a002854 <vPortEnterCritical>
		int8_t cRxLock = pxQueue->cRxLock;
1a000d74:	f895 4044 	ldrb.w	r4, [r5, #68]	; 0x44
1a000d78:	b264      	sxtb	r4, r4
		while( cRxLock > queueLOCKED_UNMODIFIED )
1a000d7a:	e003      	b.n	1a000d84 <prvUnlockQueue+0x4c>
					vTaskMissedYield();
1a000d7c:	f001 f9ac 	bl	1a0020d8 <vTaskMissedYield>
				--cRxLock;
1a000d80:	3c01      	subs	r4, #1
1a000d82:	b264      	sxtb	r4, r4
		while( cRxLock > queueLOCKED_UNMODIFIED )
1a000d84:	2c00      	cmp	r4, #0
1a000d86:	dd08      	ble.n	1a000d9a <prvUnlockQueue+0x62>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
1a000d88:	692b      	ldr	r3, [r5, #16]
1a000d8a:	b133      	cbz	r3, 1a000d9a <prvUnlockQueue+0x62>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
1a000d8c:	f105 0010 	add.w	r0, r5, #16
1a000d90:	f001 f90e 	bl	1a001fb0 <xTaskRemoveFromEventList>
1a000d94:	2800      	cmp	r0, #0
1a000d96:	d0f3      	beq.n	1a000d80 <prvUnlockQueue+0x48>
1a000d98:	e7f0      	b.n	1a000d7c <prvUnlockQueue+0x44>
		pxQueue->cRxLock = queueUNLOCKED;
1a000d9a:	23ff      	movs	r3, #255	; 0xff
1a000d9c:	f885 3044 	strb.w	r3, [r5, #68]	; 0x44
	taskEXIT_CRITICAL();
1a000da0:	f001 fd7a 	bl	1a002898 <vPortExitCritical>
}
1a000da4:	bd38      	pop	{r3, r4, r5, pc}
1a000da6:	Address 0x000000001a000da6 is out of bounds.


1a000da8 <xQueueGenericReset>:
{
1a000da8:	b538      	push	{r3, r4, r5, lr}
	configASSERT( pxQueue );
1a000daa:	b1e0      	cbz	r0, 1a000de6 <xQueueGenericReset+0x3e>
1a000dac:	4604      	mov	r4, r0
1a000dae:	460d      	mov	r5, r1
	taskENTER_CRITICAL();
1a000db0:	f001 fd50 	bl	1a002854 <vPortEnterCritical>
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
1a000db4:	6821      	ldr	r1, [r4, #0]
1a000db6:	6be2      	ldr	r2, [r4, #60]	; 0x3c
1a000db8:	6c23      	ldr	r3, [r4, #64]	; 0x40
1a000dba:	fb03 1002 	mla	r0, r3, r2, r1
1a000dbe:	6060      	str	r0, [r4, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
1a000dc0:	2000      	movs	r0, #0
1a000dc2:	63a0      	str	r0, [r4, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
1a000dc4:	60a1      	str	r1, [r4, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
1a000dc6:	3a01      	subs	r2, #1
1a000dc8:	fb02 1303 	mla	r3, r2, r3, r1
1a000dcc:	60e3      	str	r3, [r4, #12]
		pxQueue->cRxLock = queueUNLOCKED;
1a000dce:	23ff      	movs	r3, #255	; 0xff
1a000dd0:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
1a000dd4:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
		if( xNewQueue == pdFALSE )
1a000dd8:	b9ed      	cbnz	r5, 1a000e16 <xQueueGenericReset+0x6e>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
1a000dda:	6923      	ldr	r3, [r4, #16]
1a000ddc:	b963      	cbnz	r3, 1a000df8 <xQueueGenericReset+0x50>
	taskEXIT_CRITICAL();
1a000dde:	f001 fd5b 	bl	1a002898 <vPortExitCritical>
}
1a000de2:	2001      	movs	r0, #1
1a000de4:	bd38      	pop	{r3, r4, r5, pc}
1a000de6:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a000dea:	f383 8811 	msr	BASEPRI, r3
1a000dee:	f3bf 8f6f 	isb	sy
1a000df2:	f3bf 8f4f 	dsb	sy
	configASSERT( pxQueue );
1a000df6:	e7fe      	b.n	1a000df6 <xQueueGenericReset+0x4e>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
1a000df8:	f104 0010 	add.w	r0, r4, #16
1a000dfc:	f001 f8d8 	bl	1a001fb0 <xTaskRemoveFromEventList>
1a000e00:	2800      	cmp	r0, #0
1a000e02:	d0ec      	beq.n	1a000dde <xQueueGenericReset+0x36>
					queueYIELD_IF_USING_PREEMPTION();
1a000e04:	4b08      	ldr	r3, [pc, #32]	; (1a000e28 <xQueueGenericReset+0x80>)
1a000e06:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
1a000e0a:	601a      	str	r2, [r3, #0]
1a000e0c:	f3bf 8f4f 	dsb	sy
1a000e10:	f3bf 8f6f 	isb	sy
1a000e14:	e7e3      	b.n	1a000dde <xQueueGenericReset+0x36>
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
1a000e16:	f104 0010 	add.w	r0, r4, #16
1a000e1a:	f000 fb84 	bl	1a001526 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
1a000e1e:	f104 0024 	add.w	r0, r4, #36	; 0x24
1a000e22:	f000 fb80 	bl	1a001526 <vListInitialise>
1a000e26:	e7da      	b.n	1a000dde <xQueueGenericReset+0x36>
1a000e28:	e000ed04 	.word	0xe000ed04

1a000e2c <prvInitialiseNewQueue>:
{
1a000e2c:	b538      	push	{r3, r4, r5, lr}
1a000e2e:	461d      	mov	r5, r3
1a000e30:	9c04      	ldr	r4, [sp, #16]
	if( uxItemSize == ( UBaseType_t ) 0 )
1a000e32:	460b      	mov	r3, r1
1a000e34:	b949      	cbnz	r1, 1a000e4a <prvInitialiseNewQueue+0x1e>
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
1a000e36:	6024      	str	r4, [r4, #0]
	pxNewQueue->uxLength = uxQueueLength;
1a000e38:	63e0      	str	r0, [r4, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
1a000e3a:	6423      	str	r3, [r4, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
1a000e3c:	2101      	movs	r1, #1
1a000e3e:	4620      	mov	r0, r4
1a000e40:	f7ff ffb2 	bl	1a000da8 <xQueueGenericReset>
		pxNewQueue->ucQueueType = ucQueueType;
1a000e44:	f884 504c 	strb.w	r5, [r4, #76]	; 0x4c
}
1a000e48:	bd38      	pop	{r3, r4, r5, pc}
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
1a000e4a:	6022      	str	r2, [r4, #0]
1a000e4c:	e7f4      	b.n	1a000e38 <prvInitialiseNewQueue+0xc>

1a000e4e <xQueueGenericCreateStatic>:
		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
1a000e4e:	b940      	cbnz	r0, 1a000e62 <xQueueGenericCreateStatic+0x14>
1a000e50:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a000e54:	f383 8811 	msr	BASEPRI, r3
1a000e58:	f3bf 8f6f 	isb	sy
1a000e5c:	f3bf 8f4f 	dsb	sy
1a000e60:	e7fe      	b.n	1a000e60 <xQueueGenericCreateStatic+0x12>
	{
1a000e62:	b510      	push	{r4, lr}
1a000e64:	b084      	sub	sp, #16
1a000e66:	4604      	mov	r4, r0
		configASSERT( pxStaticQueue != NULL );
1a000e68:	b153      	cbz	r3, 1a000e80 <xQueueGenericCreateStatic+0x32>
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
1a000e6a:	b192      	cbz	r2, 1a000e92 <xQueueGenericCreateStatic+0x44>
1a000e6c:	b989      	cbnz	r1, 1a000e92 <xQueueGenericCreateStatic+0x44>
1a000e6e:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a000e72:	f383 8811 	msr	BASEPRI, r3
1a000e76:	f3bf 8f6f 	isb	sy
1a000e7a:	f3bf 8f4f 	dsb	sy
1a000e7e:	e7fe      	b.n	1a000e7e <xQueueGenericCreateStatic+0x30>
1a000e80:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a000e84:	f383 8811 	msr	BASEPRI, r3
1a000e88:	f3bf 8f6f 	isb	sy
1a000e8c:	f3bf 8f4f 	dsb	sy
		configASSERT( pxStaticQueue != NULL );
1a000e90:	e7fe      	b.n	1a000e90 <xQueueGenericCreateStatic+0x42>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
1a000e92:	b16a      	cbz	r2, 1a000eb0 <xQueueGenericCreateStatic+0x62>
			volatile size_t xSize = sizeof( StaticQueue_t );
1a000e94:	2050      	movs	r0, #80	; 0x50
1a000e96:	9003      	str	r0, [sp, #12]
			configASSERT( xSize == sizeof( Queue_t ) );
1a000e98:	9803      	ldr	r0, [sp, #12]
1a000e9a:	2850      	cmp	r0, #80	; 0x50
1a000e9c:	d013      	beq.n	1a000ec6 <xQueueGenericCreateStatic+0x78>
1a000e9e:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a000ea2:	f383 8811 	msr	BASEPRI, r3
1a000ea6:	f3bf 8f6f 	isb	sy
1a000eaa:	f3bf 8f4f 	dsb	sy
1a000eae:	e7fe      	b.n	1a000eae <xQueueGenericCreateStatic+0x60>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
1a000eb0:	2900      	cmp	r1, #0
1a000eb2:	d0ef      	beq.n	1a000e94 <xQueueGenericCreateStatic+0x46>
1a000eb4:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a000eb8:	f383 8811 	msr	BASEPRI, r3
1a000ebc:	f3bf 8f6f 	isb	sy
1a000ec0:	f3bf 8f4f 	dsb	sy
1a000ec4:	e7fe      	b.n	1a000ec4 <xQueueGenericCreateStatic+0x76>
1a000ec6:	4620      	mov	r0, r4
1a000ec8:	461c      	mov	r4, r3
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
1a000eca:	2301      	movs	r3, #1
1a000ecc:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
1a000ed0:	9400      	str	r4, [sp, #0]
1a000ed2:	f89d 3018 	ldrb.w	r3, [sp, #24]
1a000ed6:	f7ff ffa9 	bl	1a000e2c <prvInitialiseNewQueue>
	}
1a000eda:	4620      	mov	r0, r4
1a000edc:	b004      	add	sp, #16
1a000ede:	bd10      	pop	{r4, pc}

1a000ee0 <xQueueGenericCreate>:
		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
1a000ee0:	b940      	cbnz	r0, 1a000ef4 <xQueueGenericCreate+0x14>
1a000ee2:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a000ee6:	f383 8811 	msr	BASEPRI, r3
1a000eea:	f3bf 8f6f 	isb	sy
1a000eee:	f3bf 8f4f 	dsb	sy
1a000ef2:	e7fe      	b.n	1a000ef2 <xQueueGenericCreate+0x12>
	{
1a000ef4:	b5f0      	push	{r4, r5, r6, r7, lr}
1a000ef6:	b083      	sub	sp, #12
1a000ef8:	4606      	mov	r6, r0
		if( uxItemSize == ( UBaseType_t ) 0 )
1a000efa:	b1b1      	cbz	r1, 1a000f2a <xQueueGenericCreate+0x4a>
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
1a000efc:	fb01 f000 	mul.w	r0, r1, r0
1a000f00:	4617      	mov	r7, r2
1a000f02:	460c      	mov	r4, r1
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
1a000f04:	3050      	adds	r0, #80	; 0x50
1a000f06:	f7ff fddf 	bl	1a000ac8 <pvPortMalloc>
		if( pxNewQueue != NULL )
1a000f0a:	4605      	mov	r5, r0
1a000f0c:	b150      	cbz	r0, 1a000f24 <xQueueGenericCreate+0x44>
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
1a000f0e:	2300      	movs	r3, #0
1a000f10:	f880 3046 	strb.w	r3, [r0, #70]	; 0x46
			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
1a000f14:	9000      	str	r0, [sp, #0]
1a000f16:	463b      	mov	r3, r7
1a000f18:	f100 0250 	add.w	r2, r0, #80	; 0x50
1a000f1c:	4621      	mov	r1, r4
1a000f1e:	4630      	mov	r0, r6
1a000f20:	f7ff ff84 	bl	1a000e2c <prvInitialiseNewQueue>
	}
1a000f24:	4628      	mov	r0, r5
1a000f26:	b003      	add	sp, #12
1a000f28:	bdf0      	pop	{r4, r5, r6, r7, pc}
			xQueueSizeInBytes = ( size_t ) 0;
1a000f2a:	2000      	movs	r0, #0
1a000f2c:	e7e8      	b.n	1a000f00 <xQueueGenericCreate+0x20>
1a000f2e:	Address 0x000000001a000f2e is out of bounds.


1a000f30 <xQueueGenericSend>:
{
1a000f30:	b5f0      	push	{r4, r5, r6, r7, lr}
1a000f32:	b085      	sub	sp, #20
1a000f34:	9201      	str	r2, [sp, #4]
	configASSERT( pxQueue );
1a000f36:	b178      	cbz	r0, 1a000f58 <xQueueGenericSend+0x28>
1a000f38:	4604      	mov	r4, r0
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
1a000f3a:	b1b1      	cbz	r1, 1a000f6a <xQueueGenericSend+0x3a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
1a000f3c:	2b02      	cmp	r3, #2
1a000f3e:	d120      	bne.n	1a000f82 <xQueueGenericSend+0x52>
1a000f40:	6be2      	ldr	r2, [r4, #60]	; 0x3c
1a000f42:	2a01      	cmp	r2, #1
1a000f44:	d01d      	beq.n	1a000f82 <xQueueGenericSend+0x52>
1a000f46:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a000f4a:	f383 8811 	msr	BASEPRI, r3
1a000f4e:	f3bf 8f6f 	isb	sy
1a000f52:	f3bf 8f4f 	dsb	sy
1a000f56:	e7fe      	b.n	1a000f56 <xQueueGenericSend+0x26>
1a000f58:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a000f5c:	f383 8811 	msr	BASEPRI, r3
1a000f60:	f3bf 8f6f 	isb	sy
1a000f64:	f3bf 8f4f 	dsb	sy
	configASSERT( pxQueue );
1a000f68:	e7fe      	b.n	1a000f68 <xQueueGenericSend+0x38>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
1a000f6a:	6c02      	ldr	r2, [r0, #64]	; 0x40
1a000f6c:	2a00      	cmp	r2, #0
1a000f6e:	d0e5      	beq.n	1a000f3c <xQueueGenericSend+0xc>
1a000f70:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a000f74:	f383 8811 	msr	BASEPRI, r3
1a000f78:	f3bf 8f6f 	isb	sy
1a000f7c:	f3bf 8f4f 	dsb	sy
1a000f80:	e7fe      	b.n	1a000f80 <xQueueGenericSend+0x50>
1a000f82:	461e      	mov	r6, r3
1a000f84:	460f      	mov	r7, r1
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
1a000f86:	f001 f8ad 	bl	1a0020e4 <xTaskGetSchedulerState>
1a000f8a:	b950      	cbnz	r0, 1a000fa2 <xQueueGenericSend+0x72>
1a000f8c:	9b01      	ldr	r3, [sp, #4]
1a000f8e:	b153      	cbz	r3, 1a000fa6 <xQueueGenericSend+0x76>
1a000f90:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a000f94:	f383 8811 	msr	BASEPRI, r3
1a000f98:	f3bf 8f6f 	isb	sy
1a000f9c:	f3bf 8f4f 	dsb	sy
1a000fa0:	e7fe      	b.n	1a000fa0 <xQueueGenericSend+0x70>
1a000fa2:	2500      	movs	r5, #0
1a000fa4:	e03b      	b.n	1a00101e <xQueueGenericSend+0xee>
1a000fa6:	2500      	movs	r5, #0
1a000fa8:	e039      	b.n	1a00101e <xQueueGenericSend+0xee>
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
1a000faa:	4632      	mov	r2, r6
1a000fac:	4639      	mov	r1, r7
1a000fae:	4620      	mov	r0, r4
1a000fb0:	f7ff fe75 	bl	1a000c9e <prvCopyDataToQueue>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
1a000fb4:	6a63      	ldr	r3, [r4, #36]	; 0x24
1a000fb6:	b96b      	cbnz	r3, 1a000fd4 <xQueueGenericSend+0xa4>
					else if( xYieldRequired != pdFALSE )
1a000fb8:	b138      	cbz	r0, 1a000fca <xQueueGenericSend+0x9a>
						queueYIELD_IF_USING_PREEMPTION();
1a000fba:	4b3c      	ldr	r3, [pc, #240]	; (1a0010ac <xQueueGenericSend+0x17c>)
1a000fbc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
1a000fc0:	601a      	str	r2, [r3, #0]
1a000fc2:	f3bf 8f4f 	dsb	sy
1a000fc6:	f3bf 8f6f 	isb	sy
				taskEXIT_CRITICAL();
1a000fca:	f001 fc65 	bl	1a002898 <vPortExitCritical>
				return pdPASS;
1a000fce:	2001      	movs	r0, #1
}
1a000fd0:	b005      	add	sp, #20
1a000fd2:	bdf0      	pop	{r4, r5, r6, r7, pc}
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
1a000fd4:	f104 0024 	add.w	r0, r4, #36	; 0x24
1a000fd8:	f000 ffea 	bl	1a001fb0 <xTaskRemoveFromEventList>
1a000fdc:	2800      	cmp	r0, #0
1a000fde:	d0f4      	beq.n	1a000fca <xQueueGenericSend+0x9a>
							queueYIELD_IF_USING_PREEMPTION();
1a000fe0:	4b32      	ldr	r3, [pc, #200]	; (1a0010ac <xQueueGenericSend+0x17c>)
1a000fe2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
1a000fe6:	601a      	str	r2, [r3, #0]
1a000fe8:	f3bf 8f4f 	dsb	sy
1a000fec:	f3bf 8f6f 	isb	sy
1a000ff0:	e7eb      	b.n	1a000fca <xQueueGenericSend+0x9a>
					taskEXIT_CRITICAL();
1a000ff2:	f001 fc51 	bl	1a002898 <vPortExitCritical>
					return errQUEUE_FULL;
1a000ff6:	2000      	movs	r0, #0
1a000ff8:	e7ea      	b.n	1a000fd0 <xQueueGenericSend+0xa0>
					vTaskInternalSetTimeOutState( &xTimeOut );
1a000ffa:	a802      	add	r0, sp, #8
1a000ffc:	f001 f81e 	bl	1a00203c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
1a001000:	2501      	movs	r5, #1
1a001002:	e019      	b.n	1a001038 <xQueueGenericSend+0x108>
		prvLockQueue( pxQueue );
1a001004:	2300      	movs	r3, #0
1a001006:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
1a00100a:	e021      	b.n	1a001050 <xQueueGenericSend+0x120>
1a00100c:	2300      	movs	r3, #0
1a00100e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
1a001012:	e023      	b.n	1a00105c <xQueueGenericSend+0x12c>
				prvUnlockQueue( pxQueue );
1a001014:	4620      	mov	r0, r4
1a001016:	f7ff fe8f 	bl	1a000d38 <prvUnlockQueue>
				( void ) xTaskResumeAll();
1a00101a:	f000 fe5f 	bl	1a001cdc <xTaskResumeAll>
		taskENTER_CRITICAL();
1a00101e:	f001 fc19 	bl	1a002854 <vPortEnterCritical>
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
1a001022:	6ba2      	ldr	r2, [r4, #56]	; 0x38
1a001024:	6be3      	ldr	r3, [r4, #60]	; 0x3c
1a001026:	429a      	cmp	r2, r3
1a001028:	d3bf      	bcc.n	1a000faa <xQueueGenericSend+0x7a>
1a00102a:	2e02      	cmp	r6, #2
1a00102c:	d0bd      	beq.n	1a000faa <xQueueGenericSend+0x7a>
				if( xTicksToWait == ( TickType_t ) 0 )
1a00102e:	9b01      	ldr	r3, [sp, #4]
1a001030:	2b00      	cmp	r3, #0
1a001032:	d0de      	beq.n	1a000ff2 <xQueueGenericSend+0xc2>
				else if( xEntryTimeSet == pdFALSE )
1a001034:	2d00      	cmp	r5, #0
1a001036:	d0e0      	beq.n	1a000ffa <xQueueGenericSend+0xca>
		taskEXIT_CRITICAL();
1a001038:	f001 fc2e 	bl	1a002898 <vPortExitCritical>
		vTaskSuspendAll();
1a00103c:	f000 fdb4 	bl	1a001ba8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
1a001040:	f001 fc08 	bl	1a002854 <vPortEnterCritical>
1a001044:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
1a001048:	b25b      	sxtb	r3, r3
1a00104a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
1a00104e:	d0d9      	beq.n	1a001004 <xQueueGenericSend+0xd4>
1a001050:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
1a001054:	b25b      	sxtb	r3, r3
1a001056:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
1a00105a:	d0d7      	beq.n	1a00100c <xQueueGenericSend+0xdc>
1a00105c:	f001 fc1c 	bl	1a002898 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
1a001060:	a901      	add	r1, sp, #4
1a001062:	a802      	add	r0, sp, #8
1a001064:	f000 fff6 	bl	1a002054 <xTaskCheckForTimeOut>
1a001068:	b9c8      	cbnz	r0, 1a00109e <xQueueGenericSend+0x16e>
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
1a00106a:	4620      	mov	r0, r4
1a00106c:	f7ff fdfb 	bl	1a000c66 <prvIsQueueFull>
1a001070:	2800      	cmp	r0, #0
1a001072:	d0cf      	beq.n	1a001014 <xQueueGenericSend+0xe4>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
1a001074:	9901      	ldr	r1, [sp, #4]
1a001076:	f104 0010 	add.w	r0, r4, #16
1a00107a:	f000 ff65 	bl	1a001f48 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
1a00107e:	4620      	mov	r0, r4
1a001080:	f7ff fe5a 	bl	1a000d38 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
1a001084:	f000 fe2a 	bl	1a001cdc <xTaskResumeAll>
1a001088:	2800      	cmp	r0, #0
1a00108a:	d1c8      	bne.n	1a00101e <xQueueGenericSend+0xee>
					portYIELD_WITHIN_API();
1a00108c:	4b07      	ldr	r3, [pc, #28]	; (1a0010ac <xQueueGenericSend+0x17c>)
1a00108e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
1a001092:	601a      	str	r2, [r3, #0]
1a001094:	f3bf 8f4f 	dsb	sy
1a001098:	f3bf 8f6f 	isb	sy
1a00109c:	e7bf      	b.n	1a00101e <xQueueGenericSend+0xee>
			prvUnlockQueue( pxQueue );
1a00109e:	4620      	mov	r0, r4
1a0010a0:	f7ff fe4a 	bl	1a000d38 <prvUnlockQueue>
			( void ) xTaskResumeAll();
1a0010a4:	f000 fe1a 	bl	1a001cdc <xTaskResumeAll>
			return errQUEUE_FULL;
1a0010a8:	2000      	movs	r0, #0
1a0010aa:	e791      	b.n	1a000fd0 <xQueueGenericSend+0xa0>
1a0010ac:	e000ed04 	.word	0xe000ed04

1a0010b0 <prvInitialiseMutex>:
		if( pxNewQueue != NULL )
1a0010b0:	b148      	cbz	r0, 1a0010c6 <prvInitialiseMutex+0x16>
	{
1a0010b2:	b508      	push	{r3, lr}
			pxNewQueue->pxMutexHolder = NULL;
1a0010b4:	2100      	movs	r1, #0
1a0010b6:	6041      	str	r1, [r0, #4]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
1a0010b8:	6001      	str	r1, [r0, #0]
			pxNewQueue->u.uxRecursiveCallCount = 0;
1a0010ba:	60c1      	str	r1, [r0, #12]
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
1a0010bc:	460b      	mov	r3, r1
1a0010be:	460a      	mov	r2, r1
1a0010c0:	f7ff ff36 	bl	1a000f30 <xQueueGenericSend>
	}
1a0010c4:	bd08      	pop	{r3, pc}
1a0010c6:	4770      	bx	lr

1a0010c8 <xQueueCreateMutex>:
	{
1a0010c8:	b510      	push	{r4, lr}
		pxNewQueue = ( Queue_t * ) xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
1a0010ca:	4602      	mov	r2, r0
1a0010cc:	2100      	movs	r1, #0
1a0010ce:	2001      	movs	r0, #1
1a0010d0:	f7ff ff06 	bl	1a000ee0 <xQueueGenericCreate>
1a0010d4:	4604      	mov	r4, r0
		prvInitialiseMutex( pxNewQueue );
1a0010d6:	f7ff ffeb 	bl	1a0010b0 <prvInitialiseMutex>
	}
1a0010da:	4620      	mov	r0, r4
1a0010dc:	bd10      	pop	{r4, pc}

1a0010de <xQueueGenericSendFromISR>:
{
1a0010de:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	configASSERT( pxQueue );
1a0010e2:	b178      	cbz	r0, 1a001104 <xQueueGenericSendFromISR+0x26>
1a0010e4:	4604      	mov	r4, r0
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
1a0010e6:	b1b1      	cbz	r1, 1a001116 <xQueueGenericSendFromISR+0x38>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
1a0010e8:	2b02      	cmp	r3, #2
1a0010ea:	d120      	bne.n	1a00112e <xQueueGenericSendFromISR+0x50>
1a0010ec:	6be0      	ldr	r0, [r4, #60]	; 0x3c
1a0010ee:	2801      	cmp	r0, #1
1a0010f0:	d01d      	beq.n	1a00112e <xQueueGenericSendFromISR+0x50>
1a0010f2:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a0010f6:	f383 8811 	msr	BASEPRI, r3
1a0010fa:	f3bf 8f6f 	isb	sy
1a0010fe:	f3bf 8f4f 	dsb	sy
1a001102:	e7fe      	b.n	1a001102 <xQueueGenericSendFromISR+0x24>
1a001104:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a001108:	f383 8811 	msr	BASEPRI, r3
1a00110c:	f3bf 8f6f 	isb	sy
1a001110:	f3bf 8f4f 	dsb	sy
	configASSERT( pxQueue );
1a001114:	e7fe      	b.n	1a001114 <xQueueGenericSendFromISR+0x36>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
1a001116:	6c00      	ldr	r0, [r0, #64]	; 0x40
1a001118:	2800      	cmp	r0, #0
1a00111a:	d0e5      	beq.n	1a0010e8 <xQueueGenericSendFromISR+0xa>
1a00111c:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a001120:	f383 8811 	msr	BASEPRI, r3
1a001124:	f3bf 8f6f 	isb	sy
1a001128:	f3bf 8f4f 	dsb	sy
1a00112c:	e7fe      	b.n	1a00112c <xQueueGenericSendFromISR+0x4e>
1a00112e:	461f      	mov	r7, r3
1a001130:	4690      	mov	r8, r2
1a001132:	4689      	mov	r9, r1
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
1a001134:	f001 fcb8 	bl	1a002aa8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
1a001138:	f3ef 8611 	mrs	r6, BASEPRI
1a00113c:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a001140:	f383 8811 	msr	BASEPRI, r3
1a001144:	f3bf 8f6f 	isb	sy
1a001148:	f3bf 8f4f 	dsb	sy
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
1a00114c:	6ba2      	ldr	r2, [r4, #56]	; 0x38
1a00114e:	6be3      	ldr	r3, [r4, #60]	; 0x3c
1a001150:	429a      	cmp	r2, r3
1a001152:	d306      	bcc.n	1a001162 <xQueueGenericSendFromISR+0x84>
1a001154:	2f02      	cmp	r7, #2
1a001156:	d004      	beq.n	1a001162 <xQueueGenericSendFromISR+0x84>
			xReturn = errQUEUE_FULL;
1a001158:	2000      	movs	r0, #0
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
1a00115a:	f386 8811 	msr	BASEPRI, r6
}
1a00115e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			const int8_t cTxLock = pxQueue->cTxLock;
1a001162:	f894 5045 	ldrb.w	r5, [r4, #69]	; 0x45
1a001166:	b26d      	sxtb	r5, r5
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
1a001168:	463a      	mov	r2, r7
1a00116a:	4649      	mov	r1, r9
1a00116c:	4620      	mov	r0, r4
1a00116e:	f7ff fd96 	bl	1a000c9e <prvCopyDataToQueue>
			if( cTxLock == queueUNLOCKED )
1a001172:	f1b5 3fff 	cmp.w	r5, #4294967295	; 0xffffffff
1a001176:	d005      	beq.n	1a001184 <xQueueGenericSendFromISR+0xa6>
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
1a001178:	1c6b      	adds	r3, r5, #1
1a00117a:	b25b      	sxtb	r3, r3
1a00117c:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
			xReturn = pdPASS;
1a001180:	2001      	movs	r0, #1
1a001182:	e7ea      	b.n	1a00115a <xQueueGenericSendFromISR+0x7c>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
1a001184:	6a63      	ldr	r3, [r4, #36]	; 0x24
1a001186:	b90b      	cbnz	r3, 1a00118c <xQueueGenericSendFromISR+0xae>
			xReturn = pdPASS;
1a001188:	2001      	movs	r0, #1
1a00118a:	e7e6      	b.n	1a00115a <xQueueGenericSendFromISR+0x7c>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
1a00118c:	f104 0024 	add.w	r0, r4, #36	; 0x24
1a001190:	f000 ff0e 	bl	1a001fb0 <xTaskRemoveFromEventList>
1a001194:	b130      	cbz	r0, 1a0011a4 <xQueueGenericSendFromISR+0xc6>
							if( pxHigherPriorityTaskWoken != NULL )
1a001196:	f1b8 0f00 	cmp.w	r8, #0
1a00119a:	d005      	beq.n	1a0011a8 <xQueueGenericSendFromISR+0xca>
								*pxHigherPriorityTaskWoken = pdTRUE;
1a00119c:	2001      	movs	r0, #1
1a00119e:	f8c8 0000 	str.w	r0, [r8]
1a0011a2:	e7da      	b.n	1a00115a <xQueueGenericSendFromISR+0x7c>
			xReturn = pdPASS;
1a0011a4:	2001      	movs	r0, #1
1a0011a6:	e7d8      	b.n	1a00115a <xQueueGenericSendFromISR+0x7c>
1a0011a8:	2001      	movs	r0, #1
1a0011aa:	e7d6      	b.n	1a00115a <xQueueGenericSendFromISR+0x7c>

1a0011ac <xQueueReceive>:
{
1a0011ac:	b5f0      	push	{r4, r5, r6, r7, lr}
1a0011ae:	b085      	sub	sp, #20
1a0011b0:	9201      	str	r2, [sp, #4]
	configASSERT( ( pxQueue ) );
1a0011b2:	b180      	cbz	r0, 1a0011d6 <xQueueReceive+0x2a>
1a0011b4:	4604      	mov	r4, r0
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
1a0011b6:	b1b9      	cbz	r1, 1a0011e8 <xQueueReceive+0x3c>
1a0011b8:	460f      	mov	r7, r1
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
1a0011ba:	f000 ff93 	bl	1a0020e4 <xTaskGetSchedulerState>
1a0011be:	b9f8      	cbnz	r0, 1a001200 <xQueueReceive+0x54>
1a0011c0:	9b01      	ldr	r3, [sp, #4]
1a0011c2:	b1fb      	cbz	r3, 1a001204 <xQueueReceive+0x58>
	__asm volatile
1a0011c4:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a0011c8:	f383 8811 	msr	BASEPRI, r3
1a0011cc:	f3bf 8f6f 	isb	sy
1a0011d0:	f3bf 8f4f 	dsb	sy
1a0011d4:	e7fe      	b.n	1a0011d4 <xQueueReceive+0x28>
1a0011d6:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a0011da:	f383 8811 	msr	BASEPRI, r3
1a0011de:	f3bf 8f6f 	isb	sy
1a0011e2:	f3bf 8f4f 	dsb	sy
	configASSERT( ( pxQueue ) );
1a0011e6:	e7fe      	b.n	1a0011e6 <xQueueReceive+0x3a>
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
1a0011e8:	6c03      	ldr	r3, [r0, #64]	; 0x40
1a0011ea:	2b00      	cmp	r3, #0
1a0011ec:	d0e4      	beq.n	1a0011b8 <xQueueReceive+0xc>
1a0011ee:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a0011f2:	f383 8811 	msr	BASEPRI, r3
1a0011f6:	f3bf 8f6f 	isb	sy
1a0011fa:	f3bf 8f4f 	dsb	sy
1a0011fe:	e7fe      	b.n	1a0011fe <xQueueReceive+0x52>
1a001200:	2600      	movs	r6, #0
1a001202:	e03e      	b.n	1a001282 <xQueueReceive+0xd6>
1a001204:	2600      	movs	r6, #0
1a001206:	e03c      	b.n	1a001282 <xQueueReceive+0xd6>
				prvCopyDataFromQueue( pxQueue, pvBuffer );
1a001208:	4639      	mov	r1, r7
1a00120a:	4620      	mov	r0, r4
1a00120c:	f7ff fd82 	bl	1a000d14 <prvCopyDataFromQueue>
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
1a001210:	3d01      	subs	r5, #1
1a001212:	63a5      	str	r5, [r4, #56]	; 0x38
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
1a001214:	6923      	ldr	r3, [r4, #16]
1a001216:	b923      	cbnz	r3, 1a001222 <xQueueReceive+0x76>
				taskEXIT_CRITICAL();
1a001218:	f001 fb3e 	bl	1a002898 <vPortExitCritical>
				return pdPASS;
1a00121c:	2001      	movs	r0, #1
}
1a00121e:	b005      	add	sp, #20
1a001220:	bdf0      	pop	{r4, r5, r6, r7, pc}
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
1a001222:	f104 0010 	add.w	r0, r4, #16
1a001226:	f000 fec3 	bl	1a001fb0 <xTaskRemoveFromEventList>
1a00122a:	2800      	cmp	r0, #0
1a00122c:	d0f4      	beq.n	1a001218 <xQueueReceive+0x6c>
						queueYIELD_IF_USING_PREEMPTION();
1a00122e:	4b35      	ldr	r3, [pc, #212]	; (1a001304 <xQueueReceive+0x158>)
1a001230:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
1a001234:	601a      	str	r2, [r3, #0]
1a001236:	f3bf 8f4f 	dsb	sy
1a00123a:	f3bf 8f6f 	isb	sy
1a00123e:	e7eb      	b.n	1a001218 <xQueueReceive+0x6c>
					taskEXIT_CRITICAL();
1a001240:	f001 fb2a 	bl	1a002898 <vPortExitCritical>
					return errQUEUE_EMPTY;
1a001244:	2000      	movs	r0, #0
1a001246:	e7ea      	b.n	1a00121e <xQueueReceive+0x72>
					vTaskInternalSetTimeOutState( &xTimeOut );
1a001248:	a802      	add	r0, sp, #8
1a00124a:	f000 fef7 	bl	1a00203c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
1a00124e:	2601      	movs	r6, #1
1a001250:	e021      	b.n	1a001296 <xQueueReceive+0xea>
		prvLockQueue( pxQueue );
1a001252:	2300      	movs	r3, #0
1a001254:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
1a001258:	e029      	b.n	1a0012ae <xQueueReceive+0x102>
1a00125a:	2300      	movs	r3, #0
1a00125c:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
1a001260:	e02b      	b.n	1a0012ba <xQueueReceive+0x10e>
				prvUnlockQueue( pxQueue );
1a001262:	4620      	mov	r0, r4
1a001264:	f7ff fd68 	bl	1a000d38 <prvUnlockQueue>
				( void ) xTaskResumeAll();
1a001268:	f000 fd38 	bl	1a001cdc <xTaskResumeAll>
1a00126c:	e009      	b.n	1a001282 <xQueueReceive+0xd6>
			prvUnlockQueue( pxQueue );
1a00126e:	4620      	mov	r0, r4
1a001270:	f7ff fd62 	bl	1a000d38 <prvUnlockQueue>
			( void ) xTaskResumeAll();
1a001274:	f000 fd32 	bl	1a001cdc <xTaskResumeAll>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
1a001278:	4620      	mov	r0, r4
1a00127a:	f7ff fd03 	bl	1a000c84 <prvIsQueueEmpty>
1a00127e:	2800      	cmp	r0, #0
1a001280:	d13d      	bne.n	1a0012fe <xQueueReceive+0x152>
		taskENTER_CRITICAL();
1a001282:	f001 fae7 	bl	1a002854 <vPortEnterCritical>
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
1a001286:	6ba5      	ldr	r5, [r4, #56]	; 0x38
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
1a001288:	2d00      	cmp	r5, #0
1a00128a:	d1bd      	bne.n	1a001208 <xQueueReceive+0x5c>
				if( xTicksToWait == ( TickType_t ) 0 )
1a00128c:	9b01      	ldr	r3, [sp, #4]
1a00128e:	2b00      	cmp	r3, #0
1a001290:	d0d6      	beq.n	1a001240 <xQueueReceive+0x94>
				else if( xEntryTimeSet == pdFALSE )
1a001292:	2e00      	cmp	r6, #0
1a001294:	d0d8      	beq.n	1a001248 <xQueueReceive+0x9c>
		taskEXIT_CRITICAL();
1a001296:	f001 faff 	bl	1a002898 <vPortExitCritical>
		vTaskSuspendAll();
1a00129a:	f000 fc85 	bl	1a001ba8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
1a00129e:	f001 fad9 	bl	1a002854 <vPortEnterCritical>
1a0012a2:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
1a0012a6:	b25b      	sxtb	r3, r3
1a0012a8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
1a0012ac:	d0d1      	beq.n	1a001252 <xQueueReceive+0xa6>
1a0012ae:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
1a0012b2:	b25b      	sxtb	r3, r3
1a0012b4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
1a0012b8:	d0cf      	beq.n	1a00125a <xQueueReceive+0xae>
1a0012ba:	f001 faed 	bl	1a002898 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
1a0012be:	a901      	add	r1, sp, #4
1a0012c0:	a802      	add	r0, sp, #8
1a0012c2:	f000 fec7 	bl	1a002054 <xTaskCheckForTimeOut>
1a0012c6:	2800      	cmp	r0, #0
1a0012c8:	d1d1      	bne.n	1a00126e <xQueueReceive+0xc2>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
1a0012ca:	4620      	mov	r0, r4
1a0012cc:	f7ff fcda 	bl	1a000c84 <prvIsQueueEmpty>
1a0012d0:	2800      	cmp	r0, #0
1a0012d2:	d0c6      	beq.n	1a001262 <xQueueReceive+0xb6>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
1a0012d4:	9901      	ldr	r1, [sp, #4]
1a0012d6:	f104 0024 	add.w	r0, r4, #36	; 0x24
1a0012da:	f000 fe35 	bl	1a001f48 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
1a0012de:	4620      	mov	r0, r4
1a0012e0:	f7ff fd2a 	bl	1a000d38 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
1a0012e4:	f000 fcfa 	bl	1a001cdc <xTaskResumeAll>
1a0012e8:	2800      	cmp	r0, #0
1a0012ea:	d1ca      	bne.n	1a001282 <xQueueReceive+0xd6>
					portYIELD_WITHIN_API();
1a0012ec:	4b05      	ldr	r3, [pc, #20]	; (1a001304 <xQueueReceive+0x158>)
1a0012ee:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
1a0012f2:	601a      	str	r2, [r3, #0]
1a0012f4:	f3bf 8f4f 	dsb	sy
1a0012f8:	f3bf 8f6f 	isb	sy
1a0012fc:	e7c1      	b.n	1a001282 <xQueueReceive+0xd6>
				return errQUEUE_EMPTY;
1a0012fe:	2000      	movs	r0, #0
1a001300:	e78d      	b.n	1a00121e <xQueueReceive+0x72>
1a001302:	bf00      	nop
1a001304:	e000ed04 	.word	0xe000ed04

1a001308 <xQueueSemaphoreTake>:
{
1a001308:	b570      	push	{r4, r5, r6, lr}
1a00130a:	b084      	sub	sp, #16
1a00130c:	9101      	str	r1, [sp, #4]
	configASSERT( ( pxQueue ) );
1a00130e:	b158      	cbz	r0, 1a001328 <xQueueSemaphoreTake+0x20>
1a001310:	4604      	mov	r4, r0
	configASSERT( pxQueue->uxItemSize == 0 );
1a001312:	6c03      	ldr	r3, [r0, #64]	; 0x40
1a001314:	b18b      	cbz	r3, 1a00133a <xQueueSemaphoreTake+0x32>
1a001316:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a00131a:	f383 8811 	msr	BASEPRI, r3
1a00131e:	f3bf 8f6f 	isb	sy
1a001322:	f3bf 8f4f 	dsb	sy
1a001326:	e7fe      	b.n	1a001326 <xQueueSemaphoreTake+0x1e>
1a001328:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a00132c:	f383 8811 	msr	BASEPRI, r3
1a001330:	f3bf 8f6f 	isb	sy
1a001334:	f3bf 8f4f 	dsb	sy
	configASSERT( ( pxQueue ) );
1a001338:	e7fe      	b.n	1a001338 <xQueueSemaphoreTake+0x30>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
1a00133a:	f000 fed3 	bl	1a0020e4 <xTaskGetSchedulerState>
1a00133e:	b950      	cbnz	r0, 1a001356 <xQueueSemaphoreTake+0x4e>
1a001340:	9b01      	ldr	r3, [sp, #4]
1a001342:	b15b      	cbz	r3, 1a00135c <xQueueSemaphoreTake+0x54>
1a001344:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a001348:	f383 8811 	msr	BASEPRI, r3
1a00134c:	f3bf 8f6f 	isb	sy
1a001350:	f3bf 8f4f 	dsb	sy
1a001354:	e7fe      	b.n	1a001354 <xQueueSemaphoreTake+0x4c>
1a001356:	2500      	movs	r5, #0
1a001358:	462e      	mov	r6, r5
1a00135a:	e054      	b.n	1a001406 <xQueueSemaphoreTake+0xfe>
1a00135c:	2500      	movs	r5, #0
1a00135e:	462e      	mov	r6, r5
1a001360:	e051      	b.n	1a001406 <xQueueSemaphoreTake+0xfe>
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
1a001362:	3b01      	subs	r3, #1
1a001364:	63a3      	str	r3, [r4, #56]	; 0x38
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
1a001366:	6823      	ldr	r3, [r4, #0]
1a001368:	b13b      	cbz	r3, 1a00137a <xQueueSemaphoreTake+0x72>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
1a00136a:	6923      	ldr	r3, [r4, #16]
1a00136c:	b94b      	cbnz	r3, 1a001382 <xQueueSemaphoreTake+0x7a>
				taskEXIT_CRITICAL();
1a00136e:	f001 fa93 	bl	1a002898 <vPortExitCritical>
				return pdPASS;
1a001372:	2501      	movs	r5, #1
}
1a001374:	4628      	mov	r0, r5
1a001376:	b004      	add	sp, #16
1a001378:	bd70      	pop	{r4, r5, r6, pc}
						pxQueue->pxMutexHolder = ( int8_t * ) pvTaskIncrementMutexHeldCount(); /*lint !e961 Cast is not redundant as TaskHandle_t is a typedef. */
1a00137a:	f000 ffdb 	bl	1a002334 <pvTaskIncrementMutexHeldCount>
1a00137e:	6060      	str	r0, [r4, #4]
1a001380:	e7f3      	b.n	1a00136a <xQueueSemaphoreTake+0x62>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
1a001382:	f104 0010 	add.w	r0, r4, #16
1a001386:	f000 fe13 	bl	1a001fb0 <xTaskRemoveFromEventList>
1a00138a:	2800      	cmp	r0, #0
1a00138c:	d0ef      	beq.n	1a00136e <xQueueSemaphoreTake+0x66>
						queueYIELD_IF_USING_PREEMPTION();
1a00138e:	4b46      	ldr	r3, [pc, #280]	; (1a0014a8 <xQueueSemaphoreTake+0x1a0>)
1a001390:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
1a001394:	601a      	str	r2, [r3, #0]
1a001396:	f3bf 8f4f 	dsb	sy
1a00139a:	f3bf 8f6f 	isb	sy
1a00139e:	e7e6      	b.n	1a00136e <xQueueSemaphoreTake+0x66>
						configASSERT( xInheritanceOccurred == pdFALSE );
1a0013a0:	b145      	cbz	r5, 1a0013b4 <xQueueSemaphoreTake+0xac>
1a0013a2:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a0013a6:	f383 8811 	msr	BASEPRI, r3
1a0013aa:	f3bf 8f6f 	isb	sy
1a0013ae:	f3bf 8f4f 	dsb	sy
1a0013b2:	e7fe      	b.n	1a0013b2 <xQueueSemaphoreTake+0xaa>
					taskEXIT_CRITICAL();
1a0013b4:	f001 fa70 	bl	1a002898 <vPortExitCritical>
					return errQUEUE_EMPTY;
1a0013b8:	e7dc      	b.n	1a001374 <xQueueSemaphoreTake+0x6c>
					vTaskInternalSetTimeOutState( &xTimeOut );
1a0013ba:	a802      	add	r0, sp, #8
1a0013bc:	f000 fe3e 	bl	1a00203c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
1a0013c0:	2601      	movs	r6, #1
1a0013c2:	e02a      	b.n	1a00141a <xQueueSemaphoreTake+0x112>
		prvLockQueue( pxQueue );
1a0013c4:	2300      	movs	r3, #0
1a0013c6:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
1a0013ca:	e032      	b.n	1a001432 <xQueueSemaphoreTake+0x12a>
1a0013cc:	2300      	movs	r3, #0
1a0013ce:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
1a0013d2:	e034      	b.n	1a00143e <xQueueSemaphoreTake+0x136>
						taskENTER_CRITICAL();
1a0013d4:	f001 fa3e 	bl	1a002854 <vPortEnterCritical>
							xInheritanceOccurred = xTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
1a0013d8:	6860      	ldr	r0, [r4, #4]
1a0013da:	f000 fe93 	bl	1a002104 <xTaskPriorityInherit>
1a0013de:	4605      	mov	r5, r0
						taskEXIT_CRITICAL();
1a0013e0:	f001 fa5a 	bl	1a002898 <vPortExitCritical>
1a0013e4:	e03b      	b.n	1a00145e <xQueueSemaphoreTake+0x156>
				prvUnlockQueue( pxQueue );
1a0013e6:	4620      	mov	r0, r4
1a0013e8:	f7ff fca6 	bl	1a000d38 <prvUnlockQueue>
				( void ) xTaskResumeAll();
1a0013ec:	f000 fc76 	bl	1a001cdc <xTaskResumeAll>
1a0013f0:	e009      	b.n	1a001406 <xQueueSemaphoreTake+0xfe>
			prvUnlockQueue( pxQueue );
1a0013f2:	4620      	mov	r0, r4
1a0013f4:	f7ff fca0 	bl	1a000d38 <prvUnlockQueue>
			( void ) xTaskResumeAll();
1a0013f8:	f000 fc70 	bl	1a001cdc <xTaskResumeAll>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
1a0013fc:	4620      	mov	r0, r4
1a0013fe:	f7ff fc41 	bl	1a000c84 <prvIsQueueEmpty>
1a001402:	2800      	cmp	r0, #0
1a001404:	d140      	bne.n	1a001488 <xQueueSemaphoreTake+0x180>
		taskENTER_CRITICAL();
1a001406:	f001 fa25 	bl	1a002854 <vPortEnterCritical>
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
1a00140a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
1a00140c:	2b00      	cmp	r3, #0
1a00140e:	d1a8      	bne.n	1a001362 <xQueueSemaphoreTake+0x5a>
				if( xTicksToWait == ( TickType_t ) 0 )
1a001410:	9b01      	ldr	r3, [sp, #4]
1a001412:	2b00      	cmp	r3, #0
1a001414:	d0c4      	beq.n	1a0013a0 <xQueueSemaphoreTake+0x98>
				else if( xEntryTimeSet == pdFALSE )
1a001416:	2e00      	cmp	r6, #0
1a001418:	d0cf      	beq.n	1a0013ba <xQueueSemaphoreTake+0xb2>
		taskEXIT_CRITICAL();
1a00141a:	f001 fa3d 	bl	1a002898 <vPortExitCritical>
		vTaskSuspendAll();
1a00141e:	f000 fbc3 	bl	1a001ba8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
1a001422:	f001 fa17 	bl	1a002854 <vPortEnterCritical>
1a001426:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
1a00142a:	b25b      	sxtb	r3, r3
1a00142c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
1a001430:	d0c8      	beq.n	1a0013c4 <xQueueSemaphoreTake+0xbc>
1a001432:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
1a001436:	b25b      	sxtb	r3, r3
1a001438:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
1a00143c:	d0c6      	beq.n	1a0013cc <xQueueSemaphoreTake+0xc4>
1a00143e:	f001 fa2b 	bl	1a002898 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
1a001442:	a901      	add	r1, sp, #4
1a001444:	a802      	add	r0, sp, #8
1a001446:	f000 fe05 	bl	1a002054 <xTaskCheckForTimeOut>
1a00144a:	2800      	cmp	r0, #0
1a00144c:	d1d1      	bne.n	1a0013f2 <xQueueSemaphoreTake+0xea>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
1a00144e:	4620      	mov	r0, r4
1a001450:	f7ff fc18 	bl	1a000c84 <prvIsQueueEmpty>
1a001454:	2800      	cmp	r0, #0
1a001456:	d0c6      	beq.n	1a0013e6 <xQueueSemaphoreTake+0xde>
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
1a001458:	6823      	ldr	r3, [r4, #0]
1a00145a:	2b00      	cmp	r3, #0
1a00145c:	d0ba      	beq.n	1a0013d4 <xQueueSemaphoreTake+0xcc>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
1a00145e:	9901      	ldr	r1, [sp, #4]
1a001460:	f104 0024 	add.w	r0, r4, #36	; 0x24
1a001464:	f000 fd70 	bl	1a001f48 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
1a001468:	4620      	mov	r0, r4
1a00146a:	f7ff fc65 	bl	1a000d38 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
1a00146e:	f000 fc35 	bl	1a001cdc <xTaskResumeAll>
1a001472:	2800      	cmp	r0, #0
1a001474:	d1c7      	bne.n	1a001406 <xQueueSemaphoreTake+0xfe>
					portYIELD_WITHIN_API();
1a001476:	4b0c      	ldr	r3, [pc, #48]	; (1a0014a8 <xQueueSemaphoreTake+0x1a0>)
1a001478:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
1a00147c:	601a      	str	r2, [r3, #0]
1a00147e:	f3bf 8f4f 	dsb	sy
1a001482:	f3bf 8f6f 	isb	sy
1a001486:	e7be      	b.n	1a001406 <xQueueSemaphoreTake+0xfe>
					if( xInheritanceOccurred != pdFALSE )
1a001488:	b90d      	cbnz	r5, 1a00148e <xQueueSemaphoreTake+0x186>
				return errQUEUE_EMPTY;
1a00148a:	2500      	movs	r5, #0
1a00148c:	e772      	b.n	1a001374 <xQueueSemaphoreTake+0x6c>
						taskENTER_CRITICAL();
1a00148e:	f001 f9e1 	bl	1a002854 <vPortEnterCritical>
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
1a001492:	4620      	mov	r0, r4
1a001494:	f7ff fbde 	bl	1a000c54 <prvGetDisinheritPriorityAfterTimeout>
							vTaskPriorityDisinheritAfterTimeout( ( void * ) pxQueue->pxMutexHolder, uxHighestWaitingPriority );
1a001498:	4601      	mov	r1, r0
1a00149a:	6860      	ldr	r0, [r4, #4]
1a00149c:	f000 feea 	bl	1a002274 <vTaskPriorityDisinheritAfterTimeout>
						taskEXIT_CRITICAL();
1a0014a0:	f001 f9fa 	bl	1a002898 <vPortExitCritical>
1a0014a4:	e7f1      	b.n	1a00148a <xQueueSemaphoreTake+0x182>
1a0014a6:	bf00      	nop
1a0014a8:	e000ed04 	.word	0xe000ed04

1a0014ac <vQueueAddToRegistry>:
	{
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
1a0014ac:	2300      	movs	r3, #0
1a0014ae:	2b07      	cmp	r3, #7
1a0014b0:	d80c      	bhi.n	1a0014cc <vQueueAddToRegistry+0x20>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
1a0014b2:	4a07      	ldr	r2, [pc, #28]	; (1a0014d0 <vQueueAddToRegistry+0x24>)
1a0014b4:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
1a0014b8:	b10a      	cbz	r2, 1a0014be <vQueueAddToRegistry+0x12>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
1a0014ba:	3301      	adds	r3, #1
1a0014bc:	e7f7      	b.n	1a0014ae <vQueueAddToRegistry+0x2>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
1a0014be:	4a04      	ldr	r2, [pc, #16]	; (1a0014d0 <vQueueAddToRegistry+0x24>)
1a0014c0:	f842 1033 	str.w	r1, [r2, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
1a0014c4:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
1a0014c8:	6058      	str	r0, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
1a0014ca:	4770      	bx	lr
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
1a0014cc:	4770      	bx	lr
1a0014ce:	bf00      	nop
1a0014d0:	1000362c 	.word	0x1000362c

1a0014d4 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
1a0014d4:	b570      	push	{r4, r5, r6, lr}
1a0014d6:	4604      	mov	r4, r0
1a0014d8:	460d      	mov	r5, r1
1a0014da:	4616      	mov	r6, r2
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
1a0014dc:	f001 f9ba 	bl	1a002854 <vPortEnterCritical>
1a0014e0:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
1a0014e4:	b25b      	sxtb	r3, r3
1a0014e6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
1a0014ea:	d00d      	beq.n	1a001508 <vQueueWaitForMessageRestricted+0x34>
1a0014ec:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
1a0014f0:	b25b      	sxtb	r3, r3
1a0014f2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
1a0014f6:	d00b      	beq.n	1a001510 <vQueueWaitForMessageRestricted+0x3c>
1a0014f8:	f001 f9ce 	bl	1a002898 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
1a0014fc:	6ba3      	ldr	r3, [r4, #56]	; 0x38
1a0014fe:	b15b      	cbz	r3, 1a001518 <vQueueWaitForMessageRestricted+0x44>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
1a001500:	4620      	mov	r0, r4
1a001502:	f7ff fc19 	bl	1a000d38 <prvUnlockQueue>
	}
1a001506:	bd70      	pop	{r4, r5, r6, pc}
		prvLockQueue( pxQueue );
1a001508:	2300      	movs	r3, #0
1a00150a:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
1a00150e:	e7ed      	b.n	1a0014ec <vQueueWaitForMessageRestricted+0x18>
1a001510:	2300      	movs	r3, #0
1a001512:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
1a001516:	e7ef      	b.n	1a0014f8 <vQueueWaitForMessageRestricted+0x24>
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
1a001518:	4632      	mov	r2, r6
1a00151a:	4629      	mov	r1, r5
1a00151c:	f104 0024 	add.w	r0, r4, #36	; 0x24
1a001520:	f000 fd2a 	bl	1a001f78 <vTaskPlaceOnEventListRestricted>
1a001524:	e7ec      	b.n	1a001500 <vQueueWaitForMessageRestricted+0x2c>

1a001526 <vListInitialise>:
void vListInitialise( List_t * const pxList )
{
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
1a001526:	f100 0308 	add.w	r3, r0, #8
1a00152a:	6043      	str	r3, [r0, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
1a00152c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
1a001530:	6082      	str	r2, [r0, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
1a001532:	60c3      	str	r3, [r0, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
1a001534:	6103      	str	r3, [r0, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
1a001536:	2300      	movs	r3, #0
1a001538:	6003      	str	r3, [r0, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
1a00153a:	4770      	bx	lr

1a00153c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
1a00153c:	2300      	movs	r3, #0
1a00153e:	6103      	str	r3, [r0, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
1a001540:	4770      	bx	lr

1a001542 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
ListItem_t * const pxIndex = pxList->pxIndex;
1a001542:	6843      	ldr	r3, [r0, #4]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
1a001544:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
1a001546:	689a      	ldr	r2, [r3, #8]
1a001548:	608a      	str	r2, [r1, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
1a00154a:	6051      	str	r1, [r2, #4]
	pxIndex->pxPrevious = pxNewListItem;
1a00154c:	6099      	str	r1, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
1a00154e:	6108      	str	r0, [r1, #16]

	( pxList->uxNumberOfItems )++;
1a001550:	6803      	ldr	r3, [r0, #0]
1a001552:	3301      	adds	r3, #1
1a001554:	6003      	str	r3, [r0, #0]
}
1a001556:	4770      	bx	lr

1a001558 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
1a001558:	b430      	push	{r4, r5}
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
1a00155a:	680d      	ldr	r5, [r1, #0]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
1a00155c:	f1b5 3fff 	cmp.w	r5, #4294967295	; 0xffffffff
1a001560:	d002      	beq.n	1a001568 <vListInsert+0x10>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
1a001562:	f100 0208 	add.w	r2, r0, #8
1a001566:	e002      	b.n	1a00156e <vListInsert+0x16>
		pxIterator = pxList->xListEnd.pxPrevious;
1a001568:	6902      	ldr	r2, [r0, #16]
1a00156a:	e004      	b.n	1a001576 <vListInsert+0x1e>
		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
1a00156c:	461a      	mov	r2, r3
1a00156e:	6853      	ldr	r3, [r2, #4]
1a001570:	681c      	ldr	r4, [r3, #0]
1a001572:	42ac      	cmp	r4, r5
1a001574:	d9fa      	bls.n	1a00156c <vListInsert+0x14>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
1a001576:	6853      	ldr	r3, [r2, #4]
1a001578:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
1a00157a:	6099      	str	r1, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
1a00157c:	608a      	str	r2, [r1, #8]
	pxIterator->pxNext = pxNewListItem;
1a00157e:	6051      	str	r1, [r2, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
1a001580:	6108      	str	r0, [r1, #16]

	( pxList->uxNumberOfItems )++;
1a001582:	6803      	ldr	r3, [r0, #0]
1a001584:	3301      	adds	r3, #1
1a001586:	6003      	str	r3, [r0, #0]
}
1a001588:	bc30      	pop	{r4, r5}
1a00158a:	4770      	bx	lr

1a00158c <uxListRemove>:

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
1a00158c:	6903      	ldr	r3, [r0, #16]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
1a00158e:	6841      	ldr	r1, [r0, #4]
1a001590:	6882      	ldr	r2, [r0, #8]
1a001592:	608a      	str	r2, [r1, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
1a001594:	6841      	ldr	r1, [r0, #4]
1a001596:	6051      	str	r1, [r2, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
1a001598:	685a      	ldr	r2, [r3, #4]
1a00159a:	4282      	cmp	r2, r0
1a00159c:	d006      	beq.n	1a0015ac <uxListRemove+0x20>
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
1a00159e:	2200      	movs	r2, #0
1a0015a0:	6102      	str	r2, [r0, #16]
	( pxList->uxNumberOfItems )--;
1a0015a2:	681a      	ldr	r2, [r3, #0]
1a0015a4:	3a01      	subs	r2, #1
1a0015a6:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
1a0015a8:	6818      	ldr	r0, [r3, #0]
}
1a0015aa:	4770      	bx	lr
		pxList->pxIndex = pxItemToRemove->pxPrevious;
1a0015ac:	6882      	ldr	r2, [r0, #8]
1a0015ae:	605a      	str	r2, [r3, #4]
1a0015b0:	e7f5      	b.n	1a00159e <uxListRemove+0x12>
1a0015b2:	Address 0x000000001a0015b2 is out of bounds.


1a0015b4 <vApplicationGetIdleTaskMemory>:
static StaticTask_t xIdleTaskTCB;
static StackType_t uxIdleTaskStack[ configMINIMAL_STACK_SIZE ];

    /* Pass out a pointer to the StaticTask_t structure in which the Idle task's
    state will be stored. */
    *ppxIdleTaskTCBBuffer = &xIdleTaskTCB;
1a0015b4:	4b03      	ldr	r3, [pc, #12]	; (1a0015c4 <vApplicationGetIdleTaskMemory+0x10>)
1a0015b6:	6003      	str	r3, [r0, #0]

    /* Pass out the array that will be used as the Idle task's stack. */
    *ppxIdleTaskStackBuffer = uxIdleTaskStack;
1a0015b8:	4b03      	ldr	r3, [pc, #12]	; (1a0015c8 <vApplicationGetIdleTaskMemory+0x14>)
1a0015ba:	600b      	str	r3, [r1, #0]

    /* Pass out the size of the array pointed to by *ppxIdleTaskStackBuffer.
    Note that, as the array is necessarily of type StackType_t,
    configMINIMAL_STACK_SIZE is specified in words, not bytes. */
    *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
1a0015bc:	235a      	movs	r3, #90	; 0x5a
1a0015be:	6013      	str	r3, [r2, #0]
}
1a0015c0:	4770      	bx	lr
1a0015c2:	bf00      	nop
1a0015c4:	10003164 	.word	0x10003164
1a0015c8:	10002a5c 	.word	0x10002a5c

1a0015cc <vApplicationGetTimerTaskMemory>:
static StaticTask_t xTimerTaskTCB;
static StackType_t uxTimerTaskStack[ configTIMER_TASK_STACK_DEPTH ];

    /* Pass out a pointer to the StaticTask_t structure in which the Timer
    task's state will be stored. */
    *ppxTimerTaskTCBBuffer = &xTimerTaskTCB;
1a0015cc:	4b03      	ldr	r3, [pc, #12]	; (1a0015dc <vApplicationGetTimerTaskMemory+0x10>)
1a0015ce:	6003      	str	r3, [r0, #0]

    /* Pass out the array that will be used as the Timer task's stack. */
    *ppxTimerTaskStackBuffer = uxTimerTaskStack;
1a0015d0:	4b03      	ldr	r3, [pc, #12]	; (1a0015e0 <vApplicationGetTimerTaskMemory+0x14>)
1a0015d2:	600b      	str	r3, [r1, #0]

    /* Pass out the size of the array pointed to by *ppxTimerTaskStackBuffer.
    Note that, as the array is necessarily of type StackType_t,
    configTIMER_TASK_STACK_DEPTH is specified in words, not bytes. */
    *pulTimerTaskStackSize = configTIMER_TASK_STACK_DEPTH;
1a0015d4:	f44f 73b4 	mov.w	r3, #360	; 0x168
1a0015d8:	6013      	str	r3, [r2, #0]
1a0015da:	4770      	bx	lr
1a0015dc:	100031c4 	.word	0x100031c4
1a0015e0:	10002bc4 	.word	0x10002bc4

1a0015e4 <vAssertCalled>:
#include <task.h>

#define WEAK __attribute__ ((weak))

WEAK void vAssertCalled( uint32_t ulLine, const char * const pcFile )
{
1a0015e4:	b510      	push	{r4, lr}
1a0015e6:	b082      	sub	sp, #8
1a0015e8:	460c      	mov	r4, r1
// The following two variables are just to ensure the parameters are not
// optimised away and therefore unavailable when viewed in the debugger.
   volatile uint32_t ulLineNumber = ulLine, ulSetNonZeroInDebuggerToReturn = 0;
1a0015ea:	9001      	str	r0, [sp, #4]
1a0015ec:	2300      	movs	r3, #0
1a0015ee:	9300      	str	r3, [sp, #0]
   volatile const char * const pcFileName = pcFile;

   taskENTER_CRITICAL();
1a0015f0:	f001 f930 	bl	1a002854 <vPortEnterCritical>
   {
      printf( "\r\nvAssertCalled()\r\n   LLine Number = %d\r\n   File Name = %s\r\n\r\n",
1a0015f4:	9901      	ldr	r1, [sp, #4]
1a0015f6:	4622      	mov	r2, r4
1a0015f8:	4804      	ldr	r0, [pc, #16]	; (1a00160c <vAssertCalled+0x28>)
1a0015fa:	f005 fa71 	bl	1a006ae0 <printf>
              ulLineNumber, pcFileName ); // @Eric
      while( ulSetNonZeroInDebuggerToReturn == 0 ) {
1a0015fe:	9b00      	ldr	r3, [sp, #0]
1a001600:	2b00      	cmp	r3, #0
1a001602:	d0fc      	beq.n	1a0015fe <vAssertCalled+0x1a>
         // If you want to set out of this function in the debugger to see
         // the assert() location then set ulSetNonZeroInDebuggerToReturn to a
         // non-zero value.
      }
   }
   taskEXIT_CRITICAL();
1a001604:	f001 f948 	bl	1a002898 <vPortExitCritical>

//   printf( "Stop in a while(1)\r\n\r\n" ); // @Eric
//   while(1); // @Eric
}
1a001608:	b002      	add	sp, #8
1a00160a:	bd10      	pop	{r4, pc}
1a00160c:	1a00afd4 	.word	0x1a00afd4

1a001610 <vApplicationMallocFailedHook>:
/*-----------------------------------------------------------*/

WEAK void vApplicationMallocFailedHook( void )
{
1a001610:	b508      	push	{r3, lr}
   // parts of the demo application.  If heap_1.c, heap_2.c or heap_4.c are used,
   // then the size of the heap available to pvPortMalloc() is defined by
   // configTOTAL_HEAP_SIZE in FreeRTOSConfig.h, and the xPortGetFreeHeapSize()
   // API function can be used to query the size of free heap space that remains.
   // More information is provided in the book text.
   printf( "Application Malloc Failed Hook!\r\n" );
1a001612:	4804      	ldr	r0, [pc, #16]	; (1a001624 <vApplicationMallocFailedHook+0x14>)
1a001614:	f005 fac6 	bl	1a006ba4 <puts>
   vAssertCalled( __LINE__, __FILE__ );
1a001618:	4903      	ldr	r1, [pc, #12]	; (1a001628 <vApplicationMallocFailedHook+0x18>)
1a00161a:	202c      	movs	r0, #44	; 0x2c
1a00161c:	f7ff ffe2 	bl	1a0015e4 <vAssertCalled>
}
1a001620:	bd08      	pop	{r3, pc}
1a001622:	bf00      	nop
1a001624:	1a00af60 	.word	0x1a00af60
1a001628:	1a00af84 	.word	0x1a00af84

1a00162c <vApplicationStackOverflowHook>:
}
#endif /* 0 */
/*-----------------------------------------------------------*/

WEAK void vApplicationStackOverflowHook( TaskHandle_t pxTask, char *pcTaskName )
{
1a00162c:	b508      	push	{r3, lr}

   // Run time stack overflow checking is performed if
   // configCHECK_FOR_STACK_OVERFLOW is defined to 1 or 2. This hook function is
   // called if a stack overflow is detected. More information is provided in the
   // book text.
   printf( "\r\nApplication Stack Overflow!! on Task: %s\r\n", (char*)pcTaskName );
1a00162e:	4804      	ldr	r0, [pc, #16]	; (1a001640 <vApplicationStackOverflowHook+0x14>)
1a001630:	f005 fa56 	bl	1a006ae0 <printf>
   vAssertCalled( __LINE__, __FILE__ );
1a001634:	4903      	ldr	r1, [pc, #12]	; (1a001644 <vApplicationStackOverflowHook+0x18>)
1a001636:	2050      	movs	r0, #80	; 0x50
1a001638:	f7ff ffd4 	bl	1a0015e4 <vAssertCalled>
}
1a00163c:	bd08      	pop	{r3, pc}
1a00163e:	bf00      	nop
1a001640:	1a00afa4 	.word	0x1a00afa4
1a001644:	1a00af84 	.word	0x1a00af84

1a001648 <prvResetNextTaskUnblockTime>:

static void prvResetNextTaskUnblockTime( void )
{
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
1a001648:	4b08      	ldr	r3, [pc, #32]	; (1a00166c <prvResetNextTaskUnblockTime+0x24>)
1a00164a:	681b      	ldr	r3, [r3, #0]
1a00164c:	681b      	ldr	r3, [r3, #0]
1a00164e:	b923      	cbnz	r3, 1a00165a <prvResetNextTaskUnblockTime+0x12>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
1a001650:	4b07      	ldr	r3, [pc, #28]	; (1a001670 <prvResetNextTaskUnblockTime+0x28>)
1a001652:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
1a001656:	601a      	str	r2, [r3, #0]
1a001658:	4770      	bx	lr
	{
		/* The new current delayed list is not empty, get the value of
		the item at the head of the delayed list.  This is the time at
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
1a00165a:	4b04      	ldr	r3, [pc, #16]	; (1a00166c <prvResetNextTaskUnblockTime+0x24>)
1a00165c:	681b      	ldr	r3, [r3, #0]
1a00165e:	68db      	ldr	r3, [r3, #12]
1a001660:	68db      	ldr	r3, [r3, #12]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
1a001662:	685a      	ldr	r2, [r3, #4]
1a001664:	4b02      	ldr	r3, [pc, #8]	; (1a001670 <prvResetNextTaskUnblockTime+0x28>)
1a001666:	601a      	str	r2, [r3, #0]
	}
}
1a001668:	4770      	bx	lr
1a00166a:	bf00      	nop
1a00166c:	10003228 	.word	0x10003228
1a001670:	100032fc 	.word	0x100032fc

1a001674 <prvInitialiseNewTask>:
{
1a001674:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
1a001678:	4681      	mov	r9, r0
1a00167a:	460d      	mov	r5, r1
1a00167c:	4617      	mov	r7, r2
1a00167e:	469a      	mov	sl, r3
1a001680:	9e08      	ldr	r6, [sp, #32]
1a001682:	f8dd 8024 	ldr.w	r8, [sp, #36]	; 0x24
1a001686:	9c0a      	ldr	r4, [sp, #40]	; 0x28
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
1a001688:	0092      	lsls	r2, r2, #2
1a00168a:	21a5      	movs	r1, #165	; 0xa5
1a00168c:	6b20      	ldr	r0, [r4, #48]	; 0x30
1a00168e:	f005 f9cb 	bl	1a006a28 <memset>
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
1a001692:	6b23      	ldr	r3, [r4, #48]	; 0x30
1a001694:	f107 4280 	add.w	r2, r7, #1073741824	; 0x40000000
1a001698:	3a01      	subs	r2, #1
1a00169a:	eb03 0782 	add.w	r7, r3, r2, lsl #2
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
1a00169e:	f027 0707 	bic.w	r7, r7, #7
			pxNewTCB->pxEndOfStack = pxTopOfStack;
1a0016a2:	6467      	str	r7, [r4, #68]	; 0x44
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
1a0016a4:	2300      	movs	r3, #0
1a0016a6:	2b0f      	cmp	r3, #15
1a0016a8:	d806      	bhi.n	1a0016b8 <prvInitialiseNewTask+0x44>
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
1a0016aa:	5cea      	ldrb	r2, [r5, r3]
1a0016ac:	18e1      	adds	r1, r4, r3
1a0016ae:	f881 2034 	strb.w	r2, [r1, #52]	; 0x34
		if( pcName[ x ] == 0x00 )
1a0016b2:	b10a      	cbz	r2, 1a0016b8 <prvInitialiseNewTask+0x44>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
1a0016b4:	3301      	adds	r3, #1
1a0016b6:	e7f6      	b.n	1a0016a6 <prvInitialiseNewTask+0x32>
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
1a0016b8:	2300      	movs	r3, #0
1a0016ba:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
1a0016be:	2e06      	cmp	r6, #6
1a0016c0:	d900      	bls.n	1a0016c4 <prvInitialiseNewTask+0x50>
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
1a0016c2:	2606      	movs	r6, #6
	pxNewTCB->uxPriority = uxPriority;
1a0016c4:	62e6      	str	r6, [r4, #44]	; 0x2c
		pxNewTCB->uxBasePriority = uxPriority;
1a0016c6:	6526      	str	r6, [r4, #80]	; 0x50
		pxNewTCB->uxMutexesHeld = 0;
1a0016c8:	2500      	movs	r5, #0
1a0016ca:	6565      	str	r5, [r4, #84]	; 0x54
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
1a0016cc:	1d20      	adds	r0, r4, #4
1a0016ce:	f7ff ff35 	bl	1a00153c <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
1a0016d2:	f104 0018 	add.w	r0, r4, #24
1a0016d6:	f7ff ff31 	bl	1a00153c <vListInitialiseItem>
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
1a0016da:	6124      	str	r4, [r4, #16]
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
1a0016dc:	f1c6 0607 	rsb	r6, r6, #7
1a0016e0:	61a6      	str	r6, [r4, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
1a0016e2:	6264      	str	r4, [r4, #36]	; 0x24
		pxNewTCB->ulNotifiedValue = 0;
1a0016e4:	65a5      	str	r5, [r4, #88]	; 0x58
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
1a0016e6:	f884 505c 	strb.w	r5, [r4, #92]	; 0x5c
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
1a0016ea:	4652      	mov	r2, sl
1a0016ec:	4649      	mov	r1, r9
1a0016ee:	4638      	mov	r0, r7
1a0016f0:	f001 f886 	bl	1a002800 <pxPortInitialiseStack>
1a0016f4:	6020      	str	r0, [r4, #0]
	if( ( void * ) pxCreatedTask != NULL )
1a0016f6:	f1b8 0f00 	cmp.w	r8, #0
1a0016fa:	d001      	beq.n	1a001700 <prvInitialiseNewTask+0x8c>
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
1a0016fc:	f8c8 4000 	str.w	r4, [r8]
}
1a001700:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

1a001704 <prvInitialiseTaskLists>:
{
1a001704:	b538      	push	{r3, r4, r5, lr}
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
1a001706:	2400      	movs	r4, #0
1a001708:	2c06      	cmp	r4, #6
1a00170a:	d808      	bhi.n	1a00171e <prvInitialiseTaskLists+0x1a>
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
1a00170c:	eb04 0284 	add.w	r2, r4, r4, lsl #2
1a001710:	0093      	lsls	r3, r2, #2
1a001712:	480e      	ldr	r0, [pc, #56]	; (1a00174c <prvInitialiseTaskLists+0x48>)
1a001714:	4418      	add	r0, r3
1a001716:	f7ff ff06 	bl	1a001526 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
1a00171a:	3401      	adds	r4, #1
1a00171c:	e7f4      	b.n	1a001708 <prvInitialiseTaskLists+0x4>
	vListInitialise( &xDelayedTaskList1 );
1a00171e:	4d0c      	ldr	r5, [pc, #48]	; (1a001750 <prvInitialiseTaskLists+0x4c>)
1a001720:	4628      	mov	r0, r5
1a001722:	f7ff ff00 	bl	1a001526 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
1a001726:	4c0b      	ldr	r4, [pc, #44]	; (1a001754 <prvInitialiseTaskLists+0x50>)
1a001728:	4620      	mov	r0, r4
1a00172a:	f7ff fefc 	bl	1a001526 <vListInitialise>
	vListInitialise( &xPendingReadyList );
1a00172e:	480a      	ldr	r0, [pc, #40]	; (1a001758 <prvInitialiseTaskLists+0x54>)
1a001730:	f7ff fef9 	bl	1a001526 <vListInitialise>
		vListInitialise( &xTasksWaitingTermination );
1a001734:	4809      	ldr	r0, [pc, #36]	; (1a00175c <prvInitialiseTaskLists+0x58>)
1a001736:	f7ff fef6 	bl	1a001526 <vListInitialise>
		vListInitialise( &xSuspendedTaskList );
1a00173a:	4809      	ldr	r0, [pc, #36]	; (1a001760 <prvInitialiseTaskLists+0x5c>)
1a00173c:	f7ff fef3 	bl	1a001526 <vListInitialise>
	pxDelayedTaskList = &xDelayedTaskList1;
1a001740:	4b08      	ldr	r3, [pc, #32]	; (1a001764 <prvInitialiseTaskLists+0x60>)
1a001742:	601d      	str	r5, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
1a001744:	4b08      	ldr	r3, [pc, #32]	; (1a001768 <prvInitialiseTaskLists+0x64>)
1a001746:	601c      	str	r4, [r3, #0]
}
1a001748:	bd38      	pop	{r3, r4, r5, pc}
1a00174a:	bf00      	nop
1a00174c:	10003230 	.word	0x10003230
1a001750:	100032d4 	.word	0x100032d4
1a001754:	100032e8 	.word	0x100032e8
1a001758:	10003304 	.word	0x10003304
1a00175c:	10003330 	.word	0x10003330
1a001760:	1000331c 	.word	0x1000331c
1a001764:	10003228 	.word	0x10003228
1a001768:	1000322c 	.word	0x1000322c

1a00176c <prvAddNewTaskToReadyList>:
{
1a00176c:	b510      	push	{r4, lr}
1a00176e:	4604      	mov	r4, r0
	taskENTER_CRITICAL();
1a001770:	f001 f870 	bl	1a002854 <vPortEnterCritical>
		uxCurrentNumberOfTasks++;
1a001774:	4a21      	ldr	r2, [pc, #132]	; (1a0017fc <prvAddNewTaskToReadyList+0x90>)
1a001776:	6813      	ldr	r3, [r2, #0]
1a001778:	3301      	adds	r3, #1
1a00177a:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
1a00177c:	4b20      	ldr	r3, [pc, #128]	; (1a001800 <prvAddNewTaskToReadyList+0x94>)
1a00177e:	681b      	ldr	r3, [r3, #0]
1a001780:	b15b      	cbz	r3, 1a00179a <prvAddNewTaskToReadyList+0x2e>
			if( xSchedulerRunning == pdFALSE )
1a001782:	4b20      	ldr	r3, [pc, #128]	; (1a001804 <prvAddNewTaskToReadyList+0x98>)
1a001784:	681b      	ldr	r3, [r3, #0]
1a001786:	b96b      	cbnz	r3, 1a0017a4 <prvAddNewTaskToReadyList+0x38>
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
1a001788:	4b1d      	ldr	r3, [pc, #116]	; (1a001800 <prvAddNewTaskToReadyList+0x94>)
1a00178a:	681b      	ldr	r3, [r3, #0]
1a00178c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
1a00178e:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
1a001790:	429a      	cmp	r2, r3
1a001792:	d807      	bhi.n	1a0017a4 <prvAddNewTaskToReadyList+0x38>
					pxCurrentTCB = pxNewTCB;
1a001794:	4b1a      	ldr	r3, [pc, #104]	; (1a001800 <prvAddNewTaskToReadyList+0x94>)
1a001796:	601c      	str	r4, [r3, #0]
1a001798:	e004      	b.n	1a0017a4 <prvAddNewTaskToReadyList+0x38>
			pxCurrentTCB = pxNewTCB;
1a00179a:	4b19      	ldr	r3, [pc, #100]	; (1a001800 <prvAddNewTaskToReadyList+0x94>)
1a00179c:	601c      	str	r4, [r3, #0]
			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
1a00179e:	6813      	ldr	r3, [r2, #0]
1a0017a0:	2b01      	cmp	r3, #1
1a0017a2:	d027      	beq.n	1a0017f4 <prvAddNewTaskToReadyList+0x88>
		uxTaskNumber++;
1a0017a4:	4a18      	ldr	r2, [pc, #96]	; (1a001808 <prvAddNewTaskToReadyList+0x9c>)
1a0017a6:	6813      	ldr	r3, [r2, #0]
1a0017a8:	3301      	adds	r3, #1
1a0017aa:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
1a0017ac:	64a3      	str	r3, [r4, #72]	; 0x48
		prvAddTaskToReadyList( pxNewTCB );
1a0017ae:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
1a0017b0:	2201      	movs	r2, #1
1a0017b2:	409a      	lsls	r2, r3
1a0017b4:	4915      	ldr	r1, [pc, #84]	; (1a00180c <prvAddNewTaskToReadyList+0xa0>)
1a0017b6:	6808      	ldr	r0, [r1, #0]
1a0017b8:	4302      	orrs	r2, r0
1a0017ba:	600a      	str	r2, [r1, #0]
1a0017bc:	eb03 0383 	add.w	r3, r3, r3, lsl #2
1a0017c0:	009a      	lsls	r2, r3, #2
1a0017c2:	1d21      	adds	r1, r4, #4
1a0017c4:	4812      	ldr	r0, [pc, #72]	; (1a001810 <prvAddNewTaskToReadyList+0xa4>)
1a0017c6:	4410      	add	r0, r2
1a0017c8:	f7ff febb 	bl	1a001542 <vListInsertEnd>
	taskEXIT_CRITICAL();
1a0017cc:	f001 f864 	bl	1a002898 <vPortExitCritical>
	if( xSchedulerRunning != pdFALSE )
1a0017d0:	4b0c      	ldr	r3, [pc, #48]	; (1a001804 <prvAddNewTaskToReadyList+0x98>)
1a0017d2:	681b      	ldr	r3, [r3, #0]
1a0017d4:	b16b      	cbz	r3, 1a0017f2 <prvAddNewTaskToReadyList+0x86>
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
1a0017d6:	4b0a      	ldr	r3, [pc, #40]	; (1a001800 <prvAddNewTaskToReadyList+0x94>)
1a0017d8:	681b      	ldr	r3, [r3, #0]
1a0017da:	6ada      	ldr	r2, [r3, #44]	; 0x2c
1a0017dc:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
1a0017de:	429a      	cmp	r2, r3
1a0017e0:	d207      	bcs.n	1a0017f2 <prvAddNewTaskToReadyList+0x86>
			taskYIELD_IF_USING_PREEMPTION();
1a0017e2:	4b0c      	ldr	r3, [pc, #48]	; (1a001814 <prvAddNewTaskToReadyList+0xa8>)
1a0017e4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
1a0017e8:	601a      	str	r2, [r3, #0]
1a0017ea:	f3bf 8f4f 	dsb	sy
1a0017ee:	f3bf 8f6f 	isb	sy
}
1a0017f2:	bd10      	pop	{r4, pc}
				prvInitialiseTaskLists();
1a0017f4:	f7ff ff86 	bl	1a001704 <prvInitialiseTaskLists>
1a0017f8:	e7d4      	b.n	1a0017a4 <prvAddNewTaskToReadyList+0x38>
1a0017fa:	bf00      	nop
1a0017fc:	100032bc 	.word	0x100032bc
1a001800:	10003224 	.word	0x10003224
1a001804:	10003318 	.word	0x10003318
1a001808:	100032cc 	.word	0x100032cc
1a00180c:	100032d0 	.word	0x100032d0
1a001810:	10003230 	.word	0x10003230
1a001814:	e000ed04 	.word	0xe000ed04

1a001818 <prvDeleteTCB>:
	{
1a001818:	b510      	push	{r4, lr}
1a00181a:	4604      	mov	r4, r0
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
1a00181c:	f890 305d 	ldrb.w	r3, [r0, #93]	; 0x5d
1a001820:	b163      	cbz	r3, 1a00183c <prvDeleteTCB+0x24>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
1a001822:	2b01      	cmp	r3, #1
1a001824:	d011      	beq.n	1a00184a <prvDeleteTCB+0x32>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
1a001826:	2b02      	cmp	r3, #2
1a001828:	d00e      	beq.n	1a001848 <prvDeleteTCB+0x30>
1a00182a:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a00182e:	f383 8811 	msr	BASEPRI, r3
1a001832:	f3bf 8f6f 	isb	sy
1a001836:	f3bf 8f4f 	dsb	sy
1a00183a:	e7fe      	b.n	1a00183a <prvDeleteTCB+0x22>
				vPortFree( pxTCB->pxStack );
1a00183c:	6b00      	ldr	r0, [r0, #48]	; 0x30
1a00183e:	f7ff f9d1 	bl	1a000be4 <vPortFree>
				vPortFree( pxTCB );
1a001842:	4620      	mov	r0, r4
1a001844:	f7ff f9ce 	bl	1a000be4 <vPortFree>
	}
1a001848:	bd10      	pop	{r4, pc}
				vPortFree( pxTCB );
1a00184a:	f7ff f9cb 	bl	1a000be4 <vPortFree>
1a00184e:	e7fb      	b.n	1a001848 <prvDeleteTCB+0x30>

1a001850 <prvCheckTasksWaitingTermination>:
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
1a001850:	4b0f      	ldr	r3, [pc, #60]	; (1a001890 <prvCheckTasksWaitingTermination+0x40>)
1a001852:	681b      	ldr	r3, [r3, #0]
1a001854:	b1d3      	cbz	r3, 1a00188c <prvCheckTasksWaitingTermination+0x3c>
{
1a001856:	b510      	push	{r4, lr}
			taskENTER_CRITICAL();
1a001858:	f000 fffc 	bl	1a002854 <vPortEnterCritical>
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
1a00185c:	4b0d      	ldr	r3, [pc, #52]	; (1a001894 <prvCheckTasksWaitingTermination+0x44>)
1a00185e:	68db      	ldr	r3, [r3, #12]
1a001860:	68dc      	ldr	r4, [r3, #12]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
1a001862:	1d20      	adds	r0, r4, #4
1a001864:	f7ff fe92 	bl	1a00158c <uxListRemove>
				--uxCurrentNumberOfTasks;
1a001868:	4a0b      	ldr	r2, [pc, #44]	; (1a001898 <prvCheckTasksWaitingTermination+0x48>)
1a00186a:	6813      	ldr	r3, [r2, #0]
1a00186c:	3b01      	subs	r3, #1
1a00186e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
1a001870:	4a07      	ldr	r2, [pc, #28]	; (1a001890 <prvCheckTasksWaitingTermination+0x40>)
1a001872:	6813      	ldr	r3, [r2, #0]
1a001874:	3b01      	subs	r3, #1
1a001876:	6013      	str	r3, [r2, #0]
			taskEXIT_CRITICAL();
1a001878:	f001 f80e 	bl	1a002898 <vPortExitCritical>
			prvDeleteTCB( pxTCB );
1a00187c:	4620      	mov	r0, r4
1a00187e:	f7ff ffcb 	bl	1a001818 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
1a001882:	4b03      	ldr	r3, [pc, #12]	; (1a001890 <prvCheckTasksWaitingTermination+0x40>)
1a001884:	681b      	ldr	r3, [r3, #0]
1a001886:	2b00      	cmp	r3, #0
1a001888:	d1e6      	bne.n	1a001858 <prvCheckTasksWaitingTermination+0x8>
}
1a00188a:	bd10      	pop	{r4, pc}
1a00188c:	4770      	bx	lr
1a00188e:	bf00      	nop
1a001890:	100032c0 	.word	0x100032c0
1a001894:	10003330 	.word	0x10003330
1a001898:	100032bc 	.word	0x100032bc

1a00189c <prvIdleTask>:
{
1a00189c:	b508      	push	{r3, lr}
		prvCheckTasksWaitingTermination();
1a00189e:	f7ff ffd7 	bl	1a001850 <prvCheckTasksWaitingTermination>
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
1a0018a2:	4b06      	ldr	r3, [pc, #24]	; (1a0018bc <prvIdleTask+0x20>)
1a0018a4:	681b      	ldr	r3, [r3, #0]
1a0018a6:	2b01      	cmp	r3, #1
1a0018a8:	d9f9      	bls.n	1a00189e <prvIdleTask+0x2>
				taskYIELD();
1a0018aa:	4b05      	ldr	r3, [pc, #20]	; (1a0018c0 <prvIdleTask+0x24>)
1a0018ac:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
1a0018b0:	601a      	str	r2, [r3, #0]
1a0018b2:	f3bf 8f4f 	dsb	sy
1a0018b6:	f3bf 8f6f 	isb	sy
1a0018ba:	e7f0      	b.n	1a00189e <prvIdleTask+0x2>
1a0018bc:	10003230 	.word	0x10003230
1a0018c0:	e000ed04 	.word	0xe000ed04

1a0018c4 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
1a0018c4:	b570      	push	{r4, r5, r6, lr}
1a0018c6:	4604      	mov	r4, r0
1a0018c8:	460e      	mov	r6, r1
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
1a0018ca:	4b1d      	ldr	r3, [pc, #116]	; (1a001940 <prvAddCurrentTaskToDelayedList+0x7c>)
1a0018cc:	681d      	ldr	r5, [r3, #0]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
1a0018ce:	4b1d      	ldr	r3, [pc, #116]	; (1a001944 <prvAddCurrentTaskToDelayedList+0x80>)
1a0018d0:	6818      	ldr	r0, [r3, #0]
1a0018d2:	3004      	adds	r0, #4
1a0018d4:	f7ff fe5a 	bl	1a00158c <uxListRemove>
1a0018d8:	b950      	cbnz	r0, 1a0018f0 <prvAddCurrentTaskToDelayedList+0x2c>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
1a0018da:	4b1a      	ldr	r3, [pc, #104]	; (1a001944 <prvAddCurrentTaskToDelayedList+0x80>)
1a0018dc:	681b      	ldr	r3, [r3, #0]
1a0018de:	6ada      	ldr	r2, [r3, #44]	; 0x2c
1a0018e0:	2301      	movs	r3, #1
1a0018e2:	fa03 f202 	lsl.w	r2, r3, r2
1a0018e6:	4918      	ldr	r1, [pc, #96]	; (1a001948 <prvAddCurrentTaskToDelayedList+0x84>)
1a0018e8:	680b      	ldr	r3, [r1, #0]
1a0018ea:	ea23 0302 	bic.w	r3, r3, r2
1a0018ee:	600b      	str	r3, [r1, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
1a0018f0:	f1b4 3fff 	cmp.w	r4, #4294967295	; 0xffffffff
1a0018f4:	d00d      	beq.n	1a001912 <prvAddCurrentTaskToDelayedList+0x4e>
		else
		{
			/* Calculate the time at which the task should be woken if the event
			does not occur.  This may overflow but this doesn't matter, the
			kernel will manage it correctly. */
			xTimeToWake = xConstTickCount + xTicksToWait;
1a0018f6:	442c      	add	r4, r5

			/* The list item will be inserted in wake time order. */
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
1a0018f8:	4b12      	ldr	r3, [pc, #72]	; (1a001944 <prvAddCurrentTaskToDelayedList+0x80>)
1a0018fa:	681b      	ldr	r3, [r3, #0]
1a0018fc:	605c      	str	r4, [r3, #4]

			if( xTimeToWake < xConstTickCount )
1a0018fe:	42a5      	cmp	r5, r4
1a001900:	d910      	bls.n	1a001924 <prvAddCurrentTaskToDelayedList+0x60>
			{
				/* Wake time has overflowed.  Place this item in the overflow
				list. */
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
1a001902:	4b12      	ldr	r3, [pc, #72]	; (1a00194c <prvAddCurrentTaskToDelayedList+0x88>)
1a001904:	6818      	ldr	r0, [r3, #0]
1a001906:	4b0f      	ldr	r3, [pc, #60]	; (1a001944 <prvAddCurrentTaskToDelayedList+0x80>)
1a001908:	6819      	ldr	r1, [r3, #0]
1a00190a:	3104      	adds	r1, #4
1a00190c:	f7ff fe24 	bl	1a001558 <vListInsert>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
1a001910:	bd70      	pop	{r4, r5, r6, pc}
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
1a001912:	2e00      	cmp	r6, #0
1a001914:	d0ef      	beq.n	1a0018f6 <prvAddCurrentTaskToDelayedList+0x32>
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
1a001916:	4b0b      	ldr	r3, [pc, #44]	; (1a001944 <prvAddCurrentTaskToDelayedList+0x80>)
1a001918:	6819      	ldr	r1, [r3, #0]
1a00191a:	3104      	adds	r1, #4
1a00191c:	480c      	ldr	r0, [pc, #48]	; (1a001950 <prvAddCurrentTaskToDelayedList+0x8c>)
1a00191e:	f7ff fe10 	bl	1a001542 <vListInsertEnd>
1a001922:	e7f5      	b.n	1a001910 <prvAddCurrentTaskToDelayedList+0x4c>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
1a001924:	4b0b      	ldr	r3, [pc, #44]	; (1a001954 <prvAddCurrentTaskToDelayedList+0x90>)
1a001926:	6818      	ldr	r0, [r3, #0]
1a001928:	4b06      	ldr	r3, [pc, #24]	; (1a001944 <prvAddCurrentTaskToDelayedList+0x80>)
1a00192a:	6819      	ldr	r1, [r3, #0]
1a00192c:	3104      	adds	r1, #4
1a00192e:	f7ff fe13 	bl	1a001558 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
1a001932:	4b09      	ldr	r3, [pc, #36]	; (1a001958 <prvAddCurrentTaskToDelayedList+0x94>)
1a001934:	681b      	ldr	r3, [r3, #0]
1a001936:	42a3      	cmp	r3, r4
1a001938:	d9ea      	bls.n	1a001910 <prvAddCurrentTaskToDelayedList+0x4c>
					xNextTaskUnblockTime = xTimeToWake;
1a00193a:	4b07      	ldr	r3, [pc, #28]	; (1a001958 <prvAddCurrentTaskToDelayedList+0x94>)
1a00193c:	601c      	str	r4, [r3, #0]
}
1a00193e:	e7e7      	b.n	1a001910 <prvAddCurrentTaskToDelayedList+0x4c>
1a001940:	10003344 	.word	0x10003344
1a001944:	10003224 	.word	0x10003224
1a001948:	100032d0 	.word	0x100032d0
1a00194c:	1000322c 	.word	0x1000322c
1a001950:	1000331c 	.word	0x1000331c
1a001954:	10003228 	.word	0x10003228
1a001958:	100032fc 	.word	0x100032fc

1a00195c <xTaskCreateStatic>:
	{
1a00195c:	b570      	push	{r4, r5, r6, lr}
1a00195e:	b086      	sub	sp, #24
1a001960:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
1a001962:	9c0c      	ldr	r4, [sp, #48]	; 0x30
		configASSERT( puxStackBuffer != NULL );
1a001964:	b175      	cbz	r5, 1a001984 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
1a001966:	b1b4      	cbz	r4, 1a001996 <xTaskCreateStatic+0x3a>
			volatile size_t xSize = sizeof( StaticTask_t );
1a001968:	2660      	movs	r6, #96	; 0x60
1a00196a:	9604      	str	r6, [sp, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
1a00196c:	9e04      	ldr	r6, [sp, #16]
1a00196e:	2e60      	cmp	r6, #96	; 0x60
1a001970:	d01a      	beq.n	1a0019a8 <xTaskCreateStatic+0x4c>
1a001972:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a001976:	f383 8811 	msr	BASEPRI, r3
1a00197a:	f3bf 8f6f 	isb	sy
1a00197e:	f3bf 8f4f 	dsb	sy
1a001982:	e7fe      	b.n	1a001982 <xTaskCreateStatic+0x26>
1a001984:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a001988:	f383 8811 	msr	BASEPRI, r3
1a00198c:	f3bf 8f6f 	isb	sy
1a001990:	f3bf 8f4f 	dsb	sy
		configASSERT( puxStackBuffer != NULL );
1a001994:	e7fe      	b.n	1a001994 <xTaskCreateStatic+0x38>
1a001996:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a00199a:	f383 8811 	msr	BASEPRI, r3
1a00199e:	f3bf 8f6f 	isb	sy
1a0019a2:	f3bf 8f4f 	dsb	sy
		configASSERT( pxTaskBuffer != NULL );
1a0019a6:	e7fe      	b.n	1a0019a6 <xTaskCreateStatic+0x4a>
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
1a0019a8:	6325      	str	r5, [r4, #48]	; 0x30
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
1a0019aa:	2502      	movs	r5, #2
1a0019ac:	f884 505d 	strb.w	r5, [r4, #93]	; 0x5d
			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
1a0019b0:	2500      	movs	r5, #0
1a0019b2:	9503      	str	r5, [sp, #12]
1a0019b4:	9402      	str	r4, [sp, #8]
1a0019b6:	ad05      	add	r5, sp, #20
1a0019b8:	9501      	str	r5, [sp, #4]
1a0019ba:	9d0a      	ldr	r5, [sp, #40]	; 0x28
1a0019bc:	9500      	str	r5, [sp, #0]
1a0019be:	f7ff fe59 	bl	1a001674 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
1a0019c2:	4620      	mov	r0, r4
1a0019c4:	f7ff fed2 	bl	1a00176c <prvAddNewTaskToReadyList>
	}
1a0019c8:	9805      	ldr	r0, [sp, #20]
1a0019ca:	b006      	add	sp, #24
1a0019cc:	bd70      	pop	{r4, r5, r6, pc}

1a0019ce <xTaskCreate>:
	{
1a0019ce:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
1a0019d2:	b085      	sub	sp, #20
1a0019d4:	4607      	mov	r7, r0
1a0019d6:	4688      	mov	r8, r1
1a0019d8:	4615      	mov	r5, r2
1a0019da:	4699      	mov	r9, r3
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
1a0019dc:	0090      	lsls	r0, r2, #2
1a0019de:	f7ff f873 	bl	1a000ac8 <pvPortMalloc>
			if( pxStack != NULL )
1a0019e2:	b1f8      	cbz	r0, 1a001a24 <xTaskCreate+0x56>
1a0019e4:	4606      	mov	r6, r0
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
1a0019e6:	2060      	movs	r0, #96	; 0x60
1a0019e8:	f7ff f86e 	bl	1a000ac8 <pvPortMalloc>
				if( pxNewTCB != NULL )
1a0019ec:	4604      	mov	r4, r0
1a0019ee:	b1a8      	cbz	r0, 1a001a1c <xTaskCreate+0x4e>
					pxNewTCB->pxStack = pxStack;
1a0019f0:	6306      	str	r6, [r0, #48]	; 0x30
		if( pxNewTCB != NULL )
1a0019f2:	b1e4      	cbz	r4, 1a001a2e <xTaskCreate+0x60>
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
1a0019f4:	2300      	movs	r3, #0
1a0019f6:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
1a0019fa:	9303      	str	r3, [sp, #12]
1a0019fc:	9402      	str	r4, [sp, #8]
1a0019fe:	9b0d      	ldr	r3, [sp, #52]	; 0x34
1a001a00:	9301      	str	r3, [sp, #4]
1a001a02:	9b0c      	ldr	r3, [sp, #48]	; 0x30
1a001a04:	9300      	str	r3, [sp, #0]
1a001a06:	464b      	mov	r3, r9
1a001a08:	462a      	mov	r2, r5
1a001a0a:	4641      	mov	r1, r8
1a001a0c:	4638      	mov	r0, r7
1a001a0e:	f7ff fe31 	bl	1a001674 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
1a001a12:	4620      	mov	r0, r4
1a001a14:	f7ff feaa 	bl	1a00176c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
1a001a18:	2001      	movs	r0, #1
1a001a1a:	e005      	b.n	1a001a28 <xTaskCreate+0x5a>
					vPortFree( pxStack );
1a001a1c:	4630      	mov	r0, r6
1a001a1e:	f7ff f8e1 	bl	1a000be4 <vPortFree>
1a001a22:	e7e6      	b.n	1a0019f2 <xTaskCreate+0x24>
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
1a001a24:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
	}
1a001a28:	b005      	add	sp, #20
1a001a2a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
1a001a2e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
		return xReturn;
1a001a32:	e7f9      	b.n	1a001a28 <xTaskCreate+0x5a>

1a001a34 <vTaskDelete>:
	{
1a001a34:	b538      	push	{r3, r4, r5, lr}
1a001a36:	4604      	mov	r4, r0
		taskENTER_CRITICAL();
1a001a38:	f000 ff0c 	bl	1a002854 <vPortEnterCritical>
			pxTCB = prvGetTCBFromHandle( xTaskToDelete );
1a001a3c:	2c00      	cmp	r4, #0
1a001a3e:	d034      	beq.n	1a001aaa <vTaskDelete+0x76>
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
1a001a40:	1d25      	adds	r5, r4, #4
1a001a42:	4628      	mov	r0, r5
1a001a44:	f7ff fda2 	bl	1a00158c <uxListRemove>
1a001a48:	b970      	cbnz	r0, 1a001a68 <vTaskDelete+0x34>
				taskRESET_READY_PRIORITY( pxTCB->uxPriority );
1a001a4a:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
1a001a4c:	eb02 0182 	add.w	r1, r2, r2, lsl #2
1a001a50:	008b      	lsls	r3, r1, #2
1a001a52:	4926      	ldr	r1, [pc, #152]	; (1a001aec <vTaskDelete+0xb8>)
1a001a54:	58cb      	ldr	r3, [r1, r3]
1a001a56:	b93b      	cbnz	r3, 1a001a68 <vTaskDelete+0x34>
1a001a58:	2301      	movs	r3, #1
1a001a5a:	fa03 f202 	lsl.w	r2, r3, r2
1a001a5e:	4924      	ldr	r1, [pc, #144]	; (1a001af0 <vTaskDelete+0xbc>)
1a001a60:	680b      	ldr	r3, [r1, #0]
1a001a62:	ea23 0302 	bic.w	r3, r3, r2
1a001a66:	600b      	str	r3, [r1, #0]
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
1a001a68:	6aa3      	ldr	r3, [r4, #40]	; 0x28
1a001a6a:	b11b      	cbz	r3, 1a001a74 <vTaskDelete+0x40>
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
1a001a6c:	f104 0018 	add.w	r0, r4, #24
1a001a70:	f7ff fd8c 	bl	1a00158c <uxListRemove>
			uxTaskNumber++;
1a001a74:	4a1f      	ldr	r2, [pc, #124]	; (1a001af4 <vTaskDelete+0xc0>)
1a001a76:	6813      	ldr	r3, [r2, #0]
1a001a78:	3301      	adds	r3, #1
1a001a7a:	6013      	str	r3, [r2, #0]
			if( pxTCB == pxCurrentTCB )
1a001a7c:	4b1e      	ldr	r3, [pc, #120]	; (1a001af8 <vTaskDelete+0xc4>)
1a001a7e:	681b      	ldr	r3, [r3, #0]
1a001a80:	42a3      	cmp	r3, r4
1a001a82:	d015      	beq.n	1a001ab0 <vTaskDelete+0x7c>
				--uxCurrentNumberOfTasks;
1a001a84:	4a1d      	ldr	r2, [pc, #116]	; (1a001afc <vTaskDelete+0xc8>)
1a001a86:	6813      	ldr	r3, [r2, #0]
1a001a88:	3b01      	subs	r3, #1
1a001a8a:	6013      	str	r3, [r2, #0]
				prvDeleteTCB( pxTCB );
1a001a8c:	4620      	mov	r0, r4
1a001a8e:	f7ff fec3 	bl	1a001818 <prvDeleteTCB>
				prvResetNextTaskUnblockTime();
1a001a92:	f7ff fdd9 	bl	1a001648 <prvResetNextTaskUnblockTime>
		taskEXIT_CRITICAL();
1a001a96:	f000 feff 	bl	1a002898 <vPortExitCritical>
		if( xSchedulerRunning != pdFALSE )
1a001a9a:	4b19      	ldr	r3, [pc, #100]	; (1a001b00 <vTaskDelete+0xcc>)
1a001a9c:	681b      	ldr	r3, [r3, #0]
1a001a9e:	b11b      	cbz	r3, 1a001aa8 <vTaskDelete+0x74>
			if( pxTCB == pxCurrentTCB )
1a001aa0:	4b15      	ldr	r3, [pc, #84]	; (1a001af8 <vTaskDelete+0xc4>)
1a001aa2:	681b      	ldr	r3, [r3, #0]
1a001aa4:	42a3      	cmp	r3, r4
1a001aa6:	d00c      	beq.n	1a001ac2 <vTaskDelete+0x8e>
	}
1a001aa8:	bd38      	pop	{r3, r4, r5, pc}
			pxTCB = prvGetTCBFromHandle( xTaskToDelete );
1a001aaa:	4b13      	ldr	r3, [pc, #76]	; (1a001af8 <vTaskDelete+0xc4>)
1a001aac:	681c      	ldr	r4, [r3, #0]
1a001aae:	e7c7      	b.n	1a001a40 <vTaskDelete+0xc>
				vListInsertEnd( &xTasksWaitingTermination, &( pxTCB->xStateListItem ) );
1a001ab0:	4629      	mov	r1, r5
1a001ab2:	4814      	ldr	r0, [pc, #80]	; (1a001b04 <vTaskDelete+0xd0>)
1a001ab4:	f7ff fd45 	bl	1a001542 <vListInsertEnd>
				++uxDeletedTasksWaitingCleanUp;
1a001ab8:	4a13      	ldr	r2, [pc, #76]	; (1a001b08 <vTaskDelete+0xd4>)
1a001aba:	6813      	ldr	r3, [r2, #0]
1a001abc:	3301      	adds	r3, #1
1a001abe:	6013      	str	r3, [r2, #0]
				portPRE_TASK_DELETE_HOOK( pxTCB, &xYieldPending );
1a001ac0:	e7e9      	b.n	1a001a96 <vTaskDelete+0x62>
				configASSERT( uxSchedulerSuspended == 0 );
1a001ac2:	4b12      	ldr	r3, [pc, #72]	; (1a001b0c <vTaskDelete+0xd8>)
1a001ac4:	681b      	ldr	r3, [r3, #0]
1a001ac6:	b143      	cbz	r3, 1a001ada <vTaskDelete+0xa6>
1a001ac8:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a001acc:	f383 8811 	msr	BASEPRI, r3
1a001ad0:	f3bf 8f6f 	isb	sy
1a001ad4:	f3bf 8f4f 	dsb	sy
1a001ad8:	e7fe      	b.n	1a001ad8 <vTaskDelete+0xa4>
				portYIELD_WITHIN_API();
1a001ada:	4b0d      	ldr	r3, [pc, #52]	; (1a001b10 <vTaskDelete+0xdc>)
1a001adc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
1a001ae0:	601a      	str	r2, [r3, #0]
1a001ae2:	f3bf 8f4f 	dsb	sy
1a001ae6:	f3bf 8f6f 	isb	sy
	}
1a001aea:	e7dd      	b.n	1a001aa8 <vTaskDelete+0x74>
1a001aec:	10003230 	.word	0x10003230
1a001af0:	100032d0 	.word	0x100032d0
1a001af4:	100032cc 	.word	0x100032cc
1a001af8:	10003224 	.word	0x10003224
1a001afc:	100032bc 	.word	0x100032bc
1a001b00:	10003318 	.word	0x10003318
1a001b04:	10003330 	.word	0x10003330
1a001b08:	100032c0 	.word	0x100032c0
1a001b0c:	100032c8 	.word	0x100032c8
1a001b10:	e000ed04 	.word	0xe000ed04

1a001b14 <vTaskStartScheduler>:
{
1a001b14:	b510      	push	{r4, lr}
1a001b16:	b088      	sub	sp, #32
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
1a001b18:	2400      	movs	r4, #0
1a001b1a:	9405      	str	r4, [sp, #20]
		StackType_t *pxIdleTaskStackBuffer = NULL;
1a001b1c:	9406      	str	r4, [sp, #24]
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
1a001b1e:	aa07      	add	r2, sp, #28
1a001b20:	a906      	add	r1, sp, #24
1a001b22:	a805      	add	r0, sp, #20
1a001b24:	f7ff fd46 	bl	1a0015b4 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
1a001b28:	9b05      	ldr	r3, [sp, #20]
1a001b2a:	9302      	str	r3, [sp, #8]
1a001b2c:	9b06      	ldr	r3, [sp, #24]
1a001b2e:	9301      	str	r3, [sp, #4]
1a001b30:	9400      	str	r4, [sp, #0]
1a001b32:	4623      	mov	r3, r4
1a001b34:	9a07      	ldr	r2, [sp, #28]
1a001b36:	4917      	ldr	r1, [pc, #92]	; (1a001b94 <vTaskStartScheduler+0x80>)
1a001b38:	4817      	ldr	r0, [pc, #92]	; (1a001b98 <vTaskStartScheduler+0x84>)
1a001b3a:	f7ff ff0f 	bl	1a00195c <xTaskCreateStatic>
		if( xIdleTaskHandle != NULL )
1a001b3e:	b140      	cbz	r0, 1a001b52 <vTaskStartScheduler+0x3e>
			xReturn = xTimerCreateTimerTask();
1a001b40:	f000 fc72 	bl	1a002428 <xTimerCreateTimerTask>
	if( xReturn == pdPASS )
1a001b44:	2801      	cmp	r0, #1
1a001b46:	d006      	beq.n	1a001b56 <vTaskStartScheduler+0x42>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
1a001b48:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
1a001b4c:	d018      	beq.n	1a001b80 <vTaskStartScheduler+0x6c>
}
1a001b4e:	b008      	add	sp, #32
1a001b50:	bd10      	pop	{r4, pc}
			xReturn = pdFAIL;
1a001b52:	2000      	movs	r0, #0
1a001b54:	e7f6      	b.n	1a001b44 <vTaskStartScheduler+0x30>
1a001b56:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a001b5a:	f383 8811 	msr	BASEPRI, r3
1a001b5e:	f3bf 8f6f 	isb	sy
1a001b62:	f3bf 8f4f 	dsb	sy
		xNextTaskUnblockTime = portMAX_DELAY;
1a001b66:	4b0d      	ldr	r3, [pc, #52]	; (1a001b9c <vTaskStartScheduler+0x88>)
1a001b68:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
1a001b6c:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
1a001b6e:	4b0c      	ldr	r3, [pc, #48]	; (1a001ba0 <vTaskStartScheduler+0x8c>)
1a001b70:	2201      	movs	r2, #1
1a001b72:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
1a001b74:	4b0b      	ldr	r3, [pc, #44]	; (1a001ba4 <vTaskStartScheduler+0x90>)
1a001b76:	2200      	movs	r2, #0
1a001b78:	601a      	str	r2, [r3, #0]
		if( xPortStartScheduler() != pdFALSE )
1a001b7a:	f000 ff0d 	bl	1a002998 <xPortStartScheduler>
1a001b7e:	e7e6      	b.n	1a001b4e <vTaskStartScheduler+0x3a>
1a001b80:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a001b84:	f383 8811 	msr	BASEPRI, r3
1a001b88:	f3bf 8f6f 	isb	sy
1a001b8c:	f3bf 8f4f 	dsb	sy
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
1a001b90:	e7fe      	b.n	1a001b90 <vTaskStartScheduler+0x7c>
1a001b92:	bf00      	nop
1a001b94:	1a00b014 	.word	0x1a00b014
1a001b98:	1a00189d 	.word	0x1a00189d
1a001b9c:	100032fc 	.word	0x100032fc
1a001ba0:	10003318 	.word	0x10003318
1a001ba4:	10003344 	.word	0x10003344

1a001ba8 <vTaskSuspendAll>:
	++uxSchedulerSuspended;
1a001ba8:	4a02      	ldr	r2, [pc, #8]	; (1a001bb4 <vTaskSuspendAll+0xc>)
1a001baa:	6813      	ldr	r3, [r2, #0]
1a001bac:	3301      	adds	r3, #1
1a001bae:	6013      	str	r3, [r2, #0]
}
1a001bb0:	4770      	bx	lr
1a001bb2:	bf00      	nop
1a001bb4:	100032c8 	.word	0x100032c8

1a001bb8 <xTaskGetTickCount>:
		xTicks = xTickCount;
1a001bb8:	4b01      	ldr	r3, [pc, #4]	; (1a001bc0 <xTaskGetTickCount+0x8>)
1a001bba:	6818      	ldr	r0, [r3, #0]
}
1a001bbc:	4770      	bx	lr
1a001bbe:	bf00      	nop
1a001bc0:	10003344 	.word	0x10003344

1a001bc4 <xTaskIncrementTick>:
{
1a001bc4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
1a001bc6:	4b3a      	ldr	r3, [pc, #232]	; (1a001cb0 <xTaskIncrementTick+0xec>)
1a001bc8:	681b      	ldr	r3, [r3, #0]
1a001bca:	2b00      	cmp	r3, #0
1a001bcc:	d164      	bne.n	1a001c98 <xTaskIncrementTick+0xd4>
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
1a001bce:	4b39      	ldr	r3, [pc, #228]	; (1a001cb4 <xTaskIncrementTick+0xf0>)
1a001bd0:	681d      	ldr	r5, [r3, #0]
1a001bd2:	3501      	adds	r5, #1
		xTickCount = xConstTickCount;
1a001bd4:	601d      	str	r5, [r3, #0]
		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
1a001bd6:	b9c5      	cbnz	r5, 1a001c0a <xTaskIncrementTick+0x46>
			taskSWITCH_DELAYED_LISTS();
1a001bd8:	4b37      	ldr	r3, [pc, #220]	; (1a001cb8 <xTaskIncrementTick+0xf4>)
1a001bda:	681b      	ldr	r3, [r3, #0]
1a001bdc:	681b      	ldr	r3, [r3, #0]
1a001bde:	b143      	cbz	r3, 1a001bf2 <xTaskIncrementTick+0x2e>
1a001be0:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a001be4:	f383 8811 	msr	BASEPRI, r3
1a001be8:	f3bf 8f6f 	isb	sy
1a001bec:	f3bf 8f4f 	dsb	sy
1a001bf0:	e7fe      	b.n	1a001bf0 <xTaskIncrementTick+0x2c>
1a001bf2:	4a31      	ldr	r2, [pc, #196]	; (1a001cb8 <xTaskIncrementTick+0xf4>)
1a001bf4:	6811      	ldr	r1, [r2, #0]
1a001bf6:	4b31      	ldr	r3, [pc, #196]	; (1a001cbc <xTaskIncrementTick+0xf8>)
1a001bf8:	6818      	ldr	r0, [r3, #0]
1a001bfa:	6010      	str	r0, [r2, #0]
1a001bfc:	6019      	str	r1, [r3, #0]
1a001bfe:	4a30      	ldr	r2, [pc, #192]	; (1a001cc0 <xTaskIncrementTick+0xfc>)
1a001c00:	6813      	ldr	r3, [r2, #0]
1a001c02:	3301      	adds	r3, #1
1a001c04:	6013      	str	r3, [r2, #0]
1a001c06:	f7ff fd1f 	bl	1a001648 <prvResetNextTaskUnblockTime>
		if( xConstTickCount >= xNextTaskUnblockTime )
1a001c0a:	4b2e      	ldr	r3, [pc, #184]	; (1a001cc4 <xTaskIncrementTick+0x100>)
1a001c0c:	681b      	ldr	r3, [r3, #0]
1a001c0e:	42ab      	cmp	r3, r5
1a001c10:	d938      	bls.n	1a001c84 <xTaskIncrementTick+0xc0>
BaseType_t xSwitchRequired = pdFALSE;
1a001c12:	2400      	movs	r4, #0
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
1a001c14:	4b2c      	ldr	r3, [pc, #176]	; (1a001cc8 <xTaskIncrementTick+0x104>)
1a001c16:	681b      	ldr	r3, [r3, #0]
1a001c18:	6adb      	ldr	r3, [r3, #44]	; 0x2c
1a001c1a:	eb03 0383 	add.w	r3, r3, r3, lsl #2
1a001c1e:	009a      	lsls	r2, r3, #2
1a001c20:	4b2a      	ldr	r3, [pc, #168]	; (1a001ccc <xTaskIncrementTick+0x108>)
1a001c22:	589b      	ldr	r3, [r3, r2]
1a001c24:	2b01      	cmp	r3, #1
1a001c26:	d93c      	bls.n	1a001ca2 <xTaskIncrementTick+0xde>
				xSwitchRequired = pdTRUE;
1a001c28:	2401      	movs	r4, #1
1a001c2a:	e03a      	b.n	1a001ca2 <xTaskIncrementTick+0xde>
							xSwitchRequired = pdTRUE;
1a001c2c:	2401      	movs	r4, #1
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
1a001c2e:	4b22      	ldr	r3, [pc, #136]	; (1a001cb8 <xTaskIncrementTick+0xf4>)
1a001c30:	681b      	ldr	r3, [r3, #0]
1a001c32:	681b      	ldr	r3, [r3, #0]
1a001c34:	b343      	cbz	r3, 1a001c88 <xTaskIncrementTick+0xc4>
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
1a001c36:	4b20      	ldr	r3, [pc, #128]	; (1a001cb8 <xTaskIncrementTick+0xf4>)
1a001c38:	681b      	ldr	r3, [r3, #0]
1a001c3a:	68db      	ldr	r3, [r3, #12]
1a001c3c:	68de      	ldr	r6, [r3, #12]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
1a001c3e:	6873      	ldr	r3, [r6, #4]
					if( xConstTickCount < xItemValue )
1a001c40:	429d      	cmp	r5, r3
1a001c42:	d326      	bcc.n	1a001c92 <xTaskIncrementTick+0xce>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
1a001c44:	1d37      	adds	r7, r6, #4
1a001c46:	4638      	mov	r0, r7
1a001c48:	f7ff fca0 	bl	1a00158c <uxListRemove>
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
1a001c4c:	6ab3      	ldr	r3, [r6, #40]	; 0x28
1a001c4e:	b11b      	cbz	r3, 1a001c58 <xTaskIncrementTick+0x94>
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
1a001c50:	f106 0018 	add.w	r0, r6, #24
1a001c54:	f7ff fc9a 	bl	1a00158c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
1a001c58:	6af3      	ldr	r3, [r6, #44]	; 0x2c
1a001c5a:	2201      	movs	r2, #1
1a001c5c:	409a      	lsls	r2, r3
1a001c5e:	491c      	ldr	r1, [pc, #112]	; (1a001cd0 <xTaskIncrementTick+0x10c>)
1a001c60:	6808      	ldr	r0, [r1, #0]
1a001c62:	4302      	orrs	r2, r0
1a001c64:	600a      	str	r2, [r1, #0]
1a001c66:	eb03 0383 	add.w	r3, r3, r3, lsl #2
1a001c6a:	009a      	lsls	r2, r3, #2
1a001c6c:	4639      	mov	r1, r7
1a001c6e:	4817      	ldr	r0, [pc, #92]	; (1a001ccc <xTaskIncrementTick+0x108>)
1a001c70:	4410      	add	r0, r2
1a001c72:	f7ff fc66 	bl	1a001542 <vListInsertEnd>
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
1a001c76:	6af2      	ldr	r2, [r6, #44]	; 0x2c
1a001c78:	4b13      	ldr	r3, [pc, #76]	; (1a001cc8 <xTaskIncrementTick+0x104>)
1a001c7a:	681b      	ldr	r3, [r3, #0]
1a001c7c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
1a001c7e:	429a      	cmp	r2, r3
1a001c80:	d2d4      	bcs.n	1a001c2c <xTaskIncrementTick+0x68>
1a001c82:	e7d4      	b.n	1a001c2e <xTaskIncrementTick+0x6a>
BaseType_t xSwitchRequired = pdFALSE;
1a001c84:	2400      	movs	r4, #0
1a001c86:	e7d2      	b.n	1a001c2e <xTaskIncrementTick+0x6a>
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
1a001c88:	4b0e      	ldr	r3, [pc, #56]	; (1a001cc4 <xTaskIncrementTick+0x100>)
1a001c8a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
1a001c8e:	601a      	str	r2, [r3, #0]
					break;
1a001c90:	e7c0      	b.n	1a001c14 <xTaskIncrementTick+0x50>
						xNextTaskUnblockTime = xItemValue;
1a001c92:	4a0c      	ldr	r2, [pc, #48]	; (1a001cc4 <xTaskIncrementTick+0x100>)
1a001c94:	6013      	str	r3, [r2, #0]
						break;
1a001c96:	e7bd      	b.n	1a001c14 <xTaskIncrementTick+0x50>
		++uxPendedTicks;
1a001c98:	4a0e      	ldr	r2, [pc, #56]	; (1a001cd4 <xTaskIncrementTick+0x110>)
1a001c9a:	6813      	ldr	r3, [r2, #0]
1a001c9c:	3301      	adds	r3, #1
1a001c9e:	6013      	str	r3, [r2, #0]
BaseType_t xSwitchRequired = pdFALSE;
1a001ca0:	2400      	movs	r4, #0
		if( xYieldPending != pdFALSE )
1a001ca2:	4b0d      	ldr	r3, [pc, #52]	; (1a001cd8 <xTaskIncrementTick+0x114>)
1a001ca4:	681b      	ldr	r3, [r3, #0]
1a001ca6:	b103      	cbz	r3, 1a001caa <xTaskIncrementTick+0xe6>
			xSwitchRequired = pdTRUE;
1a001ca8:	2401      	movs	r4, #1
}
1a001caa:	4620      	mov	r0, r4
1a001cac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1a001cae:	bf00      	nop
1a001cb0:	100032c8 	.word	0x100032c8
1a001cb4:	10003344 	.word	0x10003344
1a001cb8:	10003228 	.word	0x10003228
1a001cbc:	1000322c 	.word	0x1000322c
1a001cc0:	10003300 	.word	0x10003300
1a001cc4:	100032fc 	.word	0x100032fc
1a001cc8:	10003224 	.word	0x10003224
1a001ccc:	10003230 	.word	0x10003230
1a001cd0:	100032d0 	.word	0x100032d0
1a001cd4:	100032c4 	.word	0x100032c4
1a001cd8:	10003348 	.word	0x10003348

1a001cdc <xTaskResumeAll>:
{
1a001cdc:	b538      	push	{r3, r4, r5, lr}
	configASSERT( uxSchedulerSuspended );
1a001cde:	4b35      	ldr	r3, [pc, #212]	; (1a001db4 <xTaskResumeAll+0xd8>)
1a001ce0:	681b      	ldr	r3, [r3, #0]
1a001ce2:	b943      	cbnz	r3, 1a001cf6 <xTaskResumeAll+0x1a>
1a001ce4:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a001ce8:	f383 8811 	msr	BASEPRI, r3
1a001cec:	f3bf 8f6f 	isb	sy
1a001cf0:	f3bf 8f4f 	dsb	sy
1a001cf4:	e7fe      	b.n	1a001cf4 <xTaskResumeAll+0x18>
	taskENTER_CRITICAL();
1a001cf6:	f000 fdad 	bl	1a002854 <vPortEnterCritical>
		--uxSchedulerSuspended;
1a001cfa:	4b2e      	ldr	r3, [pc, #184]	; (1a001db4 <xTaskResumeAll+0xd8>)
1a001cfc:	681a      	ldr	r2, [r3, #0]
1a001cfe:	3a01      	subs	r2, #1
1a001d00:	601a      	str	r2, [r3, #0]
		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
1a001d02:	681b      	ldr	r3, [r3, #0]
1a001d04:	2b00      	cmp	r3, #0
1a001d06:	d14d      	bne.n	1a001da4 <xTaskResumeAll+0xc8>
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
1a001d08:	4b2b      	ldr	r3, [pc, #172]	; (1a001db8 <xTaskResumeAll+0xdc>)
1a001d0a:	681b      	ldr	r3, [r3, #0]
1a001d0c:	b90b      	cbnz	r3, 1a001d12 <xTaskResumeAll+0x36>
BaseType_t xAlreadyYielded = pdFALSE;
1a001d0e:	2400      	movs	r4, #0
1a001d10:	e049      	b.n	1a001da6 <xTaskResumeAll+0xca>
TCB_t *pxTCB = NULL;
1a001d12:	2400      	movs	r4, #0
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
1a001d14:	4b29      	ldr	r3, [pc, #164]	; (1a001dbc <xTaskResumeAll+0xe0>)
1a001d16:	681b      	ldr	r3, [r3, #0]
1a001d18:	b31b      	cbz	r3, 1a001d62 <xTaskResumeAll+0x86>
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
1a001d1a:	4b28      	ldr	r3, [pc, #160]	; (1a001dbc <xTaskResumeAll+0xe0>)
1a001d1c:	68db      	ldr	r3, [r3, #12]
1a001d1e:	68dc      	ldr	r4, [r3, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
1a001d20:	f104 0018 	add.w	r0, r4, #24
1a001d24:	f7ff fc32 	bl	1a00158c <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
1a001d28:	1d25      	adds	r5, r4, #4
1a001d2a:	4628      	mov	r0, r5
1a001d2c:	f7ff fc2e 	bl	1a00158c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
1a001d30:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
1a001d32:	2201      	movs	r2, #1
1a001d34:	409a      	lsls	r2, r3
1a001d36:	4922      	ldr	r1, [pc, #136]	; (1a001dc0 <xTaskResumeAll+0xe4>)
1a001d38:	6808      	ldr	r0, [r1, #0]
1a001d3a:	4302      	orrs	r2, r0
1a001d3c:	600a      	str	r2, [r1, #0]
1a001d3e:	eb03 0383 	add.w	r3, r3, r3, lsl #2
1a001d42:	009a      	lsls	r2, r3, #2
1a001d44:	4629      	mov	r1, r5
1a001d46:	481f      	ldr	r0, [pc, #124]	; (1a001dc4 <xTaskResumeAll+0xe8>)
1a001d48:	4410      	add	r0, r2
1a001d4a:	f7ff fbfa 	bl	1a001542 <vListInsertEnd>
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
1a001d4e:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
1a001d50:	4b1d      	ldr	r3, [pc, #116]	; (1a001dc8 <xTaskResumeAll+0xec>)
1a001d52:	681b      	ldr	r3, [r3, #0]
1a001d54:	6adb      	ldr	r3, [r3, #44]	; 0x2c
1a001d56:	429a      	cmp	r2, r3
1a001d58:	d3dc      	bcc.n	1a001d14 <xTaskResumeAll+0x38>
						xYieldPending = pdTRUE;
1a001d5a:	4b1c      	ldr	r3, [pc, #112]	; (1a001dcc <xTaskResumeAll+0xf0>)
1a001d5c:	2201      	movs	r2, #1
1a001d5e:	601a      	str	r2, [r3, #0]
1a001d60:	e7d8      	b.n	1a001d14 <xTaskResumeAll+0x38>
				if( pxTCB != NULL )
1a001d62:	b10c      	cbz	r4, 1a001d68 <xTaskResumeAll+0x8c>
					prvResetNextTaskUnblockTime();
1a001d64:	f7ff fc70 	bl	1a001648 <prvResetNextTaskUnblockTime>
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
1a001d68:	4b19      	ldr	r3, [pc, #100]	; (1a001dd0 <xTaskResumeAll+0xf4>)
1a001d6a:	681c      	ldr	r4, [r3, #0]
					if( uxPendedCounts > ( UBaseType_t ) 0U )
1a001d6c:	b974      	cbnz	r4, 1a001d8c <xTaskResumeAll+0xb0>
				if( xYieldPending != pdFALSE )
1a001d6e:	4b17      	ldr	r3, [pc, #92]	; (1a001dcc <xTaskResumeAll+0xf0>)
1a001d70:	681b      	ldr	r3, [r3, #0]
1a001d72:	b1e3      	cbz	r3, 1a001dae <xTaskResumeAll+0xd2>
					taskYIELD_IF_USING_PREEMPTION();
1a001d74:	4b17      	ldr	r3, [pc, #92]	; (1a001dd4 <xTaskResumeAll+0xf8>)
1a001d76:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
1a001d7a:	601a      	str	r2, [r3, #0]
1a001d7c:	f3bf 8f4f 	dsb	sy
1a001d80:	f3bf 8f6f 	isb	sy
						xAlreadyYielded = pdTRUE;
1a001d84:	2401      	movs	r4, #1
1a001d86:	e00e      	b.n	1a001da6 <xTaskResumeAll+0xca>
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
1a001d88:	3c01      	subs	r4, #1
1a001d8a:	d007      	beq.n	1a001d9c <xTaskResumeAll+0xc0>
							if( xTaskIncrementTick() != pdFALSE )
1a001d8c:	f7ff ff1a 	bl	1a001bc4 <xTaskIncrementTick>
1a001d90:	2800      	cmp	r0, #0
1a001d92:	d0f9      	beq.n	1a001d88 <xTaskResumeAll+0xac>
								xYieldPending = pdTRUE;
1a001d94:	4b0d      	ldr	r3, [pc, #52]	; (1a001dcc <xTaskResumeAll+0xf0>)
1a001d96:	2201      	movs	r2, #1
1a001d98:	601a      	str	r2, [r3, #0]
1a001d9a:	e7f5      	b.n	1a001d88 <xTaskResumeAll+0xac>
						uxPendedTicks = 0;
1a001d9c:	4b0c      	ldr	r3, [pc, #48]	; (1a001dd0 <xTaskResumeAll+0xf4>)
1a001d9e:	2200      	movs	r2, #0
1a001da0:	601a      	str	r2, [r3, #0]
1a001da2:	e7e4      	b.n	1a001d6e <xTaskResumeAll+0x92>
BaseType_t xAlreadyYielded = pdFALSE;
1a001da4:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
1a001da6:	f000 fd77 	bl	1a002898 <vPortExitCritical>
}
1a001daa:	4620      	mov	r0, r4
1a001dac:	bd38      	pop	{r3, r4, r5, pc}
BaseType_t xAlreadyYielded = pdFALSE;
1a001dae:	2400      	movs	r4, #0
1a001db0:	e7f9      	b.n	1a001da6 <xTaskResumeAll+0xca>
1a001db2:	bf00      	nop
1a001db4:	100032c8 	.word	0x100032c8
1a001db8:	100032bc 	.word	0x100032bc
1a001dbc:	10003304 	.word	0x10003304
1a001dc0:	100032d0 	.word	0x100032d0
1a001dc4:	10003230 	.word	0x10003230
1a001dc8:	10003224 	.word	0x10003224
1a001dcc:	10003348 	.word	0x10003348
1a001dd0:	100032c4 	.word	0x100032c4
1a001dd4:	e000ed04 	.word	0xe000ed04

1a001dd8 <vTaskDelayUntil>:
	{
1a001dd8:	b538      	push	{r3, r4, r5, lr}
		configASSERT( pxPreviousWakeTime );
1a001dda:	b150      	cbz	r0, 1a001df2 <vTaskDelayUntil+0x1a>
1a001ddc:	4605      	mov	r5, r0
		configASSERT( ( xTimeIncrement > 0U ) );
1a001dde:	b989      	cbnz	r1, 1a001e04 <vTaskDelayUntil+0x2c>
1a001de0:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a001de4:	f383 8811 	msr	BASEPRI, r3
1a001de8:	f3bf 8f6f 	isb	sy
1a001dec:	f3bf 8f4f 	dsb	sy
1a001df0:	e7fe      	b.n	1a001df0 <vTaskDelayUntil+0x18>
1a001df2:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a001df6:	f383 8811 	msr	BASEPRI, r3
1a001dfa:	f3bf 8f6f 	isb	sy
1a001dfe:	f3bf 8f4f 	dsb	sy
		configASSERT( pxPreviousWakeTime );
1a001e02:	e7fe      	b.n	1a001e02 <vTaskDelayUntil+0x2a>
		configASSERT( uxSchedulerSuspended == 0 );
1a001e04:	4b1a      	ldr	r3, [pc, #104]	; (1a001e70 <vTaskDelayUntil+0x98>)
1a001e06:	681b      	ldr	r3, [r3, #0]
1a001e08:	b143      	cbz	r3, 1a001e1c <vTaskDelayUntil+0x44>
1a001e0a:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a001e0e:	f383 8811 	msr	BASEPRI, r3
1a001e12:	f3bf 8f6f 	isb	sy
1a001e16:	f3bf 8f4f 	dsb	sy
1a001e1a:	e7fe      	b.n	1a001e1a <vTaskDelayUntil+0x42>
1a001e1c:	460c      	mov	r4, r1
		vTaskSuspendAll();
1a001e1e:	f7ff fec3 	bl	1a001ba8 <vTaskSuspendAll>
			const TickType_t xConstTickCount = xTickCount;
1a001e22:	4b14      	ldr	r3, [pc, #80]	; (1a001e74 <vTaskDelayUntil+0x9c>)
1a001e24:	6818      	ldr	r0, [r3, #0]
			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
1a001e26:	682a      	ldr	r2, [r5, #0]
1a001e28:	4414      	add	r4, r2
			if( xConstTickCount < *pxPreviousWakeTime )
1a001e2a:	4282      	cmp	r2, r0
1a001e2c:	d909      	bls.n	1a001e42 <vTaskDelayUntil+0x6a>
				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
1a001e2e:	42a2      	cmp	r2, r4
1a001e30:	d801      	bhi.n	1a001e36 <vTaskDelayUntil+0x5e>
			*pxPreviousWakeTime = xTimeToWake;
1a001e32:	602c      	str	r4, [r5, #0]
			if( xShouldDelay != pdFALSE )
1a001e34:	e00e      	b.n	1a001e54 <vTaskDelayUntil+0x7c>
				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
1a001e36:	42a0      	cmp	r0, r4
1a001e38:	d301      	bcc.n	1a001e3e <vTaskDelayUntil+0x66>
			*pxPreviousWakeTime = xTimeToWake;
1a001e3a:	602c      	str	r4, [r5, #0]
			if( xShouldDelay != pdFALSE )
1a001e3c:	e00a      	b.n	1a001e54 <vTaskDelayUntil+0x7c>
			*pxPreviousWakeTime = xTimeToWake;
1a001e3e:	602c      	str	r4, [r5, #0]
			if( xShouldDelay != pdFALSE )
1a001e40:	e004      	b.n	1a001e4c <vTaskDelayUntil+0x74>
				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xConstTickCount ) )
1a001e42:	42a2      	cmp	r2, r4
1a001e44:	d801      	bhi.n	1a001e4a <vTaskDelayUntil+0x72>
1a001e46:	42a0      	cmp	r0, r4
1a001e48:	d210      	bcs.n	1a001e6c <vTaskDelayUntil+0x94>
			*pxPreviousWakeTime = xTimeToWake;
1a001e4a:	602c      	str	r4, [r5, #0]
				prvAddCurrentTaskToDelayedList( xTimeToWake - xConstTickCount, pdFALSE );
1a001e4c:	2100      	movs	r1, #0
1a001e4e:	1a20      	subs	r0, r4, r0
1a001e50:	f7ff fd38 	bl	1a0018c4 <prvAddCurrentTaskToDelayedList>
		xAlreadyYielded = xTaskResumeAll();
1a001e54:	f7ff ff42 	bl	1a001cdc <xTaskResumeAll>
		if( xAlreadyYielded == pdFALSE )
1a001e58:	b938      	cbnz	r0, 1a001e6a <vTaskDelayUntil+0x92>
			portYIELD_WITHIN_API();
1a001e5a:	4b07      	ldr	r3, [pc, #28]	; (1a001e78 <vTaskDelayUntil+0xa0>)
1a001e5c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
1a001e60:	601a      	str	r2, [r3, #0]
1a001e62:	f3bf 8f4f 	dsb	sy
1a001e66:	f3bf 8f6f 	isb	sy
	}
1a001e6a:	bd38      	pop	{r3, r4, r5, pc}
			*pxPreviousWakeTime = xTimeToWake;
1a001e6c:	602c      	str	r4, [r5, #0]
			if( xShouldDelay != pdFALSE )
1a001e6e:	e7f1      	b.n	1a001e54 <vTaskDelayUntil+0x7c>
1a001e70:	100032c8 	.word	0x100032c8
1a001e74:	10003344 	.word	0x10003344
1a001e78:	e000ed04 	.word	0xe000ed04

1a001e7c <vTaskSwitchContext>:
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
1a001e7c:	4b2d      	ldr	r3, [pc, #180]	; (1a001f34 <vTaskSwitchContext+0xb8>)
1a001e7e:	681b      	ldr	r3, [r3, #0]
1a001e80:	b11b      	cbz	r3, 1a001e8a <vTaskSwitchContext+0xe>
		xYieldPending = pdTRUE;
1a001e82:	4b2d      	ldr	r3, [pc, #180]	; (1a001f38 <vTaskSwitchContext+0xbc>)
1a001e84:	2201      	movs	r2, #1
1a001e86:	601a      	str	r2, [r3, #0]
1a001e88:	4770      	bx	lr
{
1a001e8a:	b510      	push	{r4, lr}
		xYieldPending = pdFALSE;
1a001e8c:	4b2a      	ldr	r3, [pc, #168]	; (1a001f38 <vTaskSwitchContext+0xbc>)
1a001e8e:	2200      	movs	r2, #0
1a001e90:	601a      	str	r2, [r3, #0]
		taskCHECK_FOR_STACK_OVERFLOW();
1a001e92:	4b2a      	ldr	r3, [pc, #168]	; (1a001f3c <vTaskSwitchContext+0xc0>)
1a001e94:	681b      	ldr	r3, [r3, #0]
1a001e96:	6b1b      	ldr	r3, [r3, #48]	; 0x30
1a001e98:	681a      	ldr	r2, [r3, #0]
1a001e9a:	f1b2 3fa5 	cmp.w	r2, #2779096485	; 0xa5a5a5a5
1a001e9e:	d103      	bne.n	1a001ea8 <vTaskSwitchContext+0x2c>
1a001ea0:	685a      	ldr	r2, [r3, #4]
1a001ea2:	f1b2 3fa5 	cmp.w	r2, #2779096485	; 0xa5a5a5a5
1a001ea6:	d01b      	beq.n	1a001ee0 <vTaskSwitchContext+0x64>
1a001ea8:	4b24      	ldr	r3, [pc, #144]	; (1a001f3c <vTaskSwitchContext+0xc0>)
1a001eaa:	6818      	ldr	r0, [r3, #0]
1a001eac:	6819      	ldr	r1, [r3, #0]
1a001eae:	3134      	adds	r1, #52	; 0x34
1a001eb0:	f7ff fbbc 	bl	1a00162c <vApplicationStackOverflowHook>
		taskSELECT_HIGHEST_PRIORITY_TASK();
1a001eb4:	4b22      	ldr	r3, [pc, #136]	; (1a001f40 <vTaskSwitchContext+0xc4>)
1a001eb6:	681b      	ldr	r3, [r3, #0]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
1a001eb8:	fab3 f383 	clz	r3, r3
1a001ebc:	b2db      	uxtb	r3, r3
1a001ebe:	f1c3 031f 	rsb	r3, r3, #31
1a001ec2:	eb03 0183 	add.w	r1, r3, r3, lsl #2
1a001ec6:	008a      	lsls	r2, r1, #2
1a001ec8:	491e      	ldr	r1, [pc, #120]	; (1a001f44 <vTaskSwitchContext+0xc8>)
1a001eca:	588a      	ldr	r2, [r1, r2]
1a001ecc:	b98a      	cbnz	r2, 1a001ef2 <vTaskSwitchContext+0x76>
	__asm volatile
1a001ece:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a001ed2:	f383 8811 	msr	BASEPRI, r3
1a001ed6:	f3bf 8f6f 	isb	sy
1a001eda:	f3bf 8f4f 	dsb	sy
1a001ede:	e7fe      	b.n	1a001ede <vTaskSwitchContext+0x62>
		taskCHECK_FOR_STACK_OVERFLOW();
1a001ee0:	689a      	ldr	r2, [r3, #8]
1a001ee2:	f1b2 3fa5 	cmp.w	r2, #2779096485	; 0xa5a5a5a5
1a001ee6:	d1df      	bne.n	1a001ea8 <vTaskSwitchContext+0x2c>
1a001ee8:	68db      	ldr	r3, [r3, #12]
1a001eea:	f1b3 3fa5 	cmp.w	r3, #2779096485	; 0xa5a5a5a5
1a001eee:	d1db      	bne.n	1a001ea8 <vTaskSwitchContext+0x2c>
1a001ef0:	e7e0      	b.n	1a001eb4 <vTaskSwitchContext+0x38>
		taskSELECT_HIGHEST_PRIORITY_TASK();
1a001ef2:	4814      	ldr	r0, [pc, #80]	; (1a001f44 <vTaskSwitchContext+0xc8>)
1a001ef4:	009a      	lsls	r2, r3, #2
1a001ef6:	18d4      	adds	r4, r2, r3
1a001ef8:	00a1      	lsls	r1, r4, #2
1a001efa:	4401      	add	r1, r0
1a001efc:	684c      	ldr	r4, [r1, #4]
1a001efe:	6864      	ldr	r4, [r4, #4]
1a001f00:	604c      	str	r4, [r1, #4]
1a001f02:	441a      	add	r2, r3
1a001f04:	0091      	lsls	r1, r2, #2
1a001f06:	3108      	adds	r1, #8
1a001f08:	4408      	add	r0, r1
1a001f0a:	4284      	cmp	r4, r0
1a001f0c:	d009      	beq.n	1a001f22 <vTaskSwitchContext+0xa6>
1a001f0e:	eb03 0383 	add.w	r3, r3, r3, lsl #2
1a001f12:	009a      	lsls	r2, r3, #2
1a001f14:	4b0b      	ldr	r3, [pc, #44]	; (1a001f44 <vTaskSwitchContext+0xc8>)
1a001f16:	4413      	add	r3, r2
1a001f18:	685b      	ldr	r3, [r3, #4]
1a001f1a:	68da      	ldr	r2, [r3, #12]
1a001f1c:	4b07      	ldr	r3, [pc, #28]	; (1a001f3c <vTaskSwitchContext+0xc0>)
1a001f1e:	601a      	str	r2, [r3, #0]
}
1a001f20:	bd10      	pop	{r4, pc}
		taskSELECT_HIGHEST_PRIORITY_TASK();
1a001f22:	6860      	ldr	r0, [r4, #4]
1a001f24:	eb03 0283 	add.w	r2, r3, r3, lsl #2
1a001f28:	0091      	lsls	r1, r2, #2
1a001f2a:	4a06      	ldr	r2, [pc, #24]	; (1a001f44 <vTaskSwitchContext+0xc8>)
1a001f2c:	440a      	add	r2, r1
1a001f2e:	6050      	str	r0, [r2, #4]
1a001f30:	e7ed      	b.n	1a001f0e <vTaskSwitchContext+0x92>
1a001f32:	bf00      	nop
1a001f34:	100032c8 	.word	0x100032c8
1a001f38:	10003348 	.word	0x10003348
1a001f3c:	10003224 	.word	0x10003224
1a001f40:	100032d0 	.word	0x100032d0
1a001f44:	10003230 	.word	0x10003230

1a001f48 <vTaskPlaceOnEventList>:
	configASSERT( pxEventList );
1a001f48:	b158      	cbz	r0, 1a001f62 <vTaskPlaceOnEventList+0x1a>
{
1a001f4a:	b510      	push	{r4, lr}
1a001f4c:	460c      	mov	r4, r1
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
1a001f4e:	4b09      	ldr	r3, [pc, #36]	; (1a001f74 <vTaskPlaceOnEventList+0x2c>)
1a001f50:	6819      	ldr	r1, [r3, #0]
1a001f52:	3118      	adds	r1, #24
1a001f54:	f7ff fb00 	bl	1a001558 <vListInsert>
	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
1a001f58:	2101      	movs	r1, #1
1a001f5a:	4620      	mov	r0, r4
1a001f5c:	f7ff fcb2 	bl	1a0018c4 <prvAddCurrentTaskToDelayedList>
}
1a001f60:	bd10      	pop	{r4, pc}
1a001f62:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a001f66:	f383 8811 	msr	BASEPRI, r3
1a001f6a:	f3bf 8f6f 	isb	sy
1a001f6e:	f3bf 8f4f 	dsb	sy
	configASSERT( pxEventList );
1a001f72:	e7fe      	b.n	1a001f72 <vTaskPlaceOnEventList+0x2a>
1a001f74:	10003224 	.word	0x10003224

1a001f78 <vTaskPlaceOnEventListRestricted>:
	{
1a001f78:	b538      	push	{r3, r4, r5, lr}
		configASSERT( pxEventList );
1a001f7a:	b170      	cbz	r0, 1a001f9a <vTaskPlaceOnEventListRestricted+0x22>
1a001f7c:	460c      	mov	r4, r1
1a001f7e:	4615      	mov	r5, r2
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
1a001f80:	4a0a      	ldr	r2, [pc, #40]	; (1a001fac <vTaskPlaceOnEventListRestricted+0x34>)
1a001f82:	6811      	ldr	r1, [r2, #0]
1a001f84:	3118      	adds	r1, #24
1a001f86:	f7ff fadc 	bl	1a001542 <vListInsertEnd>
		if( xWaitIndefinitely != pdFALSE )
1a001f8a:	b10d      	cbz	r5, 1a001f90 <vTaskPlaceOnEventListRestricted+0x18>
			xTicksToWait = portMAX_DELAY;
1a001f8c:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
1a001f90:	4629      	mov	r1, r5
1a001f92:	4620      	mov	r0, r4
1a001f94:	f7ff fc96 	bl	1a0018c4 <prvAddCurrentTaskToDelayedList>
	}
1a001f98:	bd38      	pop	{r3, r4, r5, pc}
1a001f9a:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a001f9e:	f383 8811 	msr	BASEPRI, r3
1a001fa2:	f3bf 8f6f 	isb	sy
1a001fa6:	f3bf 8f4f 	dsb	sy
		configASSERT( pxEventList );
1a001faa:	e7fe      	b.n	1a001faa <vTaskPlaceOnEventListRestricted+0x32>
1a001fac:	10003224 	.word	0x10003224

1a001fb0 <xTaskRemoveFromEventList>:
{
1a001fb0:	b538      	push	{r3, r4, r5, lr}
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
1a001fb2:	68c3      	ldr	r3, [r0, #12]
1a001fb4:	68dc      	ldr	r4, [r3, #12]
	configASSERT( pxUnblockedTCB );
1a001fb6:	b324      	cbz	r4, 1a002002 <xTaskRemoveFromEventList+0x52>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
1a001fb8:	f104 0518 	add.w	r5, r4, #24
1a001fbc:	4628      	mov	r0, r5
1a001fbe:	f7ff fae5 	bl	1a00158c <uxListRemove>
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
1a001fc2:	4b18      	ldr	r3, [pc, #96]	; (1a002024 <xTaskRemoveFromEventList+0x74>)
1a001fc4:	681b      	ldr	r3, [r3, #0]
1a001fc6:	bb2b      	cbnz	r3, 1a002014 <xTaskRemoveFromEventList+0x64>
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
1a001fc8:	1d25      	adds	r5, r4, #4
1a001fca:	4628      	mov	r0, r5
1a001fcc:	f7ff fade 	bl	1a00158c <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
1a001fd0:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
1a001fd2:	2201      	movs	r2, #1
1a001fd4:	409a      	lsls	r2, r3
1a001fd6:	4914      	ldr	r1, [pc, #80]	; (1a002028 <xTaskRemoveFromEventList+0x78>)
1a001fd8:	6808      	ldr	r0, [r1, #0]
1a001fda:	4302      	orrs	r2, r0
1a001fdc:	600a      	str	r2, [r1, #0]
1a001fde:	eb03 0383 	add.w	r3, r3, r3, lsl #2
1a001fe2:	009a      	lsls	r2, r3, #2
1a001fe4:	4629      	mov	r1, r5
1a001fe6:	4811      	ldr	r0, [pc, #68]	; (1a00202c <xTaskRemoveFromEventList+0x7c>)
1a001fe8:	4410      	add	r0, r2
1a001fea:	f7ff faaa 	bl	1a001542 <vListInsertEnd>
	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
1a001fee:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
1a001ff0:	4b0f      	ldr	r3, [pc, #60]	; (1a002030 <xTaskRemoveFromEventList+0x80>)
1a001ff2:	681b      	ldr	r3, [r3, #0]
1a001ff4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
1a001ff6:	429a      	cmp	r2, r3
1a001ff8:	d911      	bls.n	1a00201e <xTaskRemoveFromEventList+0x6e>
		xYieldPending = pdTRUE;
1a001ffa:	2001      	movs	r0, #1
1a001ffc:	4b0d      	ldr	r3, [pc, #52]	; (1a002034 <xTaskRemoveFromEventList+0x84>)
1a001ffe:	6018      	str	r0, [r3, #0]
1a002000:	e00e      	b.n	1a002020 <xTaskRemoveFromEventList+0x70>
1a002002:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a002006:	f383 8811 	msr	BASEPRI, r3
1a00200a:	f3bf 8f6f 	isb	sy
1a00200e:	f3bf 8f4f 	dsb	sy
	configASSERT( pxUnblockedTCB );
1a002012:	e7fe      	b.n	1a002012 <xTaskRemoveFromEventList+0x62>
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
1a002014:	4629      	mov	r1, r5
1a002016:	4808      	ldr	r0, [pc, #32]	; (1a002038 <xTaskRemoveFromEventList+0x88>)
1a002018:	f7ff fa93 	bl	1a001542 <vListInsertEnd>
1a00201c:	e7e7      	b.n	1a001fee <xTaskRemoveFromEventList+0x3e>
		xReturn = pdFALSE;
1a00201e:	2000      	movs	r0, #0
}
1a002020:	bd38      	pop	{r3, r4, r5, pc}
1a002022:	bf00      	nop
1a002024:	100032c8 	.word	0x100032c8
1a002028:	100032d0 	.word	0x100032d0
1a00202c:	10003230 	.word	0x10003230
1a002030:	10003224 	.word	0x10003224
1a002034:	10003348 	.word	0x10003348
1a002038:	10003304 	.word	0x10003304

1a00203c <vTaskInternalSetTimeOutState>:
	pxTimeOut->xOverflowCount = xNumOfOverflows;
1a00203c:	4b03      	ldr	r3, [pc, #12]	; (1a00204c <vTaskInternalSetTimeOutState+0x10>)
1a00203e:	681b      	ldr	r3, [r3, #0]
1a002040:	6003      	str	r3, [r0, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
1a002042:	4b03      	ldr	r3, [pc, #12]	; (1a002050 <vTaskInternalSetTimeOutState+0x14>)
1a002044:	681b      	ldr	r3, [r3, #0]
1a002046:	6043      	str	r3, [r0, #4]
}
1a002048:	4770      	bx	lr
1a00204a:	bf00      	nop
1a00204c:	10003300 	.word	0x10003300
1a002050:	10003344 	.word	0x10003344

1a002054 <xTaskCheckForTimeOut>:
{
1a002054:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	configASSERT( pxTimeOut );
1a002056:	b1c8      	cbz	r0, 1a00208c <xTaskCheckForTimeOut+0x38>
1a002058:	4605      	mov	r5, r0
	configASSERT( pxTicksToWait );
1a00205a:	b301      	cbz	r1, 1a00209e <xTaskCheckForTimeOut+0x4a>
1a00205c:	460c      	mov	r4, r1
	taskENTER_CRITICAL();
1a00205e:	f000 fbf9 	bl	1a002854 <vPortEnterCritical>
		const TickType_t xConstTickCount = xTickCount;
1a002062:	4b1b      	ldr	r3, [pc, #108]	; (1a0020d0 <xTaskCheckForTimeOut+0x7c>)
1a002064:	6819      	ldr	r1, [r3, #0]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
1a002066:	686b      	ldr	r3, [r5, #4]
1a002068:	1ac8      	subs	r0, r1, r3
			if( *pxTicksToWait == portMAX_DELAY )
1a00206a:	6822      	ldr	r2, [r4, #0]
1a00206c:	f1b2 3fff 	cmp.w	r2, #4294967295	; 0xffffffff
1a002070:	d026      	beq.n	1a0020c0 <xTaskCheckForTimeOut+0x6c>
		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
1a002072:	682f      	ldr	r7, [r5, #0]
1a002074:	4e17      	ldr	r6, [pc, #92]	; (1a0020d4 <xTaskCheckForTimeOut+0x80>)
1a002076:	6836      	ldr	r6, [r6, #0]
1a002078:	42b7      	cmp	r7, r6
1a00207a:	d001      	beq.n	1a002080 <xTaskCheckForTimeOut+0x2c>
1a00207c:	428b      	cmp	r3, r1
1a00207e:	d924      	bls.n	1a0020ca <xTaskCheckForTimeOut+0x76>
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
1a002080:	4282      	cmp	r2, r0
1a002082:	d815      	bhi.n	1a0020b0 <xTaskCheckForTimeOut+0x5c>
			*pxTicksToWait = 0;
1a002084:	2300      	movs	r3, #0
1a002086:	6023      	str	r3, [r4, #0]
			xReturn = pdTRUE;
1a002088:	2401      	movs	r4, #1
1a00208a:	e01a      	b.n	1a0020c2 <xTaskCheckForTimeOut+0x6e>
1a00208c:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a002090:	f383 8811 	msr	BASEPRI, r3
1a002094:	f3bf 8f6f 	isb	sy
1a002098:	f3bf 8f4f 	dsb	sy
	configASSERT( pxTimeOut );
1a00209c:	e7fe      	b.n	1a00209c <xTaskCheckForTimeOut+0x48>
1a00209e:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a0020a2:	f383 8811 	msr	BASEPRI, r3
1a0020a6:	f3bf 8f6f 	isb	sy
1a0020aa:	f3bf 8f4f 	dsb	sy
	configASSERT( pxTicksToWait );
1a0020ae:	e7fe      	b.n	1a0020ae <xTaskCheckForTimeOut+0x5a>
			*pxTicksToWait -= xElapsedTime;
1a0020b0:	1a5b      	subs	r3, r3, r1
1a0020b2:	4413      	add	r3, r2
1a0020b4:	6023      	str	r3, [r4, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
1a0020b6:	4628      	mov	r0, r5
1a0020b8:	f7ff ffc0 	bl	1a00203c <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
1a0020bc:	2400      	movs	r4, #0
1a0020be:	e000      	b.n	1a0020c2 <xTaskCheckForTimeOut+0x6e>
				xReturn = pdFALSE;
1a0020c0:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
1a0020c2:	f000 fbe9 	bl	1a002898 <vPortExitCritical>
}
1a0020c6:	4620      	mov	r0, r4
1a0020c8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			xReturn = pdTRUE;
1a0020ca:	2401      	movs	r4, #1
1a0020cc:	e7f9      	b.n	1a0020c2 <xTaskCheckForTimeOut+0x6e>
1a0020ce:	bf00      	nop
1a0020d0:	10003344 	.word	0x10003344
1a0020d4:	10003300 	.word	0x10003300

1a0020d8 <vTaskMissedYield>:
	xYieldPending = pdTRUE;
1a0020d8:	4b01      	ldr	r3, [pc, #4]	; (1a0020e0 <vTaskMissedYield+0x8>)
1a0020da:	2201      	movs	r2, #1
1a0020dc:	601a      	str	r2, [r3, #0]
}
1a0020de:	4770      	bx	lr
1a0020e0:	10003348 	.word	0x10003348

1a0020e4 <xTaskGetSchedulerState>:
		if( xSchedulerRunning == pdFALSE )
1a0020e4:	4b05      	ldr	r3, [pc, #20]	; (1a0020fc <xTaskGetSchedulerState+0x18>)
1a0020e6:	681b      	ldr	r3, [r3, #0]
1a0020e8:	b133      	cbz	r3, 1a0020f8 <xTaskGetSchedulerState+0x14>
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
1a0020ea:	4b05      	ldr	r3, [pc, #20]	; (1a002100 <xTaskGetSchedulerState+0x1c>)
1a0020ec:	681b      	ldr	r3, [r3, #0]
1a0020ee:	b10b      	cbz	r3, 1a0020f4 <xTaskGetSchedulerState+0x10>
				xReturn = taskSCHEDULER_SUSPENDED;
1a0020f0:	2000      	movs	r0, #0
	}
1a0020f2:	4770      	bx	lr
				xReturn = taskSCHEDULER_RUNNING;
1a0020f4:	2002      	movs	r0, #2
1a0020f6:	4770      	bx	lr
			xReturn = taskSCHEDULER_NOT_STARTED;
1a0020f8:	2001      	movs	r0, #1
1a0020fa:	4770      	bx	lr
1a0020fc:	10003318 	.word	0x10003318
1a002100:	100032c8 	.word	0x100032c8

1a002104 <xTaskPriorityInherit>:
		if( pxMutexHolder != NULL )
1a002104:	2800      	cmp	r0, #0
1a002106:	d050      	beq.n	1a0021aa <xTaskPriorityInherit+0xa6>
	{
1a002108:	b538      	push	{r3, r4, r5, lr}
1a00210a:	4604      	mov	r4, r0
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
1a00210c:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
1a00210e:	4929      	ldr	r1, [pc, #164]	; (1a0021b4 <xTaskPriorityInherit+0xb0>)
1a002110:	6809      	ldr	r1, [r1, #0]
1a002112:	6ac9      	ldr	r1, [r1, #44]	; 0x2c
1a002114:	428a      	cmp	r2, r1
1a002116:	d240      	bcs.n	1a00219a <xTaskPriorityInherit+0x96>
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
1a002118:	6981      	ldr	r1, [r0, #24]
1a00211a:	2900      	cmp	r1, #0
1a00211c:	db05      	blt.n	1a00212a <xTaskPriorityInherit+0x26>
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
1a00211e:	4925      	ldr	r1, [pc, #148]	; (1a0021b4 <xTaskPriorityInherit+0xb0>)
1a002120:	6809      	ldr	r1, [r1, #0]
1a002122:	6ac9      	ldr	r1, [r1, #44]	; 0x2c
1a002124:	f1c1 0107 	rsb	r1, r1, #7
1a002128:	6181      	str	r1, [r0, #24]
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
1a00212a:	6960      	ldr	r0, [r4, #20]
1a00212c:	eb02 0282 	add.w	r2, r2, r2, lsl #2
1a002130:	0091      	lsls	r1, r2, #2
1a002132:	4a21      	ldr	r2, [pc, #132]	; (1a0021b8 <xTaskPriorityInherit+0xb4>)
1a002134:	440a      	add	r2, r1
1a002136:	4290      	cmp	r0, r2
1a002138:	d005      	beq.n	1a002146 <xTaskPriorityInherit+0x42>
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
1a00213a:	4a1e      	ldr	r2, [pc, #120]	; (1a0021b4 <xTaskPriorityInherit+0xb0>)
1a00213c:	6812      	ldr	r2, [r2, #0]
1a00213e:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
1a002140:	62e2      	str	r2, [r4, #44]	; 0x2c
				xReturn = pdTRUE;
1a002142:	2001      	movs	r0, #1
	}
1a002144:	bd38      	pop	{r3, r4, r5, pc}
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
1a002146:	1d25      	adds	r5, r4, #4
1a002148:	4628      	mov	r0, r5
1a00214a:	f7ff fa1f 	bl	1a00158c <uxListRemove>
1a00214e:	b1a0      	cbz	r0, 1a00217a <xTaskPriorityInherit+0x76>
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
1a002150:	4b18      	ldr	r3, [pc, #96]	; (1a0021b4 <xTaskPriorityInherit+0xb0>)
1a002152:	681b      	ldr	r3, [r3, #0]
1a002154:	6adb      	ldr	r3, [r3, #44]	; 0x2c
1a002156:	62e3      	str	r3, [r4, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
1a002158:	2401      	movs	r4, #1
1a00215a:	fa04 f203 	lsl.w	r2, r4, r3
1a00215e:	4917      	ldr	r1, [pc, #92]	; (1a0021bc <xTaskPriorityInherit+0xb8>)
1a002160:	6808      	ldr	r0, [r1, #0]
1a002162:	4302      	orrs	r2, r0
1a002164:	600a      	str	r2, [r1, #0]
1a002166:	eb03 0383 	add.w	r3, r3, r3, lsl #2
1a00216a:	009a      	lsls	r2, r3, #2
1a00216c:	4629      	mov	r1, r5
1a00216e:	4812      	ldr	r0, [pc, #72]	; (1a0021b8 <xTaskPriorityInherit+0xb4>)
1a002170:	4410      	add	r0, r2
1a002172:	f7ff f9e6 	bl	1a001542 <vListInsertEnd>
				xReturn = pdTRUE;
1a002176:	4620      	mov	r0, r4
1a002178:	e7e4      	b.n	1a002144 <xTaskPriorityInherit+0x40>
						taskRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority );
1a00217a:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
1a00217c:	eb03 0183 	add.w	r1, r3, r3, lsl #2
1a002180:	008a      	lsls	r2, r1, #2
1a002182:	490d      	ldr	r1, [pc, #52]	; (1a0021b8 <xTaskPriorityInherit+0xb4>)
1a002184:	588a      	ldr	r2, [r1, r2]
1a002186:	2a00      	cmp	r2, #0
1a002188:	d1e2      	bne.n	1a002150 <xTaskPriorityInherit+0x4c>
1a00218a:	2201      	movs	r2, #1
1a00218c:	409a      	lsls	r2, r3
1a00218e:	490b      	ldr	r1, [pc, #44]	; (1a0021bc <xTaskPriorityInherit+0xb8>)
1a002190:	680b      	ldr	r3, [r1, #0]
1a002192:	ea23 0302 	bic.w	r3, r3, r2
1a002196:	600b      	str	r3, [r1, #0]
1a002198:	e7da      	b.n	1a002150 <xTaskPriorityInherit+0x4c>
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
1a00219a:	6d02      	ldr	r2, [r0, #80]	; 0x50
1a00219c:	4b05      	ldr	r3, [pc, #20]	; (1a0021b4 <xTaskPriorityInherit+0xb0>)
1a00219e:	681b      	ldr	r3, [r3, #0]
1a0021a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
1a0021a2:	429a      	cmp	r2, r3
1a0021a4:	d303      	bcc.n	1a0021ae <xTaskPriorityInherit+0xaa>
	BaseType_t xReturn = pdFALSE;
1a0021a6:	2000      	movs	r0, #0
1a0021a8:	e7cc      	b.n	1a002144 <xTaskPriorityInherit+0x40>
1a0021aa:	2000      	movs	r0, #0
	}
1a0021ac:	4770      	bx	lr
					xReturn = pdTRUE;
1a0021ae:	2001      	movs	r0, #1
		return xReturn;
1a0021b0:	e7c8      	b.n	1a002144 <xTaskPriorityInherit+0x40>
1a0021b2:	bf00      	nop
1a0021b4:	10003224 	.word	0x10003224
1a0021b8:	10003230 	.word	0x10003230
1a0021bc:	100032d0 	.word	0x100032d0

1a0021c0 <xTaskPriorityDisinherit>:
		if( pxMutexHolder != NULL )
1a0021c0:	2800      	cmp	r0, #0
1a0021c2:	d04c      	beq.n	1a00225e <xTaskPriorityDisinherit+0x9e>
	{
1a0021c4:	b538      	push	{r3, r4, r5, lr}
1a0021c6:	4604      	mov	r4, r0
			configASSERT( pxTCB == pxCurrentTCB );
1a0021c8:	4a27      	ldr	r2, [pc, #156]	; (1a002268 <xTaskPriorityDisinherit+0xa8>)
1a0021ca:	6812      	ldr	r2, [r2, #0]
1a0021cc:	4282      	cmp	r2, r0
1a0021ce:	d008      	beq.n	1a0021e2 <xTaskPriorityDisinherit+0x22>
1a0021d0:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a0021d4:	f383 8811 	msr	BASEPRI, r3
1a0021d8:	f3bf 8f6f 	isb	sy
1a0021dc:	f3bf 8f4f 	dsb	sy
1a0021e0:	e7fe      	b.n	1a0021e0 <xTaskPriorityDisinherit+0x20>
			configASSERT( pxTCB->uxMutexesHeld );
1a0021e2:	6d42      	ldr	r2, [r0, #84]	; 0x54
1a0021e4:	b942      	cbnz	r2, 1a0021f8 <xTaskPriorityDisinherit+0x38>
1a0021e6:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a0021ea:	f383 8811 	msr	BASEPRI, r3
1a0021ee:	f3bf 8f6f 	isb	sy
1a0021f2:	f3bf 8f4f 	dsb	sy
1a0021f6:	e7fe      	b.n	1a0021f6 <xTaskPriorityDisinherit+0x36>
			( pxTCB->uxMutexesHeld )--;
1a0021f8:	3a01      	subs	r2, #1
1a0021fa:	6542      	str	r2, [r0, #84]	; 0x54
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
1a0021fc:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
1a0021fe:	6d21      	ldr	r1, [r4, #80]	; 0x50
1a002200:	4288      	cmp	r0, r1
1a002202:	d02e      	beq.n	1a002262 <xTaskPriorityDisinherit+0xa2>
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
1a002204:	b10a      	cbz	r2, 1a00220a <xTaskPriorityDisinherit+0x4a>
	BaseType_t xReturn = pdFALSE;
1a002206:	2000      	movs	r0, #0
	}
1a002208:	bd38      	pop	{r3, r4, r5, pc}
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
1a00220a:	1d25      	adds	r5, r4, #4
1a00220c:	4628      	mov	r0, r5
1a00220e:	f7ff f9bd 	bl	1a00158c <uxListRemove>
1a002212:	b970      	cbnz	r0, 1a002232 <xTaskPriorityDisinherit+0x72>
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
1a002214:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
1a002216:	eb02 0182 	add.w	r1, r2, r2, lsl #2
1a00221a:	008b      	lsls	r3, r1, #2
1a00221c:	4913      	ldr	r1, [pc, #76]	; (1a00226c <xTaskPriorityDisinherit+0xac>)
1a00221e:	58cb      	ldr	r3, [r1, r3]
1a002220:	b93b      	cbnz	r3, 1a002232 <xTaskPriorityDisinherit+0x72>
1a002222:	2301      	movs	r3, #1
1a002224:	fa03 f202 	lsl.w	r2, r3, r2
1a002228:	4911      	ldr	r1, [pc, #68]	; (1a002270 <xTaskPriorityDisinherit+0xb0>)
1a00222a:	680b      	ldr	r3, [r1, #0]
1a00222c:	ea23 0302 	bic.w	r3, r3, r2
1a002230:	600b      	str	r3, [r1, #0]
					pxTCB->uxPriority = pxTCB->uxBasePriority;
1a002232:	6d23      	ldr	r3, [r4, #80]	; 0x50
1a002234:	62e3      	str	r3, [r4, #44]	; 0x2c
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
1a002236:	f1c3 0207 	rsb	r2, r3, #7
1a00223a:	61a2      	str	r2, [r4, #24]
					prvAddTaskToReadyList( pxTCB );
1a00223c:	2401      	movs	r4, #1
1a00223e:	fa04 f203 	lsl.w	r2, r4, r3
1a002242:	490b      	ldr	r1, [pc, #44]	; (1a002270 <xTaskPriorityDisinherit+0xb0>)
1a002244:	6808      	ldr	r0, [r1, #0]
1a002246:	4302      	orrs	r2, r0
1a002248:	600a      	str	r2, [r1, #0]
1a00224a:	eb03 0383 	add.w	r3, r3, r3, lsl #2
1a00224e:	009a      	lsls	r2, r3, #2
1a002250:	4629      	mov	r1, r5
1a002252:	4806      	ldr	r0, [pc, #24]	; (1a00226c <xTaskPriorityDisinherit+0xac>)
1a002254:	4410      	add	r0, r2
1a002256:	f7ff f974 	bl	1a001542 <vListInsertEnd>
					xReturn = pdTRUE;
1a00225a:	4620      	mov	r0, r4
1a00225c:	e7d4      	b.n	1a002208 <xTaskPriorityDisinherit+0x48>
	BaseType_t xReturn = pdFALSE;
1a00225e:	2000      	movs	r0, #0
	}
1a002260:	4770      	bx	lr
	BaseType_t xReturn = pdFALSE;
1a002262:	2000      	movs	r0, #0
1a002264:	e7d0      	b.n	1a002208 <xTaskPriorityDisinherit+0x48>
1a002266:	bf00      	nop
1a002268:	10003224 	.word	0x10003224
1a00226c:	10003230 	.word	0x10003230
1a002270:	100032d0 	.word	0x100032d0

1a002274 <vTaskPriorityDisinheritAfterTimeout>:
		if( pxMutexHolder != NULL )
1a002274:	2800      	cmp	r0, #0
1a002276:	d056      	beq.n	1a002326 <vTaskPriorityDisinheritAfterTimeout+0xb2>
	{
1a002278:	b538      	push	{r3, r4, r5, lr}
1a00227a:	4604      	mov	r4, r0
			configASSERT( pxTCB->uxMutexesHeld );
1a00227c:	6d40      	ldr	r0, [r0, #84]	; 0x54
1a00227e:	b940      	cbnz	r0, 1a002292 <vTaskPriorityDisinheritAfterTimeout+0x1e>
1a002280:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a002284:	f383 8811 	msr	BASEPRI, r3
1a002288:	f3bf 8f6f 	isb	sy
1a00228c:	f3bf 8f4f 	dsb	sy
1a002290:	e7fe      	b.n	1a002290 <vTaskPriorityDisinheritAfterTimeout+0x1c>
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
1a002292:	6d22      	ldr	r2, [r4, #80]	; 0x50
1a002294:	428a      	cmp	r2, r1
1a002296:	d200      	bcs.n	1a00229a <vTaskPriorityDisinheritAfterTimeout+0x26>
				uxPriorityToUse = uxHighestPriorityWaitingTask;
1a002298:	460a      	mov	r2, r1
			if( pxTCB->uxPriority != uxPriorityToUse )
1a00229a:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
1a00229c:	4291      	cmp	r1, r2
1a00229e:	d001      	beq.n	1a0022a4 <vTaskPriorityDisinheritAfterTimeout+0x30>
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
1a0022a0:	2801      	cmp	r0, #1
1a0022a2:	d000      	beq.n	1a0022a6 <vTaskPriorityDisinheritAfterTimeout+0x32>
	}
1a0022a4:	bd38      	pop	{r3, r4, r5, pc}
					configASSERT( pxTCB != pxCurrentTCB );
1a0022a6:	4820      	ldr	r0, [pc, #128]	; (1a002328 <vTaskPriorityDisinheritAfterTimeout+0xb4>)
1a0022a8:	6800      	ldr	r0, [r0, #0]
1a0022aa:	42a0      	cmp	r0, r4
1a0022ac:	d032      	beq.n	1a002314 <vTaskPriorityDisinheritAfterTimeout+0xa0>
					pxTCB->uxPriority = uxPriorityToUse;
1a0022ae:	62e2      	str	r2, [r4, #44]	; 0x2c
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
1a0022b0:	69a0      	ldr	r0, [r4, #24]
1a0022b2:	2800      	cmp	r0, #0
1a0022b4:	db02      	blt.n	1a0022bc <vTaskPriorityDisinheritAfterTimeout+0x48>
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
1a0022b6:	f1c2 0207 	rsb	r2, r2, #7
1a0022ba:	61a2      	str	r2, [r4, #24]
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
1a0022bc:	6963      	ldr	r3, [r4, #20]
1a0022be:	eb01 0181 	add.w	r1, r1, r1, lsl #2
1a0022c2:	0088      	lsls	r0, r1, #2
1a0022c4:	4a19      	ldr	r2, [pc, #100]	; (1a00232c <vTaskPriorityDisinheritAfterTimeout+0xb8>)
1a0022c6:	4402      	add	r2, r0
1a0022c8:	4293      	cmp	r3, r2
1a0022ca:	d1eb      	bne.n	1a0022a4 <vTaskPriorityDisinheritAfterTimeout+0x30>
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
1a0022cc:	1d25      	adds	r5, r4, #4
1a0022ce:	4628      	mov	r0, r5
1a0022d0:	f7ff f95c 	bl	1a00158c <uxListRemove>
1a0022d4:	b970      	cbnz	r0, 1a0022f4 <vTaskPriorityDisinheritAfterTimeout+0x80>
							taskRESET_READY_PRIORITY( pxTCB->uxPriority );
1a0022d6:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
1a0022d8:	eb02 0182 	add.w	r1, r2, r2, lsl #2
1a0022dc:	008b      	lsls	r3, r1, #2
1a0022de:	4913      	ldr	r1, [pc, #76]	; (1a00232c <vTaskPriorityDisinheritAfterTimeout+0xb8>)
1a0022e0:	58cb      	ldr	r3, [r1, r3]
1a0022e2:	b93b      	cbnz	r3, 1a0022f4 <vTaskPriorityDisinheritAfterTimeout+0x80>
1a0022e4:	2301      	movs	r3, #1
1a0022e6:	fa03 f202 	lsl.w	r2, r3, r2
1a0022ea:	4911      	ldr	r1, [pc, #68]	; (1a002330 <vTaskPriorityDisinheritAfterTimeout+0xbc>)
1a0022ec:	680b      	ldr	r3, [r1, #0]
1a0022ee:	ea23 0302 	bic.w	r3, r3, r2
1a0022f2:	600b      	str	r3, [r1, #0]
						prvAddTaskToReadyList( pxTCB );
1a0022f4:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
1a0022f6:	2201      	movs	r2, #1
1a0022f8:	409a      	lsls	r2, r3
1a0022fa:	490d      	ldr	r1, [pc, #52]	; (1a002330 <vTaskPriorityDisinheritAfterTimeout+0xbc>)
1a0022fc:	6808      	ldr	r0, [r1, #0]
1a0022fe:	4302      	orrs	r2, r0
1a002300:	600a      	str	r2, [r1, #0]
1a002302:	eb03 0383 	add.w	r3, r3, r3, lsl #2
1a002306:	009a      	lsls	r2, r3, #2
1a002308:	4629      	mov	r1, r5
1a00230a:	4808      	ldr	r0, [pc, #32]	; (1a00232c <vTaskPriorityDisinheritAfterTimeout+0xb8>)
1a00230c:	4410      	add	r0, r2
1a00230e:	f7ff f918 	bl	1a001542 <vListInsertEnd>
	}
1a002312:	e7c7      	b.n	1a0022a4 <vTaskPriorityDisinheritAfterTimeout+0x30>
1a002314:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a002318:	f383 8811 	msr	BASEPRI, r3
1a00231c:	f3bf 8f6f 	isb	sy
1a002320:	f3bf 8f4f 	dsb	sy
					configASSERT( pxTCB != pxCurrentTCB );
1a002324:	e7fe      	b.n	1a002324 <vTaskPriorityDisinheritAfterTimeout+0xb0>
1a002326:	4770      	bx	lr
1a002328:	10003224 	.word	0x10003224
1a00232c:	10003230 	.word	0x10003230
1a002330:	100032d0 	.word	0x100032d0

1a002334 <pvTaskIncrementMutexHeldCount>:
		if( pxCurrentTCB != NULL )
1a002334:	4b05      	ldr	r3, [pc, #20]	; (1a00234c <pvTaskIncrementMutexHeldCount+0x18>)
1a002336:	681b      	ldr	r3, [r3, #0]
1a002338:	b123      	cbz	r3, 1a002344 <pvTaskIncrementMutexHeldCount+0x10>
			( pxCurrentTCB->uxMutexesHeld )++;
1a00233a:	4b04      	ldr	r3, [pc, #16]	; (1a00234c <pvTaskIncrementMutexHeldCount+0x18>)
1a00233c:	681a      	ldr	r2, [r3, #0]
1a00233e:	6d53      	ldr	r3, [r2, #84]	; 0x54
1a002340:	3301      	adds	r3, #1
1a002342:	6553      	str	r3, [r2, #84]	; 0x54
		return pxCurrentTCB;
1a002344:	4b01      	ldr	r3, [pc, #4]	; (1a00234c <pvTaskIncrementMutexHeldCount+0x18>)
1a002346:	6818      	ldr	r0, [r3, #0]
	}
1a002348:	4770      	bx	lr
1a00234a:	bf00      	nop
1a00234c:	10003224 	.word	0x10003224

1a002350 <prvGetNextExpireTime>:
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
1a002350:	4b06      	ldr	r3, [pc, #24]	; (1a00236c <prvGetNextExpireTime+0x1c>)
1a002352:	681a      	ldr	r2, [r3, #0]
1a002354:	6813      	ldr	r3, [r2, #0]
1a002356:	fab3 f383 	clz	r3, r3
1a00235a:	095b      	lsrs	r3, r3, #5
1a00235c:	6003      	str	r3, [r0, #0]
	if( *pxListWasEmpty == pdFALSE )
1a00235e:	b913      	cbnz	r3, 1a002366 <prvGetNextExpireTime+0x16>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
1a002360:	68d3      	ldr	r3, [r2, #12]
1a002362:	6818      	ldr	r0, [r3, #0]
1a002364:	4770      	bx	lr
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
1a002366:	2000      	movs	r0, #0
	}

	return xNextExpireTime;
}
1a002368:	4770      	bx	lr
1a00236a:	bf00      	nop
1a00236c:	1000334c 	.word	0x1000334c

1a002370 <prvInsertTimerInActiveList>:
	return xTimeNow;
}
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
1a002370:	b508      	push	{r3, lr}
BaseType_t xProcessTimerNow = pdFALSE;

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
1a002372:	6041      	str	r1, [r0, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
1a002374:	6100      	str	r0, [r0, #16]

	if( xNextExpiryTime <= xTimeNow )
1a002376:	4291      	cmp	r1, r2
1a002378:	d80c      	bhi.n	1a002394 <prvInsertTimerInActiveList+0x24>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
1a00237a:	1ad2      	subs	r2, r2, r3
1a00237c:	6983      	ldr	r3, [r0, #24]
1a00237e:	429a      	cmp	r2, r3
1a002380:	d301      	bcc.n	1a002386 <prvInsertTimerInActiveList+0x16>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
1a002382:	2001      	movs	r0, #1
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
		}
	}

	return xProcessTimerNow;
}
1a002384:	bd08      	pop	{r3, pc}
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
1a002386:	1d01      	adds	r1, r0, #4
1a002388:	4b09      	ldr	r3, [pc, #36]	; (1a0023b0 <prvInsertTimerInActiveList+0x40>)
1a00238a:	6818      	ldr	r0, [r3, #0]
1a00238c:	f7ff f8e4 	bl	1a001558 <vListInsert>
BaseType_t xProcessTimerNow = pdFALSE;
1a002390:	2000      	movs	r0, #0
1a002392:	e7f7      	b.n	1a002384 <prvInsertTimerInActiveList+0x14>
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
1a002394:	429a      	cmp	r2, r3
1a002396:	d201      	bcs.n	1a00239c <prvInsertTimerInActiveList+0x2c>
1a002398:	4299      	cmp	r1, r3
1a00239a:	d206      	bcs.n	1a0023aa <prvInsertTimerInActiveList+0x3a>
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
1a00239c:	1d01      	adds	r1, r0, #4
1a00239e:	4b05      	ldr	r3, [pc, #20]	; (1a0023b4 <prvInsertTimerInActiveList+0x44>)
1a0023a0:	6818      	ldr	r0, [r3, #0]
1a0023a2:	f7ff f8d9 	bl	1a001558 <vListInsert>
BaseType_t xProcessTimerNow = pdFALSE;
1a0023a6:	2000      	movs	r0, #0
1a0023a8:	e7ec      	b.n	1a002384 <prvInsertTimerInActiveList+0x14>
			xProcessTimerNow = pdTRUE;
1a0023aa:	2001      	movs	r0, #1
	return xProcessTimerNow;
1a0023ac:	e7ea      	b.n	1a002384 <prvInsertTimerInActiveList+0x14>
1a0023ae:	bf00      	nop
1a0023b0:	10003350 	.word	0x10003350
1a0023b4:	1000334c 	.word	0x1000334c

1a0023b8 <prvCheckForValidListAndQueue>:
	pxOverflowTimerList = pxTemp;
}
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
1a0023b8:	b530      	push	{r4, r5, lr}
1a0023ba:	b083      	sub	sp, #12
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
1a0023bc:	f000 fa4a 	bl	1a002854 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
1a0023c0:	4b11      	ldr	r3, [pc, #68]	; (1a002408 <prvCheckForValidListAndQueue+0x50>)
1a0023c2:	681b      	ldr	r3, [r3, #0]
1a0023c4:	b11b      	cbz	r3, 1a0023ce <prvCheckForValidListAndQueue+0x16>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
1a0023c6:	f000 fa67 	bl	1a002898 <vPortExitCritical>
}
1a0023ca:	b003      	add	sp, #12
1a0023cc:	bd30      	pop	{r4, r5, pc}
			vListInitialise( &xActiveTimerList1 );
1a0023ce:	4d0f      	ldr	r5, [pc, #60]	; (1a00240c <prvCheckForValidListAndQueue+0x54>)
1a0023d0:	4628      	mov	r0, r5
1a0023d2:	f7ff f8a8 	bl	1a001526 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
1a0023d6:	4c0e      	ldr	r4, [pc, #56]	; (1a002410 <prvCheckForValidListAndQueue+0x58>)
1a0023d8:	4620      	mov	r0, r4
1a0023da:	f7ff f8a4 	bl	1a001526 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
1a0023de:	4b0d      	ldr	r3, [pc, #52]	; (1a002414 <prvCheckForValidListAndQueue+0x5c>)
1a0023e0:	601d      	str	r5, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
1a0023e2:	4b0d      	ldr	r3, [pc, #52]	; (1a002418 <prvCheckForValidListAndQueue+0x60>)
1a0023e4:	601c      	str	r4, [r3, #0]
				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
1a0023e6:	2300      	movs	r3, #0
1a0023e8:	9300      	str	r3, [sp, #0]
1a0023ea:	4b0c      	ldr	r3, [pc, #48]	; (1a00241c <prvCheckForValidListAndQueue+0x64>)
1a0023ec:	4a0c      	ldr	r2, [pc, #48]	; (1a002420 <prvCheckForValidListAndQueue+0x68>)
1a0023ee:	2110      	movs	r1, #16
1a0023f0:	200a      	movs	r0, #10
1a0023f2:	f7fe fd2c 	bl	1a000e4e <xQueueGenericCreateStatic>
1a0023f6:	4b04      	ldr	r3, [pc, #16]	; (1a002408 <prvCheckForValidListAndQueue+0x50>)
1a0023f8:	6018      	str	r0, [r3, #0]
				if( xTimerQueue != NULL )
1a0023fa:	2800      	cmp	r0, #0
1a0023fc:	d0e3      	beq.n	1a0023c6 <prvCheckForValidListAndQueue+0xe>
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
1a0023fe:	4909      	ldr	r1, [pc, #36]	; (1a002424 <prvCheckForValidListAndQueue+0x6c>)
1a002400:	f7ff f854 	bl	1a0014ac <vQueueAddToRegistry>
1a002404:	e7df      	b.n	1a0023c6 <prvCheckForValidListAndQueue+0xe>
1a002406:	bf00      	nop
1a002408:	10003470 	.word	0x10003470
1a00240c:	100033f4 	.word	0x100033f4
1a002410:	10003408 	.word	0x10003408
1a002414:	1000334c 	.word	0x1000334c
1a002418:	10003350 	.word	0x10003350
1a00241c:	10003420 	.word	0x10003420
1a002420:	10003354 	.word	0x10003354
1a002424:	1a00b01c 	.word	0x1a00b01c

1a002428 <xTimerCreateTimerTask>:
{
1a002428:	b510      	push	{r4, lr}
1a00242a:	b088      	sub	sp, #32
	prvCheckForValidListAndQueue();
1a00242c:	f7ff ffc4 	bl	1a0023b8 <prvCheckForValidListAndQueue>
	if( xTimerQueue != NULL )
1a002430:	4b12      	ldr	r3, [pc, #72]	; (1a00247c <xTimerCreateTimerTask+0x54>)
1a002432:	681b      	ldr	r3, [r3, #0]
1a002434:	b1cb      	cbz	r3, 1a00246a <xTimerCreateTimerTask+0x42>
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
1a002436:	2400      	movs	r4, #0
1a002438:	9405      	str	r4, [sp, #20]
			StackType_t *pxTimerTaskStackBuffer = NULL;
1a00243a:	9406      	str	r4, [sp, #24]
			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
1a00243c:	aa07      	add	r2, sp, #28
1a00243e:	a906      	add	r1, sp, #24
1a002440:	a805      	add	r0, sp, #20
1a002442:	f7ff f8c3 	bl	1a0015cc <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
1a002446:	9b05      	ldr	r3, [sp, #20]
1a002448:	9302      	str	r3, [sp, #8]
1a00244a:	9b06      	ldr	r3, [sp, #24]
1a00244c:	9301      	str	r3, [sp, #4]
1a00244e:	2304      	movs	r3, #4
1a002450:	9300      	str	r3, [sp, #0]
1a002452:	4623      	mov	r3, r4
1a002454:	9a07      	ldr	r2, [sp, #28]
1a002456:	490a      	ldr	r1, [pc, #40]	; (1a002480 <xTimerCreateTimerTask+0x58>)
1a002458:	480a      	ldr	r0, [pc, #40]	; (1a002484 <xTimerCreateTimerTask+0x5c>)
1a00245a:	f7ff fa7f 	bl	1a00195c <xTaskCreateStatic>
1a00245e:	4b0a      	ldr	r3, [pc, #40]	; (1a002488 <xTimerCreateTimerTask+0x60>)
1a002460:	6018      	str	r0, [r3, #0]
			if( xTimerTaskHandle != NULL )
1a002462:	b110      	cbz	r0, 1a00246a <xTimerCreateTimerTask+0x42>
}
1a002464:	2001      	movs	r0, #1
1a002466:	b008      	add	sp, #32
1a002468:	bd10      	pop	{r4, pc}
1a00246a:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a00246e:	f383 8811 	msr	BASEPRI, r3
1a002472:	f3bf 8f6f 	isb	sy
1a002476:	f3bf 8f4f 	dsb	sy
	configASSERT( xReturn );
1a00247a:	e7fe      	b.n	1a00247a <xTimerCreateTimerTask+0x52>
1a00247c:	10003470 	.word	0x10003470
1a002480:	1a00b024 	.word	0x1a00b024
1a002484:	1a00276d 	.word	0x1a00276d
1a002488:	10003474 	.word	0x10003474

1a00248c <xTimerGenericCommand>:
	configASSERT( xTimer );
1a00248c:	b1c0      	cbz	r0, 1a0024c0 <xTimerGenericCommand+0x34>
{
1a00248e:	b530      	push	{r4, r5, lr}
1a002490:	b085      	sub	sp, #20
1a002492:	4615      	mov	r5, r2
1a002494:	4604      	mov	r4, r0
	if( xTimerQueue != NULL )
1a002496:	4a17      	ldr	r2, [pc, #92]	; (1a0024f4 <xTimerGenericCommand+0x68>)
1a002498:	6810      	ldr	r0, [r2, #0]
1a00249a:	b340      	cbz	r0, 1a0024ee <xTimerGenericCommand+0x62>
1a00249c:	461a      	mov	r2, r3
		xMessage.xMessageID = xCommandID;
1a00249e:	9100      	str	r1, [sp, #0]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
1a0024a0:	9501      	str	r5, [sp, #4]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
1a0024a2:	9402      	str	r4, [sp, #8]
		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
1a0024a4:	2905      	cmp	r1, #5
1a0024a6:	dc1c      	bgt.n	1a0024e2 <xTimerGenericCommand+0x56>
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
1a0024a8:	f7ff fe1c 	bl	1a0020e4 <xTaskGetSchedulerState>
1a0024ac:	2802      	cmp	r0, #2
1a0024ae:	d010      	beq.n	1a0024d2 <xTimerGenericCommand+0x46>
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
1a0024b0:	2300      	movs	r3, #0
1a0024b2:	461a      	mov	r2, r3
1a0024b4:	4669      	mov	r1, sp
1a0024b6:	480f      	ldr	r0, [pc, #60]	; (1a0024f4 <xTimerGenericCommand+0x68>)
1a0024b8:	6800      	ldr	r0, [r0, #0]
1a0024ba:	f7fe fd39 	bl	1a000f30 <xQueueGenericSend>
1a0024be:	e014      	b.n	1a0024ea <xTimerGenericCommand+0x5e>
1a0024c0:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a0024c4:	f383 8811 	msr	BASEPRI, r3
1a0024c8:	f3bf 8f6f 	isb	sy
1a0024cc:	f3bf 8f4f 	dsb	sy
	configASSERT( xTimer );
1a0024d0:	e7fe      	b.n	1a0024d0 <xTimerGenericCommand+0x44>
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
1a0024d2:	2300      	movs	r3, #0
1a0024d4:	9a08      	ldr	r2, [sp, #32]
1a0024d6:	4669      	mov	r1, sp
1a0024d8:	4806      	ldr	r0, [pc, #24]	; (1a0024f4 <xTimerGenericCommand+0x68>)
1a0024da:	6800      	ldr	r0, [r0, #0]
1a0024dc:	f7fe fd28 	bl	1a000f30 <xQueueGenericSend>
1a0024e0:	e003      	b.n	1a0024ea <xTimerGenericCommand+0x5e>
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
1a0024e2:	2300      	movs	r3, #0
1a0024e4:	4669      	mov	r1, sp
1a0024e6:	f7fe fdfa 	bl	1a0010de <xQueueGenericSendFromISR>
}
1a0024ea:	b005      	add	sp, #20
1a0024ec:	bd30      	pop	{r4, r5, pc}
BaseType_t xReturn = pdFAIL;
1a0024ee:	2000      	movs	r0, #0
	return xReturn;
1a0024f0:	e7fb      	b.n	1a0024ea <xTimerGenericCommand+0x5e>
1a0024f2:	bf00      	nop
1a0024f4:	10003470 	.word	0x10003470

1a0024f8 <prvSwitchTimerLists>:
{
1a0024f8:	b570      	push	{r4, r5, r6, lr}
1a0024fa:	b082      	sub	sp, #8
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
1a0024fc:	4b1a      	ldr	r3, [pc, #104]	; (1a002568 <prvSwitchTimerLists+0x70>)
1a0024fe:	681b      	ldr	r3, [r3, #0]
1a002500:	681a      	ldr	r2, [r3, #0]
1a002502:	b352      	cbz	r2, 1a00255a <prvSwitchTimerLists+0x62>
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
1a002504:	68db      	ldr	r3, [r3, #12]
1a002506:	681e      	ldr	r6, [r3, #0]
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
1a002508:	68dc      	ldr	r4, [r3, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
1a00250a:	1d25      	adds	r5, r4, #4
1a00250c:	4628      	mov	r0, r5
1a00250e:	f7ff f83d 	bl	1a00158c <uxListRemove>
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
1a002512:	6a63      	ldr	r3, [r4, #36]	; 0x24
1a002514:	4620      	mov	r0, r4
1a002516:	4798      	blx	r3
		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
1a002518:	69e3      	ldr	r3, [r4, #28]
1a00251a:	2b01      	cmp	r3, #1
1a00251c:	d1ee      	bne.n	1a0024fc <prvSwitchTimerLists+0x4>
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
1a00251e:	69a3      	ldr	r3, [r4, #24]
1a002520:	4433      	add	r3, r6
			if( xReloadTime > xNextExpireTime )
1a002522:	429e      	cmp	r6, r3
1a002524:	d207      	bcs.n	1a002536 <prvSwitchTimerLists+0x3e>
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
1a002526:	6063      	str	r3, [r4, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
1a002528:	6124      	str	r4, [r4, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
1a00252a:	4629      	mov	r1, r5
1a00252c:	4b0e      	ldr	r3, [pc, #56]	; (1a002568 <prvSwitchTimerLists+0x70>)
1a00252e:	6818      	ldr	r0, [r3, #0]
1a002530:	f7ff f812 	bl	1a001558 <vListInsert>
1a002534:	e7e2      	b.n	1a0024fc <prvSwitchTimerLists+0x4>
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
1a002536:	2100      	movs	r1, #0
1a002538:	9100      	str	r1, [sp, #0]
1a00253a:	460b      	mov	r3, r1
1a00253c:	4632      	mov	r2, r6
1a00253e:	4620      	mov	r0, r4
1a002540:	f7ff ffa4 	bl	1a00248c <xTimerGenericCommand>
				configASSERT( xResult );
1a002544:	2800      	cmp	r0, #0
1a002546:	d1d9      	bne.n	1a0024fc <prvSwitchTimerLists+0x4>
1a002548:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a00254c:	f383 8811 	msr	BASEPRI, r3
1a002550:	f3bf 8f6f 	isb	sy
1a002554:	f3bf 8f4f 	dsb	sy
1a002558:	e7fe      	b.n	1a002558 <prvSwitchTimerLists+0x60>
	pxCurrentTimerList = pxOverflowTimerList;
1a00255a:	4a04      	ldr	r2, [pc, #16]	; (1a00256c <prvSwitchTimerLists+0x74>)
1a00255c:	6810      	ldr	r0, [r2, #0]
1a00255e:	4902      	ldr	r1, [pc, #8]	; (1a002568 <prvSwitchTimerLists+0x70>)
1a002560:	6008      	str	r0, [r1, #0]
	pxOverflowTimerList = pxTemp;
1a002562:	6013      	str	r3, [r2, #0]
}
1a002564:	b002      	add	sp, #8
1a002566:	bd70      	pop	{r4, r5, r6, pc}
1a002568:	1000334c 	.word	0x1000334c
1a00256c:	10003350 	.word	0x10003350

1a002570 <prvSampleTimeNow>:
{
1a002570:	b538      	push	{r3, r4, r5, lr}
1a002572:	4605      	mov	r5, r0
	xTimeNow = xTaskGetTickCount();
1a002574:	f7ff fb20 	bl	1a001bb8 <xTaskGetTickCount>
1a002578:	4604      	mov	r4, r0
	if( xTimeNow < xLastTime )
1a00257a:	4b07      	ldr	r3, [pc, #28]	; (1a002598 <prvSampleTimeNow+0x28>)
1a00257c:	681b      	ldr	r3, [r3, #0]
1a00257e:	4283      	cmp	r3, r0
1a002580:	d805      	bhi.n	1a00258e <prvSampleTimeNow+0x1e>
		*pxTimerListsWereSwitched = pdFALSE;
1a002582:	2300      	movs	r3, #0
1a002584:	602b      	str	r3, [r5, #0]
	xLastTime = xTimeNow;
1a002586:	4b04      	ldr	r3, [pc, #16]	; (1a002598 <prvSampleTimeNow+0x28>)
1a002588:	601c      	str	r4, [r3, #0]
}
1a00258a:	4620      	mov	r0, r4
1a00258c:	bd38      	pop	{r3, r4, r5, pc}
		prvSwitchTimerLists();
1a00258e:	f7ff ffb3 	bl	1a0024f8 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
1a002592:	2301      	movs	r3, #1
1a002594:	602b      	str	r3, [r5, #0]
1a002596:	e7f6      	b.n	1a002586 <prvSampleTimeNow+0x16>
1a002598:	1000341c 	.word	0x1000341c

1a00259c <prvProcessExpiredTimer>:
{
1a00259c:	b570      	push	{r4, r5, r6, lr}
1a00259e:	b082      	sub	sp, #8
1a0025a0:	4605      	mov	r5, r0
1a0025a2:	460e      	mov	r6, r1
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
1a0025a4:	4b14      	ldr	r3, [pc, #80]	; (1a0025f8 <prvProcessExpiredTimer+0x5c>)
1a0025a6:	681b      	ldr	r3, [r3, #0]
1a0025a8:	68db      	ldr	r3, [r3, #12]
1a0025aa:	68dc      	ldr	r4, [r3, #12]
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
1a0025ac:	1d20      	adds	r0, r4, #4
1a0025ae:	f7fe ffed 	bl	1a00158c <uxListRemove>
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
1a0025b2:	69e3      	ldr	r3, [r4, #28]
1a0025b4:	2b01      	cmp	r3, #1
1a0025b6:	d004      	beq.n	1a0025c2 <prvProcessExpiredTimer+0x26>
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
1a0025b8:	6a63      	ldr	r3, [r4, #36]	; 0x24
1a0025ba:	4620      	mov	r0, r4
1a0025bc:	4798      	blx	r3
}
1a0025be:	b002      	add	sp, #8
1a0025c0:	bd70      	pop	{r4, r5, r6, pc}
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
1a0025c2:	69a1      	ldr	r1, [r4, #24]
1a0025c4:	462b      	mov	r3, r5
1a0025c6:	4632      	mov	r2, r6
1a0025c8:	4429      	add	r1, r5
1a0025ca:	4620      	mov	r0, r4
1a0025cc:	f7ff fed0 	bl	1a002370 <prvInsertTimerInActiveList>
1a0025d0:	2800      	cmp	r0, #0
1a0025d2:	d0f1      	beq.n	1a0025b8 <prvProcessExpiredTimer+0x1c>
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
1a0025d4:	2100      	movs	r1, #0
1a0025d6:	9100      	str	r1, [sp, #0]
1a0025d8:	460b      	mov	r3, r1
1a0025da:	462a      	mov	r2, r5
1a0025dc:	4620      	mov	r0, r4
1a0025de:	f7ff ff55 	bl	1a00248c <xTimerGenericCommand>
			configASSERT( xResult );
1a0025e2:	2800      	cmp	r0, #0
1a0025e4:	d1e8      	bne.n	1a0025b8 <prvProcessExpiredTimer+0x1c>
1a0025e6:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a0025ea:	f383 8811 	msr	BASEPRI, r3
1a0025ee:	f3bf 8f6f 	isb	sy
1a0025f2:	f3bf 8f4f 	dsb	sy
1a0025f6:	e7fe      	b.n	1a0025f6 <prvProcessExpiredTimer+0x5a>
1a0025f8:	1000334c 	.word	0x1000334c

1a0025fc <prvProcessTimerOrBlockTask>:
{
1a0025fc:	b570      	push	{r4, r5, r6, lr}
1a0025fe:	b082      	sub	sp, #8
1a002600:	4606      	mov	r6, r0
1a002602:	460c      	mov	r4, r1
	vTaskSuspendAll();
1a002604:	f7ff fad0 	bl	1a001ba8 <vTaskSuspendAll>
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
1a002608:	a801      	add	r0, sp, #4
1a00260a:	f7ff ffb1 	bl	1a002570 <prvSampleTimeNow>
		if( xTimerListsWereSwitched == pdFALSE )
1a00260e:	9b01      	ldr	r3, [sp, #4]
1a002610:	bb1b      	cbnz	r3, 1a00265a <prvProcessTimerOrBlockTask+0x5e>
1a002612:	4605      	mov	r5, r0
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
1a002614:	b90c      	cbnz	r4, 1a00261a <prvProcessTimerOrBlockTask+0x1e>
1a002616:	42b0      	cmp	r0, r6
1a002618:	d218      	bcs.n	1a00264c <prvProcessTimerOrBlockTask+0x50>
				if( xListWasEmpty != pdFALSE )
1a00261a:	b12c      	cbz	r4, 1a002628 <prvProcessTimerOrBlockTask+0x2c>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
1a00261c:	4b11      	ldr	r3, [pc, #68]	; (1a002664 <prvProcessTimerOrBlockTask+0x68>)
1a00261e:	681b      	ldr	r3, [r3, #0]
1a002620:	681c      	ldr	r4, [r3, #0]
1a002622:	fab4 f484 	clz	r4, r4
1a002626:	0964      	lsrs	r4, r4, #5
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
1a002628:	4622      	mov	r2, r4
1a00262a:	1b71      	subs	r1, r6, r5
1a00262c:	4b0e      	ldr	r3, [pc, #56]	; (1a002668 <prvProcessTimerOrBlockTask+0x6c>)
1a00262e:	6818      	ldr	r0, [r3, #0]
1a002630:	f7fe ff50 	bl	1a0014d4 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
1a002634:	f7ff fb52 	bl	1a001cdc <xTaskResumeAll>
1a002638:	b988      	cbnz	r0, 1a00265e <prvProcessTimerOrBlockTask+0x62>
					portYIELD_WITHIN_API();
1a00263a:	4b0c      	ldr	r3, [pc, #48]	; (1a00266c <prvProcessTimerOrBlockTask+0x70>)
1a00263c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
1a002640:	601a      	str	r2, [r3, #0]
1a002642:	f3bf 8f4f 	dsb	sy
1a002646:	f3bf 8f6f 	isb	sy
1a00264a:	e008      	b.n	1a00265e <prvProcessTimerOrBlockTask+0x62>
				( void ) xTaskResumeAll();
1a00264c:	f7ff fb46 	bl	1a001cdc <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
1a002650:	4629      	mov	r1, r5
1a002652:	4630      	mov	r0, r6
1a002654:	f7ff ffa2 	bl	1a00259c <prvProcessExpiredTimer>
1a002658:	e001      	b.n	1a00265e <prvProcessTimerOrBlockTask+0x62>
			( void ) xTaskResumeAll();
1a00265a:	f7ff fb3f 	bl	1a001cdc <xTaskResumeAll>
}
1a00265e:	b002      	add	sp, #8
1a002660:	bd70      	pop	{r4, r5, r6, pc}
1a002662:	bf00      	nop
1a002664:	10003350 	.word	0x10003350
1a002668:	10003470 	.word	0x10003470
1a00266c:	e000ed04 	.word	0xe000ed04

1a002670 <prvProcessReceivedCommands>:
{
1a002670:	b530      	push	{r4, r5, lr}
1a002672:	b089      	sub	sp, #36	; 0x24
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
1a002674:	e006      	b.n	1a002684 <prvProcessReceivedCommands+0x14>
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
1a002676:	9907      	ldr	r1, [sp, #28]
1a002678:	9806      	ldr	r0, [sp, #24]
1a00267a:	9b05      	ldr	r3, [sp, #20]
1a00267c:	4798      	blx	r3
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
1a00267e:	9b04      	ldr	r3, [sp, #16]
1a002680:	2b00      	cmp	r3, #0
1a002682:	da0b      	bge.n	1a00269c <prvProcessReceivedCommands+0x2c>
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
1a002684:	2200      	movs	r2, #0
1a002686:	a904      	add	r1, sp, #16
1a002688:	4b37      	ldr	r3, [pc, #220]	; (1a002768 <prvProcessReceivedCommands+0xf8>)
1a00268a:	6818      	ldr	r0, [r3, #0]
1a00268c:	f7fe fd8e 	bl	1a0011ac <xQueueReceive>
1a002690:	2800      	cmp	r0, #0
1a002692:	d066      	beq.n	1a002762 <prvProcessReceivedCommands+0xf2>
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
1a002694:	9b04      	ldr	r3, [sp, #16]
1a002696:	2b00      	cmp	r3, #0
1a002698:	daf1      	bge.n	1a00267e <prvProcessReceivedCommands+0xe>
1a00269a:	e7ec      	b.n	1a002676 <prvProcessReceivedCommands+0x6>
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
1a00269c:	9c06      	ldr	r4, [sp, #24]
			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
1a00269e:	6963      	ldr	r3, [r4, #20]
1a0026a0:	b113      	cbz	r3, 1a0026a8 <prvProcessReceivedCommands+0x38>
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
1a0026a2:	1d20      	adds	r0, r4, #4
1a0026a4:	f7fe ff72 	bl	1a00158c <uxListRemove>
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
1a0026a8:	a803      	add	r0, sp, #12
1a0026aa:	f7ff ff61 	bl	1a002570 <prvSampleTimeNow>
			switch( xMessage.xMessageID )
1a0026ae:	9b04      	ldr	r3, [sp, #16]
1a0026b0:	2b09      	cmp	r3, #9
1a0026b2:	d8e7      	bhi.n	1a002684 <prvProcessReceivedCommands+0x14>
1a0026b4:	a201      	add	r2, pc, #4	; (adr r2, 1a0026bc <prvProcessReceivedCommands+0x4c>)
1a0026b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
1a0026ba:	bf00      	nop
1a0026bc:	1a0026e5 	.word	0x1a0026e5
1a0026c0:	1a0026e5 	.word	0x1a0026e5
1a0026c4:	1a0026e5 	.word	0x1a0026e5
1a0026c8:	1a002685 	.word	0x1a002685
1a0026cc:	1a00272d 	.word	0x1a00272d
1a0026d0:	1a002753 	.word	0x1a002753
1a0026d4:	1a0026e5 	.word	0x1a0026e5
1a0026d8:	1a0026e5 	.word	0x1a0026e5
1a0026dc:	1a002685 	.word	0x1a002685
1a0026e0:	1a00272d 	.word	0x1a00272d
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
1a0026e4:	9905      	ldr	r1, [sp, #20]
1a0026e6:	69a5      	ldr	r5, [r4, #24]
1a0026e8:	460b      	mov	r3, r1
1a0026ea:	4602      	mov	r2, r0
1a0026ec:	4429      	add	r1, r5
1a0026ee:	4620      	mov	r0, r4
1a0026f0:	f7ff fe3e 	bl	1a002370 <prvInsertTimerInActiveList>
1a0026f4:	2800      	cmp	r0, #0
1a0026f6:	d0c5      	beq.n	1a002684 <prvProcessReceivedCommands+0x14>
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
1a0026f8:	6a63      	ldr	r3, [r4, #36]	; 0x24
1a0026fa:	4620      	mov	r0, r4
1a0026fc:	4798      	blx	r3
						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
1a0026fe:	69e3      	ldr	r3, [r4, #28]
1a002700:	2b01      	cmp	r3, #1
1a002702:	d1bf      	bne.n	1a002684 <prvProcessReceivedCommands+0x14>
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
1a002704:	69a2      	ldr	r2, [r4, #24]
1a002706:	2100      	movs	r1, #0
1a002708:	9100      	str	r1, [sp, #0]
1a00270a:	460b      	mov	r3, r1
1a00270c:	9805      	ldr	r0, [sp, #20]
1a00270e:	4402      	add	r2, r0
1a002710:	4620      	mov	r0, r4
1a002712:	f7ff febb 	bl	1a00248c <xTimerGenericCommand>
							configASSERT( xResult );
1a002716:	2800      	cmp	r0, #0
1a002718:	d1b4      	bne.n	1a002684 <prvProcessReceivedCommands+0x14>
1a00271a:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a00271e:	f383 8811 	msr	BASEPRI, r3
1a002722:	f3bf 8f6f 	isb	sy
1a002726:	f3bf 8f4f 	dsb	sy
1a00272a:	e7fe      	b.n	1a00272a <prvProcessReceivedCommands+0xba>
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
1a00272c:	9905      	ldr	r1, [sp, #20]
1a00272e:	61a1      	str	r1, [r4, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
1a002730:	b131      	cbz	r1, 1a002740 <prvProcessReceivedCommands+0xd0>
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
1a002732:	4603      	mov	r3, r0
1a002734:	4602      	mov	r2, r0
1a002736:	4401      	add	r1, r0
1a002738:	4620      	mov	r0, r4
1a00273a:	f7ff fe19 	bl	1a002370 <prvInsertTimerInActiveList>
					break;
1a00273e:	e7a1      	b.n	1a002684 <prvProcessReceivedCommands+0x14>
1a002740:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a002744:	f383 8811 	msr	BASEPRI, r3
1a002748:	f3bf 8f6f 	isb	sy
1a00274c:	f3bf 8f4f 	dsb	sy
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
1a002750:	e7fe      	b.n	1a002750 <prvProcessReceivedCommands+0xe0>
						if( pxTimer->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
1a002752:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
1a002756:	2b00      	cmp	r3, #0
1a002758:	d194      	bne.n	1a002684 <prvProcessReceivedCommands+0x14>
							vPortFree( pxTimer );
1a00275a:	4620      	mov	r0, r4
1a00275c:	f7fe fa42 	bl	1a000be4 <vPortFree>
1a002760:	e790      	b.n	1a002684 <prvProcessReceivedCommands+0x14>
}
1a002762:	b009      	add	sp, #36	; 0x24
1a002764:	bd30      	pop	{r4, r5, pc}
1a002766:	bf00      	nop
1a002768:	10003470 	.word	0x10003470

1a00276c <prvTimerTask>:
{
1a00276c:	b500      	push	{lr}
1a00276e:	b083      	sub	sp, #12
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
1a002770:	a801      	add	r0, sp, #4
1a002772:	f7ff fded 	bl	1a002350 <prvGetNextExpireTime>
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
1a002776:	9901      	ldr	r1, [sp, #4]
1a002778:	f7ff ff40 	bl	1a0025fc <prvProcessTimerOrBlockTask>
		prvProcessReceivedCommands();
1a00277c:	f7ff ff78 	bl	1a002670 <prvProcessReceivedCommands>
1a002780:	e7f6      	b.n	1a002770 <prvTimerTask+0x4>
1a002782:	Address 0x000000001a002782 is out of bounds.


1a002784 <prvTaskExitError>:
	return pxTopOfStack;
}
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
1a002784:	b082      	sub	sp, #8
volatile uint32_t ulDummy = 0;
1a002786:	2300      	movs	r3, #0
1a002788:	9301      	str	r3, [sp, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
1a00278a:	4b0d      	ldr	r3, [pc, #52]	; (1a0027c0 <prvTaskExitError+0x3c>)
1a00278c:	681b      	ldr	r3, [r3, #0]
1a00278e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
1a002792:	d008      	beq.n	1a0027a6 <prvTaskExitError+0x22>
1a002794:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a002798:	f383 8811 	msr	BASEPRI, r3
1a00279c:	f3bf 8f6f 	isb	sy
1a0027a0:	f3bf 8f4f 	dsb	sy
1a0027a4:	e7fe      	b.n	1a0027a4 <prvTaskExitError+0x20>
1a0027a6:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a0027aa:	f383 8811 	msr	BASEPRI, r3
1a0027ae:	f3bf 8f6f 	isb	sy
1a0027b2:	f3bf 8f4f 	dsb	sy
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
1a0027b6:	9b01      	ldr	r3, [sp, #4]
1a0027b8:	2b00      	cmp	r3, #0
1a0027ba:	d0fc      	beq.n	1a0027b6 <prvTaskExitError+0x32>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
1a0027bc:	b002      	add	sp, #8
1a0027be:	4770      	bx	lr
1a0027c0:	10000004 	.word	0x10000004

1a0027c4 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
1a0027c4:	4808      	ldr	r0, [pc, #32]	; (1a0027e8 <prvPortStartFirstTask+0x24>)
1a0027c6:	6800      	ldr	r0, [r0, #0]
1a0027c8:	6800      	ldr	r0, [r0, #0]
1a0027ca:	f380 8808 	msr	MSP, r0
1a0027ce:	f04f 0000 	mov.w	r0, #0
1a0027d2:	f380 8814 	msr	CONTROL, r0
1a0027d6:	b662      	cpsie	i
1a0027d8:	b661      	cpsie	f
1a0027da:	f3bf 8f4f 	dsb	sy
1a0027de:	f3bf 8f6f 	isb	sy
1a0027e2:	df00      	svc	0
1a0027e4:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
1a0027e6:	0000      	.short	0x0000
1a0027e8:	e000ed08 	.word	0xe000ed08

1a0027ec <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
1a0027ec:	f8df 000c 	ldr.w	r0, [pc, #12]	; 1a0027fc <vPortEnableVFP+0x10>
1a0027f0:	6801      	ldr	r1, [r0, #0]
1a0027f2:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
1a0027f6:	6001      	str	r1, [r0, #0]
1a0027f8:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
1a0027fa:	0000      	.short	0x0000
1a0027fc:	e000ed88 	.word	0xe000ed88

1a002800 <pxPortInitialiseStack>:
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
1a002800:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
1a002804:	f840 3c04 	str.w	r3, [r0, #-4]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
1a002808:	f021 0101 	bic.w	r1, r1, #1
1a00280c:	f840 1c08 	str.w	r1, [r0, #-8]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
1a002810:	4b05      	ldr	r3, [pc, #20]	; (1a002828 <pxPortInitialiseStack+0x28>)
1a002812:	f840 3c0c 	str.w	r3, [r0, #-12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
1a002816:	f840 2c20 	str.w	r2, [r0, #-32]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
1a00281a:	f06f 0302 	mvn.w	r3, #2
1a00281e:	f840 3c24 	str.w	r3, [r0, #-36]
}
1a002822:	3844      	subs	r0, #68	; 0x44
1a002824:	4770      	bx	lr
1a002826:	bf00      	nop
1a002828:	1a002785 	.word	0x1a002785
1a00282c:	ffffffff 	.word	0xffffffff

1a002830 <SVC_Handler>:
	__asm volatile (
1a002830:	4b07      	ldr	r3, [pc, #28]	; (1a002850 <pxCurrentTCBConst2>)
1a002832:	6819      	ldr	r1, [r3, #0]
1a002834:	6808      	ldr	r0, [r1, #0]
1a002836:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
1a00283a:	f380 8809 	msr	PSP, r0
1a00283e:	f3bf 8f6f 	isb	sy
1a002842:	f04f 0000 	mov.w	r0, #0
1a002846:	f380 8811 	msr	BASEPRI, r0
1a00284a:	4770      	bx	lr
1a00284c:	f3af 8000 	nop.w

1a002850 <pxCurrentTCBConst2>:
1a002850:	10003224 	.word	0x10003224

1a002854 <vPortEnterCritical>:
1a002854:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a002858:	f383 8811 	msr	BASEPRI, r3
1a00285c:	f3bf 8f6f 	isb	sy
1a002860:	f3bf 8f4f 	dsb	sy
	uxCriticalNesting++;
1a002864:	4a0a      	ldr	r2, [pc, #40]	; (1a002890 <vPortEnterCritical+0x3c>)
1a002866:	6813      	ldr	r3, [r2, #0]
1a002868:	3301      	adds	r3, #1
1a00286a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 1 )
1a00286c:	2b01      	cmp	r3, #1
1a00286e:	d000      	beq.n	1a002872 <vPortEnterCritical+0x1e>
}
1a002870:	4770      	bx	lr
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
1a002872:	4b08      	ldr	r3, [pc, #32]	; (1a002894 <vPortEnterCritical+0x40>)
1a002874:	681b      	ldr	r3, [r3, #0]
1a002876:	f013 0fff 	tst.w	r3, #255	; 0xff
1a00287a:	d0f9      	beq.n	1a002870 <vPortEnterCritical+0x1c>
1a00287c:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a002880:	f383 8811 	msr	BASEPRI, r3
1a002884:	f3bf 8f6f 	isb	sy
1a002888:	f3bf 8f4f 	dsb	sy
1a00288c:	e7fe      	b.n	1a00288c <vPortEnterCritical+0x38>
1a00288e:	bf00      	nop
1a002890:	10000004 	.word	0x10000004
1a002894:	e000ed04 	.word	0xe000ed04

1a002898 <vPortExitCritical>:
	configASSERT( uxCriticalNesting );
1a002898:	4b09      	ldr	r3, [pc, #36]	; (1a0028c0 <vPortExitCritical+0x28>)
1a00289a:	681b      	ldr	r3, [r3, #0]
1a00289c:	b943      	cbnz	r3, 1a0028b0 <vPortExitCritical+0x18>
1a00289e:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a0028a2:	f383 8811 	msr	BASEPRI, r3
1a0028a6:	f3bf 8f6f 	isb	sy
1a0028aa:	f3bf 8f4f 	dsb	sy
1a0028ae:	e7fe      	b.n	1a0028ae <vPortExitCritical+0x16>
	uxCriticalNesting--;
1a0028b0:	3b01      	subs	r3, #1
1a0028b2:	4a03      	ldr	r2, [pc, #12]	; (1a0028c0 <vPortExitCritical+0x28>)
1a0028b4:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
1a0028b6:	b90b      	cbnz	r3, 1a0028bc <vPortExitCritical+0x24>
	__asm volatile
1a0028b8:	f383 8811 	msr	BASEPRI, r3
}
1a0028bc:	4770      	bx	lr
1a0028be:	bf00      	nop
1a0028c0:	10000004 	.word	0x10000004
1a0028c4:	ffffffff 	.word	0xffffffff
1a0028c8:	ffffffff 	.word	0xffffffff
1a0028cc:	ffffffff 	.word	0xffffffff

1a0028d0 <PendSV_Handler>:
	__asm volatile
1a0028d0:	f3ef 8009 	mrs	r0, PSP
1a0028d4:	f3bf 8f6f 	isb	sy
1a0028d8:	4b15      	ldr	r3, [pc, #84]	; (1a002930 <pxCurrentTCBConst>)
1a0028da:	681a      	ldr	r2, [r3, #0]
1a0028dc:	f01e 0f10 	tst.w	lr, #16
1a0028e0:	bf08      	it	eq
1a0028e2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
1a0028e6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
1a0028ea:	6010      	str	r0, [r2, #0]
1a0028ec:	e92d 0009 	stmdb	sp!, {r0, r3}
1a0028f0:	f04f 00a0 	mov.w	r0, #160	; 0xa0
1a0028f4:	f380 8811 	msr	BASEPRI, r0
1a0028f8:	f3bf 8f4f 	dsb	sy
1a0028fc:	f3bf 8f6f 	isb	sy
1a002900:	f7ff fabc 	bl	1a001e7c <vTaskSwitchContext>
1a002904:	f04f 0000 	mov.w	r0, #0
1a002908:	f380 8811 	msr	BASEPRI, r0
1a00290c:	bc09      	pop	{r0, r3}
1a00290e:	6819      	ldr	r1, [r3, #0]
1a002910:	6808      	ldr	r0, [r1, #0]
1a002912:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
1a002916:	f01e 0f10 	tst.w	lr, #16
1a00291a:	bf08      	it	eq
1a00291c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
1a002920:	f380 8809 	msr	PSP, r0
1a002924:	f3bf 8f6f 	isb	sy
1a002928:	4770      	bx	lr
1a00292a:	bf00      	nop
1a00292c:	f3af 8000 	nop.w

1a002930 <pxCurrentTCBConst>:
1a002930:	10003224 	.word	0x10003224

1a002934 <SysTick_Handler>:
{
1a002934:	b508      	push	{r3, lr}
	__asm volatile
1a002936:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a00293a:	f383 8811 	msr	BASEPRI, r3
1a00293e:	f3bf 8f6f 	isb	sy
1a002942:	f3bf 8f4f 	dsb	sy
		if( xTaskIncrementTick() != pdFALSE )
1a002946:	f7ff f93d 	bl	1a001bc4 <xTaskIncrementTick>
1a00294a:	b118      	cbz	r0, 1a002954 <SysTick_Handler+0x20>
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
1a00294c:	4b03      	ldr	r3, [pc, #12]	; (1a00295c <SysTick_Handler+0x28>)
1a00294e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
1a002952:	601a      	str	r2, [r3, #0]
	__asm volatile
1a002954:	2300      	movs	r3, #0
1a002956:	f383 8811 	msr	BASEPRI, r3
}
1a00295a:	bd08      	pop	{r3, pc}
1a00295c:	e000ed04 	.word	0xe000ed04

1a002960 <vPortSetupTimerInterrupt>:
	portNVIC_SYSTICK_CTRL_REG = 0UL;
1a002960:	4a08      	ldr	r2, [pc, #32]	; (1a002984 <vPortSetupTimerInterrupt+0x24>)
1a002962:	2300      	movs	r3, #0
1a002964:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
1a002966:	4908      	ldr	r1, [pc, #32]	; (1a002988 <vPortSetupTimerInterrupt+0x28>)
1a002968:	600b      	str	r3, [r1, #0]
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
1a00296a:	4b08      	ldr	r3, [pc, #32]	; (1a00298c <vPortSetupTimerInterrupt+0x2c>)
1a00296c:	681b      	ldr	r3, [r3, #0]
1a00296e:	4908      	ldr	r1, [pc, #32]	; (1a002990 <vPortSetupTimerInterrupt+0x30>)
1a002970:	fba1 1303 	umull	r1, r3, r1, r3
1a002974:	099b      	lsrs	r3, r3, #6
1a002976:	3b01      	subs	r3, #1
1a002978:	4906      	ldr	r1, [pc, #24]	; (1a002994 <vPortSetupTimerInterrupt+0x34>)
1a00297a:	600b      	str	r3, [r1, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
1a00297c:	2307      	movs	r3, #7
1a00297e:	6013      	str	r3, [r2, #0]
}
1a002980:	4770      	bx	lr
1a002982:	bf00      	nop
1a002984:	e000e010 	.word	0xe000e010
1a002988:	e000e018 	.word	0xe000e018
1a00298c:	1000366c 	.word	0x1000366c
1a002990:	10624dd3 	.word	0x10624dd3
1a002994:	e000e014 	.word	0xe000e014

1a002998 <xPortStartScheduler>:
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
1a002998:	4b3a      	ldr	r3, [pc, #232]	; (1a002a84 <xPortStartScheduler+0xec>)
1a00299a:	681a      	ldr	r2, [r3, #0]
1a00299c:	4b3a      	ldr	r3, [pc, #232]	; (1a002a88 <xPortStartScheduler+0xf0>)
1a00299e:	429a      	cmp	r2, r3
1a0029a0:	d029      	beq.n	1a0029f6 <xPortStartScheduler+0x5e>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
1a0029a2:	4b38      	ldr	r3, [pc, #224]	; (1a002a84 <xPortStartScheduler+0xec>)
1a0029a4:	681a      	ldr	r2, [r3, #0]
1a0029a6:	4b39      	ldr	r3, [pc, #228]	; (1a002a8c <xPortStartScheduler+0xf4>)
1a0029a8:	429a      	cmp	r2, r3
1a0029aa:	d02d      	beq.n	1a002a08 <xPortStartScheduler+0x70>
{
1a0029ac:	b510      	push	{r4, lr}
1a0029ae:	b082      	sub	sp, #8
		ulOriginalPriority = *pucFirstUserPriorityRegister;
1a0029b0:	4b37      	ldr	r3, [pc, #220]	; (1a002a90 <xPortStartScheduler+0xf8>)
1a0029b2:	781a      	ldrb	r2, [r3, #0]
1a0029b4:	b2d2      	uxtb	r2, r2
1a0029b6:	9201      	str	r2, [sp, #4]
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
1a0029b8:	22ff      	movs	r2, #255	; 0xff
1a0029ba:	701a      	strb	r2, [r3, #0]
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
1a0029bc:	781b      	ldrb	r3, [r3, #0]
1a0029be:	b2db      	uxtb	r3, r3
1a0029c0:	f88d 3003 	strb.w	r3, [sp, #3]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
1a0029c4:	f89d 3003 	ldrb.w	r3, [sp, #3]
1a0029c8:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
1a0029cc:	4a31      	ldr	r2, [pc, #196]	; (1a002a94 <xPortStartScheduler+0xfc>)
1a0029ce:	7013      	strb	r3, [r2, #0]
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
1a0029d0:	4b31      	ldr	r3, [pc, #196]	; (1a002a98 <xPortStartScheduler+0x100>)
1a0029d2:	2207      	movs	r2, #7
1a0029d4:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
1a0029d6:	f89d 3003 	ldrb.w	r3, [sp, #3]
1a0029da:	f013 0f80 	tst.w	r3, #128	; 0x80
1a0029de:	d01c      	beq.n	1a002a1a <xPortStartScheduler+0x82>
			ulMaxPRIGROUPValue--;
1a0029e0:	4a2d      	ldr	r2, [pc, #180]	; (1a002a98 <xPortStartScheduler+0x100>)
1a0029e2:	6813      	ldr	r3, [r2, #0]
1a0029e4:	3b01      	subs	r3, #1
1a0029e6:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
1a0029e8:	f89d 3003 	ldrb.w	r3, [sp, #3]
1a0029ec:	005b      	lsls	r3, r3, #1
1a0029ee:	b2db      	uxtb	r3, r3
1a0029f0:	f88d 3003 	strb.w	r3, [sp, #3]
1a0029f4:	e7ef      	b.n	1a0029d6 <xPortStartScheduler+0x3e>
	__asm volatile
1a0029f6:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a0029fa:	f383 8811 	msr	BASEPRI, r3
1a0029fe:	f3bf 8f6f 	isb	sy
1a002a02:	f3bf 8f4f 	dsb	sy
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
1a002a06:	e7fe      	b.n	1a002a06 <xPortStartScheduler+0x6e>
1a002a08:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a002a0c:	f383 8811 	msr	BASEPRI, r3
1a002a10:	f3bf 8f6f 	isb	sy
1a002a14:	f3bf 8f4f 	dsb	sy
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
1a002a18:	e7fe      	b.n	1a002a18 <xPortStartScheduler+0x80>
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == __NVIC_PRIO_BITS );
1a002a1a:	4b1f      	ldr	r3, [pc, #124]	; (1a002a98 <xPortStartScheduler+0x100>)
1a002a1c:	681b      	ldr	r3, [r3, #0]
1a002a1e:	2b04      	cmp	r3, #4
1a002a20:	d008      	beq.n	1a002a34 <xPortStartScheduler+0x9c>
1a002a22:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a002a26:	f383 8811 	msr	BASEPRI, r3
1a002a2a:	f3bf 8f6f 	isb	sy
1a002a2e:	f3bf 8f4f 	dsb	sy
1a002a32:	e7fe      	b.n	1a002a32 <xPortStartScheduler+0x9a>
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
1a002a34:	021b      	lsls	r3, r3, #8
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
1a002a36:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
1a002a3a:	4a17      	ldr	r2, [pc, #92]	; (1a002a98 <xPortStartScheduler+0x100>)
1a002a3c:	6013      	str	r3, [r2, #0]
		*pucFirstUserPriorityRegister = ulOriginalPriority;
1a002a3e:	9b01      	ldr	r3, [sp, #4]
1a002a40:	b2db      	uxtb	r3, r3
1a002a42:	4a13      	ldr	r2, [pc, #76]	; (1a002a90 <xPortStartScheduler+0xf8>)
1a002a44:	7013      	strb	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
1a002a46:	4b15      	ldr	r3, [pc, #84]	; (1a002a9c <xPortStartScheduler+0x104>)
1a002a48:	681a      	ldr	r2, [r3, #0]
1a002a4a:	f442 0260 	orr.w	r2, r2, #14680064	; 0xe00000
1a002a4e:	601a      	str	r2, [r3, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
1a002a50:	681a      	ldr	r2, [r3, #0]
1a002a52:	f042 4260 	orr.w	r2, r2, #3758096384	; 0xe0000000
1a002a56:	601a      	str	r2, [r3, #0]
	vPortSetupTimerInterrupt();
1a002a58:	f7ff ff82 	bl	1a002960 <vPortSetupTimerInterrupt>
	uxCriticalNesting = 0;
1a002a5c:	2400      	movs	r4, #0
1a002a5e:	4b10      	ldr	r3, [pc, #64]	; (1a002aa0 <xPortStartScheduler+0x108>)
1a002a60:	601c      	str	r4, [r3, #0]
	vPortEnableVFP();
1a002a62:	f7ff fec3 	bl	1a0027ec <vPortEnableVFP>
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
1a002a66:	4a0f      	ldr	r2, [pc, #60]	; (1a002aa4 <xPortStartScheduler+0x10c>)
1a002a68:	6813      	ldr	r3, [r2, #0]
1a002a6a:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
1a002a6e:	6013      	str	r3, [r2, #0]
	prvPortStartFirstTask();
1a002a70:	f7ff fea8 	bl	1a0027c4 <prvPortStartFirstTask>
	vTaskSwitchContext();
1a002a74:	f7ff fa02 	bl	1a001e7c <vTaskSwitchContext>
	prvTaskExitError();
1a002a78:	f7ff fe84 	bl	1a002784 <prvTaskExitError>
}
1a002a7c:	4620      	mov	r0, r4
1a002a7e:	b002      	add	sp, #8
1a002a80:	bd10      	pop	{r4, pc}
1a002a82:	bf00      	nop
1a002a84:	e000ed00 	.word	0xe000ed00
1a002a88:	410fc271 	.word	0x410fc271
1a002a8c:	410fc270 	.word	0x410fc270
1a002a90:	e000e400 	.word	0xe000e400
1a002a94:	10003478 	.word	0x10003478
1a002a98:	1000347c 	.word	0x1000347c
1a002a9c:	e000ed20 	.word	0xe000ed20
1a002aa0:	10000004 	.word	0x10000004
1a002aa4:	e000ef34 	.word	0xe000ef34

1a002aa8 <vPortValidateInterruptPriority>:
	{
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
1a002aa8:	f3ef 8305 	mrs	r3, IPSR

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
1a002aac:	2b0f      	cmp	r3, #15
1a002aae:	d90f      	bls.n	1a002ad0 <vPortValidateInterruptPriority+0x28>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
1a002ab0:	4a10      	ldr	r2, [pc, #64]	; (1a002af4 <vPortValidateInterruptPriority+0x4c>)
1a002ab2:	5c9b      	ldrb	r3, [r3, r2]
1a002ab4:	b2db      	uxtb	r3, r3
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
1a002ab6:	4a10      	ldr	r2, [pc, #64]	; (1a002af8 <vPortValidateInterruptPriority+0x50>)
1a002ab8:	7812      	ldrb	r2, [r2, #0]
1a002aba:	429a      	cmp	r2, r3
1a002abc:	d908      	bls.n	1a002ad0 <vPortValidateInterruptPriority+0x28>
1a002abe:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a002ac2:	f383 8811 	msr	BASEPRI, r3
1a002ac6:	f3bf 8f6f 	isb	sy
1a002aca:	f3bf 8f4f 	dsb	sy
1a002ace:	e7fe      	b.n	1a002ace <vPortValidateInterruptPriority+0x26>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
1a002ad0:	4b0a      	ldr	r3, [pc, #40]	; (1a002afc <vPortValidateInterruptPriority+0x54>)
1a002ad2:	681b      	ldr	r3, [r3, #0]
1a002ad4:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
1a002ad8:	4a09      	ldr	r2, [pc, #36]	; (1a002b00 <vPortValidateInterruptPriority+0x58>)
1a002ada:	6812      	ldr	r2, [r2, #0]
1a002adc:	4293      	cmp	r3, r2
1a002ade:	d908      	bls.n	1a002af2 <vPortValidateInterruptPriority+0x4a>
1a002ae0:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a002ae4:	f383 8811 	msr	BASEPRI, r3
1a002ae8:	f3bf 8f6f 	isb	sy
1a002aec:	f3bf 8f4f 	dsb	sy
1a002af0:	e7fe      	b.n	1a002af0 <vPortValidateInterruptPriority+0x48>
	}
1a002af2:	4770      	bx	lr
1a002af4:	e000e3f0 	.word	0xe000e3f0
1a002af8:	10003478 	.word	0x10003478
1a002afc:	e000ed0c 	.word	0xe000ed0c
1a002b00:	1000347c 	.word	0x1000347c

1a002b04 <DAC_IRQHandler>:
}
/*-----------------------------------------------------------*/

// ISR Handler
void vSoftwareInterruptHandler( void )
{
1a002b04:	b508      	push	{r3, lr}
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
1a002b06:	4b05      	ldr	r3, [pc, #20]	; (1a002b1c <DAC_IRQHandler+0x18>)
1a002b08:	2201      	movs	r2, #1
1a002b0a:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
   NVIC_ClearPendingIRQ( mainSW_INTERRUPT_ID );

   // Execute Tick Hook function if pointer is not NULL
   if( freeRtosInterruptCallback != NULL ) {
1a002b0e:	4b04      	ldr	r3, [pc, #16]	; (1a002b20 <DAC_IRQHandler+0x1c>)
1a002b10:	681b      	ldr	r3, [r3, #0]
1a002b12:	b113      	cbz	r3, 1a002b1a <DAC_IRQHandler+0x16>
      (* freeRtosInterruptCallback )();
1a002b14:	4b02      	ldr	r3, [pc, #8]	; (1a002b20 <DAC_IRQHandler+0x1c>)
1a002b16:	681b      	ldr	r3, [r3, #0]
1a002b18:	4798      	blx	r3
   }
}
1a002b1a:	bd08      	pop	{r3, pc}
1a002b1c:	e000e100 	.word	0xe000e100
1a002b20:	10003480 	.word	0x10003480

1a002b24 <Board_LED_Init>:
#define GPIO_PORTS_SIZE     (sizeof(GpioPorts) / sizeof(struct gpio_t))


static void Board_LED_Init()
{
   for (uint32_t i = 0; i < GPIO_LEDS_SIZE; ++i) {
1a002b24:	2200      	movs	r2, #0
1a002b26:	2a05      	cmp	r2, #5
1a002b28:	d819      	bhi.n	1a002b5e <Board_LED_Init+0x3a>
{
1a002b2a:	b470      	push	{r4, r5, r6}
      const struct gpio_t *io = &GpioLeds[i];
      Chip_GPIO_SetPinDIROutput(LPC_GPIO_PORT, io->port, io->pin);
1a002b2c:	490c      	ldr	r1, [pc, #48]	; (1a002b60 <Board_LED_Init+0x3c>)
1a002b2e:	f811 5012 	ldrb.w	r5, [r1, r2, lsl #1]
1a002b32:	eb01 0142 	add.w	r1, r1, r2, lsl #1
1a002b36:	784c      	ldrb	r4, [r1, #1]
 * @param	pin		: GPIO pin to set direction on as output
 * @return	Nothing
 */
STATIC INLINE void Chip_GPIO_SetPinDIROutput(LPC_GPIO_T *pGPIO, uint8_t port, uint8_t pin)
{
	pGPIO->DIR[port] |= 1UL << pin;
1a002b38:	4b0a      	ldr	r3, [pc, #40]	; (1a002b64 <Board_LED_Init+0x40>)
1a002b3a:	f505 6600 	add.w	r6, r5, #2048	; 0x800
1a002b3e:	f853 1026 	ldr.w	r1, [r3, r6, lsl #2]
1a002b42:	2001      	movs	r0, #1
1a002b44:	40a0      	lsls	r0, r4
1a002b46:	4301      	orrs	r1, r0
1a002b48:	f843 1026 	str.w	r1, [r3, r6, lsl #2]
	pGPIO->B[port][pin] = setting;
1a002b4c:	eb03 1345 	add.w	r3, r3, r5, lsl #5
1a002b50:	2100      	movs	r1, #0
1a002b52:	5519      	strb	r1, [r3, r4]
   for (uint32_t i = 0; i < GPIO_LEDS_SIZE; ++i) {
1a002b54:	3201      	adds	r2, #1
1a002b56:	2a05      	cmp	r2, #5
1a002b58:	d9e8      	bls.n	1a002b2c <Board_LED_Init+0x8>
      Chip_GPIO_SetPinState(LPC_GPIO_PORT, io->port, io->pin, false);
   }
}
1a002b5a:	bc70      	pop	{r4, r5, r6}
1a002b5c:	4770      	bx	lr
1a002b5e:	4770      	bx	lr
1a002b60:	1a00b038 	.word	0x1a00b038
1a002b64:	400f4000 	.word	0x400f4000

1a002b68 <Board_TEC_Init>:


static void Board_TEC_Init()
{
   for (uint32_t i = 0; i < GPIO_BUTTONS_SIZE; ++i) {
1a002b68:	2300      	movs	r3, #0
1a002b6a:	2b03      	cmp	r3, #3
1a002b6c:	d816      	bhi.n	1a002b9c <Board_TEC_Init+0x34>
{
1a002b6e:	b430      	push	{r4, r5}
      const struct gpio_t *io = &GpioButtons[i];
      Chip_GPIO_SetPinDIRInput(LPC_GPIO_PORT, io->port, io->pin);
1a002b70:	490b      	ldr	r1, [pc, #44]	; (1a002ba0 <Board_TEC_Init+0x38>)
1a002b72:	f811 2013 	ldrb.w	r2, [r1, r3, lsl #1]
1a002b76:	eb01 0143 	add.w	r1, r1, r3, lsl #1
1a002b7a:	784d      	ldrb	r5, [r1, #1]
 * @param	pin		: GPIO pin to set direction on as input
 * @return	Nothing
 */
STATIC INLINE void Chip_GPIO_SetPinDIRInput(LPC_GPIO_T *pGPIO, uint8_t port, uint8_t pin)
{
	pGPIO->DIR[port] &= ~(1UL << pin);
1a002b7c:	4c09      	ldr	r4, [pc, #36]	; (1a002ba4 <Board_TEC_Init+0x3c>)
1a002b7e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
1a002b82:	f854 1022 	ldr.w	r1, [r4, r2, lsl #2]
1a002b86:	2001      	movs	r0, #1
1a002b88:	40a8      	lsls	r0, r5
1a002b8a:	ea21 0100 	bic.w	r1, r1, r0
1a002b8e:	f844 1022 	str.w	r1, [r4, r2, lsl #2]
   for (uint32_t i = 0; i < GPIO_BUTTONS_SIZE; ++i) {
1a002b92:	3301      	adds	r3, #1
1a002b94:	2b03      	cmp	r3, #3
1a002b96:	d9eb      	bls.n	1a002b70 <Board_TEC_Init+0x8>
   }
}
1a002b98:	bc30      	pop	{r4, r5}
1a002b9a:	4770      	bx	lr
1a002b9c:	4770      	bx	lr
1a002b9e:	bf00      	nop
1a002ba0:	1a00b030 	.word	0x1a00b030
1a002ba4:	400f4000 	.word	0x400f4000

1a002ba8 <Board_GPIO_Init>:


static void Board_GPIO_Init()
{
   for (uint32_t i = 0; i < GPIO_PORTS_SIZE; ++i) {
1a002ba8:	2300      	movs	r3, #0
1a002baa:	2b08      	cmp	r3, #8
1a002bac:	d816      	bhi.n	1a002bdc <Board_GPIO_Init+0x34>
{
1a002bae:	b430      	push	{r4, r5}
      const struct gpio_t *io = &GpioPorts[i];
      Chip_GPIO_SetPinDIRInput(LPC_GPIO_PORT, io->port, io->pin);
1a002bb0:	490b      	ldr	r1, [pc, #44]	; (1a002be0 <Board_GPIO_Init+0x38>)
1a002bb2:	f811 2013 	ldrb.w	r2, [r1, r3, lsl #1]
1a002bb6:	eb01 0143 	add.w	r1, r1, r3, lsl #1
1a002bba:	784d      	ldrb	r5, [r1, #1]
1a002bbc:	4c09      	ldr	r4, [pc, #36]	; (1a002be4 <Board_GPIO_Init+0x3c>)
1a002bbe:	f502 6200 	add.w	r2, r2, #2048	; 0x800
1a002bc2:	f854 1022 	ldr.w	r1, [r4, r2, lsl #2]
1a002bc6:	2001      	movs	r0, #1
1a002bc8:	40a8      	lsls	r0, r5
1a002bca:	ea21 0100 	bic.w	r1, r1, r0
1a002bce:	f844 1022 	str.w	r1, [r4, r2, lsl #2]
   for (uint32_t i = 0; i < GPIO_PORTS_SIZE; ++i) {
1a002bd2:	3301      	adds	r3, #1
1a002bd4:	2b08      	cmp	r3, #8
1a002bd6:	d9eb      	bls.n	1a002bb0 <Board_GPIO_Init+0x8>
   }
}
1a002bd8:	bc30      	pop	{r4, r5}
1a002bda:	4770      	bx	lr
1a002bdc:	4770      	bx	lr
1a002bde:	bf00      	nop
1a002be0:	1a00b044 	.word	0x1a00b044
1a002be4:	400f4000 	.word	0x400f4000

1a002be8 <Board_ADC_Init>:
   Chip_SSP_Enable(LPC_SSP1);
}


static void Board_ADC_Init()
{
1a002be8:	b510      	push	{r4, lr}
1a002bea:	b082      	sub	sp, #8
   ADC_CLOCK_SETUP_T cs;

   Chip_ADC_Init(LPC_ADC0, &cs);
1a002bec:	4c08      	ldr	r4, [pc, #32]	; (1a002c10 <Board_ADC_Init+0x28>)
1a002bee:	4669      	mov	r1, sp
1a002bf0:	4620      	mov	r0, r4
1a002bf2:	f000 fb11 	bl	1a003218 <Chip_ADC_Init>
   Chip_ADC_SetSampleRate(LPC_ADC0, &cs, BOARD_ADC_SAMPLE_RATE);
1a002bf6:	4a07      	ldr	r2, [pc, #28]	; (1a002c14 <Board_ADC_Init+0x2c>)
1a002bf8:	4669      	mov	r1, sp
1a002bfa:	4620      	mov	r0, r4
1a002bfc:	f000 fb77 	bl	1a0032ee <Chip_ADC_SetSampleRate>
   Chip_ADC_SetResolution(LPC_ADC0, &cs, BOARD_ADC_RESOLUTION);
1a002c00:	2200      	movs	r2, #0
1a002c02:	4669      	mov	r1, sp
1a002c04:	4620      	mov	r0, r4
1a002c06:	f000 fb8b 	bl	1a003320 <Chip_ADC_SetResolution>
}
1a002c0a:	b002      	add	sp, #8
1a002c0c:	bd10      	pop	{r4, pc}
1a002c0e:	bf00      	nop
1a002c10:	400e3000 	.word	0x400e3000
1a002c14:	00061a80 	.word	0x00061a80

1a002c18 <Board_SPI_Init>:
{
1a002c18:	b510      	push	{r4, lr}
   Chip_SSP_Init(LPC_SSP1);
1a002c1a:	4c0b      	ldr	r4, [pc, #44]	; (1a002c48 <Board_SPI_Init+0x30>)
1a002c1c:	4620      	mov	r0, r4
1a002c1e:	f001 f819 	bl	1a003c54 <Chip_SSP_Init>
 *						- SSP_MODE_SLAVE
 * @return	 Nothing
 */
STATIC INLINE void Chip_SSP_Set_Mode(LPC_SSP_T *pSSP, uint32_t mode)
{
	pSSP->CR1 = (pSSP->CR1 & ~(1 << 2)) | mode;
1a002c22:	6863      	ldr	r3, [r4, #4]
1a002c24:	f023 0304 	bic.w	r3, r3, #4
1a002c28:	6063      	str	r3, [r4, #4]
	pSSP->CR0 = (pSSP->CR0 & ~0xFF) | bits | frameFormat | clockMode;
1a002c2a:	6823      	ldr	r3, [r4, #0]
1a002c2c:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
1a002c30:	f043 0307 	orr.w	r3, r3, #7
1a002c34:	6023      	str	r3, [r4, #0]
   Chip_SSP_SetBitRate(LPC_SSP1, BOARD_SPI_SPEED);
1a002c36:	4905      	ldr	r1, [pc, #20]	; (1a002c4c <Board_SPI_Init+0x34>)
1a002c38:	4620      	mov	r0, r4
1a002c3a:	f000 ffec 	bl	1a003c16 <Chip_SSP_SetBitRate>
	pSSP->CR1 |= SSP_CR1_SSP_EN;
1a002c3e:	6863      	ldr	r3, [r4, #4]
1a002c40:	f043 0302 	orr.w	r3, r3, #2
1a002c44:	6063      	str	r3, [r4, #4]
}
1a002c46:	bd10      	pop	{r4, pc}
1a002c48:	400c5000 	.word	0x400c5000
1a002c4c:	000186a0 	.word	0x000186a0

1a002c50 <Board_I2C_Init>:
{
1a002c50:	b508      	push	{r3, lr}
   Chip_I2C_Init(I2C0);
1a002c52:	2000      	movs	r0, #0
1a002c54:	f000 f956 	bl	1a002f04 <Chip_I2C_Init>
 *                  - I2C0_FAST_MODE_PLUS: Fast-mode Plus transmit
 * @return	Nothing
 */
STATIC INLINE void Chip_SCU_I2C0PinConfig(uint32_t I2C0Mode)
{
	LPC_SCU->SFSI2C0 = I2C0Mode;
1a002c58:	4b04      	ldr	r3, [pc, #16]	; (1a002c6c <Board_I2C_Init+0x1c>)
1a002c5a:	f640 0208 	movw	r2, #2056	; 0x808
1a002c5e:	f8c3 2c84 	str.w	r2, [r3, #3204]	; 0xc84
   Chip_I2C_SetClockRate(I2C0, BOARD_I2C_SPEED);
1a002c62:	4903      	ldr	r1, [pc, #12]	; (1a002c70 <Board_I2C_Init+0x20>)
1a002c64:	2000      	movs	r0, #0
1a002c66:	f000 f95f 	bl	1a002f28 <Chip_I2C_SetClockRate>
}
1a002c6a:	bd08      	pop	{r3, pc}
1a002c6c:	40086000 	.word	0x40086000
1a002c70:	000f4240 	.word	0x000f4240

1a002c74 <Board_Debug_Init>:


void Board_Debug_Init(void)
{
1a002c74:	b510      	push	{r4, lr}
   Chip_UART_Init(DEBUG_UART);
1a002c76:	4c07      	ldr	r4, [pc, #28]	; (1a002c94 <Board_Debug_Init+0x20>)
1a002c78:	4620      	mov	r0, r4
1a002c7a:	f000 f9df 	bl	1a00303c <Chip_UART_Init>
   Chip_UART_SetBaudFDR(DEBUG_UART, DEBUG_UART_BAUD_RATE);
1a002c7e:	f44f 31e1 	mov.w	r1, #115200	; 0x1c200
1a002c82:	4620      	mov	r0, r4
1a002c84:	f000 fa24 	bl	1a0030d0 <Chip_UART_SetBaudFDR>
 *			stop bit, and even (enabled) parity would be
 *			(UART_LCR_WLEN8 | UART_LCR_SBS_1BIT | UART_LCR_PARITY_EN | UART_LCR_PARITY_EVEN)
 */
STATIC INLINE void Chip_UART_ConfigData(LPC_USART_T *pUART, uint32_t config)
{
	pUART->LCR = config;
1a002c88:	2303      	movs	r3, #3
1a002c8a:	60e3      	str	r3, [r4, #12]
    pUART->TER2 = UART_TER2_TXEN;
1a002c8c:	2301      	movs	r3, #1
1a002c8e:	65e3      	str	r3, [r4, #92]	; 0x5c
   Chip_UART_ConfigData(DEBUG_UART, DEBUG_UART_CONFIG);
   Chip_UART_TXEnable(DEBUG_UART);
}
1a002c90:	bd10      	pop	{r4, pc}
1a002c92:	bf00      	nop
1a002c94:	400c1000 	.word	0x400c1000

1a002c98 <Board_UARTPutChar>:
 * @note	Mask bits of the returned status value with UART_LSR_*
 *			definitions for specific statuses.
 */
STATIC INLINE uint32_t Chip_UART_ReadLineStatus(LPC_USART_T *pUART)
{
	return pUART->LSR;
1a002c98:	4b03      	ldr	r3, [pc, #12]	; (1a002ca8 <Board_UARTPutChar+0x10>)
1a002c9a:	695b      	ldr	r3, [r3, #20]


void Board_UARTPutChar(char ch)
{
   while ( !(Chip_UART_ReadLineStatus(DEBUG_UART) & UART_LSR_THRE));
1a002c9c:	f013 0f20 	tst.w	r3, #32
1a002ca0:	d0fa      	beq.n	1a002c98 <Board_UARTPutChar>
	pUART->THR = (uint32_t) data;
1a002ca2:	4b01      	ldr	r3, [pc, #4]	; (1a002ca8 <Board_UARTPutChar+0x10>)
1a002ca4:	6018      	str	r0, [r3, #0]
   Chip_UART_SendByte(DEBUG_UART, (uint8_t) ch);
}
1a002ca6:	4770      	bx	lr
1a002ca8:	400c1000 	.word	0x400c1000

1a002cac <Board_UARTGetChar>:
	return pUART->LSR;
1a002cac:	4b05      	ldr	r3, [pc, #20]	; (1a002cc4 <Board_UARTGetChar+0x18>)
1a002cae:	695b      	ldr	r3, [r3, #20]


int Board_UARTGetChar(void)
{
   if (Chip_UART_ReadLineStatus(DEBUG_UART) & UART_LSR_RDR) {
1a002cb0:	f013 0f01 	tst.w	r3, #1
1a002cb4:	d003      	beq.n	1a002cbe <Board_UARTGetChar+0x12>
	return (uint8_t) (pUART->RBR & UART_RBR_MASKBIT);
1a002cb6:	4b03      	ldr	r3, [pc, #12]	; (1a002cc4 <Board_UARTGetChar+0x18>)
1a002cb8:	6818      	ldr	r0, [r3, #0]
      return (int) Chip_UART_ReadByte(DEBUG_UART);
1a002cba:	b2c0      	uxtb	r0, r0
1a002cbc:	4770      	bx	lr
   }
   return EOF;
1a002cbe:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
1a002cc2:	4770      	bx	lr
1a002cc4:	400c1000 	.word	0x400c1000

1a002cc8 <Board_Init>:
   Board_LED_Set(LEDNumber, !Board_LED_Test(LEDNumber));
}


void Board_Init(void)
{
1a002cc8:	b508      	push	{r3, lr}
   DEBUGINIT();
1a002cca:	f7ff ffd3 	bl	1a002c74 <Board_Debug_Init>
   Chip_GPIO_Init (LPC_GPIO_PORT);
1a002cce:	4809      	ldr	r0, [pc, #36]	; (1a002cf4 <Board_Init+0x2c>)
1a002cd0:	f000 fed5 	bl	1a003a7e <Chip_GPIO_Init>

   Board_GPIO_Init();
1a002cd4:	f7ff ff68 	bl	1a002ba8 <Board_GPIO_Init>
   Board_ADC_Init();
1a002cd8:	f7ff ff86 	bl	1a002be8 <Board_ADC_Init>
   Board_SPI_Init();
1a002cdc:	f7ff ff9c 	bl	1a002c18 <Board_SPI_Init>
   Board_I2C_Init();
1a002ce0:	f7ff ffb6 	bl	1a002c50 <Board_I2C_Init>

   Board_LED_Init();
1a002ce4:	f7ff ff1e 	bl	1a002b24 <Board_LED_Init>
   Board_TEC_Init();
1a002ce8:	f7ff ff3e 	bl	1a002b68 <Board_TEC_Init>
#ifdef USE_RMII
   Chip_ENET_RMIIEnable(LPC_ETHERNET);
#endif

   // Read clock settings and update SystemCoreClock variable
   SystemCoreClockUpdate(); // @Eric
1a002cec:	f000 fe24 	bl	1a003938 <SystemCoreClockUpdate>
}
1a002cf0:	bd08      	pop	{r3, pc}
1a002cf2:	bf00      	nop
1a002cf4:	400f4000 	.word	0x400f4000

1a002cf8 <__stdio_putchar>:
   curADCChannel = 0xFF;
   return data;
}

void __stdio_putchar(int c)
{
1a002cf8:	b508      	push	{r3, lr}
   Board_UARTPutChar(c);
1a002cfa:	b2c0      	uxtb	r0, r0
1a002cfc:	f7ff ffcc 	bl	1a002c98 <Board_UARTPutChar>
}
1a002d00:	bd08      	pop	{r3, pc}

1a002d02 <__stdio_getchar>:

int __stdio_getchar()
{
1a002d02:	b508      	push	{r3, lr}
   return Board_UARTGetChar();;
1a002d04:	f7ff ffd2 	bl	1a002cac <Board_UARTGetChar>
}
1a002d08:	bd08      	pop	{r3, pc}

1a002d0a <__stdio_init>:

void __stdio_init()
{
1a002d0a:	b508      	push	{r3, lr}
   Board_Debug_Init();
1a002d0c:	f7ff ffb2 	bl	1a002c74 <Board_Debug_Init>
1a002d10:	bd08      	pop	{r3, pc}
1a002d12:	Address 0x000000001a002d12 is out of bounds.


1a002d14 <Board_SetupMuxing>:
 * @return	Nothing
 */
STATIC INLINE void Chip_SCU_SetPinMuxing(const PINMUX_GRP_T *pinArray, uint32_t arrayLength)
{
	uint32_t ix;
	for (ix = 0; ix < arrayLength; ix++ ) {
1a002d14:	2300      	movs	r3, #0
1a002d16:	2b1c      	cmp	r3, #28
1a002d18:	d812      	bhi.n	1a002d40 <Board_SetupMuxing+0x2c>
    #endif
};


void Board_SetupMuxing(void)
{
1a002d1a:	b410      	push	{r4}
		Chip_SCU_PinMuxSet(pinArray[ix].pingrp, pinArray[ix].pinnum, pinArray[ix].modefunc);
1a002d1c:	4a09      	ldr	r2, [pc, #36]	; (1a002d44 <Board_SetupMuxing+0x30>)
1a002d1e:	eb02 0183 	add.w	r1, r2, r3, lsl #2
1a002d22:	f812 4023 	ldrb.w	r4, [r2, r3, lsl #2]
1a002d26:	784a      	ldrb	r2, [r1, #1]
1a002d28:	8848      	ldrh	r0, [r1, #2]
	LPC_SCU->SFSP[port][pin] = modefunc;
1a002d2a:	eb02 1244 	add.w	r2, r2, r4, lsl #5
1a002d2e:	4906      	ldr	r1, [pc, #24]	; (1a002d48 <Board_SetupMuxing+0x34>)
1a002d30:	f841 0022 	str.w	r0, [r1, r2, lsl #2]
	for (ix = 0; ix < arrayLength; ix++ ) {
1a002d34:	3301      	adds	r3, #1
1a002d36:	2b1c      	cmp	r3, #28
1a002d38:	d9f0      	bls.n	1a002d1c <Board_SetupMuxing+0x8>
    Chip_SCU_SetPinMuxing(pinmuxing, sizeof(pinmuxing) / sizeof(PINMUX_GRP_T));
}
1a002d3a:	f85d 4b04 	ldr.w	r4, [sp], #4
1a002d3e:	4770      	bx	lr
1a002d40:	4770      	bx	lr
1a002d42:	bf00      	nop
1a002d44:	1a00b060 	.word	0x1a00b060
1a002d48:	40086000 	.word	0x40086000

1a002d4c <Board_SetupClocking>:


void Board_SetupClocking(void)
{
1a002d4c:	b510      	push	{r4, lr}
 */
STATIC INLINE void Chip_CREG_SetFlashAcceleration(uint32_t Hz)
{
	uint32_t FAValue = Hz / 21510000;

	LPC_CREG->FLASHCFGA = (LPC_CREG->FLASHCFGA & (~(0xF << 12))) | (FAValue << 12);
1a002d4e:	4a17      	ldr	r2, [pc, #92]	; (1a002dac <Board_SetupClocking+0x60>)
1a002d50:	f8d2 3120 	ldr.w	r3, [r2, #288]	; 0x120
1a002d54:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
1a002d58:	f443 4310 	orr.w	r3, r3, #36864	; 0x9000
1a002d5c:	f8c2 3120 	str.w	r3, [r2, #288]	; 0x120
	LPC_CREG->FLASHCFGB = (LPC_CREG->FLASHCFGB & (~(0xF << 12))) | (FAValue << 12);
1a002d60:	f8d2 3124 	ldr.w	r3, [r2, #292]	; 0x124
1a002d64:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
1a002d68:	f443 4310 	orr.w	r3, r3, #36864	; 0x9000
1a002d6c:	f8c2 3124 	str.w	r3, [r2, #292]	; 0x124
    Chip_CREG_SetFlashAcceleration(MAX_CLOCK_FREQ);
    Chip_SetupCoreClock(CLKIN_CRYSTAL, MAX_CLOCK_FREQ, true);
1a002d70:	2201      	movs	r2, #1
1a002d72:	490f      	ldr	r1, [pc, #60]	; (1a002db0 <Board_SetupClocking+0x64>)
1a002d74:	2006      	movs	r0, #6
1a002d76:	f000 fe83 	bl	1a003a80 <Chip_SetupCoreClock>

    /* Setup system base clocks and initial states. This won't enable and
       disable individual clocks, but sets up the base clock sources for
       each individual peripheral clock. */
    for (uint32_t i = 0; i < (sizeof(InitClkStates) / sizeof(InitClkStates[0])); ++i)
1a002d7a:	2400      	movs	r4, #0
1a002d7c:	b14c      	cbz	r4, 1a002d92 <Board_SetupClocking+0x46>
        Chip_Clock_SetBaseClock (c->clk, c->clkin, c->autoblock_enab,
                                c->powerdn);
    }

    /* Reset and enable 32Khz oscillator */
    LPC_CREG->CREG0 &= ~((1 << 3) | (1 << 2));
1a002d7e:	4b0b      	ldr	r3, [pc, #44]	; (1a002dac <Board_SetupClocking+0x60>)
1a002d80:	685a      	ldr	r2, [r3, #4]
1a002d82:	f022 020c 	bic.w	r2, r2, #12
1a002d86:	605a      	str	r2, [r3, #4]
    LPC_CREG->CREG0 |= (1 << 1) | (1 << 0);
1a002d88:	685a      	ldr	r2, [r3, #4]
1a002d8a:	f042 0203 	orr.w	r2, r2, #3
1a002d8e:	605a      	str	r2, [r3, #4]
}
1a002d90:	bd10      	pop	{r4, pc}
        Chip_Clock_SetBaseClock (c->clk, c->clkin, c->autoblock_enab,
1a002d92:	4808      	ldr	r0, [pc, #32]	; (1a002db4 <Board_SetupClocking+0x68>)
1a002d94:	eb00 0184 	add.w	r1, r0, r4, lsl #2
1a002d98:	2301      	movs	r3, #1
1a002d9a:	788a      	ldrb	r2, [r1, #2]
1a002d9c:	7849      	ldrb	r1, [r1, #1]
1a002d9e:	f810 0024 	ldrb.w	r0, [r0, r4, lsl #2]
1a002da2:	f000 fd0b 	bl	1a0037bc <Chip_Clock_SetBaseClock>
    for (uint32_t i = 0; i < (sizeof(InitClkStates) / sizeof(InitClkStates[0])); ++i)
1a002da6:	3401      	adds	r4, #1
1a002da8:	e7e8      	b.n	1a002d7c <Board_SetupClocking+0x30>
1a002daa:	bf00      	nop
1a002dac:	40043000 	.word	0x40043000
1a002db0:	0c28cb00 	.word	0x0c28cb00
1a002db4:	1a00b05c 	.word	0x1a00b05c

1a002db8 <Board_SystemInit>:


/* Set up and initialize hardware prior to call to main */
void Board_SystemInit(void)
{
1a002db8:	b508      	push	{r3, lr}
    /* Setup system clocking and memory. This is done early to allow the
       application and tools to clear memory and use scatter loading to
       external memory. */
    Board_SetupMuxing();
1a002dba:	f7ff ffab 	bl	1a002d14 <Board_SetupMuxing>
    Board_SetupClocking();
1a002dbe:	f7ff ffc5 	bl	1a002d4c <Board_SetupClocking>
}
1a002dc2:	bd08      	pop	{r3, pc}

1a002dc4 <Chip_I2C_EventHandler>:
{
	struct i2c_interface *iic = &i2c[id];
	volatile I2C_STATUS_T *stat;

	/* Only WAIT event needs to be handled */
	if (event != I2C_EVENT_WAIT) {
1a002dc4:	2901      	cmp	r1, #1
1a002dc6:	d109      	bne.n	1a002ddc <Chip_I2C_EventHandler+0x18>
		return;
	}

	stat = &iic->mXfer->status;
1a002dc8:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
1a002dcc:	0082      	lsls	r2, r0, #2
1a002dce:	4b04      	ldr	r3, [pc, #16]	; (1a002de0 <Chip_I2C_EventHandler+0x1c>)
1a002dd0:	4413      	add	r3, r2
1a002dd2:	691a      	ldr	r2, [r3, #16]
	/* Wait for the status to change */
	while (*stat == I2C_STATUS_BUSY) {}
1a002dd4:	7d13      	ldrb	r3, [r2, #20]
1a002dd6:	b2db      	uxtb	r3, r3
1a002dd8:	2b04      	cmp	r3, #4
1a002dda:	d0fb      	beq.n	1a002dd4 <Chip_I2C_EventHandler+0x10>
}
1a002ddc:	4770      	bx	lr
1a002dde:	bf00      	nop
1a002de0:	10000008 	.word	0x10000008

1a002de4 <handleMasterXferState>:
{
1a002de4:	b430      	push	{r4, r5}
	return (int) (pI2C->STAT & I2C_STAT_CODE_BITMASK);
1a002de6:	6843      	ldr	r3, [r0, #4]
1a002de8:	f003 03f8 	and.w	r3, r3, #248	; 0xf8
	switch (getCurState(pI2C)) {
1a002dec:	2b58      	cmp	r3, #88	; 0x58
1a002dee:	d87f      	bhi.n	1a002ef0 <handleMasterXferState+0x10c>
1a002df0:	e8df f003 	tbb	[pc, r3]
1a002df4:	7e7e7e7a 	.word	0x7e7e7e7a
1a002df8:	7e7e7e7e 	.word	0x7e7e7e7e
1a002dfc:	7e7e7e2f 	.word	0x7e7e7e2f
1a002e00:	7e7e7e7e 	.word	0x7e7e7e7e
1a002e04:	7e7e7e2f 	.word	0x7e7e7e2f
1a002e08:	7e7e7e7e 	.word	0x7e7e7e7e
1a002e0c:	7e7e7e39 	.word	0x7e7e7e39
1a002e10:	7e7e7e7e 	.word	0x7e7e7e7e
1a002e14:	7e7e7e6e 	.word	0x7e7e7e6e
1a002e18:	7e7e7e7e 	.word	0x7e7e7e7e
1a002e1c:	7e7e7e39 	.word	0x7e7e7e39
1a002e20:	7e7e7e7e 	.word	0x7e7e7e7e
1a002e24:	7e7e7e72 	.word	0x7e7e7e72
1a002e28:	7e7e7e7e 	.word	0x7e7e7e7e
1a002e2c:	7e7e7e76 	.word	0x7e7e7e76
1a002e30:	7e7e7e7e 	.word	0x7e7e7e7e
1a002e34:	7e7e7e6c 	.word	0x7e7e7e6c
1a002e38:	7e7e7e7e 	.word	0x7e7e7e7e
1a002e3c:	7e7e7e6e 	.word	0x7e7e7e6e
1a002e40:	7e7e7e7e 	.word	0x7e7e7e7e
1a002e44:	7e7e7e2d 	.word	0x7e7e7e2d
1a002e48:	7e7e7e7e 	.word	0x7e7e7e7e
1a002e4c:	4f          	.byte	0x4f
1a002e4d:	00          	.byte	0x00
	uint32_t cclr = I2C_CON_FLAGS;
1a002e4e:	233c      	movs	r3, #60	; 0x3c
1a002e50:	e020      	b.n	1a002e94 <handleMasterXferState+0xb0>
		pI2C->DAT = (xfer->slaveAddr << 1) | (xfer->txSz == 0);
1a002e52:	780a      	ldrb	r2, [r1, #0]
1a002e54:	688b      	ldr	r3, [r1, #8]
1a002e56:	fab3 f383 	clz	r3, r3
1a002e5a:	095b      	lsrs	r3, r3, #5
1a002e5c:	ea43 0342 	orr.w	r3, r3, r2, lsl #1
1a002e60:	6083      	str	r3, [r0, #8]
	uint32_t cclr = I2C_CON_FLAGS;
1a002e62:	233c      	movs	r3, #60	; 0x3c
		break;
1a002e64:	e023      	b.n	1a002eae <handleMasterXferState+0xca>
		if (!xfer->txSz) {
1a002e66:	688b      	ldr	r3, [r1, #8]
1a002e68:	b94b      	cbnz	r3, 1a002e7e <handleMasterXferState+0x9a>
			cclr &= ~(xfer->rxSz ? I2C_CON_STA : I2C_CON_STO);
1a002e6a:	690b      	ldr	r3, [r1, #16]
1a002e6c:	b123      	cbz	r3, 1a002e78 <handleMasterXferState+0x94>
1a002e6e:	f06f 0320 	mvn.w	r3, #32
1a002e72:	f003 033c 	and.w	r3, r3, #60	; 0x3c
1a002e76:	e01a      	b.n	1a002eae <handleMasterXferState+0xca>
1a002e78:	f06f 0310 	mvn.w	r3, #16
1a002e7c:	e7f9      	b.n	1a002e72 <handleMasterXferState+0x8e>
			pI2C->DAT = *xfer->txBuff++;
1a002e7e:	684b      	ldr	r3, [r1, #4]
1a002e80:	1c5a      	adds	r2, r3, #1
1a002e82:	604a      	str	r2, [r1, #4]
1a002e84:	781b      	ldrb	r3, [r3, #0]
1a002e86:	6083      	str	r3, [r0, #8]
			xfer->txSz--;
1a002e88:	688b      	ldr	r3, [r1, #8]
1a002e8a:	3b01      	subs	r3, #1
1a002e8c:	608b      	str	r3, [r1, #8]
	uint32_t cclr = I2C_CON_FLAGS;
1a002e8e:	233c      	movs	r3, #60	; 0x3c
1a002e90:	e00d      	b.n	1a002eae <handleMasterXferState+0xca>
		cclr &= ~I2C_CON_STO;
1a002e92:	232c      	movs	r3, #44	; 0x2c
		*xfer->rxBuff++ = pI2C->DAT;
1a002e94:	6884      	ldr	r4, [r0, #8]
1a002e96:	68ca      	ldr	r2, [r1, #12]
1a002e98:	1c55      	adds	r5, r2, #1
1a002e9a:	60cd      	str	r5, [r1, #12]
1a002e9c:	7014      	strb	r4, [r2, #0]
		xfer->rxSz--;
1a002e9e:	690a      	ldr	r2, [r1, #16]
1a002ea0:	3a01      	subs	r2, #1
1a002ea2:	610a      	str	r2, [r1, #16]
		if (xfer->rxSz > 1) {
1a002ea4:	690a      	ldr	r2, [r1, #16]
1a002ea6:	2a01      	cmp	r2, #1
1a002ea8:	dd01      	ble.n	1a002eae <handleMasterXferState+0xca>
			cclr &= ~I2C_CON_AA;
1a002eaa:	f023 0304 	bic.w	r3, r3, #4
	pI2C->CONSET = cclr ^ I2C_CON_FLAGS;
1a002eae:	f083 023c 	eor.w	r2, r3, #60	; 0x3c
1a002eb2:	6002      	str	r2, [r0, #0]
	pI2C->CONCLR = cclr & ~I2C_CON_STO;
1a002eb4:	f023 0210 	bic.w	r2, r3, #16
1a002eb8:	6182      	str	r2, [r0, #24]
	if (!(cclr & I2C_CON_STO) || (xfer->status == I2C_STATUS_ARBLOST)) {
1a002eba:	f013 0f10 	tst.w	r3, #16
1a002ebe:	d019      	beq.n	1a002ef4 <handleMasterXferState+0x110>
1a002ec0:	7d0b      	ldrb	r3, [r1, #20]
1a002ec2:	2b02      	cmp	r3, #2
1a002ec4:	d016      	beq.n	1a002ef4 <handleMasterXferState+0x110>
	return 1;
1a002ec6:	2001      	movs	r0, #1
}
1a002ec8:	bc30      	pop	{r4, r5}
1a002eca:	4770      	bx	lr
	uint32_t cclr = I2C_CON_FLAGS;
1a002ecc:	233c      	movs	r3, #60	; 0x3c
1a002ece:	e7e9      	b.n	1a002ea4 <handleMasterXferState+0xc0>
		xfer->status = I2C_STATUS_SLAVENAK;
1a002ed0:	2305      	movs	r3, #5
1a002ed2:	750b      	strb	r3, [r1, #20]
		cclr &= ~I2C_CON_STO;
1a002ed4:	232c      	movs	r3, #44	; 0x2c
		break;
1a002ed6:	e7ea      	b.n	1a002eae <handleMasterXferState+0xca>
		xfer->status = I2C_STATUS_NAK;
1a002ed8:	2301      	movs	r3, #1
1a002eda:	750b      	strb	r3, [r1, #20]
		cclr &= ~I2C_CON_STO;
1a002edc:	232c      	movs	r3, #44	; 0x2c
		break;
1a002ede:	e7e6      	b.n	1a002eae <handleMasterXferState+0xca>
		xfer->status = I2C_STATUS_ARBLOST;
1a002ee0:	2302      	movs	r3, #2
1a002ee2:	750b      	strb	r3, [r1, #20]
	uint32_t cclr = I2C_CON_FLAGS;
1a002ee4:	233c      	movs	r3, #60	; 0x3c
		break;
1a002ee6:	e7e2      	b.n	1a002eae <handleMasterXferState+0xca>
		xfer->status = I2C_STATUS_BUSERR;
1a002ee8:	2303      	movs	r3, #3
1a002eea:	750b      	strb	r3, [r1, #20]
		cclr &= ~I2C_CON_STO;
1a002eec:	232c      	movs	r3, #44	; 0x2c
1a002eee:	e7de      	b.n	1a002eae <handleMasterXferState+0xca>
	uint32_t cclr = I2C_CON_FLAGS;
1a002ef0:	233c      	movs	r3, #60	; 0x3c
1a002ef2:	e7dc      	b.n	1a002eae <handleMasterXferState+0xca>
		if (xfer->status == I2C_STATUS_BUSY) {
1a002ef4:	7d0b      	ldrb	r3, [r1, #20]
1a002ef6:	2b04      	cmp	r3, #4
1a002ef8:	d001      	beq.n	1a002efe <handleMasterXferState+0x11a>
		return 0;
1a002efa:	2000      	movs	r0, #0
1a002efc:	e7e4      	b.n	1a002ec8 <handleMasterXferState+0xe4>
			xfer->status = I2C_STATUS_DONE;
1a002efe:	2300      	movs	r3, #0
1a002f00:	750b      	strb	r3, [r1, #20]
1a002f02:	e7fa      	b.n	1a002efa <handleMasterXferState+0x116>

1a002f04 <Chip_I2C_Init>:
	}
}

/* Initializes the LPC_I2C peripheral with specified parameter */
void Chip_I2C_Init(I2C_ID_T id)
{
1a002f04:	b570      	push	{r4, r5, r6, lr}
1a002f06:	4605      	mov	r5, r0
	Chip_Clock_Enable(i2c[id].clk);
1a002f08:	4e06      	ldr	r6, [pc, #24]	; (1a002f24 <Chip_I2C_Init+0x20>)
1a002f0a:	00c4      	lsls	r4, r0, #3
1a002f0c:	1a22      	subs	r2, r4, r0
1a002f0e:	0093      	lsls	r3, r2, #2
1a002f10:	4433      	add	r3, r6
1a002f12:	8898      	ldrh	r0, [r3, #4]
1a002f14:	f000 fcb6 	bl	1a003884 <Chip_Clock_Enable>
	enableClk(id);

	/* Set I2C operation to default */
	LPC_I2Cx(id)->CONCLR = (I2C_CON_AA | I2C_CON_SI | I2C_CON_STA | I2C_CON_I2EN);
1a002f18:	1b64      	subs	r4, r4, r5
1a002f1a:	00a3      	lsls	r3, r4, #2
1a002f1c:	58f3      	ldr	r3, [r6, r3]
1a002f1e:	226c      	movs	r2, #108	; 0x6c
1a002f20:	619a      	str	r2, [r3, #24]
}
1a002f22:	bd70      	pop	{r4, r5, r6, pc}
1a002f24:	10000008 	.word	0x10000008

1a002f28 <Chip_I2C_SetClockRate>:
	disableClk(id);
}

/* Set up clock rate for LPC_I2C peripheral */
void Chip_I2C_SetClockRate(I2C_ID_T id, uint32_t clockrate)
{
1a002f28:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
1a002f2c:	460c      	mov	r4, r1
	return Chip_Clock_GetRate(i2c[id].clk);
1a002f2e:	4e0b      	ldr	r6, [pc, #44]	; (1a002f5c <Chip_I2C_SetClockRate+0x34>)
1a002f30:	00c5      	lsls	r5, r0, #3
1a002f32:	1a2b      	subs	r3, r5, r0
1a002f34:	ea4f 0883 	mov.w	r8, r3, lsl #2
1a002f38:	eb06 0308 	add.w	r3, r6, r8
1a002f3c:	8898      	ldrh	r0, [r3, #4]
1a002f3e:	f000 fcd5 	bl	1a0038ec <Chip_Clock_GetRate>
	uint32_t SCLValue;

	SCLValue = (getClkRate(id) / clockrate);
1a002f42:	fbb0 f0f4 	udiv	r0, r0, r4
	LPC_I2Cx(id)->SCLH = (uint32_t) (SCLValue >> 1);
1a002f46:	f856 3008 	ldr.w	r3, [r6, r8]
1a002f4a:	0842      	lsrs	r2, r0, #1
1a002f4c:	611a      	str	r2, [r3, #16]
	LPC_I2Cx(id)->SCLL = (uint32_t) (SCLValue - LPC_I2Cx(id)->SCLH);
1a002f4e:	f856 3008 	ldr.w	r3, [r6, r8]
1a002f52:	691a      	ldr	r2, [r3, #16]
1a002f54:	1a80      	subs	r0, r0, r2
1a002f56:	6158      	str	r0, [r3, #20]
}
1a002f58:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
1a002f5c:	10000008 	.word	0x10000008

1a002f60 <Chip_I2C_SetMasterEventHandler>:

/* Set the master event handler */
int Chip_I2C_SetMasterEventHandler(I2C_ID_T id, I2C_EVENTHANDLER_T event)
{
	struct i2c_interface *iic = &i2c[id];
	if (!iic->mXfer) {
1a002f60:	ebc0 03c0 	rsb	r3, r0, r0, lsl #3
1a002f64:	009a      	lsls	r2, r3, #2
1a002f66:	4b09      	ldr	r3, [pc, #36]	; (1a002f8c <Chip_I2C_SetMasterEventHandler+0x2c>)
1a002f68:	4413      	add	r3, r2
1a002f6a:	691b      	ldr	r3, [r3, #16]
1a002f6c:	b153      	cbz	r3, 1a002f84 <Chip_I2C_SetMasterEventHandler+0x24>
		iic->mEvent = event;
	}
	return iic->mEvent == event;
1a002f6e:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
1a002f72:	0082      	lsls	r2, r0, #2
1a002f74:	4b05      	ldr	r3, [pc, #20]	; (1a002f8c <Chip_I2C_SetMasterEventHandler+0x2c>)
1a002f76:	4413      	add	r3, r2
1a002f78:	6898      	ldr	r0, [r3, #8]
}
1a002f7a:	4288      	cmp	r0, r1
1a002f7c:	bf14      	ite	ne
1a002f7e:	2000      	movne	r0, #0
1a002f80:	2001      	moveq	r0, #1
1a002f82:	4770      	bx	lr
		iic->mEvent = event;
1a002f84:	4b01      	ldr	r3, [pc, #4]	; (1a002f8c <Chip_I2C_SetMasterEventHandler+0x2c>)
1a002f86:	4413      	add	r3, r2
1a002f88:	6099      	str	r1, [r3, #8]
1a002f8a:	e7f0      	b.n	1a002f6e <Chip_I2C_SetMasterEventHandler+0xe>
1a002f8c:	10000008 	.word	0x10000008

1a002f90 <Chip_I2C_MasterStateHandler>:
	return isMasterState(i2c[id].ip);
}

/* State change handler for master transfer */
void Chip_I2C_MasterStateHandler(I2C_ID_T id)
{
1a002f90:	b510      	push	{r4, lr}
1a002f92:	4604      	mov	r4, r0
	if (!handleMasterXferState(i2c[id].ip, i2c[id].mXfer)) {
1a002f94:	4809      	ldr	r0, [pc, #36]	; (1a002fbc <Chip_I2C_MasterStateHandler+0x2c>)
1a002f96:	00e3      	lsls	r3, r4, #3
1a002f98:	1b1b      	subs	r3, r3, r4
1a002f9a:	009a      	lsls	r2, r3, #2
1a002f9c:	1883      	adds	r3, r0, r2
1a002f9e:	6919      	ldr	r1, [r3, #16]
1a002fa0:	5880      	ldr	r0, [r0, r2]
1a002fa2:	f7ff ff1f 	bl	1a002de4 <handleMasterXferState>
1a002fa6:	b940      	cbnz	r0, 1a002fba <Chip_I2C_MasterStateHandler+0x2a>
		i2c[id].mEvent(id, I2C_EVENT_DONE);
1a002fa8:	ebc4 03c4 	rsb	r3, r4, r4, lsl #3
1a002fac:	009a      	lsls	r2, r3, #2
1a002fae:	4b03      	ldr	r3, [pc, #12]	; (1a002fbc <Chip_I2C_MasterStateHandler+0x2c>)
1a002fb0:	4413      	add	r3, r2
1a002fb2:	689b      	ldr	r3, [r3, #8]
1a002fb4:	2102      	movs	r1, #2
1a002fb6:	4620      	mov	r0, r4
1a002fb8:	4798      	blx	r3
	}
}
1a002fba:	bd10      	pop	{r4, pc}
1a002fbc:	10000008 	.word	0x10000008

1a002fc0 <Chip_I2C_IsStateChanged>:
}

/* State change checking */
int Chip_I2C_IsStateChanged(I2C_ID_T id)
{
	return (LPC_I2Cx(id)->CONSET & I2C_CON_SI) != 0;
1a002fc0:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
1a002fc4:	0083      	lsls	r3, r0, #2
1a002fc6:	4a03      	ldr	r2, [pc, #12]	; (1a002fd4 <Chip_I2C_IsStateChanged+0x14>)
1a002fc8:	58d3      	ldr	r3, [r2, r3]
1a002fca:	6818      	ldr	r0, [r3, #0]
}
1a002fcc:	f3c0 00c0 	ubfx	r0, r0, #3, #1
1a002fd0:	4770      	bx	lr
1a002fd2:	bf00      	nop
1a002fd4:	10000008 	.word	0x10000008

1a002fd8 <Chip_I2C_EventHandlerPolling>:
	if (event != I2C_EVENT_WAIT) {
1a002fd8:	2901      	cmp	r1, #1
1a002fda:	d115      	bne.n	1a003008 <Chip_I2C_EventHandlerPolling+0x30>
{
1a002fdc:	b538      	push	{r3, r4, r5, lr}
1a002fde:	4604      	mov	r4, r0
	stat = &iic->mXfer->status;
1a002fe0:	ebc0 03c0 	rsb	r3, r0, r0, lsl #3
1a002fe4:	009a      	lsls	r2, r3, #2
1a002fe6:	4b09      	ldr	r3, [pc, #36]	; (1a00300c <Chip_I2C_EventHandlerPolling+0x34>)
1a002fe8:	4413      	add	r3, r2
1a002fea:	691d      	ldr	r5, [r3, #16]
	while (*stat == I2C_STATUS_BUSY) {
1a002fec:	7d2b      	ldrb	r3, [r5, #20]
1a002fee:	b2db      	uxtb	r3, r3
1a002ff0:	2b04      	cmp	r3, #4
1a002ff2:	d108      	bne.n	1a003006 <Chip_I2C_EventHandlerPolling+0x2e>
		if (Chip_I2C_IsStateChanged(id)) {
1a002ff4:	4620      	mov	r0, r4
1a002ff6:	f7ff ffe3 	bl	1a002fc0 <Chip_I2C_IsStateChanged>
1a002ffa:	2800      	cmp	r0, #0
1a002ffc:	d0f6      	beq.n	1a002fec <Chip_I2C_EventHandlerPolling+0x14>
			Chip_I2C_MasterStateHandler(id);
1a002ffe:	4620      	mov	r0, r4
1a003000:	f7ff ffc6 	bl	1a002f90 <Chip_I2C_MasterStateHandler>
1a003004:	e7f2      	b.n	1a002fec <Chip_I2C_EventHandlerPolling+0x14>
}
1a003006:	bd38      	pop	{r3, r4, r5, pc}
1a003008:	4770      	bx	lr
1a00300a:	bf00      	nop
1a00300c:	10000008 	.word	0x10000008

1a003010 <Chip_UART_GetIndex>:

/* Returns clock index for the peripheral block */
static int Chip_UART_GetIndex(LPC_USART_T *pUART)
{
	uint32_t base = (uint32_t) pUART;
	switch(base) {
1a003010:	4b09      	ldr	r3, [pc, #36]	; (1a003038 <Chip_UART_GetIndex+0x28>)
1a003012:	4298      	cmp	r0, r3
1a003014:	d009      	beq.n	1a00302a <Chip_UART_GetIndex+0x1a>
1a003016:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
1a00301a:	4298      	cmp	r0, r3
1a00301c:	d007      	beq.n	1a00302e <Chip_UART_GetIndex+0x1e>
1a00301e:	f5a3 2380 	sub.w	r3, r3, #262144	; 0x40000
1a003022:	4298      	cmp	r0, r3
1a003024:	d005      	beq.n	1a003032 <Chip_UART_GetIndex+0x22>
		case LPC_USART0_BASE:
			return 0;
1a003026:	2000      	movs	r0, #0
1a003028:	4770      	bx	lr
		case LPC_UART1_BASE:
			return 1;
		case LPC_USART2_BASE:
			return 2;
1a00302a:	2002      	movs	r0, #2
1a00302c:	4770      	bx	lr
		case LPC_USART3_BASE:
			return 3;
1a00302e:	2003      	movs	r0, #3
1a003030:	4770      	bx	lr
			return 1;
1a003032:	2001      	movs	r0, #1
		default:
			return 0; /* Should never come here */
	}
}
1a003034:	4770      	bx	lr
1a003036:	bf00      	nop
1a003038:	400c1000 	.word	0x400c1000

1a00303c <Chip_UART_Init>:
 * Public functions
 ****************************************************************************/

/* Initializes the pUART peripheral */
void Chip_UART_Init(LPC_USART_T *pUART)
{
1a00303c:	b530      	push	{r4, r5, lr}
1a00303e:	b083      	sub	sp, #12
1a003040:	4604      	mov	r4, r0
    volatile uint32_t tmp;

	/* Enable UART clocking. UART base clock(s) must already be enabled */
	Chip_Clock_EnableOpts(UART_PClock[Chip_UART_GetIndex(pUART)], true, true, 1);
1a003042:	f7ff ffe5 	bl	1a003010 <Chip_UART_GetIndex>
1a003046:	2301      	movs	r3, #1
1a003048:	461a      	mov	r2, r3
1a00304a:	4619      	mov	r1, r3
1a00304c:	4d0e      	ldr	r5, [pc, #56]	; (1a003088 <Chip_UART_Init+0x4c>)
1a00304e:	f835 0010 	ldrh.w	r0, [r5, r0, lsl #1]
1a003052:	f000 fbf9 	bl	1a003848 <Chip_Clock_EnableOpts>
	pUART->FCR = fcr;
1a003056:	2307      	movs	r3, #7
1a003058:	60a3      	str	r3, [r4, #8]
    pUART->TER2 = 0;
1a00305a:	2300      	movs	r3, #0
1a00305c:	65e3      	str	r3, [r4, #92]	; 0x5c

    /* Disable Tx */
    Chip_UART_TXDisable(pUART);

    /* Disable interrupts */
	pUART->IER = 0;
1a00305e:	6063      	str	r3, [r4, #4]
	/* Set LCR to default state */
	pUART->LCR = 0;
1a003060:	60e3      	str	r3, [r4, #12]
	/* Set ACR to default state */
	pUART->ACR = 0;
1a003062:	6223      	str	r3, [r4, #32]
    /* Set RS485 control to default state */
	pUART->RS485CTRL = 0;
1a003064:	64e3      	str	r3, [r4, #76]	; 0x4c
	/* Set RS485 delay timer to default state */
	pUART->RS485DLY = 0;
1a003066:	6563      	str	r3, [r4, #84]	; 0x54
	/* Set RS485 addr match to default state */
	pUART->RS485ADRMATCH = 0;
1a003068:	6523      	str	r3, [r4, #80]	; 0x50

    /* Clear MCR */
    if (pUART == LPC_UART1) {
1a00306a:	4b08      	ldr	r3, [pc, #32]	; (1a00308c <Chip_UART_Init+0x50>)
1a00306c:	429c      	cmp	r4, r3
1a00306e:	d006      	beq.n	1a00307e <Chip_UART_Init+0x42>
	pUART->LCR = config;
1a003070:	2303      	movs	r3, #3
1a003072:	60e3      	str	r3, [r4, #12]

	/* Default 8N1, with DLAB disabled */
	Chip_UART_ConfigData(pUART, (UART_LCR_WLEN8 | UART_LCR_SBS_1BIT | UART_LCR_PARITY_DIS));

	/* Disable fractional divider */
	pUART->FDR = 0x10;
1a003074:	2310      	movs	r3, #16
1a003076:	62a3      	str	r3, [r4, #40]	; 0x28

    (void) tmp;
1a003078:	9b01      	ldr	r3, [sp, #4]
}
1a00307a:	b003      	add	sp, #12
1a00307c:	bd30      	pop	{r4, r5, pc}
		pUART->MCR = 0;
1a00307e:	2300      	movs	r3, #0
1a003080:	6123      	str	r3, [r4, #16]
		tmp = pUART->MSR;
1a003082:	69a3      	ldr	r3, [r4, #24]
1a003084:	9301      	str	r3, [sp, #4]
1a003086:	e7f3      	b.n	1a003070 <Chip_UART_Init+0x34>
1a003088:	1a00b0dc 	.word	0x1a00b0dc
1a00308c:	40082000 	.word	0x40082000

1a003090 <Chip_UART_SetBaud>:
	return readBytes;
}

/* Determines and sets best dividers to get a target bit rate */
uint32_t Chip_UART_SetBaud(LPC_USART_T *pUART, uint32_t baudrate)
{
1a003090:	b538      	push	{r3, r4, r5, lr}
1a003092:	4605      	mov	r5, r0
1a003094:	460c      	mov	r4, r1
	uint32_t div, divh, divl, clkin;

	/* Determine UART clock in rate without FDR */
	clkin = Chip_Clock_GetRate(UART_BClock[Chip_UART_GetIndex(pUART)]);
1a003096:	f7ff ffbb 	bl	1a003010 <Chip_UART_GetIndex>
1a00309a:	4b0c      	ldr	r3, [pc, #48]	; (1a0030cc <Chip_UART_SetBaud+0x3c>)
1a00309c:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
1a0030a0:	f000 fc24 	bl	1a0038ec <Chip_Clock_GetRate>
	div = clkin / (baudrate * 16);
1a0030a4:	0123      	lsls	r3, r4, #4
1a0030a6:	fbb0 f3f3 	udiv	r3, r0, r3

	/* High and low halves of the divider */
	divh = div / 256;
	divl = div - (divh * 256);
1a0030aa:	b2d9      	uxtb	r1, r3
	pUART->LCR |= UART_LCR_DLAB_EN;
1a0030ac:	68ea      	ldr	r2, [r5, #12]
1a0030ae:	f042 0280 	orr.w	r2, r2, #128	; 0x80
1a0030b2:	60ea      	str	r2, [r5, #12]
	pUART->DLL = (uint32_t) dll;
1a0030b4:	6029      	str	r1, [r5, #0]
	pUART->DLM = (uint32_t) dlm;
1a0030b6:	f3c3 2207 	ubfx	r2, r3, #8, #8
1a0030ba:	606a      	str	r2, [r5, #4]
	pUART->LCR &= ~UART_LCR_DLAB_EN;
1a0030bc:	68ea      	ldr	r2, [r5, #12]
1a0030be:	f022 0280 	bic.w	r2, r2, #128	; 0x80
1a0030c2:	60ea      	str	r2, [r5, #12]
	Chip_UART_SetDivisorLatches(pUART, divl, divh);
	Chip_UART_DisableDivisorAccess(pUART);

	/* Fractional FDR alreadt setup for 1 in UART init */

	return (clkin / div) >> 4;
1a0030c4:	fbb0 f0f3 	udiv	r0, r0, r3
}
1a0030c8:	0900      	lsrs	r0, r0, #4
1a0030ca:	bd38      	pop	{r3, r4, r5, pc}
1a0030cc:	1a00b0d4 	.word	0x1a00b0d4

1a0030d0 <Chip_UART_SetBaudFDR>:
    Chip_UART_ABIntHandler(pUART);
}

/* Determines and sets best dividers to get a target baud rate */
uint32_t Chip_UART_SetBaudFDR(LPC_USART_T *pUART, uint32_t baud)
{
1a0030d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
1a0030d4:	b083      	sub	sp, #12
1a0030d6:	9001      	str	r0, [sp, #4]
1a0030d8:	4688      	mov	r8, r1
	uint32_t sdiv = 0, sm = 1, sd = 0;
	uint32_t pclk, m, d;
	uint32_t odiff = -1UL; /* old best diff */

	/* Get base clock for the corresponding UART */
	pclk = Chip_Clock_GetRate(UART_BClock[Chip_UART_GetIndex(pUART)]);
1a0030da:	f7ff ff99 	bl	1a003010 <Chip_UART_GetIndex>
1a0030de:	4b32      	ldr	r3, [pc, #200]	; (1a0031a8 <Chip_UART_SetBaudFDR+0xd8>)
1a0030e0:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
1a0030e4:	f000 fc02 	bl	1a0038ec <Chip_Clock_GetRate>
1a0030e8:	4606      	mov	r6, r0
	uint32_t odiff = -1UL; /* old best diff */
1a0030ea:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff

	/* Loop through all possible fractional divider values */
	for (m = 1; odiff && m < 16; m++) {
1a0030ee:	2401      	movs	r4, #1
	uint32_t sdiv = 0, sm = 1, sd = 0;
1a0030f0:	f04f 0b00 	mov.w	fp, #0
1a0030f4:	46a2      	mov	sl, r4
1a0030f6:	46d9      	mov	r9, fp
	for (m = 1; odiff && m < 16; m++) {
1a0030f8:	e02a      	b.n	1a003150 <Chip_UART_SetBaudFDR+0x80>
			/* Upper 32-bit of dval has div */
			div = (uint32_t) (dval >> 32);

			/* Closer to next div */
			if ((int)diff < 0) {
				diff = -diff;
1a0030fa:	4242      	negs	r2, r0
				div ++;
1a0030fc:	1c4b      	adds	r3, r1, #1
1a0030fe:	e017      	b.n	1a003130 <Chip_UART_SetBaudFDR+0x60>
			sd = d;
			sm = m;
			odiff = diff;

			/* On perfect match, break loop */
			if(!diff) {
1a003100:	b30a      	cbz	r2, 1a003146 <Chip_UART_SetBaudFDR+0x76>
			odiff = diff;
1a003102:	4617      	mov	r7, r2
			sd = d;
1a003104:	46ab      	mov	fp, r5
			sm = m;
1a003106:	46a2      	mov	sl, r4
			sdiv = div;
1a003108:	4699      	mov	r9, r3
		for (d = 0; d < m; d++) {
1a00310a:	3501      	adds	r5, #1
1a00310c:	42ac      	cmp	r4, r5
1a00310e:	d91e      	bls.n	1a00314e <Chip_UART_SetBaudFDR+0x7e>
			uint64_t dval = (((uint64_t) pclk << 28) * m) / (baud * (m + d));
1a003110:	0933      	lsrs	r3, r6, #4
1a003112:	0730      	lsls	r0, r6, #28
1a003114:	fba4 0100 	umull	r0, r1, r4, r0
1a003118:	fb04 1103 	mla	r1, r4, r3, r1
1a00311c:	1962      	adds	r2, r4, r5
1a00311e:	fb08 f202 	mul.w	r2, r8, r2
1a003122:	2300      	movs	r3, #0
1a003124:	f002 fcd8 	bl	1a005ad8 <__aeabi_uldivmod>
			diff = (uint32_t) dval;
1a003128:	4602      	mov	r2, r0
			div = (uint32_t) (dval >> 32);
1a00312a:	460b      	mov	r3, r1
			if ((int)diff < 0) {
1a00312c:	2800      	cmp	r0, #0
1a00312e:	dbe4      	blt.n	1a0030fa <Chip_UART_SetBaudFDR+0x2a>
			if (odiff < diff || !div || (div >> 16) || (div < 3 && d)) {
1a003130:	4297      	cmp	r7, r2
1a003132:	d3ea      	bcc.n	1a00310a <Chip_UART_SetBaudFDR+0x3a>
1a003134:	2b00      	cmp	r3, #0
1a003136:	d0e8      	beq.n	1a00310a <Chip_UART_SetBaudFDR+0x3a>
1a003138:	0c19      	lsrs	r1, r3, #16
1a00313a:	d1e6      	bne.n	1a00310a <Chip_UART_SetBaudFDR+0x3a>
1a00313c:	2b02      	cmp	r3, #2
1a00313e:	d8df      	bhi.n	1a003100 <Chip_UART_SetBaudFDR+0x30>
1a003140:	2d00      	cmp	r5, #0
1a003142:	d0dd      	beq.n	1a003100 <Chip_UART_SetBaudFDR+0x30>
1a003144:	e7e1      	b.n	1a00310a <Chip_UART_SetBaudFDR+0x3a>
			odiff = diff;
1a003146:	4617      	mov	r7, r2
			sd = d;
1a003148:	46ab      	mov	fp, r5
			sm = m;
1a00314a:	46a2      	mov	sl, r4
			sdiv = div;
1a00314c:	4699      	mov	r9, r3
	for (m = 1; odiff && m < 16; m++) {
1a00314e:	3401      	adds	r4, #1
1a003150:	b11f      	cbz	r7, 1a00315a <Chip_UART_SetBaudFDR+0x8a>
1a003152:	2c0f      	cmp	r4, #15
1a003154:	d801      	bhi.n	1a00315a <Chip_UART_SetBaudFDR+0x8a>
		for (d = 0; d < m; d++) {
1a003156:	2500      	movs	r5, #0
1a003158:	e7d8      	b.n	1a00310c <Chip_UART_SetBaudFDR+0x3c>
			}
		}
	}

	/* Return 0 if a vaild divisor is not possible */
	if (!sdiv) {
1a00315a:	f1b9 0f00 	cmp.w	r9, #0
1a00315e:	d01e      	beq.n	1a00319e <Chip_UART_SetBaudFDR+0xce>
	pUART->LCR |= UART_LCR_DLAB_EN;
1a003160:	9a01      	ldr	r2, [sp, #4]
1a003162:	4611      	mov	r1, r2
1a003164:	68d3      	ldr	r3, [r2, #12]
1a003166:	f043 0380 	orr.w	r3, r3, #128	; 0x80
1a00316a:	60d3      	str	r3, [r2, #12]
	pUART->DLL = (uint32_t) dll;
1a00316c:	fa5f f389 	uxtb.w	r3, r9
1a003170:	6013      	str	r3, [r2, #0]
	pUART->DLM = (uint32_t) dlm;
1a003172:	f3c9 2307 	ubfx	r3, r9, #8, #8
1a003176:	6053      	str	r3, [r2, #4]
	pUART->LCR &= ~UART_LCR_DLAB_EN;
1a003178:	68d3      	ldr	r3, [r2, #12]
1a00317a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
1a00317e:	60d3      	str	r3, [r2, #12]
	Chip_UART_EnableDivisorAccess(pUART);
	Chip_UART_SetDivisorLatches(pUART, UART_LOAD_DLL(sdiv), UART_LOAD_DLM(sdiv));
	Chip_UART_DisableDivisorAccess(pUART);

	/* Set best fractional divider */
	pUART->FDR = (UART_FDR_MULVAL(sm) | UART_FDR_DIVADDVAL(sd));
1a003180:	ea4f 130a 	mov.w	r3, sl, lsl #4
1a003184:	b2db      	uxtb	r3, r3
1a003186:	f00b 020f 	and.w	r2, fp, #15
1a00318a:	4313      	orrs	r3, r2
1a00318c:	628b      	str	r3, [r1, #40]	; 0x28

	/* Return actual baud rate */
	return (pclk >> 4) * sm / (sdiv * (sm + sd));
1a00318e:	0933      	lsrs	r3, r6, #4
1a003190:	fb0a f303 	mul.w	r3, sl, r3
1a003194:	44da      	add	sl, fp
1a003196:	fb09 f90a 	mul.w	r9, r9, sl
1a00319a:	fbb3 f9f9 	udiv	r9, r3, r9
}
1a00319e:	4648      	mov	r0, r9
1a0031a0:	b003      	add	sp, #12
1a0031a2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
1a0031a6:	bf00      	nop
1a0031a8:	1a00b0d4 	.word	0x1a00b0d4

1a0031ac <Chip_ADC_GetClockIndex>:
/* Returns clock index for the peripheral block */
STATIC CHIP_CCU_CLK_T Chip_ADC_GetClockIndex(LPC_ADC_T *pADC)
{
	CHIP_CCU_CLK_T clkADC;

	if (pADC == LPC_ADC1) {
1a0031ac:	4b03      	ldr	r3, [pc, #12]	; (1a0031bc <Chip_ADC_GetClockIndex+0x10>)
1a0031ae:	4298      	cmp	r0, r3
1a0031b0:	d001      	beq.n	1a0031b6 <Chip_ADC_GetClockIndex+0xa>
		clkADC = CLK_APB3_ADC1;
	}
	else {
		clkADC = CLK_APB3_ADC0;
1a0031b2:	2003      	movs	r0, #3
	}

	return clkADC;
}
1a0031b4:	4770      	bx	lr
		clkADC = CLK_APB3_ADC1;
1a0031b6:	2004      	movs	r0, #4
1a0031b8:	4770      	bx	lr
1a0031ba:	bf00      	nop
1a0031bc:	400e4000 	.word	0x400e4000

1a0031c0 <getClkDiv>:

/* Get divider value */
STATIC uint8_t getClkDiv(LPC_ADC_T *pADC, bool burstMode, uint32_t adcRate, uint8_t clks)
{
1a0031c0:	b570      	push	{r4, r5, r6, lr}
1a0031c2:	460d      	mov	r5, r1
1a0031c4:	4614      	mov	r4, r2
1a0031c6:	461e      	mov	r6, r3
	   A/D converter, which should be less than or equal to 4.5MHz.
	   A fully conversion requires (bits_accuracy+1) of these clocks.
	   ADC Clock = PCLK_ADC0 / (CLKDIV + 1);
	   ADC rate = ADC clock / (the number of clocks required for each conversion);
	 */
	adcBlockFreq = Chip_Clock_GetRate(Chip_ADC_GetClockIndex(pADC));
1a0031c8:	f7ff fff0 	bl	1a0031ac <Chip_ADC_GetClockIndex>
1a0031cc:	f000 fb8e 	bl	1a0038ec <Chip_Clock_GetRate>
	if (burstMode) {
1a0031d0:	b155      	cbz	r5, 1a0031e8 <getClkDiv+0x28>
		fullAdcRate = adcRate * clks;
1a0031d2:	fb04 f406 	mul.w	r4, r4, r6
	else {
		fullAdcRate = adcRate * getFullConvClk();
	}

	/* Get the round value by fomular: (2*A + B)/(2*B) */
	div = ((adcBlockFreq * 2 + fullAdcRate) / (fullAdcRate * 2)) - 1;
1a0031d6:	eb04 0040 	add.w	r0, r4, r0, lsl #1
1a0031da:	0064      	lsls	r4, r4, #1
1a0031dc:	fbb0 f0f4 	udiv	r0, r0, r4
1a0031e0:	b2c0      	uxtb	r0, r0
1a0031e2:	3801      	subs	r0, #1
	return div;
}
1a0031e4:	b2c0      	uxtb	r0, r0
1a0031e6:	bd70      	pop	{r4, r5, r6, pc}
		fullAdcRate = adcRate * getFullConvClk();
1a0031e8:	eb04 0384 	add.w	r3, r4, r4, lsl #2
1a0031ec:	eb04 0443 	add.w	r4, r4, r3, lsl #1
1a0031f0:	e7f1      	b.n	1a0031d6 <getClkDiv+0x16>

1a0031f2 <setStartMode>:

/* Set start mode for ADC */
void setStartMode(LPC_ADC_T *pADC, uint8_t start_mode)
{
	uint32_t temp;
	temp = pADC->CR & (~ADC_CR_START_MASK);
1a0031f2:	6803      	ldr	r3, [r0, #0]
1a0031f4:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
	pADC->CR = temp | (ADC_CR_START_MODE_SEL((uint32_t) start_mode));
1a0031f8:	ea43 6101 	orr.w	r1, r3, r1, lsl #24
1a0031fc:	6001      	str	r1, [r0, #0]
}
1a0031fe:	4770      	bx	lr

1a003200 <readAdcVal>:

/* Get the ADC value */
Status readAdcVal(LPC_ADC_T *pADC, uint8_t channel, uint16_t *data)
{
	uint32_t temp;
	temp = pADC->DR[channel];
1a003200:	3104      	adds	r1, #4
1a003202:	f850 3021 	ldr.w	r3, [r0, r1, lsl #2]
	if (!ADC_DR_DONE(temp)) {
1a003206:	2b00      	cmp	r3, #0
1a003208:	da04      	bge.n	1a003214 <readAdcVal+0x14>
		return ERROR;
	}
	/*	if(ADC_DR_OVERRUN(temp) && (pADC->CR & ADC_CR_BURST)) */
	/*	return ERROR; */
	*data = (uint16_t) ADC_DR_RESULT(temp);
1a00320a:	f3c3 1389 	ubfx	r3, r3, #6, #10
1a00320e:	8013      	strh	r3, [r2, #0]
	return SUCCESS;
1a003210:	2001      	movs	r0, #1
1a003212:	4770      	bx	lr
		return ERROR;
1a003214:	2000      	movs	r0, #0
}
1a003216:	4770      	bx	lr

1a003218 <Chip_ADC_Init>:
 * Public functions
 ****************************************************************************/

/* Initialize the ADC peripheral and the ADC setup structure to default value */
void Chip_ADC_Init(LPC_ADC_T *pADC, ADC_CLOCK_SETUP_T *ADCSetup)
{
1a003218:	b538      	push	{r3, r4, r5, lr}
1a00321a:	4605      	mov	r5, r0
1a00321c:	460c      	mov	r4, r1
	uint8_t div;
	uint32_t cr = 0;
	uint32_t clk;

	Chip_Clock_EnableOpts(Chip_ADC_GetClockIndex(pADC), true, true, 1);
1a00321e:	f7ff ffc5 	bl	1a0031ac <Chip_ADC_GetClockIndex>
1a003222:	2301      	movs	r3, #1
1a003224:	461a      	mov	r2, r3
1a003226:	4619      	mov	r1, r3
1a003228:	f000 fb0e 	bl	1a003848 <Chip_Clock_EnableOpts>

	pADC->INTEN = 0;		/* Disable all interrupts */
1a00322c:	2100      	movs	r1, #0
1a00322e:	60e9      	str	r1, [r5, #12]

	cr |= ADC_CR_PDN;
	ADCSetup->adcRate = ADC_MAX_SAMPLE_RATE;
1a003230:	4a08      	ldr	r2, [pc, #32]	; (1a003254 <Chip_ADC_Init+0x3c>)
1a003232:	6022      	str	r2, [r4, #0]
	ADCSetup->bitsAccuracy = ADC_10BITS;
1a003234:	7121      	strb	r1, [r4, #4]
	clk = 11;
	ADCSetup->burstMode = false;
1a003236:	7161      	strb	r1, [r4, #5]
	div = getClkDiv(pADC, false, ADCSetup->adcRate, clk);
1a003238:	230b      	movs	r3, #11
1a00323a:	4628      	mov	r0, r5
1a00323c:	f7ff ffc0 	bl	1a0031c0 <getClkDiv>
	cr |= ADC_CR_CLKDIV(div);
1a003240:	0200      	lsls	r0, r0, #8
1a003242:	f440 1300 	orr.w	r3, r0, #2097152	; 0x200000
	cr |= ADC_CR_BITACC(ADCSetup->bitsAccuracy);
1a003246:	7920      	ldrb	r0, [r4, #4]
1a003248:	0440      	lsls	r0, r0, #17
1a00324a:	f400 2060 	and.w	r0, r0, #917504	; 0xe0000
1a00324e:	4318      	orrs	r0, r3
	pADC->CR = cr;
1a003250:	6028      	str	r0, [r5, #0]
}
1a003252:	bd38      	pop	{r3, r4, r5, pc}
1a003254:	00061a80 	.word	0x00061a80

1a003258 <Chip_ADC_DeInit>:

/* Shutdown ADC */
void Chip_ADC_DeInit(LPC_ADC_T *pADC)
{
1a003258:	b508      	push	{r3, lr}
	pADC->INTEN = 0x00000100;
1a00325a:	f44f 7280 	mov.w	r2, #256	; 0x100
1a00325e:	60c2      	str	r2, [r0, #12]
	pADC->CR = 0;
1a003260:	2200      	movs	r2, #0
1a003262:	6002      	str	r2, [r0, #0]
	Chip_Clock_Disable(Chip_ADC_GetClockIndex(pADC));
1a003264:	f7ff ffa2 	bl	1a0031ac <Chip_ADC_GetClockIndex>
1a003268:	f000 fb26 	bl	1a0038b8 <Chip_Clock_Disable>
}
1a00326c:	bd08      	pop	{r3, pc}

1a00326e <Chip_ADC_ReadValue>:

/* Get the ADC value */
Status Chip_ADC_ReadValue(LPC_ADC_T *pADC, uint8_t channel, uint16_t *data)
{
1a00326e:	b508      	push	{r3, lr}
	return readAdcVal(pADC, channel, data);
1a003270:	f7ff ffc6 	bl	1a003200 <readAdcVal>
}
1a003274:	bd08      	pop	{r3, pc}

1a003276 <Chip_ADC_ReadStatus>:

/* Get ADC Channel status from ADC data register */
FlagStatus Chip_ADC_ReadStatus(LPC_ADC_T *pADC, uint8_t channel, uint32_t StatusType)
{
	switch (StatusType) {
1a003276:	2a01      	cmp	r2, #1
1a003278:	d00a      	beq.n	1a003290 <Chip_ADC_ReadStatus+0x1a>
1a00327a:	b11a      	cbz	r2, 1a003284 <Chip_ADC_ReadStatus+0xe>
1a00327c:	2a02      	cmp	r2, #2
1a00327e:	d00f      	beq.n	1a0032a0 <Chip_ADC_ReadStatus+0x2a>
		return pADC->STAT >> 16 ? SET : RESET;

	default:
		break;
	}
	return RESET;
1a003280:	2000      	movs	r0, #0
1a003282:	4770      	bx	lr
		return (pADC->STAT & (1UL << channel)) ? SET : RESET;
1a003284:	6b00      	ldr	r0, [r0, #48]	; 0x30
1a003286:	40c8      	lsrs	r0, r1
1a003288:	f000 0001 	and.w	r0, r0, #1
1a00328c:	b2c0      	uxtb	r0, r0
1a00328e:	4770      	bx	lr
		channel += 8;
1a003290:	3108      	adds	r1, #8
1a003292:	b2c9      	uxtb	r1, r1
		return (pADC->STAT & (1UL << channel)) ? SET : RESET;
1a003294:	6b00      	ldr	r0, [r0, #48]	; 0x30
1a003296:	40c8      	lsrs	r0, r1
1a003298:	f000 0001 	and.w	r0, r0, #1
1a00329c:	b2c0      	uxtb	r0, r0
1a00329e:	4770      	bx	lr
		return pADC->STAT >> 16 ? SET : RESET;
1a0032a0:	6b03      	ldr	r3, [r0, #48]	; 0x30
1a0032a2:	0c1b      	lsrs	r3, r3, #16
1a0032a4:	bf14      	ite	ne
1a0032a6:	2001      	movne	r0, #1
1a0032a8:	2000      	moveq	r0, #0
}
1a0032aa:	4770      	bx	lr

1a0032ac <Chip_ADC_Int_SetChannelCmd>:

/* Enable/Disable interrupt for ADC channel */
void Chip_ADC_Int_SetChannelCmd(LPC_ADC_T *pADC, uint8_t channel, FunctionalState NewState)
{
	if (NewState == ENABLE) {
1a0032ac:	2a01      	cmp	r2, #1
1a0032ae:	d006      	beq.n	1a0032be <Chip_ADC_Int_SetChannelCmd+0x12>
		pADC->INTEN |= (1UL << channel);
	}
	else {
		pADC->INTEN &= (~(1UL << channel));
1a0032b0:	68c3      	ldr	r3, [r0, #12]
1a0032b2:	2201      	movs	r2, #1
1a0032b4:	408a      	lsls	r2, r1
1a0032b6:	ea23 0302 	bic.w	r3, r3, r2
1a0032ba:	60c3      	str	r3, [r0, #12]
1a0032bc:	4770      	bx	lr
{
1a0032be:	b410      	push	{r4}
		pADC->INTEN |= (1UL << channel);
1a0032c0:	68c4      	ldr	r4, [r0, #12]
1a0032c2:	408a      	lsls	r2, r1
1a0032c4:	4314      	orrs	r4, r2
1a0032c6:	60c4      	str	r4, [r0, #12]
	}
}
1a0032c8:	f85d 4b04 	ldr.w	r4, [sp], #4
1a0032cc:	4770      	bx	lr

1a0032ce <Chip_ADC_SetStartMode>:

/* Select the mode starting the AD conversion */
void Chip_ADC_SetStartMode(LPC_ADC_T *pADC, ADC_START_MODE_T mode, ADC_EDGE_CFG_T EdgeOption)
{
1a0032ce:	b508      	push	{r3, lr}
	if ((mode != ADC_START_NOW) && (mode != ADC_NO_START)) {
1a0032d0:	2901      	cmp	r1, #1
1a0032d2:	d904      	bls.n	1a0032de <Chip_ADC_SetStartMode+0x10>
		if (EdgeOption) {
1a0032d4:	b132      	cbz	r2, 1a0032e4 <Chip_ADC_SetStartMode+0x16>
			pADC->CR |= ADC_CR_EDGE;
1a0032d6:	6803      	ldr	r3, [r0, #0]
1a0032d8:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
1a0032dc:	6003      	str	r3, [r0, #0]
		}
		else {
			pADC->CR &= ~ADC_CR_EDGE;
		}
	}
	setStartMode(pADC, (uint8_t) mode);
1a0032de:	f7ff ff88 	bl	1a0031f2 <setStartMode>
}
1a0032e2:	bd08      	pop	{r3, pc}
			pADC->CR &= ~ADC_CR_EDGE;
1a0032e4:	6803      	ldr	r3, [r0, #0]
1a0032e6:	f023 6300 	bic.w	r3, r3, #134217728	; 0x8000000
1a0032ea:	6003      	str	r3, [r0, #0]
1a0032ec:	e7f7      	b.n	1a0032de <Chip_ADC_SetStartMode+0x10>

1a0032ee <Chip_ADC_SetSampleRate>:

/* Set the ADC Sample rate */
void Chip_ADC_SetSampleRate(LPC_ADC_T *pADC, ADC_CLOCK_SETUP_T *ADCSetup, uint32_t rate)
{
1a0032ee:	b570      	push	{r4, r5, r6, lr}
1a0032f0:	4605      	mov	r5, r0
1a0032f2:	460e      	mov	r6, r1
	uint8_t div;
	uint32_t cr;

	cr = pADC->CR & (~ADC_SAMPLE_RATE_CONFIG_MASK);
1a0032f4:	6804      	ldr	r4, [r0, #0]
1a0032f6:	f424 246f 	bic.w	r4, r4, #978944	; 0xef000
1a0032fa:	f424 6470 	bic.w	r4, r4, #3840	; 0xf00
	ADCSetup->adcRate = rate;
1a0032fe:	600a      	str	r2, [r1, #0]
	div = getClkDiv(pADC, ADCSetup->burstMode, rate, (11 - ADCSetup->bitsAccuracy));
1a003300:	790b      	ldrb	r3, [r1, #4]
1a003302:	f1c3 030b 	rsb	r3, r3, #11
1a003306:	b2db      	uxtb	r3, r3
1a003308:	7949      	ldrb	r1, [r1, #5]
1a00330a:	f7ff ff59 	bl	1a0031c0 <getClkDiv>
	cr |= ADC_CR_CLKDIV(div);
1a00330e:	ea44 2000 	orr.w	r0, r4, r0, lsl #8
	cr |= ADC_CR_BITACC(ADCSetup->bitsAccuracy);
1a003312:	7933      	ldrb	r3, [r6, #4]
1a003314:	045b      	lsls	r3, r3, #17
1a003316:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
1a00331a:	4303      	orrs	r3, r0
	pADC->CR = cr;
1a00331c:	602b      	str	r3, [r5, #0]
}
1a00331e:	bd70      	pop	{r4, r5, r6, pc}

1a003320 <Chip_ADC_SetResolution>:

/* Set the ADC accuracy bits */
void Chip_ADC_SetResolution(LPC_ADC_T *pADC, ADC_CLOCK_SETUP_T *ADCSetup, ADC_RESOLUTION_T resolution)
{
1a003320:	b508      	push	{r3, lr}
	ADCSetup->bitsAccuracy = resolution;
1a003322:	710a      	strb	r2, [r1, #4]
	Chip_ADC_SetSampleRate(pADC, ADCSetup, ADCSetup->adcRate);
1a003324:	680a      	ldr	r2, [r1, #0]
1a003326:	f7ff ffe2 	bl	1a0032ee <Chip_ADC_SetSampleRate>
}
1a00332a:	bd08      	pop	{r3, pc}

1a00332c <Chip_ADC_EnableChannel>:

/* Enable or disable the ADC channel on ADC peripheral */
void Chip_ADC_EnableChannel(LPC_ADC_T *pADC, ADC_CHANNEL_T channel, FunctionalState NewState)
{
	if (NewState == ENABLE) {
1a00332c:	2a01      	cmp	r2, #1
1a00332e:	d00a      	beq.n	1a003346 <Chip_ADC_EnableChannel+0x1a>
		pADC->CR |= ADC_CR_CH_SEL(channel);
	}
	else {
		pADC->CR &= ~ADC_CR_START_MASK;
1a003330:	6802      	ldr	r2, [r0, #0]
1a003332:	f022 62e0 	bic.w	r2, r2, #117440512	; 0x7000000
1a003336:	6002      	str	r2, [r0, #0]
		pADC->CR &= ~ADC_CR_CH_SEL(channel);
1a003338:	6803      	ldr	r3, [r0, #0]
1a00333a:	2201      	movs	r2, #1
1a00333c:	408a      	lsls	r2, r1
1a00333e:	ea23 0302 	bic.w	r3, r3, r2
1a003342:	6003      	str	r3, [r0, #0]
1a003344:	4770      	bx	lr
{
1a003346:	b410      	push	{r4}
		pADC->CR |= ADC_CR_CH_SEL(channel);
1a003348:	6804      	ldr	r4, [r0, #0]
1a00334a:	408a      	lsls	r2, r1
1a00334c:	4314      	orrs	r4, r2
1a00334e:	6004      	str	r4, [r0, #0]
	}
}
1a003350:	f85d 4b04 	ldr.w	r4, [sp], #4
1a003354:	4770      	bx	lr

1a003356 <Chip_ADC_SetBurstCmd>:

/* Enable burst mode */
void Chip_ADC_SetBurstCmd(LPC_ADC_T *pADC, FunctionalState NewState)
{
1a003356:	b538      	push	{r3, r4, r5, lr}
1a003358:	4604      	mov	r4, r0
1a00335a:	460d      	mov	r5, r1
	setStartMode(pADC, ADC_NO_START);
1a00335c:	2100      	movs	r1, #0
1a00335e:	f7ff ff48 	bl	1a0031f2 <setStartMode>
	
    if (NewState == DISABLE) {
1a003362:	b925      	cbnz	r5, 1a00336e <Chip_ADC_SetBurstCmd+0x18>
		pADC->CR &= ~ADC_CR_BURST;
1a003364:	6823      	ldr	r3, [r4, #0]
1a003366:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
1a00336a:	6023      	str	r3, [r4, #0]
	}
	else {
		pADC->CR |= ADC_CR_BURST;
	}
}
1a00336c:	bd38      	pop	{r3, r4, r5, pc}
		pADC->CR |= ADC_CR_BURST;
1a00336e:	6823      	ldr	r3, [r4, #0]
1a003370:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
1a003374:	6023      	str	r3, [r4, #0]
}
1a003376:	e7f9      	b.n	1a00336c <Chip_ADC_SetBurstCmd+0x16>

1a003378 <pll_calc_divs>:
		return -val;
	return val;
}

static void pll_calc_divs(uint32_t freq, PLL_PARAM_T *ppll)
{
1a003378:	b4f0      	push	{r4, r5, r6, r7}

	uint32_t prev = freq;
	int n, m, p;

	/* When direct mode is set FBSEL should be a don't care */
	if (ppll->ctrl & (1 << 7)) {
1a00337a:	680b      	ldr	r3, [r1, #0]
1a00337c:	f013 0f80 	tst.w	r3, #128	; 0x80
1a003380:	d002      	beq.n	1a003388 <pll_calc_divs+0x10>
		ppll->ctrl &= ~(1 << 6);
1a003382:	f023 0340 	bic.w	r3, r3, #64	; 0x40
1a003386:	600b      	str	r3, [r1, #0]
	}
	for (n = 1; n <= 4; n++) {
		for (p = 0; p < 4; p ++) {
1a003388:	4607      	mov	r7, r0
1a00338a:	2501      	movs	r5, #1
1a00338c:	e03a      	b.n	1a003404 <pll_calc_divs+0x8c>
			for (m = 1; m <= 256; m++) {
				uint32_t fcco, fout;
				if (ppll->ctrl & (1 << 6)) {
					fcco = ((m << (p + 1)) * ppll->fin) / n;
				} else {
					fcco = (m * ppll->fin) / n;
1a00338e:	694b      	ldr	r3, [r1, #20]
1a003390:	fb03 f302 	mul.w	r3, r3, r2
1a003394:	fbb3 f3f5 	udiv	r3, r3, r5
1a003398:	e01c      	b.n	1a0033d4 <pll_calc_divs+0x5c>
				}
				if (fcco < PLL_MIN_CCO_FREQ) continue;
				if (fcco > PLL_MAX_CCO_FREQ) break;
				if (ppll->ctrl & (1 << 7)) {
					fout = fcco;
1a00339a:	461c      	mov	r4, r3
	if (val < 0)
1a00339c:	ebb0 0c04 	subs.w	ip, r0, r4
1a0033a0:	d427      	bmi.n	1a0033f2 <pll_calc_divs+0x7a>
				} else {
					fout = fcco >> (p + 1);
				}

				if (ABS(freq - fout) < prev) {
1a0033a2:	4567      	cmp	r7, ip
1a0033a4:	d906      	bls.n	1a0033b4 <pll_calc_divs+0x3c>
					ppll->nsel = n;
1a0033a6:	608d      	str	r5, [r1, #8]
					ppll->psel = p + 1;
1a0033a8:	1c77      	adds	r7, r6, #1
1a0033aa:	60cf      	str	r7, [r1, #12]
					ppll->msel = m;
1a0033ac:	610a      	str	r2, [r1, #16]
					ppll->fout = fout;
1a0033ae:	618c      	str	r4, [r1, #24]
					ppll->fcco = fcco;
1a0033b0:	61cb      	str	r3, [r1, #28]
					prev = ABS(freq - fout);
1a0033b2:	4667      	mov	r7, ip
			for (m = 1; m <= 256; m++) {
1a0033b4:	3201      	adds	r2, #1
1a0033b6:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
1a0033ba:	dc1d      	bgt.n	1a0033f8 <pll_calc_divs+0x80>
				if (ppll->ctrl & (1 << 6)) {
1a0033bc:	680c      	ldr	r4, [r1, #0]
1a0033be:	f014 0f40 	tst.w	r4, #64	; 0x40
1a0033c2:	d0e4      	beq.n	1a00338e <pll_calc_divs+0x16>
					fcco = ((m << (p + 1)) * ppll->fin) / n;
1a0033c4:	1c73      	adds	r3, r6, #1
1a0033c6:	fa02 fc03 	lsl.w	ip, r2, r3
1a0033ca:	694b      	ldr	r3, [r1, #20]
1a0033cc:	fb03 f30c 	mul.w	r3, r3, ip
1a0033d0:	fbb3 f3f5 	udiv	r3, r3, r5
				if (fcco < PLL_MIN_CCO_FREQ) continue;
1a0033d4:	f8df c038 	ldr.w	ip, [pc, #56]	; 1a003410 <pll_calc_divs+0x98>
1a0033d8:	4563      	cmp	r3, ip
1a0033da:	d9eb      	bls.n	1a0033b4 <pll_calc_divs+0x3c>
				if (fcco > PLL_MAX_CCO_FREQ) break;
1a0033dc:	f8df c034 	ldr.w	ip, [pc, #52]	; 1a003414 <pll_calc_divs+0x9c>
1a0033e0:	4563      	cmp	r3, ip
1a0033e2:	d809      	bhi.n	1a0033f8 <pll_calc_divs+0x80>
				if (ppll->ctrl & (1 << 7)) {
1a0033e4:	f014 0f80 	tst.w	r4, #128	; 0x80
1a0033e8:	d1d7      	bne.n	1a00339a <pll_calc_divs+0x22>
					fout = fcco >> (p + 1);
1a0033ea:	1c74      	adds	r4, r6, #1
1a0033ec:	fa23 f404 	lsr.w	r4, r3, r4
1a0033f0:	e7d4      	b.n	1a00339c <pll_calc_divs+0x24>
		return -val;
1a0033f2:	f1cc 0c00 	rsb	ip, ip, #0
1a0033f6:	e7d4      	b.n	1a0033a2 <pll_calc_divs+0x2a>
		for (p = 0; p < 4; p ++) {
1a0033f8:	3601      	adds	r6, #1
1a0033fa:	2e03      	cmp	r6, #3
1a0033fc:	dc01      	bgt.n	1a003402 <pll_calc_divs+0x8a>
			for (m = 1; m <= 256; m++) {
1a0033fe:	2201      	movs	r2, #1
1a003400:	e7d9      	b.n	1a0033b6 <pll_calc_divs+0x3e>
	for (n = 1; n <= 4; n++) {
1a003402:	3501      	adds	r5, #1
1a003404:	2d04      	cmp	r5, #4
1a003406:	dc01      	bgt.n	1a00340c <pll_calc_divs+0x94>
		for (p = 0; p < 4; p ++) {
1a003408:	2600      	movs	r6, #0
1a00340a:	e7f6      	b.n	1a0033fa <pll_calc_divs+0x82>
				}
			}
		}
	}
}
1a00340c:	bcf0      	pop	{r4, r5, r6, r7}
1a00340e:	4770      	bx	lr
1a003410:	094c5eff 	.word	0x094c5eff
1a003414:	1312d000 	.word	0x1312d000

1a003418 <pll_get_frac>:

static void pll_get_frac(uint32_t freq, PLL_PARAM_T *ppll)
{
1a003418:	b5f0      	push	{r4, r5, r6, r7, lr}
1a00341a:	b099      	sub	sp, #100	; 0x64
1a00341c:	4605      	mov	r5, r0
1a00341e:	460c      	mov	r4, r1
	int diff[3];
	PLL_PARAM_T pll[3] = {{0},{0},{0}};
1a003420:	225c      	movs	r2, #92	; 0x5c
1a003422:	2100      	movs	r1, #0
1a003424:	a801      	add	r0, sp, #4
1a003426:	f003 faff 	bl	1a006a28 <memset>

	/* Try direct mode */
	pll[0].ctrl |= (1 << 7);
1a00342a:	2380      	movs	r3, #128	; 0x80
1a00342c:	9300      	str	r3, [sp, #0]
	pll[0].fin = ppll->fin;
1a00342e:	6963      	ldr	r3, [r4, #20]
1a003430:	9305      	str	r3, [sp, #20]
	pll[0].srcin = ppll->srcin;
1a003432:	7923      	ldrb	r3, [r4, #4]
1a003434:	f88d 3004 	strb.w	r3, [sp, #4]
	pll_calc_divs(freq, &pll[0]);
1a003438:	4669      	mov	r1, sp
1a00343a:	4628      	mov	r0, r5
1a00343c:	f7ff ff9c 	bl	1a003378 <pll_calc_divs>
	if (pll[0].fout == freq) {
1a003440:	9b06      	ldr	r3, [sp, #24]
1a003442:	42ab      	cmp	r3, r5
1a003444:	d027      	beq.n	1a003496 <pll_get_frac+0x7e>
	if (val < 0)
1a003446:	1aeb      	subs	r3, r5, r3
1a003448:	d42e      	bmi.n	1a0034a8 <pll_get_frac+0x90>
		*ppll = pll[0];
		return ;
	}
	diff[0] = ABS(freq - pll[0].fout);
1a00344a:	461e      	mov	r6, r3

	/* Try non-Integer mode */
	pll[2].ctrl &= ~(1 << 6);			// need to set FBSEL to 0
1a00344c:	9b10      	ldr	r3, [sp, #64]	; 0x40
1a00344e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
1a003452:	9310      	str	r3, [sp, #64]	; 0x40
	pll[2].fin = ppll->fin;
1a003454:	6963      	ldr	r3, [r4, #20]
1a003456:	9315      	str	r3, [sp, #84]	; 0x54
	pll[2].srcin = ppll->srcin;
1a003458:	7923      	ldrb	r3, [r4, #4]
1a00345a:	f88d 3044 	strb.w	r3, [sp, #68]	; 0x44
	pll_calc_divs(freq, &pll[2]);
1a00345e:	a910      	add	r1, sp, #64	; 0x40
1a003460:	4628      	mov	r0, r5
1a003462:	f7ff ff89 	bl	1a003378 <pll_calc_divs>
	if (pll[2].fout == freq) {
1a003466:	9b16      	ldr	r3, [sp, #88]	; 0x58
1a003468:	42ab      	cmp	r3, r5
1a00346a:	d01f      	beq.n	1a0034ac <pll_get_frac+0x94>
	if (val < 0)
1a00346c:	1aeb      	subs	r3, r5, r3
1a00346e:	d425      	bmi.n	1a0034bc <pll_get_frac+0xa4>
		*ppll = pll[2];
		return ;
	}
	diff[2] = ABS(freq - pll[2].fout);
1a003470:	461f      	mov	r7, r3
	
	if (freq <= 110000000) {
1a003472:	4b2b      	ldr	r3, [pc, #172]	; (1a003520 <pll_get_frac+0x108>)
1a003474:	429d      	cmp	r5, r3
1a003476:	d923      	bls.n	1a0034c0 <pll_get_frac+0xa8>
		if (pll[1].fout == freq) {
			*ppll = pll[1];
			return ;
		}
	}
	diff[1] = ABS(freq - pll[1].fout);
1a003478:	9b0e      	ldr	r3, [sp, #56]	; 0x38
	if (val < 0)
1a00347a:	1aed      	subs	r5, r5, r3
1a00347c:	d433      	bmi.n	1a0034e6 <pll_get_frac+0xce>

	/* Find the min of 3 and return */
	if (diff[0] <= diff[1]) {
1a00347e:	42ae      	cmp	r6, r5
1a003480:	dc3b      	bgt.n	1a0034fa <pll_get_frac+0xe2>
		if (diff[0] <= diff[2]) {
1a003482:	42be      	cmp	r6, r7
1a003484:	dc31      	bgt.n	1a0034ea <pll_get_frac+0xd2>
			*ppll = pll[0];
1a003486:	466d      	mov	r5, sp
1a003488:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
1a00348a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
1a00348c:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
1a003490:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
1a003494:	e006      	b.n	1a0034a4 <pll_get_frac+0x8c>
		*ppll = pll[0];
1a003496:	466d      	mov	r5, sp
1a003498:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
1a00349a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
1a00349c:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
1a0034a0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
			*ppll = pll[1];
		} else {
			*ppll = pll[2];
		}
	}
}
1a0034a4:	b019      	add	sp, #100	; 0x64
1a0034a6:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return -val;
1a0034a8:	425b      	negs	r3, r3
1a0034aa:	e7ce      	b.n	1a00344a <pll_get_frac+0x32>
		*ppll = pll[2];
1a0034ac:	ad10      	add	r5, sp, #64	; 0x40
1a0034ae:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
1a0034b0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
1a0034b2:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
1a0034b6:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
		return ;
1a0034ba:	e7f3      	b.n	1a0034a4 <pll_get_frac+0x8c>
		return -val;
1a0034bc:	425b      	negs	r3, r3
1a0034be:	e7d7      	b.n	1a003470 <pll_get_frac+0x58>
		pll[1].ctrl = (1 << 6);
1a0034c0:	2340      	movs	r3, #64	; 0x40
1a0034c2:	9308      	str	r3, [sp, #32]
		pll[1].fin = ppll->fin;
1a0034c4:	6963      	ldr	r3, [r4, #20]
1a0034c6:	930d      	str	r3, [sp, #52]	; 0x34
		pll_calc_divs(freq, &pll[1]);
1a0034c8:	a908      	add	r1, sp, #32
1a0034ca:	4628      	mov	r0, r5
1a0034cc:	f7ff ff54 	bl	1a003378 <pll_calc_divs>
		if (pll[1].fout == freq) {
1a0034d0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
1a0034d2:	42ab      	cmp	r3, r5
1a0034d4:	d1d0      	bne.n	1a003478 <pll_get_frac+0x60>
			*ppll = pll[1];
1a0034d6:	ad08      	add	r5, sp, #32
1a0034d8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
1a0034da:	c40f      	stmia	r4!, {r0, r1, r2, r3}
1a0034dc:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
1a0034e0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
			return ;
1a0034e4:	e7de      	b.n	1a0034a4 <pll_get_frac+0x8c>
		return -val;
1a0034e6:	426d      	negs	r5, r5
1a0034e8:	e7c9      	b.n	1a00347e <pll_get_frac+0x66>
			*ppll = pll[2];
1a0034ea:	ad10      	add	r5, sp, #64	; 0x40
1a0034ec:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
1a0034ee:	c40f      	stmia	r4!, {r0, r1, r2, r3}
1a0034f0:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
1a0034f4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
1a0034f8:	e7d4      	b.n	1a0034a4 <pll_get_frac+0x8c>
		if (diff[1] <= diff[2]) {
1a0034fa:	42af      	cmp	r7, r5
1a0034fc:	db07      	blt.n	1a00350e <pll_get_frac+0xf6>
			*ppll = pll[1];
1a0034fe:	ad08      	add	r5, sp, #32
1a003500:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
1a003502:	c40f      	stmia	r4!, {r0, r1, r2, r3}
1a003504:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
1a003508:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
1a00350c:	e7ca      	b.n	1a0034a4 <pll_get_frac+0x8c>
			*ppll = pll[2];
1a00350e:	ad10      	add	r5, sp, #64	; 0x40
1a003510:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
1a003512:	c40f      	stmia	r4!, {r0, r1, r2, r3}
1a003514:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
1a003518:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
1a00351c:	e7c2      	b.n	1a0034a4 <pll_get_frac+0x8c>
1a00351e:	bf00      	nop
1a003520:	068e7780 	.word	0x068e7780

1a003524 <Chip_Clock_FindBaseClock>:
	return Chip_Clock_GetClockInputHz(input) / (div + 1);
}

/* Finds the base clock for the peripheral clock */
static CHIP_CGU_BASE_CLK_T Chip_Clock_FindBaseClock(CHIP_CCU_CLK_T clk)
{
1a003524:	b430      	push	{r4, r5}
1a003526:	4605      	mov	r5, r0
	CHIP_CGU_BASE_CLK_T baseclk = CLK_BASE_NONE;
	int i = 0;
1a003528:	2300      	movs	r3, #0
	CHIP_CGU_BASE_CLK_T baseclk = CLK_BASE_NONE;
1a00352a:	201c      	movs	r0, #28

	while ((baseclk == CLK_BASE_NONE) && (periph_to_base[i].clkbase != baseclk)) {
1a00352c:	e000      	b.n	1a003530 <Chip_Clock_FindBaseClock+0xc>
		if ((clk >= periph_to_base[i].clkstart) && (clk <= periph_to_base[i].clkend)) {
			baseclk = periph_to_base[i].clkbase;
		}
		else {
			i++;
1a00352e:	3301      	adds	r3, #1
	while ((baseclk == CLK_BASE_NONE) && (periph_to_base[i].clkbase != baseclk)) {
1a003530:	281c      	cmp	r0, #28
1a003532:	d118      	bne.n	1a003566 <Chip_Clock_FindBaseClock+0x42>
1a003534:	eb03 0243 	add.w	r2, r3, r3, lsl #1
1a003538:	0051      	lsls	r1, r2, #1
1a00353a:	4a0c      	ldr	r2, [pc, #48]	; (1a00356c <Chip_Clock_FindBaseClock+0x48>)
1a00353c:	440a      	add	r2, r1
1a00353e:	7914      	ldrb	r4, [r2, #4]
1a003540:	4284      	cmp	r4, r0
1a003542:	d010      	beq.n	1a003566 <Chip_Clock_FindBaseClock+0x42>
		if ((clk >= periph_to_base[i].clkstart) && (clk <= periph_to_base[i].clkend)) {
1a003544:	eb03 0143 	add.w	r1, r3, r3, lsl #1
1a003548:	004a      	lsls	r2, r1, #1
1a00354a:	4908      	ldr	r1, [pc, #32]	; (1a00356c <Chip_Clock_FindBaseClock+0x48>)
1a00354c:	5a8a      	ldrh	r2, [r1, r2]
1a00354e:	42aa      	cmp	r2, r5
1a003550:	d8ed      	bhi.n	1a00352e <Chip_Clock_FindBaseClock+0xa>
1a003552:	eb03 0243 	add.w	r2, r3, r3, lsl #1
1a003556:	0051      	lsls	r1, r2, #1
1a003558:	4a04      	ldr	r2, [pc, #16]	; (1a00356c <Chip_Clock_FindBaseClock+0x48>)
1a00355a:	440a      	add	r2, r1
1a00355c:	8852      	ldrh	r2, [r2, #2]
1a00355e:	42aa      	cmp	r2, r5
1a003560:	d3e5      	bcc.n	1a00352e <Chip_Clock_FindBaseClock+0xa>
			baseclk = periph_to_base[i].clkbase;
1a003562:	4620      	mov	r0, r4
1a003564:	e7e4      	b.n	1a003530 <Chip_Clock_FindBaseClock+0xc>
		}
	}

	return baseclk;
}
1a003566:	bc30      	pop	{r4, r5}
1a003568:	4770      	bx	lr
1a00356a:	bf00      	nop
1a00356c:	1a00b0f0 	.word	0x1a00b0f0

1a003570 <Chip_Clock_EnableCrystal>:
 * Public functions
 ****************************************************************************/

/* Enables the crystal oscillator */
void Chip_Clock_EnableCrystal(void)
{
1a003570:	b082      	sub	sp, #8
	volatile uint32_t delay = 1000;
1a003572:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
1a003576:	9301      	str	r3, [sp, #4]

	uint32_t OldCrystalConfig = LPC_CGU->XTAL_OSC_CTRL;
1a003578:	4a0d      	ldr	r2, [pc, #52]	; (1a0035b0 <Chip_Clock_EnableCrystal+0x40>)
1a00357a:	6993      	ldr	r3, [r2, #24]

	/* Clear bypass mode */
	OldCrystalConfig &= (~2);
1a00357c:	f023 0102 	bic.w	r1, r3, #2
	if (OldCrystalConfig != LPC_CGU->XTAL_OSC_CTRL) {
1a003580:	6992      	ldr	r2, [r2, #24]
1a003582:	428a      	cmp	r2, r1
1a003584:	d001      	beq.n	1a00358a <Chip_Clock_EnableCrystal+0x1a>
		LPC_CGU->XTAL_OSC_CTRL = OldCrystalConfig;
1a003586:	4a0a      	ldr	r2, [pc, #40]	; (1a0035b0 <Chip_Clock_EnableCrystal+0x40>)
1a003588:	6191      	str	r1, [r2, #24]
	}

	/* Enable crystal oscillator */
	OldCrystalConfig &= (~1);
1a00358a:	f023 0303 	bic.w	r3, r3, #3
	if (OscRateIn >= 20000000) {
1a00358e:	4a09      	ldr	r2, [pc, #36]	; (1a0035b4 <Chip_Clock_EnableCrystal+0x44>)
1a003590:	6811      	ldr	r1, [r2, #0]
1a003592:	4a09      	ldr	r2, [pc, #36]	; (1a0035b8 <Chip_Clock_EnableCrystal+0x48>)
1a003594:	4291      	cmp	r1, r2
1a003596:	d901      	bls.n	1a00359c <Chip_Clock_EnableCrystal+0x2c>
		OldCrystalConfig |= 4;	/* Set high frequency mode */
1a003598:	f043 0304 	orr.w	r3, r3, #4

	}
	LPC_CGU->XTAL_OSC_CTRL = OldCrystalConfig;
1a00359c:	4a04      	ldr	r2, [pc, #16]	; (1a0035b0 <Chip_Clock_EnableCrystal+0x40>)
1a00359e:	6193      	str	r3, [r2, #24]

	/* Delay for 250uSec */
	while(delay--) {}
1a0035a0:	9b01      	ldr	r3, [sp, #4]
1a0035a2:	1e5a      	subs	r2, r3, #1
1a0035a4:	9201      	str	r2, [sp, #4]
1a0035a6:	2b00      	cmp	r3, #0
1a0035a8:	d1fa      	bne.n	1a0035a0 <Chip_Clock_EnableCrystal+0x30>
}
1a0035aa:	b002      	add	sp, #8
1a0035ac:	4770      	bx	lr
1a0035ae:	bf00      	nop
1a0035b0:	40050000 	.word	0x40050000
1a0035b4:	1a00b058 	.word	0x1a00b058
1a0035b8:	01312cff 	.word	0x01312cff

1a0035bc <Chip_Clock_GetDividerSource>:
}

/* Gets a CGU clock divider source */
CHIP_CGU_CLKIN_T Chip_Clock_GetDividerSource(CHIP_CGU_IDIV_T Divider)
{
	uint32_t reg = LPC_CGU->IDIV_CTRL[Divider];
1a0035bc:	3012      	adds	r0, #18
1a0035be:	4b05      	ldr	r3, [pc, #20]	; (1a0035d4 <Chip_Clock_GetDividerSource+0x18>)
1a0035c0:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]

	if (reg & 1) {	/* divider is powered down */
1a0035c4:	f010 0f01 	tst.w	r0, #1
1a0035c8:	d102      	bne.n	1a0035d0 <Chip_Clock_GetDividerSource+0x14>
		return CLKINPUT_PD;
	}

	return (CHIP_CGU_CLKIN_T) ((reg >> 24) & 0x1F);
1a0035ca:	f3c0 6004 	ubfx	r0, r0, #24, #5
1a0035ce:	4770      	bx	lr
		return CLKINPUT_PD;
1a0035d0:	2011      	movs	r0, #17
}
1a0035d2:	4770      	bx	lr
1a0035d4:	40050000 	.word	0x40050000

1a0035d8 <Chip_Clock_GetDividerDivisor>:

/* Gets a CGU clock divider divisor */
uint32_t Chip_Clock_GetDividerDivisor(CHIP_CGU_IDIV_T Divider)
{
	return (CHIP_CGU_CLKIN_T) ((LPC_CGU->IDIV_CTRL[Divider] >> 2) & CHIP_CGU_IDIV_MASK(Divider));
1a0035d8:	f100 0212 	add.w	r2, r0, #18
1a0035dc:	4b03      	ldr	r3, [pc, #12]	; (1a0035ec <Chip_Clock_GetDividerDivisor+0x14>)
1a0035de:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
1a0035e2:	4b03      	ldr	r3, [pc, #12]	; (1a0035f0 <Chip_Clock_GetDividerDivisor+0x18>)
1a0035e4:	5c18      	ldrb	r0, [r3, r0]
}
1a0035e6:	ea00 0092 	and.w	r0, r0, r2, lsr #2
1a0035ea:	4770      	bx	lr
1a0035ec:	40050000 	.word	0x40050000
1a0035f0:	1a00b0e8 	.word	0x1a00b0e8

1a0035f4 <Chip_Clock_GetClockInputHz>:

/* Returns the frequency of the specified input clock source */
uint32_t Chip_Clock_GetClockInputHz(CHIP_CGU_CLKIN_T input)
{
1a0035f4:	b508      	push	{r3, lr}
	uint32_t rate = 0;

	switch (input) {
1a0035f6:	2810      	cmp	r0, #16
1a0035f8:	d80a      	bhi.n	1a003610 <Chip_Clock_GetClockInputHz+0x1c>
1a0035fa:	e8df f000 	tbb	[pc, r0]
1a0035fe:	0b44      	.short	0x0b44
1a003600:	0921180d 	.word	0x0921180d
1a003604:	2d2a2724 	.word	0x2d2a2724
1a003608:	34300909 	.word	0x34300909
1a00360c:	3c38      	.short	0x3c38
1a00360e:	40          	.byte	0x40
1a00360f:	00          	.byte	0x00
	uint32_t rate = 0;
1a003610:	2000      	movs	r0, #0
1a003612:	e03a      	b.n	1a00368a <Chip_Clock_GetClockInputHz+0x96>
	case CLKIN_32K:
		rate = CRYSTAL_32K_FREQ_IN;
		break;

	case CLKIN_IRC:
		rate = CGU_IRC_FREQ;
1a003614:	481e      	ldr	r0, [pc, #120]	; (1a003690 <Chip_Clock_GetClockInputHz+0x9c>)
		break;
1a003616:	e038      	b.n	1a00368a <Chip_Clock_GetClockInputHz+0x96>

	case CLKIN_ENET_RX:
		if ((LPC_CREG->CREG6 & 0x07) != 0x4) {
1a003618:	4b1e      	ldr	r3, [pc, #120]	; (1a003694 <Chip_Clock_GetClockInputHz+0xa0>)
1a00361a:	f8d3 312c 	ldr.w	r3, [r3, #300]	; 0x12c
1a00361e:	f003 0307 	and.w	r3, r3, #7
1a003622:	2b04      	cmp	r3, #4
1a003624:	d001      	beq.n	1a00362a <Chip_Clock_GetClockInputHz+0x36>
			/* MII mode requires 25MHz clock */
			rate = 25000000;
1a003626:	481c      	ldr	r0, [pc, #112]	; (1a003698 <Chip_Clock_GetClockInputHz+0xa4>)
1a003628:	e02f      	b.n	1a00368a <Chip_Clock_GetClockInputHz+0x96>
	uint32_t rate = 0;
1a00362a:	2000      	movs	r0, #0
1a00362c:	e02d      	b.n	1a00368a <Chip_Clock_GetClockInputHz+0x96>
		}
		break;

	case CLKIN_ENET_TX:
		if ((LPC_CREG->CREG6 & 0x07) != 0x4) {
1a00362e:	4b19      	ldr	r3, [pc, #100]	; (1a003694 <Chip_Clock_GetClockInputHz+0xa0>)
1a003630:	f8d3 312c 	ldr.w	r3, [r3, #300]	; 0x12c
1a003634:	f003 0307 	and.w	r3, r3, #7
1a003638:	2b04      	cmp	r3, #4
1a00363a:	d027      	beq.n	1a00368c <Chip_Clock_GetClockInputHz+0x98>
			rate = 25000000; /* MII uses 25 MHz */
1a00363c:	4816      	ldr	r0, [pc, #88]	; (1a003698 <Chip_Clock_GetClockInputHz+0xa4>)
1a00363e:	e024      	b.n	1a00368a <Chip_Clock_GetClockInputHz+0x96>
			rate = 50000000; /* RMII uses 50 MHz */
		}
		break;

	case CLKIN_CLKIN:
		rate = ExtRateIn;
1a003640:	4b16      	ldr	r3, [pc, #88]	; (1a00369c <Chip_Clock_GetClockInputHz+0xa8>)
1a003642:	6818      	ldr	r0, [r3, #0]
		break;
1a003644:	e021      	b.n	1a00368a <Chip_Clock_GetClockInputHz+0x96>

	case CLKIN_CRYSTAL:
		rate = OscRateIn;
1a003646:	4b16      	ldr	r3, [pc, #88]	; (1a0036a0 <Chip_Clock_GetClockInputHz+0xac>)
1a003648:	6818      	ldr	r0, [r3, #0]
		break;
1a00364a:	e01e      	b.n	1a00368a <Chip_Clock_GetClockInputHz+0x96>

	case CLKIN_USBPLL:
		rate = audio_usb_pll_freq[CGU_USB_PLL];
1a00364c:	4b15      	ldr	r3, [pc, #84]	; (1a0036a4 <Chip_Clock_GetClockInputHz+0xb0>)
1a00364e:	6818      	ldr	r0, [r3, #0]
		break;
1a003650:	e01b      	b.n	1a00368a <Chip_Clock_GetClockInputHz+0x96>

	case CLKIN_AUDIOPLL:
		rate = audio_usb_pll_freq[CGU_AUDIO_PLL];
1a003652:	4b14      	ldr	r3, [pc, #80]	; (1a0036a4 <Chip_Clock_GetClockInputHz+0xb0>)
1a003654:	6858      	ldr	r0, [r3, #4]
		break;
1a003656:	e018      	b.n	1a00368a <Chip_Clock_GetClockInputHz+0x96>

	case CLKIN_MAINPLL:
		rate = Chip_Clock_GetMainPLLHz();
1a003658:	f000 f868 	bl	1a00372c <Chip_Clock_GetMainPLLHz>
		break;
1a00365c:	e015      	b.n	1a00368a <Chip_Clock_GetClockInputHz+0x96>

	case CLKIN_IDIVA:
		rate = Chip_Clock_GetDivRate(input, CLK_IDIV_A);
1a00365e:	2100      	movs	r1, #0
1a003660:	f000 f89a 	bl	1a003798 <Chip_Clock_GetDivRate>
		break;
1a003664:	e011      	b.n	1a00368a <Chip_Clock_GetClockInputHz+0x96>

	case CLKIN_IDIVB:
		rate = Chip_Clock_GetDivRate(input, CLK_IDIV_B);
1a003666:	2101      	movs	r1, #1
1a003668:	f000 f896 	bl	1a003798 <Chip_Clock_GetDivRate>
		break;
1a00366c:	e00d      	b.n	1a00368a <Chip_Clock_GetClockInputHz+0x96>

	case CLKIN_IDIVC:
		rate = Chip_Clock_GetDivRate(input, CLK_IDIV_C);
1a00366e:	2102      	movs	r1, #2
1a003670:	f000 f892 	bl	1a003798 <Chip_Clock_GetDivRate>
		break;
1a003674:	e009      	b.n	1a00368a <Chip_Clock_GetClockInputHz+0x96>

	case CLKIN_IDIVD:
		rate = Chip_Clock_GetDivRate(input, CLK_IDIV_D);
1a003676:	2103      	movs	r1, #3
1a003678:	f000 f88e 	bl	1a003798 <Chip_Clock_GetDivRate>
		break;
1a00367c:	e005      	b.n	1a00368a <Chip_Clock_GetClockInputHz+0x96>

	case CLKIN_IDIVE:
		rate = Chip_Clock_GetDivRate(input, CLK_IDIV_E);
1a00367e:	2104      	movs	r1, #4
1a003680:	f000 f88a 	bl	1a003798 <Chip_Clock_GetDivRate>
		break;
1a003684:	e001      	b.n	1a00368a <Chip_Clock_GetClockInputHz+0x96>
		rate = CRYSTAL_32K_FREQ_IN;
1a003686:	f44f 4000 	mov.w	r0, #32768	; 0x8000
	default:
		break;
	}

	return rate;
}
1a00368a:	bd08      	pop	{r3, pc}
			rate = 50000000; /* RMII uses 50 MHz */
1a00368c:	4806      	ldr	r0, [pc, #24]	; (1a0036a8 <Chip_Clock_GetClockInputHz+0xb4>)
	return rate;
1a00368e:	e7fc      	b.n	1a00368a <Chip_Clock_GetClockInputHz+0x96>
1a003690:	00b71b00 	.word	0x00b71b00
1a003694:	40043000 	.word	0x40043000
1a003698:	017d7840 	.word	0x017d7840
1a00369c:	1a00b02c 	.word	0x1a00b02c
1a0036a0:	1a00b058 	.word	0x1a00b058
1a0036a4:	10003484 	.word	0x10003484
1a0036a8:	02faf080 	.word	0x02faf080

1a0036ac <Chip_Clock_CalcMainPLLValue>:
{
1a0036ac:	b538      	push	{r3, r4, r5, lr}
1a0036ae:	4605      	mov	r5, r0
1a0036b0:	460c      	mov	r4, r1
	ppll->fin = Chip_Clock_GetClockInputHz(ppll->srcin);
1a0036b2:	7908      	ldrb	r0, [r1, #4]
1a0036b4:	f7ff ff9e 	bl	1a0035f4 <Chip_Clock_GetClockInputHz>
1a0036b8:	6160      	str	r0, [r4, #20]
	if (freq > MAX_CLOCK_FREQ || freq < (PLL_MIN_CCO_FREQ / 16) || !ppll->fin) {
1a0036ba:	4b19      	ldr	r3, [pc, #100]	; (1a003720 <Chip_Clock_CalcMainPLLValue+0x74>)
1a0036bc:	442b      	add	r3, r5
1a0036be:	4a19      	ldr	r2, [pc, #100]	; (1a003724 <Chip_Clock_CalcMainPLLValue+0x78>)
1a0036c0:	4293      	cmp	r3, r2
1a0036c2:	d821      	bhi.n	1a003708 <Chip_Clock_CalcMainPLLValue+0x5c>
1a0036c4:	b318      	cbz	r0, 1a00370e <Chip_Clock_CalcMainPLLValue+0x62>
	ppll->ctrl = 1 << 7; /* Enable direct mode [If possible] */
1a0036c6:	2380      	movs	r3, #128	; 0x80
1a0036c8:	6023      	str	r3, [r4, #0]
	ppll->nsel = 0;
1a0036ca:	2300      	movs	r3, #0
1a0036cc:	60a3      	str	r3, [r4, #8]
	ppll->psel = 0;
1a0036ce:	60e3      	str	r3, [r4, #12]
	ppll->msel = freq / ppll->fin;
1a0036d0:	fbb5 f3f0 	udiv	r3, r5, r0
1a0036d4:	6123      	str	r3, [r4, #16]
	if (freq < PLL_MIN_CCO_FREQ || ppll->msel * ppll->fin != freq) {
1a0036d6:	4a14      	ldr	r2, [pc, #80]	; (1a003728 <Chip_Clock_CalcMainPLLValue+0x7c>)
1a0036d8:	4295      	cmp	r5, r2
1a0036da:	d903      	bls.n	1a0036e4 <Chip_Clock_CalcMainPLLValue+0x38>
1a0036dc:	fb03 f000 	mul.w	r0, r3, r0
1a0036e0:	42a8      	cmp	r0, r5
1a0036e2:	d007      	beq.n	1a0036f4 <Chip_Clock_CalcMainPLLValue+0x48>
		pll_get_frac(freq, ppll);
1a0036e4:	4621      	mov	r1, r4
1a0036e6:	4628      	mov	r0, r5
1a0036e8:	f7ff fe96 	bl	1a003418 <pll_get_frac>
		if (!ppll->nsel) {
1a0036ec:	68a3      	ldr	r3, [r4, #8]
1a0036ee:	b18b      	cbz	r3, 1a003714 <Chip_Clock_CalcMainPLLValue+0x68>
		ppll->nsel --;
1a0036f0:	3b01      	subs	r3, #1
1a0036f2:	60a3      	str	r3, [r4, #8]
	if (ppll->msel == 0) {
1a0036f4:	6923      	ldr	r3, [r4, #16]
1a0036f6:	b183      	cbz	r3, 1a00371a <Chip_Clock_CalcMainPLLValue+0x6e>
	if (ppll->psel) {
1a0036f8:	68e2      	ldr	r2, [r4, #12]
1a0036fa:	b10a      	cbz	r2, 1a003700 <Chip_Clock_CalcMainPLLValue+0x54>
		ppll->psel --;
1a0036fc:	3a01      	subs	r2, #1
1a0036fe:	60e2      	str	r2, [r4, #12]
	ppll->msel --;
1a003700:	3b01      	subs	r3, #1
1a003702:	6123      	str	r3, [r4, #16]
	return 0;
1a003704:	2000      	movs	r0, #0
}
1a003706:	bd38      	pop	{r3, r4, r5, pc}
		return -1;
1a003708:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
1a00370c:	e7fb      	b.n	1a003706 <Chip_Clock_CalcMainPLLValue+0x5a>
1a00370e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
1a003712:	e7f8      	b.n	1a003706 <Chip_Clock_CalcMainPLLValue+0x5a>
			return -1;
1a003714:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
1a003718:	e7f5      	b.n	1a003706 <Chip_Clock_CalcMainPLLValue+0x5a>
		return - 1;
1a00371a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
1a00371e:	e7f2      	b.n	1a003706 <Chip_Clock_CalcMainPLLValue+0x5a>
1a003720:	ff6b3a10 	.word	0xff6b3a10
1a003724:	0b940510 	.word	0x0b940510
1a003728:	094c5eff 	.word	0x094c5eff

1a00372c <Chip_Clock_GetMainPLLHz>:
{
1a00372c:	b530      	push	{r4, r5, lr}
1a00372e:	b083      	sub	sp, #12
	uint32_t PLLReg = LPC_CGU->PLL1_CTRL;
1a003730:	4d17      	ldr	r5, [pc, #92]	; (1a003790 <Chip_Clock_GetMainPLLHz+0x64>)
1a003732:	6c6c      	ldr	r4, [r5, #68]	; 0x44
	uint32_t freq = Chip_Clock_GetClockInputHz((CHIP_CGU_CLKIN_T) ((PLLReg >> 24) & 0xF));
1a003734:	f3c4 6003 	ubfx	r0, r4, #24, #4
1a003738:	f7ff ff5c 	bl	1a0035f4 <Chip_Clock_GetClockInputHz>
	const uint8_t ptab[] = {1, 2, 4, 8};
1a00373c:	4b15      	ldr	r3, [pc, #84]	; (1a003794 <Chip_Clock_GetMainPLLHz+0x68>)
1a00373e:	681b      	ldr	r3, [r3, #0]
1a003740:	9301      	str	r3, [sp, #4]
	if (!(LPC_CGU->PLL1_STAT & 1)) {
1a003742:	6c2b      	ldr	r3, [r5, #64]	; 0x40
1a003744:	f013 0f01 	tst.w	r3, #1
1a003748:	d020      	beq.n	1a00378c <Chip_Clock_GetMainPLLHz+0x60>
	msel = (PLLReg >> 16) & 0xFF;
1a00374a:	f3c4 4307 	ubfx	r3, r4, #16, #8
	nsel = (PLLReg >> 12) & 0x3;
1a00374e:	f3c4 3201 	ubfx	r2, r4, #12, #2
	psel = (PLLReg >> 8) & 0x3;
1a003752:	f3c4 2101 	ubfx	r1, r4, #8, #2
	fbsel = (PLLReg >> 6) & 0x1;
1a003756:	f3c4 1580 	ubfx	r5, r4, #6, #1
	m = msel + 1;
1a00375a:	3301      	adds	r3, #1
	n = nsel + 1;
1a00375c:	3201      	adds	r2, #1
	p = ptab[psel];
1a00375e:	f10d 0c08 	add.w	ip, sp, #8
1a003762:	4461      	add	r1, ip
1a003764:	f811 1c04 	ldrb.w	r1, [r1, #-4]
	if (direct || fbsel) {
1a003768:	f014 0f80 	tst.w	r4, #128	; 0x80
1a00376c:	d108      	bne.n	1a003780 <Chip_Clock_GetMainPLLHz+0x54>
1a00376e:	b93d      	cbnz	r5, 1a003780 <Chip_Clock_GetMainPLLHz+0x54>
	return (m / (2 * p)) * (freq / n);
1a003770:	0049      	lsls	r1, r1, #1
1a003772:	fbb3 f3f1 	udiv	r3, r3, r1
1a003776:	fbb0 f0f2 	udiv	r0, r0, r2
1a00377a:	fb00 f003 	mul.w	r0, r0, r3
1a00377e:	e003      	b.n	1a003788 <Chip_Clock_GetMainPLLHz+0x5c>
		return m * (freq / n);
1a003780:	fbb0 f0f2 	udiv	r0, r0, r2
1a003784:	fb03 f000 	mul.w	r0, r3, r0
}
1a003788:	b003      	add	sp, #12
1a00378a:	bd30      	pop	{r4, r5, pc}
		return 0;
1a00378c:	2000      	movs	r0, #0
1a00378e:	e7fb      	b.n	1a003788 <Chip_Clock_GetMainPLLHz+0x5c>
1a003790:	40050000 	.word	0x40050000
1a003794:	1a00b0e4 	.word	0x1a00b0e4

1a003798 <Chip_Clock_GetDivRate>:
{
1a003798:	b538      	push	{r3, r4, r5, lr}
1a00379a:	460c      	mov	r4, r1
	input = Chip_Clock_GetDividerSource(divider);
1a00379c:	4608      	mov	r0, r1
1a00379e:	f7ff ff0d 	bl	1a0035bc <Chip_Clock_GetDividerSource>
1a0037a2:	4605      	mov	r5, r0
	div = Chip_Clock_GetDividerDivisor(divider);
1a0037a4:	4620      	mov	r0, r4
1a0037a6:	f7ff ff17 	bl	1a0035d8 <Chip_Clock_GetDividerDivisor>
1a0037aa:	4604      	mov	r4, r0
	return Chip_Clock_GetClockInputHz(input) / (div + 1);
1a0037ac:	4628      	mov	r0, r5
1a0037ae:	f7ff ff21 	bl	1a0035f4 <Chip_Clock_GetClockInputHz>
1a0037b2:	3401      	adds	r4, #1
}
1a0037b4:	fbb0 f0f4 	udiv	r0, r0, r4
1a0037b8:	bd38      	pop	{r3, r4, r5, pc}
1a0037ba:	Address 0x000000001a0037ba is out of bounds.


1a0037bc <Chip_Clock_SetBaseClock>:
	return Chip_Clock_GetClockInputHz(Chip_Clock_GetBaseClock(clock));
}

/* Sets a CGU Base Clock clock source */
void Chip_Clock_SetBaseClock(CHIP_CGU_BASE_CLK_T BaseClock, CHIP_CGU_CLKIN_T Input, bool autoblocken, bool powerdn)
{
1a0037bc:	b430      	push	{r4, r5}
	uint32_t reg = LPC_CGU->BASE_CLK[BaseClock];
1a0037be:	f100 0416 	add.w	r4, r0, #22
1a0037c2:	00a4      	lsls	r4, r4, #2
1a0037c4:	f104 4480 	add.w	r4, r4, #1073741824	; 0x40000000
1a0037c8:	f504 24a0 	add.w	r4, r4, #327680	; 0x50000
1a0037cc:	6864      	ldr	r4, [r4, #4]

	if (BaseClock < CLK_BASE_NONE) {
1a0037ce:	281b      	cmp	r0, #27
1a0037d0:	d813      	bhi.n	1a0037fa <Chip_Clock_SetBaseClock+0x3e>
		if (Input != CLKINPUT_PD) {
1a0037d2:	2911      	cmp	r1, #17
1a0037d4:	d01a      	beq.n	1a00380c <Chip_Clock_SetBaseClock+0x50>
			/* Mask off fields we plan to update */
			reg &= ~((0x1F << 24) | 1 | (1 << 11));
1a0037d6:	4d0e      	ldr	r5, [pc, #56]	; (1a003810 <Chip_Clock_SetBaseClock+0x54>)
1a0037d8:	4025      	ands	r5, r4

			if (autoblocken) {
1a0037da:	b10a      	cbz	r2, 1a0037e0 <Chip_Clock_SetBaseClock+0x24>
				reg |= (1 << 11);
1a0037dc:	f445 6500 	orr.w	r5, r5, #2048	; 0x800
			}
			if (powerdn) {
1a0037e0:	b10b      	cbz	r3, 1a0037e6 <Chip_Clock_SetBaseClock+0x2a>
				reg |= (1 << 0);
1a0037e2:	f045 0501 	orr.w	r5, r5, #1
			}

			/* Set clock source */
			reg |= (Input << 24);
1a0037e6:	ea45 6501 	orr.w	r5, r5, r1, lsl #24

			LPC_CGU->BASE_CLK[BaseClock] = reg;
1a0037ea:	3016      	adds	r0, #22
1a0037ec:	0080      	lsls	r0, r0, #2
1a0037ee:	f100 4080 	add.w	r0, r0, #1073741824	; 0x40000000
1a0037f2:	f500 20a0 	add.w	r0, r0, #327680	; 0x50000
1a0037f6:	6045      	str	r5, [r0, #4]
1a0037f8:	e008      	b.n	1a00380c <Chip_Clock_SetBaseClock+0x50>
		}
	}
	else {
		LPC_CGU->BASE_CLK[BaseClock] = reg | 1;	/* Power down this base clock */
1a0037fa:	f044 0401 	orr.w	r4, r4, #1
1a0037fe:	3016      	adds	r0, #22
1a003800:	0080      	lsls	r0, r0, #2
1a003802:	f100 4080 	add.w	r0, r0, #1073741824	; 0x40000000
1a003806:	f500 20a0 	add.w	r0, r0, #327680	; 0x50000
1a00380a:	6044      	str	r4, [r0, #4]
	}
}
1a00380c:	bc30      	pop	{r4, r5}
1a00380e:	4770      	bx	lr
1a003810:	e0fff7fe 	.word	0xe0fff7fe

1a003814 <Chip_Clock_GetBaseClock>:
/* Gets a CGU Base Clock clock source */
CHIP_CGU_CLKIN_T Chip_Clock_GetBaseClock(CHIP_CGU_BASE_CLK_T BaseClock)
{
	uint32_t reg;

	if (BaseClock >= CLK_BASE_NONE) {
1a003814:	281b      	cmp	r0, #27
1a003816:	d80c      	bhi.n	1a003832 <Chip_Clock_GetBaseClock+0x1e>
		return CLKINPUT_PD;
	}

	reg = LPC_CGU->BASE_CLK[BaseClock];
1a003818:	3016      	adds	r0, #22
1a00381a:	0080      	lsls	r0, r0, #2
1a00381c:	f100 4080 	add.w	r0, r0, #1073741824	; 0x40000000
1a003820:	f500 20a0 	add.w	r0, r0, #327680	; 0x50000
1a003824:	6840      	ldr	r0, [r0, #4]

	/* base clock is powered down? */
	if (reg & 1) {
1a003826:	f010 0f01 	tst.w	r0, #1
1a00382a:	d104      	bne.n	1a003836 <Chip_Clock_GetBaseClock+0x22>
		return CLKINPUT_PD;
	}

	return (CHIP_CGU_CLKIN_T) ((reg >> 24) & 0x1F);
1a00382c:	f3c0 6004 	ubfx	r0, r0, #24, #5
1a003830:	4770      	bx	lr
		return CLKINPUT_PD;
1a003832:	2011      	movs	r0, #17
1a003834:	4770      	bx	lr
		return CLKINPUT_PD;
1a003836:	2011      	movs	r0, #17
}
1a003838:	4770      	bx	lr

1a00383a <Chip_Clock_GetBaseClocktHz>:
{
1a00383a:	b508      	push	{r3, lr}
	return Chip_Clock_GetClockInputHz(Chip_Clock_GetBaseClock(clock));
1a00383c:	f7ff ffea 	bl	1a003814 <Chip_Clock_GetBaseClock>
1a003840:	f7ff fed8 	bl	1a0035f4 <Chip_Clock_GetClockInputHz>
}
1a003844:	bd08      	pop	{r3, pc}
1a003846:	Address 0x000000001a003846 is out of bounds.


1a003848 <Chip_Clock_EnableOpts>:
/* Enables a peripheral clock and sets clock states */
void Chip_Clock_EnableOpts(CHIP_CCU_CLK_T clk, bool autoen, bool wakeupen, int div)
{
	uint32_t reg = 1;

	if (autoen) {
1a003848:	b971      	cbnz	r1, 1a003868 <Chip_Clock_EnableOpts+0x20>
	uint32_t reg = 1;
1a00384a:	2101      	movs	r1, #1
		reg |= (1 << 1);
	}
	if (wakeupen) {
1a00384c:	b10a      	cbz	r2, 1a003852 <Chip_Clock_EnableOpts+0xa>
		reg |= (1 << 2);
1a00384e:	f041 0104 	orr.w	r1, r1, #4
	}

	/* Not all clocks support a divider, but we won't check that here. Only
	   dividers of 1 and 2 are allowed. Assume 1 if not 2 */
	if (div == 2) {
1a003852:	2b02      	cmp	r3, #2
1a003854:	d00a      	beq.n	1a00386c <Chip_Clock_EnableOpts+0x24>
		reg |= (1 << 5);
	}

	/* Setup peripheral clock and start running */
	if (clk >= CLK_CCU2_START) {
1a003856:	f5b0 7fa1 	cmp.w	r0, #322	; 0x142
1a00385a:	d30a      	bcc.n	1a003872 <Chip_Clock_EnableOpts+0x2a>
		LPC_CCU2->CLKCCU[clk - CLK_CCU2_START].CFG = reg;
1a00385c:	f5a0 7091 	sub.w	r0, r0, #290	; 0x122
1a003860:	4b06      	ldr	r3, [pc, #24]	; (1a00387c <Chip_Clock_EnableOpts+0x34>)
1a003862:	f843 1030 	str.w	r1, [r3, r0, lsl #3]
1a003866:	4770      	bx	lr
		reg |= (1 << 1);
1a003868:	2103      	movs	r1, #3
1a00386a:	e7ef      	b.n	1a00384c <Chip_Clock_EnableOpts+0x4>
		reg |= (1 << 5);
1a00386c:	f041 0120 	orr.w	r1, r1, #32
1a003870:	e7f1      	b.n	1a003856 <Chip_Clock_EnableOpts+0xe>
	}
	else {
		LPC_CCU1->CLKCCU[clk].CFG = reg;
1a003872:	3020      	adds	r0, #32
1a003874:	4b02      	ldr	r3, [pc, #8]	; (1a003880 <Chip_Clock_EnableOpts+0x38>)
1a003876:	f843 1030 	str.w	r1, [r3, r0, lsl #3]
	}
}
1a00387a:	4770      	bx	lr
1a00387c:	40052000 	.word	0x40052000
1a003880:	40051000 	.word	0x40051000

1a003884 <Chip_Clock_Enable>:

/* Enables a peripheral clock */
void Chip_Clock_Enable(CHIP_CCU_CLK_T clk)
{
	/* Start peripheral clock running */
	if (clk >= CLK_CCU2_START) {
1a003884:	f5b0 7fa1 	cmp.w	r0, #322	; 0x142
1a003888:	d309      	bcc.n	1a00389e <Chip_Clock_Enable+0x1a>
		LPC_CCU2->CLKCCU[clk - CLK_CCU2_START].CFG |= 1;
1a00388a:	4a09      	ldr	r2, [pc, #36]	; (1a0038b0 <Chip_Clock_Enable+0x2c>)
1a00388c:	f5a0 7091 	sub.w	r0, r0, #290	; 0x122
1a003890:	f852 3030 	ldr.w	r3, [r2, r0, lsl #3]
1a003894:	f043 0301 	orr.w	r3, r3, #1
1a003898:	f842 3030 	str.w	r3, [r2, r0, lsl #3]
1a00389c:	4770      	bx	lr
	}
	else {
		LPC_CCU1->CLKCCU[clk].CFG |= 1;
1a00389e:	4a05      	ldr	r2, [pc, #20]	; (1a0038b4 <Chip_Clock_Enable+0x30>)
1a0038a0:	3020      	adds	r0, #32
1a0038a2:	f852 3030 	ldr.w	r3, [r2, r0, lsl #3]
1a0038a6:	f043 0301 	orr.w	r3, r3, #1
1a0038aa:	f842 3030 	str.w	r3, [r2, r0, lsl #3]
	}
}
1a0038ae:	4770      	bx	lr
1a0038b0:	40052000 	.word	0x40052000
1a0038b4:	40051000 	.word	0x40051000

1a0038b8 <Chip_Clock_Disable>:

/* Disables a peripheral clock */
void Chip_Clock_Disable(CHIP_CCU_CLK_T clk)
{
	/* Stop peripheral clock */
	if (clk >= CLK_CCU2_START) {
1a0038b8:	f5b0 7fa1 	cmp.w	r0, #322	; 0x142
1a0038bc:	d309      	bcc.n	1a0038d2 <Chip_Clock_Disable+0x1a>
		LPC_CCU2->CLKCCU[clk - CLK_CCU2_START].CFG &= ~1;
1a0038be:	4a09      	ldr	r2, [pc, #36]	; (1a0038e4 <Chip_Clock_Disable+0x2c>)
1a0038c0:	f5a0 7091 	sub.w	r0, r0, #290	; 0x122
1a0038c4:	f852 3030 	ldr.w	r3, [r2, r0, lsl #3]
1a0038c8:	f023 0301 	bic.w	r3, r3, #1
1a0038cc:	f842 3030 	str.w	r3, [r2, r0, lsl #3]
1a0038d0:	4770      	bx	lr
	}
	else {
		LPC_CCU1->CLKCCU[clk].CFG &= ~1;
1a0038d2:	4a05      	ldr	r2, [pc, #20]	; (1a0038e8 <Chip_Clock_Disable+0x30>)
1a0038d4:	3020      	adds	r0, #32
1a0038d6:	f852 3030 	ldr.w	r3, [r2, r0, lsl #3]
1a0038da:	f023 0301 	bic.w	r3, r3, #1
1a0038de:	f842 3030 	str.w	r3, [r2, r0, lsl #3]
	}
}
1a0038e2:	4770      	bx	lr
1a0038e4:	40052000 	.word	0x40052000
1a0038e8:	40051000 	.word	0x40051000

1a0038ec <Chip_Clock_GetRate>:
	LPC_CCU2->PM = 0;
}

/* Returns a peripheral clock rate */
uint32_t Chip_Clock_GetRate(CHIP_CCU_CLK_T clk)
{
1a0038ec:	b510      	push	{r4, lr}
	CHIP_CGU_BASE_CLK_T baseclk;
	uint32_t reg, div, rate;

	/* Get CCU config register for clock */
	if (clk >= CLK_CCU2_START) {
1a0038ee:	f5b0 7fa1 	cmp.w	r0, #322	; 0x142
1a0038f2:	d309      	bcc.n	1a003908 <Chip_Clock_GetRate+0x1c>
		reg = LPC_CCU2->CLKCCU[clk - CLK_CCU2_START].CFG;
1a0038f4:	f5a0 7391 	sub.w	r3, r0, #290	; 0x122
1a0038f8:	4a0d      	ldr	r2, [pc, #52]	; (1a003930 <Chip_Clock_GetRate+0x44>)
1a0038fa:	f852 4033 	ldr.w	r4, [r2, r3, lsl #3]
	else {
		reg = LPC_CCU1->CLKCCU[clk].CFG;
	}

	/* Is the clock enabled? */
	if (reg & 1) {
1a0038fe:	f014 0f01 	tst.w	r4, #1
1a003902:	d107      	bne.n	1a003914 <Chip_Clock_GetRate+0x28>

		}
		rate = rate / div;
	}
	else {
		rate = 0;
1a003904:	2000      	movs	r0, #0
	}

	return rate;
}
1a003906:	bd10      	pop	{r4, pc}
		reg = LPC_CCU1->CLKCCU[clk].CFG;
1a003908:	f100 0320 	add.w	r3, r0, #32
1a00390c:	4a09      	ldr	r2, [pc, #36]	; (1a003934 <Chip_Clock_GetRate+0x48>)
1a00390e:	f852 4033 	ldr.w	r4, [r2, r3, lsl #3]
1a003912:	e7f4      	b.n	1a0038fe <Chip_Clock_GetRate+0x12>
		baseclk = Chip_Clock_FindBaseClock(clk);
1a003914:	f7ff fe06 	bl	1a003524 <Chip_Clock_FindBaseClock>
		rate = Chip_Clock_GetBaseClocktHz(baseclk);
1a003918:	f7ff ff8f 	bl	1a00383a <Chip_Clock_GetBaseClocktHz>
		if (((reg >> 5) & 0x7) == 0) {
1a00391c:	f014 0fe0 	tst.w	r4, #224	; 0xe0
1a003920:	d103      	bne.n	1a00392a <Chip_Clock_GetRate+0x3e>
			div = 1;
1a003922:	2301      	movs	r3, #1
		rate = rate / div;
1a003924:	fbb0 f0f3 	udiv	r0, r0, r3
1a003928:	e7ed      	b.n	1a003906 <Chip_Clock_GetRate+0x1a>
			div = 2;/* No other dividers supported */
1a00392a:	2302      	movs	r3, #2
1a00392c:	e7fa      	b.n	1a003924 <Chip_Clock_GetRate+0x38>
1a00392e:	bf00      	nop
1a003930:	40052000 	.word	0x40052000
1a003934:	40051000 	.word	0x40051000

1a003938 <SystemCoreClockUpdate>:


/* Update system core clock rate, should be called if the system has
   a clock rate change */
void SystemCoreClockUpdate(void)
{
1a003938:	b508      	push	{r3, lr}
	/* CPU core speed */
	SystemCoreClock = Chip_Clock_GetRate(CLK_MX_MXCORE);
1a00393a:	2069      	movs	r0, #105	; 0x69
1a00393c:	f7ff ffd6 	bl	1a0038ec <Chip_Clock_GetRate>
1a003940:	4b01      	ldr	r3, [pc, #4]	; (1a003948 <SystemCoreClockUpdate+0x10>)
1a003942:	6018      	str	r0, [r3, #0]
}
1a003944:	bd08      	pop	{r3, pc}
1a003946:	bf00      	nop
1a003948:	1000366c 	.word	0x1000366c

1a00394c <Chip_I2CM_XferHandler>:
	Chip_I2CM_SetDutyCycle(pI2C, (clockDiv >> 1), (clockDiv - (clockDiv >> 1)));
}

/* Master transfer state change handler handler */
uint32_t Chip_I2CM_XferHandler(LPC_I2C_T *pI2C, I2CM_XFER_T *xfer)
{
1a00394c:	b410      	push	{r4}
 * @note	I2C controller clears STO bit when it sees STOP
 *          condition after a START condition on the bus.
 */
static INLINE uint32_t Chip_I2CM_GetCurState(LPC_I2C_T *pI2C)
{
	return pI2C->STAT & I2C_STAT_CODE_BITMASK;
1a00394e:	6843      	ldr	r3, [r0, #4]
1a003950:	f003 03f8 	and.w	r3, r3, #248	; 0xf8
	uint32_t cclr = I2C_CON_FLAGS;

	switch (Chip_I2CM_GetCurState(pI2C)) {
1a003954:	2b30      	cmp	r3, #48	; 0x30
1a003956:	d04c      	beq.n	1a0039f2 <Chip_I2CM_XferHandler+0xa6>
1a003958:	d908      	bls.n	1a00396c <Chip_I2CM_XferHandler+0x20>
1a00395a:	2b48      	cmp	r3, #72	; 0x48
1a00395c:	d06c      	beq.n	1a003a38 <Chip_I2CM_XferHandler+0xec>
1a00395e:	d934      	bls.n	1a0039ca <Chip_I2CM_XferHandler+0x7e>
1a003960:	2b58      	cmp	r3, #88	; 0x58
1a003962:	d058      	beq.n	1a003a16 <Chip_I2CM_XferHandler+0xca>
1a003964:	2bf8      	cmp	r3, #248	; 0xf8
1a003966:	d13e      	bne.n	1a0039e6 <Chip_I2CM_XferHandler+0x9a>
	case 0x00:		/* Bus Error */
		xfer->status = I2CM_STATUS_BUS_ERROR;
		cclr &= ~I2C_CON_STO;
        break;
    case 0xF8:
      return 0;
1a003968:	2000      	movs	r0, #0
1a00396a:	e02b      	b.n	1a0039c4 <Chip_I2CM_XferHandler+0x78>
	switch (Chip_I2CM_GetCurState(pI2C)) {
1a00396c:	2b10      	cmp	r3, #16
1a00396e:	d016      	beq.n	1a00399e <Chip_I2CM_XferHandler+0x52>
1a003970:	d90e      	bls.n	1a003990 <Chip_I2CM_XferHandler+0x44>
1a003972:	2b20      	cmp	r3, #32
1a003974:	d03d      	beq.n	1a0039f2 <Chip_I2CM_XferHandler+0xa6>
1a003976:	2b28      	cmp	r3, #40	; 0x28
1a003978:	d001      	beq.n	1a00397e <Chip_I2CM_XferHandler+0x32>
1a00397a:	2b18      	cmp	r3, #24
1a00397c:	d135      	bne.n	1a0039ea <Chip_I2CM_XferHandler+0x9e>
		if (!xfer->txSz) {
1a00397e:	888b      	ldrh	r3, [r1, #4]
1a003980:	2b00      	cmp	r3, #0
1a003982:	d13e      	bne.n	1a003a02 <Chip_I2CM_XferHandler+0xb6>
			if (xfer->rxSz) {
1a003984:	88cb      	ldrh	r3, [r1, #6]
1a003986:	2b00      	cmp	r3, #0
1a003988:	d15e      	bne.n	1a003a48 <Chip_I2CM_XferHandler+0xfc>
				xfer->status = I2CM_STATUS_OK;
1a00398a:	804b      	strh	r3, [r1, #2]
				cclr &= ~I2C_CON_STO;
1a00398c:	232c      	movs	r3, #44	; 0x2c
1a00398e:	e00f      	b.n	1a0039b0 <Chip_I2CM_XferHandler+0x64>
	switch (Chip_I2CM_GetCurState(pI2C)) {
1a003990:	b91b      	cbnz	r3, 1a00399a <Chip_I2CM_XferHandler+0x4e>
		xfer->status = I2CM_STATUS_BUS_ERROR;
1a003992:	2303      	movs	r3, #3
1a003994:	804b      	strh	r3, [r1, #2]
		cclr &= ~I2C_CON_STO;
1a003996:	232c      	movs	r3, #44	; 0x2c
        break;
1a003998:	e00a      	b.n	1a0039b0 <Chip_I2CM_XferHandler+0x64>
	switch (Chip_I2CM_GetCurState(pI2C)) {
1a00399a:	2b08      	cmp	r3, #8
1a00399c:	d125      	bne.n	1a0039ea <Chip_I2CM_XferHandler+0x9e>
		pI2C->DAT = (xfer->slaveAddr << 1) | (xfer->txSz == 0);
1a00399e:	780a      	ldrb	r2, [r1, #0]
1a0039a0:	888b      	ldrh	r3, [r1, #4]
1a0039a2:	fab3 f383 	clz	r3, r3
1a0039a6:	095b      	lsrs	r3, r3, #5
1a0039a8:	ea43 0342 	orr.w	r3, r3, r2, lsl #1
1a0039ac:	6083      	str	r3, [r0, #8]
	uint32_t cclr = I2C_CON_FLAGS;
1a0039ae:	233c      	movs	r3, #60	; 0x3c
		cclr &= ~I2C_CON_STO;
        break;
	}

	/* Set clear control flags */
	pI2C->CONSET = cclr ^ I2C_CON_FLAGS;
1a0039b0:	f083 023c 	eor.w	r2, r3, #60	; 0x3c
1a0039b4:	6002      	str	r2, [r0, #0]
	/* Stop flag should not be cleared as it is a reserved bit */
	pI2C->CONCLR = cclr & (I2C_CON_AA | I2C_CON_SI | I2C_CON_STA);
1a0039b6:	f003 032c 	and.w	r3, r3, #44	; 0x2c
1a0039ba:	6183      	str	r3, [r0, #24]

	return xfer->status != I2CM_STATUS_BUSY;
1a0039bc:	8848      	ldrh	r0, [r1, #2]
1a0039be:	38ff      	subs	r0, #255	; 0xff
1a0039c0:	bf18      	it	ne
1a0039c2:	2001      	movne	r0, #1
}
1a0039c4:	f85d 4b04 	ldr.w	r4, [sp], #4
1a0039c8:	4770      	bx	lr
	switch (Chip_I2CM_GetCurState(pI2C)) {
1a0039ca:	2b38      	cmp	r3, #56	; 0x38
1a0039cc:	d038      	beq.n	1a003a40 <Chip_I2CM_XferHandler+0xf4>
1a0039ce:	2b40      	cmp	r3, #64	; 0x40
1a0039d0:	d10b      	bne.n	1a0039ea <Chip_I2CM_XferHandler+0x9e>
		if ((xfer->rxSz > 1) || (xfer->options & I2CM_XFER_OPTION_LAST_RX_ACK)) {
1a0039d2:	88ca      	ldrh	r2, [r1, #6]
1a0039d4:	2a01      	cmp	r2, #1
1a0039d6:	d927      	bls.n	1a003a28 <Chip_I2CM_XferHandler+0xdc>
			cclr &= ~I2C_CON_AA;
1a0039d8:	2338      	movs	r3, #56	; 0x38
		if (xfer->rxSz == 0) {
1a0039da:	2a00      	cmp	r2, #0
1a0039dc:	d1e8      	bne.n	1a0039b0 <Chip_I2CM_XferHandler+0x64>
			xfer->status = I2CM_STATUS_OK;
1a0039de:	804a      	strh	r2, [r1, #2]
			cclr &= ~I2C_CON_STO;
1a0039e0:	f023 0310 	bic.w	r3, r3, #16
1a0039e4:	e7e4      	b.n	1a0039b0 <Chip_I2CM_XferHandler+0x64>
	switch (Chip_I2CM_GetCurState(pI2C)) {
1a0039e6:	2b50      	cmp	r3, #80	; 0x50
1a0039e8:	d015      	beq.n	1a003a16 <Chip_I2CM_XferHandler+0xca>
		xfer->status = I2CM_STATUS_ERROR;
1a0039ea:	2301      	movs	r3, #1
1a0039ec:	804b      	strh	r3, [r1, #2]
		cclr &= ~I2C_CON_STO;
1a0039ee:	232c      	movs	r3, #44	; 0x2c
        break;
1a0039f0:	e7de      	b.n	1a0039b0 <Chip_I2CM_XferHandler+0x64>
		if ((xfer->options & I2CM_XFER_OPTION_IGNORE_NACK) == 0) {
1a0039f2:	784b      	ldrb	r3, [r1, #1]
1a0039f4:	f013 0f01 	tst.w	r3, #1
1a0039f8:	d1c1      	bne.n	1a00397e <Chip_I2CM_XferHandler+0x32>
			xfer->status = I2CM_STATUS_NAK;
1a0039fa:	2302      	movs	r3, #2
1a0039fc:	804b      	strh	r3, [r1, #2]
			cclr &= ~I2C_CON_STO;
1a0039fe:	232c      	movs	r3, #44	; 0x2c
			break;
1a003a00:	e7d6      	b.n	1a0039b0 <Chip_I2CM_XferHandler+0x64>
			pI2C->DAT = *xfer->txBuff++;
1a003a02:	688b      	ldr	r3, [r1, #8]
1a003a04:	1c5a      	adds	r2, r3, #1
1a003a06:	608a      	str	r2, [r1, #8]
1a003a08:	781b      	ldrb	r3, [r3, #0]
1a003a0a:	6083      	str	r3, [r0, #8]
			xfer->txSz--;
1a003a0c:	888b      	ldrh	r3, [r1, #4]
1a003a0e:	3b01      	subs	r3, #1
1a003a10:	808b      	strh	r3, [r1, #4]
	uint32_t cclr = I2C_CON_FLAGS;
1a003a12:	233c      	movs	r3, #60	; 0x3c
1a003a14:	e7cc      	b.n	1a0039b0 <Chip_I2CM_XferHandler+0x64>
		*xfer->rxBuff++ = pI2C->DAT;
1a003a16:	6882      	ldr	r2, [r0, #8]
1a003a18:	68cb      	ldr	r3, [r1, #12]
1a003a1a:	1c5c      	adds	r4, r3, #1
1a003a1c:	60cc      	str	r4, [r1, #12]
1a003a1e:	701a      	strb	r2, [r3, #0]
		xfer->rxSz--;
1a003a20:	88cb      	ldrh	r3, [r1, #6]
1a003a22:	3b01      	subs	r3, #1
1a003a24:	80cb      	strh	r3, [r1, #6]
1a003a26:	e7d4      	b.n	1a0039d2 <Chip_I2CM_XferHandler+0x86>
		if ((xfer->rxSz > 1) || (xfer->options & I2CM_XFER_OPTION_LAST_RX_ACK)) {
1a003a28:	784b      	ldrb	r3, [r1, #1]
1a003a2a:	f013 0f02 	tst.w	r3, #2
1a003a2e:	d101      	bne.n	1a003a34 <Chip_I2CM_XferHandler+0xe8>
	uint32_t cclr = I2C_CON_FLAGS;
1a003a30:	233c      	movs	r3, #60	; 0x3c
1a003a32:	e7d2      	b.n	1a0039da <Chip_I2CM_XferHandler+0x8e>
			cclr &= ~I2C_CON_AA;
1a003a34:	2338      	movs	r3, #56	; 0x38
1a003a36:	e7d0      	b.n	1a0039da <Chip_I2CM_XferHandler+0x8e>
		xfer->status = I2CM_STATUS_SLAVE_NAK;
1a003a38:	2304      	movs	r3, #4
1a003a3a:	804b      	strh	r3, [r1, #2]
		cclr &= ~I2C_CON_STO;
1a003a3c:	232c      	movs	r3, #44	; 0x2c
		break;
1a003a3e:	e7b7      	b.n	1a0039b0 <Chip_I2CM_XferHandler+0x64>
		xfer->status = I2CM_STATUS_ARBLOST;
1a003a40:	2305      	movs	r3, #5
1a003a42:	804b      	strh	r3, [r1, #2]
	uint32_t cclr = I2C_CON_FLAGS;
1a003a44:	233c      	movs	r3, #60	; 0x3c
		break;
1a003a46:	e7b3      	b.n	1a0039b0 <Chip_I2CM_XferHandler+0x64>
				cclr &= ~I2C_CON_STA;
1a003a48:	231c      	movs	r3, #28
1a003a4a:	e7b1      	b.n	1a0039b0 <Chip_I2CM_XferHandler+0x64>

1a003a4c <Chip_I2CM_Xfer>:

/* Transmit and Receive data in master mode */
void Chip_I2CM_Xfer(LPC_I2C_T *pI2C, I2CM_XFER_T *xfer)
{
	/* set the transfer status as busy */
	xfer->status = I2CM_STATUS_BUSY;
1a003a4c:	23ff      	movs	r3, #255	; 0xff
1a003a4e:	804b      	strh	r3, [r1, #2]
	pI2C->CONCLR = I2C_CON_SI | I2C_CON_STA | I2C_CON_AA;
1a003a50:	232c      	movs	r3, #44	; 0x2c
1a003a52:	6183      	str	r3, [r0, #24]
	pI2C->CONSET = I2C_CON_I2EN | I2C_CON_STA;
1a003a54:	2360      	movs	r3, #96	; 0x60
1a003a56:	6003      	str	r3, [r0, #0]
	/* Clear controller state. */
	Chip_I2CM_ResetControl(pI2C);
	/* Enter to Master Transmitter mode */
	Chip_I2CM_SendStart(pI2C);
}
1a003a58:	4770      	bx	lr

1a003a5a <Chip_I2CM_XferBlocking>:

/* Transmit and Receive data in master mode */
uint32_t Chip_I2CM_XferBlocking(LPC_I2C_T *pI2C, I2CM_XFER_T *xfer)
{
1a003a5a:	b538      	push	{r3, r4, r5, lr}
1a003a5c:	4604      	mov	r4, r0
1a003a5e:	460d      	mov	r5, r1
	uint32_t ret = 0;
	/* start transfer */
	Chip_I2CM_Xfer(pI2C, xfer);
1a003a60:	f7ff fff4 	bl	1a003a4c <Chip_I2CM_Xfer>
	uint32_t ret = 0;
1a003a64:	2000      	movs	r0, #0

	while (ret == 0) {
1a003a66:	e003      	b.n	1a003a70 <Chip_I2CM_XferBlocking+0x16>
		/* wait for status change interrupt */
		while ( Chip_I2CM_StateChanged(pI2C) == 0) {}
		/* call state change handler */
		ret = Chip_I2CM_XferHandler(pI2C, xfer);
1a003a68:	4629      	mov	r1, r5
1a003a6a:	4620      	mov	r0, r4
1a003a6c:	f7ff ff6e 	bl	1a00394c <Chip_I2CM_XferHandler>
	while (ret == 0) {
1a003a70:	b920      	cbnz	r0, 1a003a7c <Chip_I2CM_XferBlocking+0x22>
	return pI2C->CONSET & I2C_CON_SI;
1a003a72:	6823      	ldr	r3, [r4, #0]
		while ( Chip_I2CM_StateChanged(pI2C) == 0) {}
1a003a74:	f013 0f08 	tst.w	r3, #8
1a003a78:	d0fb      	beq.n	1a003a72 <Chip_I2CM_XferBlocking+0x18>
1a003a7a:	e7f5      	b.n	1a003a68 <Chip_I2CM_XferBlocking+0xe>
	}
	return ret;
}
1a003a7c:	bd38      	pop	{r3, r4, r5, pc}

1a003a7e <Chip_GPIO_Init>:
 ****************************************************************************/

/* Initialize GPIO block */
void Chip_GPIO_Init(LPC_GPIO_T *pGPIO)
{
}
1a003a7e:	4770      	bx	lr

1a003a80 <Chip_SetupCoreClock>:
/*****************************************************************************
 * Public functions
 ****************************************************************************/
/* Setup Chip Core clock */
void Chip_SetupCoreClock(CHIP_CGU_CLKIN_T clkin, uint32_t core_freq, bool setbase)
{
1a003a80:	b570      	push	{r4, r5, r6, lr}
1a003a82:	b08a      	sub	sp, #40	; 0x28
1a003a84:	4605      	mov	r5, r0
1a003a86:	460e      	mov	r6, r1
1a003a88:	4614      	mov	r4, r2
	int i;
	volatile uint32_t delay = 50000; // FIXME: original was 500, fix for horrible crystals. @Eric
1a003a8a:	f24c 3350 	movw	r3, #50000	; 0xc350
1a003a8e:	9309      	str	r3, [sp, #36]	; 0x24
	uint32_t direct = 0, pdivide = 0;
	PLL_PARAM_T ppll;

	if (clkin == CLKIN_CRYSTAL) {
1a003a90:	2806      	cmp	r0, #6
1a003a92:	d018      	beq.n	1a003ac6 <Chip_SetupCoreClock+0x46>
		/* Switch main system clocking to crystal */
		Chip_Clock_EnableCrystal();
	}
	Chip_Clock_SetBaseClock(CLK_BASE_MX, clkin, true, false);
1a003a94:	2300      	movs	r3, #0
1a003a96:	2201      	movs	r2, #1
1a003a98:	4629      	mov	r1, r5
1a003a9a:	2004      	movs	r0, #4
1a003a9c:	f7ff fe8e 	bl	1a0037bc <Chip_Clock_SetBaseClock>
 * Saves power if the main PLL is not needed.
 */
__STATIC_INLINE void Chip_Clock_DisableMainPLL(void)
{
	/* power down main PLL */
	LPC_CGU->PLL1_CTRL |= 1;
1a003aa0:	4a4a      	ldr	r2, [pc, #296]	; (1a003bcc <Chip_SetupCoreClock+0x14c>)
1a003aa2:	6c53      	ldr	r3, [r2, #68]	; 0x44
1a003aa4:	f043 0301 	orr.w	r3, r3, #1
1a003aa8:	6453      	str	r3, [r2, #68]	; 0x44
	Chip_Clock_DisableMainPLL(); /* Disable PLL */

	/* Calculate the PLL Parameters */
	ppll.srcin = clkin;
1a003aaa:	f88d 5008 	strb.w	r5, [sp, #8]
	Chip_Clock_CalcMainPLLValue(core_freq, &ppll);
1a003aae:	a901      	add	r1, sp, #4
1a003ab0:	4630      	mov	r0, r6
1a003ab2:	f7ff fdfb 	bl	1a0036ac <Chip_Clock_CalcMainPLLValue>

	if (core_freq > 110000000UL) {
1a003ab6:	4b46      	ldr	r3, [pc, #280]	; (1a003bd0 <Chip_SetupCoreClock+0x150>)
1a003ab8:	429e      	cmp	r6, r3
1a003aba:	d916      	bls.n	1a003aea <Chip_SetupCoreClock+0x6a>
		if (ppll.ctrl & (1 << 6)) {
1a003abc:	9b01      	ldr	r3, [sp, #4]
1a003abe:	f013 0f40 	tst.w	r3, #64	; 0x40
1a003ac2:	d003      	beq.n	1a003acc <Chip_SetupCoreClock+0x4c>
			while(1);		// to run in integer mode above 110 MHz, you need to use IDIV clock to boot strap CPU to that freq
1a003ac4:	e7fe      	b.n	1a003ac4 <Chip_SetupCoreClock+0x44>
		Chip_Clock_EnableCrystal();
1a003ac6:	f7ff fd53 	bl	1a003570 <Chip_Clock_EnableCrystal>
1a003aca:	e7e3      	b.n	1a003a94 <Chip_SetupCoreClock+0x14>
		} else if (ppll.ctrl & (1 << 7)){
1a003acc:	f013 0f80 	tst.w	r3, #128	; 0x80
1a003ad0:	d005      	beq.n	1a003ade <Chip_SetupCoreClock+0x5e>
			direct = 1;
			ppll.ctrl &= ~(1 << 7);
1a003ad2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
1a003ad6:	9301      	str	r3, [sp, #4]
	uint32_t direct = 0, pdivide = 0;
1a003ad8:	2500      	movs	r5, #0
			direct = 1;
1a003ada:	2601      	movs	r6, #1
1a003adc:	e007      	b.n	1a003aee <Chip_SetupCoreClock+0x6e>
		} else {
			pdivide = 1;
			ppll.psel++;
1a003ade:	9b04      	ldr	r3, [sp, #16]
1a003ae0:	3301      	adds	r3, #1
1a003ae2:	9304      	str	r3, [sp, #16]
			pdivide = 1;
1a003ae4:	2501      	movs	r5, #1
	uint32_t direct = 0, pdivide = 0;
1a003ae6:	2600      	movs	r6, #0
1a003ae8:	e001      	b.n	1a003aee <Chip_SetupCoreClock+0x6e>
1a003aea:	2500      	movs	r5, #0
1a003aec:	462e      	mov	r6, r5
 * Make sure the main PLL is enabled.
 */
__STATIC_INLINE void Chip_Clock_SetupMainPLL(const PLL_PARAM_T *ppll)
{
	/* power up main PLL */
    LPC_CGU->PLL1_CTRL = ppll->ctrl | ((uint32_t) ppll->srcin << 24) | (ppll->msel << 16) | (ppll->nsel << 12) | (ppll->psel << 8) | ( 1 << 11);	
1a003aee:	f89d 2008 	ldrb.w	r2, [sp, #8]
1a003af2:	9b01      	ldr	r3, [sp, #4]
1a003af4:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
1a003af8:	9a05      	ldr	r2, [sp, #20]
1a003afa:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
1a003afe:	9a03      	ldr	r2, [sp, #12]
1a003b00:	ea43 3302 	orr.w	r3, r3, r2, lsl #12
1a003b04:	9a04      	ldr	r2, [sp, #16]
1a003b06:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
1a003b0a:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
1a003b0e:	4a2f      	ldr	r2, [pc, #188]	; (1a003bcc <Chip_SetupCoreClock+0x14c>)
1a003b10:	6453      	str	r3, [r2, #68]	; 0x44
 * @note	The main PLL should be locked prior to using it as a clock input for a base clock.
 */
__STATIC_INLINE int Chip_Clock_MainPLLLocked(void)
{
	/* Return true if locked */
	return (LPC_CGU->PLL1_STAT & 1) != 0;
1a003b12:	4b2e      	ldr	r3, [pc, #184]	; (1a003bcc <Chip_SetupCoreClock+0x14c>)
1a003b14:	6c1b      	ldr	r3, [r3, #64]	; 0x40

	/* Setup and start the PLL */
	Chip_Clock_SetupMainPLL(&ppll);

	/* Wait for the PLL to lock */
	while(!Chip_Clock_MainPLLLocked()) {}
1a003b16:	f013 0f01 	tst.w	r3, #1
1a003b1a:	d0fa      	beq.n	1a003b12 <Chip_SetupCoreClock+0x92>

	/* Set core clock base as PLL1 */
	Chip_Clock_SetBaseClock(CLK_BASE_MX, CLKIN_MAINPLL, true, false);
1a003b1c:	2300      	movs	r3, #0
1a003b1e:	2201      	movs	r2, #1
1a003b20:	2109      	movs	r1, #9
1a003b22:	2004      	movs	r0, #4
1a003b24:	f7ff fe4a 	bl	1a0037bc <Chip_Clock_SetBaseClock>

	if (direct) {
1a003b28:	b306      	cbz	r6, 1a003b6c <Chip_SetupCoreClock+0xec>
		delay = 50000; // FIXME: original was 1000, fix for horrible crystals. @Eric
1a003b2a:	f24c 3350 	movw	r3, #50000	; 0xc350
1a003b2e:	9309      	str	r3, [sp, #36]	; 0x24
		while(delay --){} /* Wait for approx 50 uSec -- for power supply to stabilize*/
1a003b30:	9b09      	ldr	r3, [sp, #36]	; 0x24
1a003b32:	1e5a      	subs	r2, r3, #1
1a003b34:	9209      	str	r2, [sp, #36]	; 0x24
1a003b36:	2b00      	cmp	r3, #0
1a003b38:	d1fa      	bne.n	1a003b30 <Chip_SetupCoreClock+0xb0>
		ppll.ctrl |= 1 << 7;
1a003b3a:	9b01      	ldr	r3, [sp, #4]
1a003b3c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
1a003b40:	9301      	str	r3, [sp, #4]
    LPC_CGU->PLL1_CTRL = ppll->ctrl | ((uint32_t) ppll->srcin << 24) | (ppll->msel << 16) | (ppll->nsel << 12) | (ppll->psel << 8) | ( 1 << 11);	
1a003b42:	f89d 2008 	ldrb.w	r2, [sp, #8]
1a003b46:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
1a003b4a:	9a05      	ldr	r2, [sp, #20]
1a003b4c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
1a003b50:	9a03      	ldr	r2, [sp, #12]
1a003b52:	ea43 3302 	orr.w	r3, r3, r2, lsl #12
1a003b56:	9a04      	ldr	r2, [sp, #16]
1a003b58:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
1a003b5c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
1a003b60:	4a1a      	ldr	r2, [pc, #104]	; (1a003bcc <Chip_SetupCoreClock+0x14c>)
1a003b62:	6453      	str	r3, [r2, #68]	; 0x44
		while(delay --){} /* Wait for approx 50 uSec -- for power supply to stabilize */
		ppll.psel--;
		Chip_Clock_SetupMainPLL(&ppll); /* Set PDIV to operate at full frequency */
	}

	if (setbase) {
1a003b64:	2c00      	cmp	r4, #0
1a003b66:	d12e      	bne.n	1a003bc6 <Chip_SetupCoreClock+0x146>
		for (i = 0; i < (sizeof(InitClkStates) / sizeof(InitClkStates[0])); i++) {
			Chip_Clock_SetBaseClock(InitClkStates[i].clk, InitClkStates[i].clkin,
									InitClkStates[i].autoblock_enab, InitClkStates[i].powerdn);
		}
	}
}
1a003b68:	b00a      	add	sp, #40	; 0x28
1a003b6a:	bd70      	pop	{r4, r5, r6, pc}
	} else if (pdivide) {
1a003b6c:	2d00      	cmp	r5, #0
1a003b6e:	d0f9      	beq.n	1a003b64 <Chip_SetupCoreClock+0xe4>
		delay = 50000; // FIXME: original was 1000, fix for horrible crystals. @Eric
1a003b70:	f24c 3350 	movw	r3, #50000	; 0xc350
1a003b74:	9309      	str	r3, [sp, #36]	; 0x24
		while(delay --){} /* Wait for approx 50 uSec -- for power supply to stabilize */
1a003b76:	9b09      	ldr	r3, [sp, #36]	; 0x24
1a003b78:	1e5a      	subs	r2, r3, #1
1a003b7a:	9209      	str	r2, [sp, #36]	; 0x24
1a003b7c:	2b00      	cmp	r3, #0
1a003b7e:	d1fa      	bne.n	1a003b76 <Chip_SetupCoreClock+0xf6>
		ppll.psel--;
1a003b80:	9b04      	ldr	r3, [sp, #16]
1a003b82:	1e5a      	subs	r2, r3, #1
1a003b84:	9204      	str	r2, [sp, #16]
1a003b86:	f89d 1008 	ldrb.w	r1, [sp, #8]
1a003b8a:	9b01      	ldr	r3, [sp, #4]
1a003b8c:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
1a003b90:	9905      	ldr	r1, [sp, #20]
1a003b92:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
1a003b96:	9903      	ldr	r1, [sp, #12]
1a003b98:	ea43 3301 	orr.w	r3, r3, r1, lsl #12
1a003b9c:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
1a003ba0:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
1a003ba4:	4a09      	ldr	r2, [pc, #36]	; (1a003bcc <Chip_SetupCoreClock+0x14c>)
1a003ba6:	6453      	str	r3, [r2, #68]	; 0x44
1a003ba8:	e7dc      	b.n	1a003b64 <Chip_SetupCoreClock+0xe4>
			Chip_Clock_SetBaseClock(InitClkStates[i].clk, InitClkStates[i].clkin,
1a003baa:	480a      	ldr	r0, [pc, #40]	; (1a003bd4 <Chip_SetupCoreClock+0x154>)
1a003bac:	eb00 0184 	add.w	r1, r0, r4, lsl #2
1a003bb0:	78cb      	ldrb	r3, [r1, #3]
1a003bb2:	788a      	ldrb	r2, [r1, #2]
1a003bb4:	7849      	ldrb	r1, [r1, #1]
1a003bb6:	f810 0024 	ldrb.w	r0, [r0, r4, lsl #2]
1a003bba:	f7ff fdff 	bl	1a0037bc <Chip_Clock_SetBaseClock>
		for (i = 0; i < (sizeof(InitClkStates) / sizeof(InitClkStates[0])); i++) {
1a003bbe:	3401      	adds	r4, #1
1a003bc0:	2c11      	cmp	r4, #17
1a003bc2:	d9f2      	bls.n	1a003baa <Chip_SetupCoreClock+0x12a>
1a003bc4:	e7d0      	b.n	1a003b68 <Chip_SetupCoreClock+0xe8>
1a003bc6:	2400      	movs	r4, #0
1a003bc8:	e7fa      	b.n	1a003bc0 <Chip_SetupCoreClock+0x140>
1a003bca:	bf00      	nop
1a003bcc:	40050000 	.word	0x40050000
1a003bd0:	068e7780 	.word	0x068e7780
1a003bd4:	1a00b15c 	.word	0x1a00b15c

1a003bd8 <Chip_SSP_GetClockIndex>:
/* Returns clock index for the register interface */
STATIC CHIP_CCU_CLK_T Chip_SSP_GetClockIndex(LPC_SSP_T *pSSP)
{
	CHIP_CCU_CLK_T clkSSP;

	if (pSSP == LPC_SSP1) {
1a003bd8:	4b03      	ldr	r3, [pc, #12]	; (1a003be8 <Chip_SSP_GetClockIndex+0x10>)
1a003bda:	4298      	cmp	r0, r3
1a003bdc:	d001      	beq.n	1a003be2 <Chip_SSP_GetClockIndex+0xa>
		clkSSP = CLK_MX_SSP1;
	}
	else {
		clkSSP = CLK_MX_SSP0;
1a003bde:	2083      	movs	r0, #131	; 0x83
	}

	return clkSSP;
}
1a003be0:	4770      	bx	lr
		clkSSP = CLK_MX_SSP1;
1a003be2:	20a5      	movs	r0, #165	; 0xa5
1a003be4:	4770      	bx	lr
1a003be6:	bf00      	nop
1a003be8:	400c5000 	.word	0x400c5000

1a003bec <Chip_SSP_GetPeriphClockIndex>:
/* Returns clock index for the peripheral block */
STATIC CHIP_CCU_CLK_T Chip_SSP_GetPeriphClockIndex(LPC_SSP_T *pSSP)
{
	CHIP_CCU_CLK_T clkSSP;

	if (pSSP == LPC_SSP1) {
1a003bec:	4b04      	ldr	r3, [pc, #16]	; (1a003c00 <Chip_SSP_GetPeriphClockIndex+0x14>)
1a003bee:	4298      	cmp	r0, r3
1a003bf0:	d002      	beq.n	1a003bf8 <Chip_SSP_GetPeriphClockIndex+0xc>
		clkSSP = CLK_APB2_SSP1;
	}
	else {
		clkSSP = CLK_APB0_SSP0;
1a003bf2:	f240 2002 	movw	r0, #514	; 0x202
	}

	return clkSSP;
}
1a003bf6:	4770      	bx	lr
		clkSSP = CLK_APB2_SSP1;
1a003bf8:	f44f 70f1 	mov.w	r0, #482	; 0x1e2
1a003bfc:	4770      	bx	lr
1a003bfe:	bf00      	nop
1a003c00:	400c5000 	.word	0x400c5000

1a003c04 <Chip_SSP_SetClockRate>:

/*Set up output clocks per bit for SSP bus*/
void Chip_SSP_SetClockRate(LPC_SSP_T *pSSP, uint32_t clk_rate, uint32_t prescale)
{
	uint32_t temp;
	temp = pSSP->CR0 & (~(SSP_CR0_SCR(0xFF)));
1a003c04:	6803      	ldr	r3, [r0, #0]
1a003c06:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
	pSSP->CR0 = temp | (SSP_CR0_SCR(clk_rate));
1a003c0a:	0209      	lsls	r1, r1, #8
1a003c0c:	b289      	uxth	r1, r1
1a003c0e:	4319      	orrs	r1, r3
1a003c10:	6001      	str	r1, [r0, #0]
	pSSP->CPSR = prescale;
1a003c12:	6102      	str	r2, [r0, #16]
}
1a003c14:	4770      	bx	lr

1a003c16 <Chip_SSP_SetBitRate>:
	}
}

/* Set the clock frequency for SSP interface */
void Chip_SSP_SetBitRate(LPC_SSP_T *pSSP, uint32_t bitRate)
{
1a003c16:	b570      	push	{r4, r5, r6, lr}
1a003c18:	4606      	mov	r6, r0
1a003c1a:	460d      	mov	r5, r1
	uint32_t ssp_clk, cr0_div, cmp_clk, prescale;

	ssp_clk = Chip_Clock_GetRate(Chip_SSP_GetPeriphClockIndex(pSSP));
1a003c1c:	f7ff ffe6 	bl	1a003bec <Chip_SSP_GetPeriphClockIndex>
1a003c20:	f7ff fe64 	bl	1a0038ec <Chip_Clock_GetRate>

	cr0_div = 0;
	cmp_clk = 0xFFFFFFFF;
	prescale = 2;
1a003c24:	2202      	movs	r2, #2
	cmp_clk = 0xFFFFFFFF;
1a003c26:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
	cr0_div = 0;
1a003c2a:	2100      	movs	r1, #0

	while (cmp_clk > bitRate) {
1a003c2c:	e000      	b.n	1a003c30 <Chip_SSP_SetBitRate+0x1a>
		cmp_clk = ssp_clk / ((cr0_div + 1) * prescale);
		if (cmp_clk > bitRate) {
			cr0_div++;
1a003c2e:	4621      	mov	r1, r4
	while (cmp_clk > bitRate) {
1a003c30:	42ab      	cmp	r3, r5
1a003c32:	d90b      	bls.n	1a003c4c <Chip_SSP_SetBitRate+0x36>
		cmp_clk = ssp_clk / ((cr0_div + 1) * prescale);
1a003c34:	1c4c      	adds	r4, r1, #1
1a003c36:	fb02 f304 	mul.w	r3, r2, r4
1a003c3a:	fbb0 f3f3 	udiv	r3, r0, r3
		if (cmp_clk > bitRate) {
1a003c3e:	429d      	cmp	r5, r3
1a003c40:	d2f6      	bcs.n	1a003c30 <Chip_SSP_SetBitRate+0x1a>
			if (cr0_div > 0xFF) {
1a003c42:	2cff      	cmp	r4, #255	; 0xff
1a003c44:	d9f3      	bls.n	1a003c2e <Chip_SSP_SetBitRate+0x18>
				cr0_div = 0;
				prescale += 2;
1a003c46:	3202      	adds	r2, #2
				cr0_div = 0;
1a003c48:	2100      	movs	r1, #0
1a003c4a:	e7f1      	b.n	1a003c30 <Chip_SSP_SetBitRate+0x1a>
			}
		}
	}

	Chip_SSP_SetClockRate(pSSP, cr0_div, prescale);
1a003c4c:	4630      	mov	r0, r6
1a003c4e:	f7ff ffd9 	bl	1a003c04 <Chip_SSP_SetClockRate>
}
1a003c52:	bd70      	pop	{r4, r5, r6, pc}

1a003c54 <Chip_SSP_Init>:

/* Initialize the SSP */
void Chip_SSP_Init(LPC_SSP_T *pSSP)
{
1a003c54:	b510      	push	{r4, lr}
1a003c56:	4604      	mov	r4, r0
	Chip_Clock_Enable(Chip_SSP_GetClockIndex(pSSP));
1a003c58:	f7ff ffbe 	bl	1a003bd8 <Chip_SSP_GetClockIndex>
1a003c5c:	f7ff fe12 	bl	1a003884 <Chip_Clock_Enable>
	Chip_Clock_Enable(Chip_SSP_GetPeriphClockIndex(pSSP));
1a003c60:	4620      	mov	r0, r4
1a003c62:	f7ff ffc3 	bl	1a003bec <Chip_SSP_GetPeriphClockIndex>
1a003c66:	f7ff fe0d 	bl	1a003884 <Chip_Clock_Enable>
	pSSP->CR1 = (pSSP->CR1 & ~(1 << 2)) | mode;
1a003c6a:	6863      	ldr	r3, [r4, #4]
1a003c6c:	f023 0304 	bic.w	r3, r3, #4
1a003c70:	6063      	str	r3, [r4, #4]
	pSSP->CR0 = (pSSP->CR0 & ~0xFF) | bits | frameFormat | clockMode;
1a003c72:	6823      	ldr	r3, [r4, #0]
1a003c74:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
1a003c78:	f043 0307 	orr.w	r3, r3, #7
1a003c7c:	6023      	str	r3, [r4, #0]

	Chip_SSP_Set_Mode(pSSP, SSP_MODE_MASTER);
	Chip_SSP_SetFormat(pSSP, SSP_BITS_8, SSP_FRAMEFORMAT_SPI, SSP_CLOCK_CPHA0_CPOL0);
	Chip_SSP_SetBitRate(pSSP, 100000);
1a003c7e:	4902      	ldr	r1, [pc, #8]	; (1a003c88 <Chip_SSP_Init+0x34>)
1a003c80:	4620      	mov	r0, r4
1a003c82:	f7ff ffc8 	bl	1a003c16 <Chip_SSP_SetBitRate>
}
1a003c86:	bd10      	pop	{r4, pc}
1a003c88:	000186a0 	.word	0x000186a0

1a003c8c <SystemInit>:
 */

#include <board.h>

void SystemInit(void)
{
1a003c8c:	b508      	push	{r3, lr}
   extern void *g_pfnVectors;
   SCB->VTOR = (unsigned int) &g_pfnVectors;
1a003c8e:	4a0b      	ldr	r2, [pc, #44]	; (1a003cbc <SystemInit+0x30>)
1a003c90:	4b0b      	ldr	r3, [pc, #44]	; (1a003cc0 <SystemInit+0x34>)
1a003c92:	609a      	str	r2, [r3, #8]
 */
__STATIC_INLINE uint32_t SCB_GetFPUType(void)
{
  uint32_t mvfr0;

  mvfr0 = FPU->MVFR0;
1a003c94:	f503 730c 	add.w	r3, r3, #560	; 0x230
1a003c98:	691b      	ldr	r3, [r3, #16]
  if      ((mvfr0 & (FPU_MVFR0_Single_precision_Msk | FPU_MVFR0_Double_precision_Msk)) == 0x020U)
1a003c9a:	f403 637f 	and.w	r3, r3, #4080	; 0xff0
1a003c9e:	2b20      	cmp	r3, #32
1a003ca0:	d004      	beq.n	1a003cac <SystemInit+0x20>

   if (SCB_GetFPUType() > 0)
      SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */

   /* Board specific SystemInit */
   Board_SystemInit();
1a003ca2:	f7ff f889 	bl	1a002db8 <Board_SystemInit>
   Board_Init();
1a003ca6:	f7ff f80f 	bl	1a002cc8 <Board_Init>
}
1a003caa:	bd08      	pop	{r3, pc}
      SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
1a003cac:	4a04      	ldr	r2, [pc, #16]	; (1a003cc0 <SystemInit+0x34>)
1a003cae:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
1a003cb2:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
1a003cb6:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
1a003cba:	e7f2      	b.n	1a003ca2 <SystemInit+0x16>
1a003cbc:	1a000000 	.word	0x1a000000
1a003cc0:	e000ed00 	.word	0xe000ed00

1a003cc4 <cyclesCounterInit>:
 * @return TRUE si esta OK, FALSE en caso de error.
 */
bool_t cyclesCounterInit( uint32_t clockSpeed )
{
   //Asigna  a la variable local ClockSpeed el valor recibido como argumento.
   ClockSpeed = clockSpeed;
1a003cc4:	4b04      	ldr	r3, [pc, #16]	; (1a003cd8 <cyclesCounterInit+0x14>)
1a003cc6:	6018      	str	r0, [r3, #0]
   //Iniciar el contador de ciclos de clock.
   DWT_CTRL  |= 1; // *DWT_CTRL  |= 1;
1a003cc8:	4a04      	ldr	r2, [pc, #16]	; (1a003cdc <cyclesCounterInit+0x18>)
1a003cca:	6813      	ldr	r3, [r2, #0]
1a003ccc:	f043 0301 	orr.w	r3, r3, #1
1a003cd0:	6013      	str	r3, [r2, #0]
   return TRUE;
}
1a003cd2:	2001      	movs	r0, #1
1a003cd4:	4770      	bx	lr
1a003cd6:	bf00      	nop
1a003cd8:	10000040 	.word	0x10000040
1a003cdc:	e0001000 	.word	0xe0001000

1a003ce0 <uartRxReady>:
//-------------------------------------------------------------

// Return TRUE if have unread data in RX FIFO
bool_t uartRxReady( uartMap_t uart )
{
   return Chip_UART_ReadLineStatus( lpcUarts[uart].uartAddr ) & UART_LSR_RDR;
1a003ce0:	eb00 0040 	add.w	r0, r0, r0, lsl #1
1a003ce4:	0083      	lsls	r3, r0, #2
1a003ce6:	4a03      	ldr	r2, [pc, #12]	; (1a003cf4 <uartRxReady+0x14>)
1a003ce8:	58d3      	ldr	r3, [r2, r3]
	return pUART->LSR;
1a003cea:	6958      	ldr	r0, [r3, #20]
}
1a003cec:	f000 0001 	and.w	r0, r0, #1
1a003cf0:	4770      	bx	lr
1a003cf2:	bf00      	nop
1a003cf4:	1a00b1a4 	.word	0x1a00b1a4

1a003cf8 <uartRxRead>:
   return Chip_UART_ReadLineStatus( lpcUarts[uart].uartAddr ) & UART_LSR_THRE;
}
// Read from RX FIFO
uint8_t uartRxRead( uartMap_t uart )
{
   return Chip_UART_ReadByte( lpcUarts[uart].uartAddr );
1a003cf8:	eb00 0040 	add.w	r0, r0, r0, lsl #1
1a003cfc:	0083      	lsls	r3, r0, #2
1a003cfe:	4a02      	ldr	r2, [pc, #8]	; (1a003d08 <uartRxRead+0x10>)
1a003d00:	58d3      	ldr	r3, [r2, r3]
	return (uint8_t) (pUART->RBR & UART_RBR_MASKBIT);
1a003d02:	6818      	ldr	r0, [r3, #0]
}
1a003d04:	b2c0      	uxtb	r0, r0
1a003d06:	4770      	bx	lr
1a003d08:	1a00b1a4 	.word	0x1a00b1a4

1a003d0c <uartInit>:

//-------------------------------------------------------------

// UART Initialization
void uartInit( uartMap_t uart, uint32_t baudRate )
{
1a003d0c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
1a003d10:	4680      	mov	r8, r0
1a003d12:	4689      	mov	r9, r1
   // Initialize UART
   Chip_UART_Init( lpcUarts[uart].uartAddr );
1a003d14:	4c19      	ldr	r4, [pc, #100]	; (1a003d7c <uartInit+0x70>)
1a003d16:	0045      	lsls	r5, r0, #1
1a003d18:	182a      	adds	r2, r5, r0
1a003d1a:	0093      	lsls	r3, r2, #2
1a003d1c:	18e6      	adds	r6, r4, r3
1a003d1e:	58e7      	ldr	r7, [r4, r3]
1a003d20:	4638      	mov	r0, r7
1a003d22:	f7ff f98b 	bl	1a00303c <Chip_UART_Init>
   // Set Baud rate
   Chip_UART_SetBaud( lpcUarts[uart].uartAddr, baudRate );
1a003d26:	4649      	mov	r1, r9
1a003d28:	4638      	mov	r0, r7
1a003d2a:	f7ff f9b1 	bl	1a003090 <Chip_UART_SetBaud>
	pUART->FCR = fcr;
1a003d2e:	2307      	movs	r3, #7
1a003d30:	60bb      	str	r3, [r7, #8]
	return (uint8_t) (pUART->RBR & UART_RBR_MASKBIT);
1a003d32:	683b      	ldr	r3, [r7, #0]
    pUART->TER2 = UART_TER2_TXEN;
1a003d34:	2301      	movs	r3, #1
1a003d36:	65fb      	str	r3, [r7, #92]	; 0x5c
   
   // Enable UART Transmission
   Chip_UART_TXEnable( lpcUarts[uart].uartAddr );
   
   // Configure SCU UARTn_TXD pin
   Chip_SCU_PinMux( lpcUarts[uart].txPin.lpcScuPort,
1a003d38:	7930      	ldrb	r0, [r6, #4]
1a003d3a:	7973      	ldrb	r3, [r6, #5]
1a003d3c:	79b2      	ldrb	r2, [r6, #6]
	LPC_SCU->SFSP[port][pin] = modefunc;
1a003d3e:	f042 0218 	orr.w	r2, r2, #24
1a003d42:	490f      	ldr	r1, [pc, #60]	; (1a003d80 <uartInit+0x74>)
1a003d44:	eb03 1340 	add.w	r3, r3, r0, lsl #5
1a003d48:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
                    lpcUarts[uart].txPin.lpcScuPin,
                    MD_PDN,
                    lpcUarts[uart].txPin.lpcScuFunc );
                    
   // Configure SCU UARTn_RXD pin
   Chip_SCU_PinMux( lpcUarts[uart].rxPin.lpcScuPort,
1a003d4c:	79f0      	ldrb	r0, [r6, #7]
1a003d4e:	7a33      	ldrb	r3, [r6, #8]
1a003d50:	7a72      	ldrb	r2, [r6, #9]
1a003d52:	f042 02d0 	orr.w	r2, r2, #208	; 0xd0
1a003d56:	eb03 1340 	add.w	r3, r3, r0, lsl #5
1a003d5a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
                    lpcUarts[uart].rxPin.lpcScuPin,
                    MD_PLN | MD_EZI | MD_ZI,
                    lpcUarts[uart].rxPin.lpcScuFunc );

   // Specific configurations for RS485
   if( uart == UART_485 ) {
1a003d5e:	f1b8 0f01 	cmp.w	r8, #1
1a003d62:	d001      	beq.n	1a003d68 <uartInit+0x5c>
      Chip_SCU_PinMux( lpcUart485DirPin.lpcScuPort,
                       lpcUart485DirPin.lpcScuPin,
                       MD_PDN,
                       lpcUart485DirPin.lpcScuFunc );
   }
}
1a003d64:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 * @note	Use an Or'ed value of UART_RS485CTRL_* definitions with this
 *			call to set specific options.
 */
STATIC INLINE void Chip_UART_SetRS485Flags(LPC_USART_T *pUART, uint32_t ctrl)
{
	pUART->RS485CTRL |= ctrl;
1a003d68:	4a06      	ldr	r2, [pc, #24]	; (1a003d84 <uartInit+0x78>)
1a003d6a:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
1a003d6c:	f043 0330 	orr.w	r3, r3, #48	; 0x30
1a003d70:	64d3      	str	r3, [r2, #76]	; 0x4c
1a003d72:	221a      	movs	r2, #26
1a003d74:	f8c1 2308 	str.w	r2, [r1, #776]	; 0x308
1a003d78:	e7f4      	b.n	1a003d64 <uartInit+0x58>
1a003d7a:	bf00      	nop
1a003d7c:	1a00b1a4 	.word	0x1a00b1a4
1a003d80:	40086000 	.word	0x40086000
1a003d84:	40081000 	.word	0x40081000

1a003d88 <uartReadByte>:
   }
}

// Read 1 byte from RX FIFO, check first if exist aviable data
bool_t uartReadByte( uartMap_t uart, uint8_t* receivedByte )
{
1a003d88:	b538      	push	{r3, r4, r5, lr}
1a003d8a:	4605      	mov	r5, r0
1a003d8c:	460c      	mov	r4, r1
   bool_t retVal = TRUE;
   if ( uartRxReady(uart) ) {
1a003d8e:	f7ff ffa7 	bl	1a003ce0 <uartRxReady>
1a003d92:	4603      	mov	r3, r0
1a003d94:	b908      	cbnz	r0, 1a003d9a <uartReadByte+0x12>
      *receivedByte = uartRxRead(uart);
   } else {
      retVal = FALSE;
   }
   return retVal;
}
1a003d96:	4618      	mov	r0, r3
1a003d98:	bd38      	pop	{r3, r4, r5, pc}
      *receivedByte = uartRxRead(uart);
1a003d9a:	4628      	mov	r0, r5
1a003d9c:	f7ff ffac 	bl	1a003cf8 <uartRxRead>
1a003da0:	7020      	strb	r0, [r4, #0]
   bool_t retVal = TRUE;
1a003da2:	2301      	movs	r3, #1
1a003da4:	e7f7      	b.n	1a003d96 <uartReadByte+0xe>

1a003da6 <tickRead>:
}
*/

// Read Tick Counter
tick_t tickRead( void )
{
1a003da6:	b508      	push	{r3, lr}
   #ifdef USE_FREERTOS
      return xTaskGetTickCount();
1a003da8:	f7fd ff06 	bl	1a001bb8 <xTaskGetTickCount>
   #else
      return tickCounter;
   #endif
}
1a003dac:	2100      	movs	r1, #0
1a003dae:	bd08      	pop	{r3, pc}

1a003db0 <i2cHardwareInit>:
   return retVal;
}
#else

static bool_t i2cHardwareInit( i2cMap_t i2cNumber, uint32_t clockRateHz )
{
1a003db0:	b538      	push	{r3, r4, r5, lr}
1a003db2:	4604      	mov	r4, r0
1a003db4:	460d      	mov	r5, r1
	LPC_SCU->SFSI2C0 = I2C0Mode;
1a003db6:	4b08      	ldr	r3, [pc, #32]	; (1a003dd8 <i2cHardwareInit+0x28>)
1a003db8:	f640 0208 	movw	r2, #2056	; 0x808
1a003dbc:	f8c3 2c84 	str.w	r2, [r3, #3204]	; 0xc84

   // Configuracion de las lineas de SDA y SCL de la placa
   Chip_SCU_I2C0PinConfig( I2C0_STANDARD_FAST_MODE ); // Equal for CIAA-NXP and EDU-CIAA-NXP on I2C0

   // Inicializacion del periferico
   Chip_I2C_Init( i2cNumber );
1a003dc0:	f7ff f8a0 	bl	1a002f04 <Chip_I2C_Init>
   // Seleccion de velocidad del bus
   Chip_I2C_SetClockRate( i2cNumber, clockRateHz );
1a003dc4:	4629      	mov	r1, r5
1a003dc6:	4620      	mov	r0, r4
1a003dc8:	f7ff f8ae 	bl	1a002f28 <Chip_I2C_SetClockRate>
   // Configuracion para que los eventos se resuelvan por polliong
   // (la otra opcion es por interrupcion)
   Chip_I2C_SetMasterEventHandler( i2cNumber, Chip_I2C_EventHandlerPolling );
1a003dcc:	4903      	ldr	r1, [pc, #12]	; (1a003ddc <i2cHardwareInit+0x2c>)
1a003dce:	4620      	mov	r0, r4
1a003dd0:	f7ff f8c6 	bl	1a002f60 <Chip_I2C_SetMasterEventHandler>

   return TRUE;
}
1a003dd4:	2001      	movs	r0, #1
1a003dd6:	bd38      	pop	{r3, r4, r5, pc}
1a003dd8:	40086000 	.word	0x40086000
1a003ddc:	1a002fd9 	.word	0x1a002fd9

1a003de0 <i2cHardwareRead>:
                               uint16_t dataToReadBufferSize,
                               bool_t   sendWriteStop,
                               uint8_t* receiveDataBuffer,
                               uint16_t receiveDataBufferSize,
                               bool_t   sendReadStop )
{
1a003de0:	b500      	push	{lr}
1a003de2:	b085      	sub	sp, #20

   //TODO: ver i2cData.options si se puede poner la condicion opcional de stop

   I2CM_XFER_T i2cData;

   i2cData.slaveAddr = i2cSlaveAddress;
1a003de4:	f88d 1000 	strb.w	r1, [sp]
   i2cData.options   = 0;
1a003de8:	2100      	movs	r1, #0
1a003dea:	f88d 1001 	strb.w	r1, [sp, #1]
   i2cData.status    = 0;
1a003dee:	f8ad 1002 	strh.w	r1, [sp, #2]
   i2cData.txBuff    = dataToReadBuffer;
1a003df2:	9202      	str	r2, [sp, #8]
   i2cData.txSz      = dataToReadBufferSize;
1a003df4:	f8ad 3004 	strh.w	r3, [sp, #4]
   i2cData.rxBuff    = receiveDataBuffer;
1a003df8:	9b07      	ldr	r3, [sp, #28]
1a003dfa:	9303      	str	r3, [sp, #12]
   i2cData.rxSz      = receiveDataBufferSize;
1a003dfc:	f8bd 3020 	ldrh.w	r3, [sp, #32]
1a003e00:	f8ad 3006 	strh.w	r3, [sp, #6]

   if( Chip_I2CM_XferBlocking( LPC_I2C0, &i2cData ) == 0 ) {
1a003e04:	4669      	mov	r1, sp
1a003e06:	4805      	ldr	r0, [pc, #20]	; (1a003e1c <i2cHardwareRead+0x3c>)
1a003e08:	f7ff fe27 	bl	1a003a5a <Chip_I2CM_XferBlocking>
1a003e0c:	b118      	cbz	r0, 1a003e16 <i2cHardwareRead+0x36>
      return FALSE;
   }

   return TRUE;
1a003e0e:	2001      	movs	r0, #1
}
1a003e10:	b005      	add	sp, #20
1a003e12:	f85d fb04 	ldr.w	pc, [sp], #4
      return FALSE;
1a003e16:	2000      	movs	r0, #0
1a003e18:	e7fa      	b.n	1a003e10 <i2cHardwareRead+0x30>
1a003e1a:	bf00      	nop
1a003e1c:	400a1000 	.word	0x400a1000

1a003e20 <i2cHardwareWrite>:

   //TODO: ver i2cData.options si se puede poner la condicion opcional de stop

   I2CM_XFER_T i2cData;

   if( i2cNumber != I2C0 ) {
1a003e20:	b108      	cbz	r0, 1a003e26 <i2cHardwareWrite+0x6>
      return FALSE;
1a003e22:	2000      	movs	r0, #0
   }

   *** END - TEST I2C Response *** */

   return TRUE;
}
1a003e24:	4770      	bx	lr
{
1a003e26:	b500      	push	{lr}
1a003e28:	b085      	sub	sp, #20
   i2cData.slaveAddr = i2cSlaveAddress;
1a003e2a:	f88d 1000 	strb.w	r1, [sp]
   i2cData.options   = 0;
1a003e2e:	2100      	movs	r1, #0
1a003e30:	f88d 1001 	strb.w	r1, [sp, #1]
   i2cData.status    = 0;
1a003e34:	f8ad 1002 	strh.w	r1, [sp, #2]
   i2cData.txBuff    = transmitDataBuffer;
1a003e38:	9202      	str	r2, [sp, #8]
   i2cData.txSz      = transmitDataBufferSize;
1a003e3a:	f8ad 3004 	strh.w	r3, [sp, #4]
   i2cData.rxBuff    = 0;
1a003e3e:	9103      	str	r1, [sp, #12]
   i2cData.rxSz      = 0;
1a003e40:	f8ad 1006 	strh.w	r1, [sp, #6]
   if( Chip_I2CM_XferBlocking( LPC_I2C0, &i2cData ) == 0 ) {
1a003e44:	4669      	mov	r1, sp
1a003e46:	4805      	ldr	r0, [pc, #20]	; (1a003e5c <i2cHardwareWrite+0x3c>)
1a003e48:	f7ff fe07 	bl	1a003a5a <Chip_I2CM_XferBlocking>
1a003e4c:	b118      	cbz	r0, 1a003e56 <i2cHardwareWrite+0x36>
   return TRUE;
1a003e4e:	2001      	movs	r0, #1
}
1a003e50:	b005      	add	sp, #20
1a003e52:	f85d fb04 	ldr.w	pc, [sp], #4
      return FALSE;
1a003e56:	2000      	movs	r0, #0
1a003e58:	e7fa      	b.n	1a003e50 <i2cHardwareWrite+0x30>
1a003e5a:	bf00      	nop
1a003e5c:	400a1000 	.word	0x400a1000

1a003e60 <i2cInit>:
bool_t i2cInit( i2cMap_t i2cNumber, uint32_t clockRateHz )
{

   bool_t retVal = FALSE;

   if( i2cNumber != I2C0 ) {
1a003e60:	b108      	cbz	r0, 1a003e66 <i2cInit+0x6>
      return FALSE;
1a003e62:	2000      	movs	r0, #0
#else
   retVal = i2cHardwareInit( i2cNumber, clockRateHz );
#endif

   return retVal;
}
1a003e64:	4770      	bx	lr
{
1a003e66:	b508      	push	{r3, lr}
   retVal = i2cHardwareInit( i2cNumber, clockRateHz );
1a003e68:	f7ff ffa2 	bl	1a003db0 <i2cHardwareInit>
}
1a003e6c:	bd08      	pop	{r3, pc}

1a003e6e <i2cRead>:
                bool_t   sendReadStop )
{

   bool_t retVal = FALSE;

   if( i2cNumber != I2C0 ) {
1a003e6e:	b108      	cbz	r0, 1a003e74 <i2cRead+0x6>
      return FALSE;
1a003e70:	2000      	movs	r0, #0
                             receiveDataBufferSize,
                             sendReadStop );
#endif

   return retVal;
}
1a003e72:	4770      	bx	lr
{
1a003e74:	b510      	push	{r4, lr}
1a003e76:	b084      	sub	sp, #16
   retVal = i2cHardwareRead( i2cNumber,
1a003e78:	f89d 4024 	ldrb.w	r4, [sp, #36]	; 0x24
1a003e7c:	9403      	str	r4, [sp, #12]
1a003e7e:	f8bd 4020 	ldrh.w	r4, [sp, #32]
1a003e82:	9402      	str	r4, [sp, #8]
1a003e84:	9c07      	ldr	r4, [sp, #28]
1a003e86:	9401      	str	r4, [sp, #4]
1a003e88:	f89d 4018 	ldrb.w	r4, [sp, #24]
1a003e8c:	9400      	str	r4, [sp, #0]
1a003e8e:	f7ff ffa7 	bl	1a003de0 <i2cHardwareRead>
}
1a003e92:	b004      	add	sp, #16
1a003e94:	bd10      	pop	{r4, pc}

1a003e96 <i2cWrite>:
                 bool_t   sendWriteStop )
{

   bool_t retVal = FALSE;

   if( i2cNumber != I2C0 ) {
1a003e96:	b108      	cbz	r0, 1a003e9c <i2cWrite+0x6>
      return FALSE;
1a003e98:	2000      	movs	r0, #0
                              transmitDataBufferSize,
                              sendWriteStop );
#endif

   return retVal;
}
1a003e9a:	4770      	bx	lr
{
1a003e9c:	b510      	push	{r4, lr}
1a003e9e:	b082      	sub	sp, #8
   retVal = i2cHardwareWrite( i2cNumber,
1a003ea0:	f89d 4010 	ldrb.w	r4, [sp, #16]
1a003ea4:	9400      	str	r4, [sp, #0]
1a003ea6:	f7ff ffbb 	bl	1a003e20 <i2cHardwareWrite>
}
1a003eaa:	b002      	add	sp, #8
1a003eac:	bd10      	pop	{r4, pc}
1a003eae:	Address 0x000000001a003eae is out of bounds.


1a003eb0 <adcInit>:
 * @brief:  enable/disable the ADC and DAC peripheral
 * @param:  ADC_ENABLE, ADC_DISABLE
 * @return: none
*/
void adcInit( adcInit_t config )
{
1a003eb0:	b530      	push	{r4, r5, lr}
1a003eb2:	b083      	sub	sp, #12
   T_FIL3  ---- 7   ADC0_0 (ANALOG_SEL)
   T_COL1  ---- 132 ADC0_4 (ANALOG_SEL)
   ENET_MDC --- 140 ADC1_6 (ANALOG_SEL)
   */
   
   switch(config) {
1a003eb4:	b118      	cbz	r0, 1a003ebe <adcInit+0xe>
1a003eb6:	2801      	cmp	r0, #1
1a003eb8:	d04b      	beq.n	1a003f52 <adcInit+0xa2>
         /* Disable ADC peripheral */
         Chip_ADC_DeInit( LPC_ADC0 );
         break;
      }

}
1a003eba:	b003      	add	sp, #12
1a003ebc:	bd30      	pop	{r4, r5, pc}
         ADC_CLOCK_SETUP_T ADCSetup = {
1a003ebe:	4b27      	ldr	r3, [pc, #156]	; (1a003f5c <adcInit+0xac>)
1a003ec0:	9300      	str	r3, [sp, #0]
1a003ec2:	2500      	movs	r5, #0
1a003ec4:	f88d 5004 	strb.w	r5, [sp, #4]
1a003ec8:	f88d 5005 	strb.w	r5, [sp, #5]
         Chip_ADC_Init( LPC_ADC0, &ADCSetup );
1a003ecc:	4c24      	ldr	r4, [pc, #144]	; (1a003f60 <adcInit+0xb0>)
1a003ece:	4669      	mov	r1, sp
1a003ed0:	4620      	mov	r0, r4
1a003ed2:	f7ff f9a1 	bl	1a003218 <Chip_ADC_Init>
         Chip_ADC_SetBurstCmd( LPC_ADC0, DISABLE );
1a003ed6:	4629      	mov	r1, r5
1a003ed8:	4620      	mov	r0, r4
1a003eda:	f7ff fa3c 	bl	1a003356 <Chip_ADC_SetBurstCmd>
         Chip_ADC_SetSampleRate( LPC_ADC0, &ADCSetup, ADC_MAX_SAMPLE_RATE/2 );
1a003ede:	4a21      	ldr	r2, [pc, #132]	; (1a003f64 <adcInit+0xb4>)
1a003ee0:	4669      	mov	r1, sp
1a003ee2:	4620      	mov	r0, r4
1a003ee4:	f7ff fa03 	bl	1a0032ee <Chip_ADC_SetSampleRate>
         Chip_ADC_EnableChannel( LPC_ADC0, ADC_CH1, DISABLE );
1a003ee8:	462a      	mov	r2, r5
1a003eea:	2101      	movs	r1, #1
1a003eec:	4620      	mov	r0, r4
1a003eee:	f7ff fa1d 	bl	1a00332c <Chip_ADC_EnableChannel>
         Chip_ADC_Int_SetChannelCmd( LPC_ADC0, ADC_CH1, DISABLE );
1a003ef2:	462a      	mov	r2, r5
1a003ef4:	2101      	movs	r1, #1
1a003ef6:	4620      	mov	r0, r4
1a003ef8:	f7ff f9d8 	bl	1a0032ac <Chip_ADC_Int_SetChannelCmd>
         Chip_ADC_EnableChannel( LPC_ADC0, ADC_CH2, DISABLE );
1a003efc:	462a      	mov	r2, r5
1a003efe:	2102      	movs	r1, #2
1a003f00:	4620      	mov	r0, r4
1a003f02:	f7ff fa13 	bl	1a00332c <Chip_ADC_EnableChannel>
         Chip_ADC_Int_SetChannelCmd( LPC_ADC0, ADC_CH2, DISABLE );
1a003f06:	462a      	mov	r2, r5
1a003f08:	2102      	movs	r1, #2
1a003f0a:	4620      	mov	r0, r4
1a003f0c:	f7ff f9ce 	bl	1a0032ac <Chip_ADC_Int_SetChannelCmd>
         Chip_ADC_EnableChannel( LPC_ADC0, ADC_CH3, DISABLE );
1a003f10:	462a      	mov	r2, r5
1a003f12:	2103      	movs	r1, #3
1a003f14:	4620      	mov	r0, r4
1a003f16:	f7ff fa09 	bl	1a00332c <Chip_ADC_EnableChannel>
         Chip_ADC_Int_SetChannelCmd( LPC_ADC0, ADC_CH3, DISABLE );
1a003f1a:	462a      	mov	r2, r5
1a003f1c:	2103      	movs	r1, #3
1a003f1e:	4620      	mov	r0, r4
1a003f20:	f7ff f9c4 	bl	1a0032ac <Chip_ADC_Int_SetChannelCmd>
         Chip_ADC_EnableChannel( LPC_ADC0, ADC_CH4, DISABLE );
1a003f24:	462a      	mov	r2, r5
1a003f26:	2104      	movs	r1, #4
1a003f28:	4620      	mov	r0, r4
1a003f2a:	f7ff f9ff 	bl	1a00332c <Chip_ADC_EnableChannel>
         Chip_ADC_Int_SetChannelCmd( LPC_ADC0, ADC_CH4, DISABLE );
1a003f2e:	462a      	mov	r2, r5
1a003f30:	2104      	movs	r1, #4
1a003f32:	4620      	mov	r0, r4
1a003f34:	f7ff f9ba 	bl	1a0032ac <Chip_ADC_Int_SetChannelCmd>
	LPC_SCU->ENAIO[ADC_ID] |= 1UL << channel;
1a003f38:	4a0b      	ldr	r2, [pc, #44]	; (1a003f68 <adcInit+0xb8>)
1a003f3a:	f8d2 3c88 	ldr.w	r3, [r2, #3208]	; 0xc88
1a003f3e:	f043 0310 	orr.w	r3, r3, #16
1a003f42:	f8c2 3c88 	str.w	r3, [r2, #3208]	; 0xc88
         Chip_ADC_Int_SetChannelCmd( LPC_ADC0, ADC_CH5, DISABLE ); // Revisar codigo
1a003f46:	462a      	mov	r2, r5
1a003f48:	2105      	movs	r1, #5
1a003f4a:	4620      	mov	r0, r4
1a003f4c:	f7ff f9ae 	bl	1a0032ac <Chip_ADC_Int_SetChannelCmd>
      break;
1a003f50:	e7b3      	b.n	1a003eba <adcInit+0xa>
         Chip_ADC_DeInit( LPC_ADC0 );
1a003f52:	4803      	ldr	r0, [pc, #12]	; (1a003f60 <adcInit+0xb0>)
1a003f54:	f7ff f980 	bl	1a003258 <Chip_ADC_DeInit>
}
1a003f58:	e7af      	b.n	1a003eba <adcInit+0xa>
1a003f5a:	bf00      	nop
1a003f5c:	00061a80 	.word	0x00061a80
1a003f60:	400e3000 	.word	0x400e3000
1a003f64:	00030d40 	.word	0x00030d40
1a003f68:	40086000 	.word	0x40086000

1a003f6c <adcRead>:
 * @brief   Get the value of one ADC channel. Mode: BLOCKING
 * @param   AI0 ... AIn
 * @return  analog value
 */
uint16_t adcRead( adcMap_t analogInput )
{
1a003f6c:	b570      	push	{r4, r5, r6, lr}
1a003f6e:	b082      	sub	sp, #8
   uint8_t lpcAdcChannel = (uint8_t)(analogInput + 1);
1a003f70:	3001      	adds	r0, #1
1a003f72:	b2c4      	uxtb	r4, r0
   uint16_t analogValue = 0;
1a003f74:	2600      	movs	r6, #0
1a003f76:	f8ad 6006 	strh.w	r6, [sp, #6]

   // Enable channel
   Chip_ADC_EnableChannel(LPC_ADC0, lpcAdcChannel, ENABLE);
1a003f7a:	4d11      	ldr	r5, [pc, #68]	; (1a003fc0 <adcRead+0x54>)
1a003f7c:	2201      	movs	r2, #1
1a003f7e:	4621      	mov	r1, r4
1a003f80:	4628      	mov	r0, r5
1a003f82:	f7ff f9d3 	bl	1a00332c <Chip_ADC_EnableChannel>

   // Start conversion
   Chip_ADC_SetStartMode(LPC_ADC0, ADC_START_NOW, ADC_TRIGGERMODE_RISING);
1a003f86:	4632      	mov	r2, r6
1a003f88:	2101      	movs	r1, #1
1a003f8a:	4628      	mov	r0, r5
1a003f8c:	f7ff f99f 	bl	1a0032ce <Chip_ADC_SetStartMode>

   // Wait for conversion complete
   while(
      (Chip_ADC_ReadStatus(LPC_ADC0, lpcAdcChannel, ADC_DR_DONE_STAT) != SET)
1a003f90:	2200      	movs	r2, #0
1a003f92:	4621      	mov	r1, r4
1a003f94:	480a      	ldr	r0, [pc, #40]	; (1a003fc0 <adcRead+0x54>)
1a003f96:	f7ff f96e 	bl	1a003276 <Chip_ADC_ReadStatus>
   while(
1a003f9a:	2801      	cmp	r0, #1
1a003f9c:	d1f8      	bne.n	1a003f90 <adcRead+0x24>
   );

   // Enable Read value
   Chip_ADC_ReadValue( LPC_ADC0, lpcAdcChannel, &analogValue );
1a003f9e:	4d08      	ldr	r5, [pc, #32]	; (1a003fc0 <adcRead+0x54>)
1a003fa0:	f10d 0206 	add.w	r2, sp, #6
1a003fa4:	4621      	mov	r1, r4
1a003fa6:	4628      	mov	r0, r5
1a003fa8:	f7ff f961 	bl	1a00326e <Chip_ADC_ReadValue>

   // Disable channel
   Chip_ADC_EnableChannel( LPC_ADC0, lpcAdcChannel, DISABLE );
1a003fac:	2200      	movs	r2, #0
1a003fae:	4621      	mov	r1, r4
1a003fb0:	4628      	mov	r0, r5
1a003fb2:	f7ff f9bb 	bl	1a00332c <Chip_ADC_EnableChannel>

   return analogValue;
}
1a003fb6:	f8bd 0006 	ldrh.w	r0, [sp, #6]
1a003fba:	b002      	add	sp, #8
1a003fbc:	bd70      	pop	{r4, r5, r6, pc}
1a003fbe:	bf00      	nop
1a003fc0:	400e3000 	.word	0x400e3000

1a003fc4 <gpioObtainPinInit>:

static void gpioObtainPinInit( gpioMap_t pin,
                               int8_t *pinNamePort, int8_t *pinNamePin,
                               int8_t *func, int8_t *gpioPort,
                               int8_t *gpioPin )
{
1a003fc4:	b430      	push	{r4, r5}

   *pinNamePort = gpioPinsInit[pin].pinName.port;
1a003fc6:	4d0b      	ldr	r5, [pc, #44]	; (1a003ff4 <gpioObtainPinInit+0x30>)
1a003fc8:	eb00 0080 	add.w	r0, r0, r0, lsl #2
1a003fcc:	182c      	adds	r4, r5, r0
1a003fce:	5628      	ldrsb	r0, [r5, r0]
1a003fd0:	7008      	strb	r0, [r1, #0]
   *pinNamePin  = gpioPinsInit[pin].pinName.pin;
1a003fd2:	f994 1001 	ldrsb.w	r1, [r4, #1]
1a003fd6:	7011      	strb	r1, [r2, #0]
   *func        = gpioPinsInit[pin].func;
1a003fd8:	f994 2002 	ldrsb.w	r2, [r4, #2]
1a003fdc:	701a      	strb	r2, [r3, #0]
   *gpioPort    = gpioPinsInit[pin].gpio.port;
1a003fde:	f994 2003 	ldrsb.w	r2, [r4, #3]
1a003fe2:	9b02      	ldr	r3, [sp, #8]
1a003fe4:	701a      	strb	r2, [r3, #0]
   *gpioPin     = gpioPinsInit[pin].gpio.pin;
1a003fe6:	f994 2004 	ldrsb.w	r2, [r4, #4]
1a003fea:	9b03      	ldr	r3, [sp, #12]
1a003fec:	701a      	strb	r2, [r3, #0]
}
1a003fee:	bc30      	pop	{r4, r5}
1a003ff0:	4770      	bx	lr
1a003ff2:	bf00      	nop
1a003ff4:	1a00b1ec 	.word	0x1a00b1ec

1a003ff8 <gpioInit>:

/*==================[external functions definition]==========================*/

bool_t gpioInit( gpioMap_t pin, gpioInit_t config )
{
   if( pin == VCC ){
1a003ff8:	f110 0f02 	cmn.w	r0, #2
1a003ffc:	f000 80c7 	beq.w	1a00418e <gpioInit+0x196>
	  return FALSE;
   }
   if( pin == GND ){
1a004000:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
1a004004:	f000 80c5 	beq.w	1a004192 <gpioInit+0x19a>
{
1a004008:	b570      	push	{r4, r5, r6, lr}
1a00400a:	b084      	sub	sp, #16
1a00400c:	460c      	mov	r4, r1
	  return FALSE;
   }

   bool_t ret_val     = 1;

   int8_t pinNamePort = 0;
1a00400e:	2300      	movs	r3, #0
1a004010:	f88d 300f 	strb.w	r3, [sp, #15]
   int8_t pinNamePin  = 0;
1a004014:	f88d 300e 	strb.w	r3, [sp, #14]

   int8_t func        = 0;
1a004018:	f88d 300d 	strb.w	r3, [sp, #13]

   int8_t gpioPort    = 0;
1a00401c:	f88d 300c 	strb.w	r3, [sp, #12]
   int8_t gpioPin     = 0;
1a004020:	f88d 300b 	strb.w	r3, [sp, #11]

   gpioObtainPinInit( pin, &pinNamePort, &pinNamePin, &func,
1a004024:	f10d 030b 	add.w	r3, sp, #11
1a004028:	9301      	str	r3, [sp, #4]
1a00402a:	ab03      	add	r3, sp, #12
1a00402c:	9300      	str	r3, [sp, #0]
1a00402e:	f10d 030d 	add.w	r3, sp, #13
1a004032:	f10d 020e 	add.w	r2, sp, #14
1a004036:	f10d 010f 	add.w	r1, sp, #15
1a00403a:	f7ff ffc3 	bl	1a003fc4 <gpioObtainPinInit>
                      &gpioPort, &gpioPin );

   switch(config) {
1a00403e:	2c05      	cmp	r4, #5
1a004040:	f200 80a9 	bhi.w	1a004196 <gpioInit+0x19e>
1a004044:	e8df f004 	tbb	[pc, r4]
1a004048:	45278109 	.word	0x45278109
1a00404c:	0363      	.short	0x0363

   case GPIO_ENABLE:
      /* Initializes GPIO */
      Chip_GPIO_Init(LPC_GPIO_PORT);
1a00404e:	4853      	ldr	r0, [pc, #332]	; (1a00419c <gpioInit+0x1a4>)
1a004050:	f7ff fd15 	bl	1a003a7e <Chip_GPIO_Init>
   bool_t ret_val     = 1;
1a004054:	2001      	movs	r0, #1
      break;
   }

   return ret_val;

}
1a004056:	b004      	add	sp, #16
1a004058:	bd70      	pop	{r4, r5, r6, pc}
      Chip_SCU_PinMux(
1a00405a:	f89d 100f 	ldrb.w	r1, [sp, #15]
1a00405e:	f89d 300e 	ldrb.w	r3, [sp, #14]
1a004062:	f89d 200d 	ldrb.w	r2, [sp, #13]
	LPC_SCU->SFSP[port][pin] = modefunc;
1a004066:	f042 02d0 	orr.w	r2, r2, #208	; 0xd0
1a00406a:	eb03 1341 	add.w	r3, r3, r1, lsl #5
1a00406e:	494c      	ldr	r1, [pc, #304]	; (1a0041a0 <gpioInit+0x1a8>)
1a004070:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
      Chip_GPIO_SetDir( LPC_GPIO_PORT, gpioPort, ( 1 << gpioPin ), GPIO_INPUT );
1a004074:	f89d 300c 	ldrb.w	r3, [sp, #12]
1a004078:	f99d 200b 	ldrsb.w	r2, [sp, #11]
1a00407c:	2001      	movs	r0, #1
1a00407e:	fa00 f102 	lsl.w	r1, r0, r2
{
	if (out) {
		pGPIO->DIR[portNum] |= bitValue;
	}
	else {
		pGPIO->DIR[portNum] &= ~bitValue;
1a004082:	4c46      	ldr	r4, [pc, #280]	; (1a00419c <gpioInit+0x1a4>)
1a004084:	f503 6300 	add.w	r3, r3, #2048	; 0x800
1a004088:	f854 2023 	ldr.w	r2, [r4, r3, lsl #2]
1a00408c:	ea22 0201 	bic.w	r2, r2, r1
1a004090:	f844 2023 	str.w	r2, [r4, r3, lsl #2]
1a004094:	e7df      	b.n	1a004056 <gpioInit+0x5e>
      Chip_SCU_PinMux(
1a004096:	f89d 100f 	ldrb.w	r1, [sp, #15]
1a00409a:	f89d 300e 	ldrb.w	r3, [sp, #14]
1a00409e:	f89d 200d 	ldrb.w	r2, [sp, #13]
1a0040a2:	f042 02c0 	orr.w	r2, r2, #192	; 0xc0
1a0040a6:	eb03 1341 	add.w	r3, r3, r1, lsl #5
1a0040aa:	493d      	ldr	r1, [pc, #244]	; (1a0041a0 <gpioInit+0x1a8>)
1a0040ac:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
      Chip_GPIO_SetDir( LPC_GPIO_PORT, gpioPort, ( 1 << gpioPin ), GPIO_INPUT );
1a0040b0:	f89d 300c 	ldrb.w	r3, [sp, #12]
1a0040b4:	f99d 200b 	ldrsb.w	r2, [sp, #11]
1a0040b8:	2001      	movs	r0, #1
1a0040ba:	fa00 f102 	lsl.w	r1, r0, r2
1a0040be:	4c37      	ldr	r4, [pc, #220]	; (1a00419c <gpioInit+0x1a4>)
1a0040c0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
1a0040c4:	f854 2023 	ldr.w	r2, [r4, r3, lsl #2]
1a0040c8:	ea22 0201 	bic.w	r2, r2, r1
1a0040cc:	f844 2023 	str.w	r2, [r4, r3, lsl #2]
1a0040d0:	e7c1      	b.n	1a004056 <gpioInit+0x5e>
      Chip_SCU_PinMux(
1a0040d2:	f89d 100f 	ldrb.w	r1, [sp, #15]
1a0040d6:	f89d 300e 	ldrb.w	r3, [sp, #14]
1a0040da:	f89d 200d 	ldrb.w	r2, [sp, #13]
1a0040de:	f042 02d8 	orr.w	r2, r2, #216	; 0xd8
1a0040e2:	eb03 1341 	add.w	r3, r3, r1, lsl #5
1a0040e6:	492e      	ldr	r1, [pc, #184]	; (1a0041a0 <gpioInit+0x1a8>)
1a0040e8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
      Chip_GPIO_SetDir( LPC_GPIO_PORT, gpioPort, ( 1 << gpioPin ), GPIO_INPUT );
1a0040ec:	f89d 300c 	ldrb.w	r3, [sp, #12]
1a0040f0:	f99d 200b 	ldrsb.w	r2, [sp, #11]
1a0040f4:	2001      	movs	r0, #1
1a0040f6:	fa00 f102 	lsl.w	r1, r0, r2
1a0040fa:	4c28      	ldr	r4, [pc, #160]	; (1a00419c <gpioInit+0x1a4>)
1a0040fc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
1a004100:	f854 2023 	ldr.w	r2, [r4, r3, lsl #2]
1a004104:	ea22 0201 	bic.w	r2, r2, r1
1a004108:	f844 2023 	str.w	r2, [r4, r3, lsl #2]
1a00410c:	e7a3      	b.n	1a004056 <gpioInit+0x5e>
      Chip_SCU_PinMux(
1a00410e:	f89d 100f 	ldrb.w	r1, [sp, #15]
1a004112:	f89d 300e 	ldrb.w	r3, [sp, #14]
1a004116:	f89d 200d 	ldrb.w	r2, [sp, #13]
1a00411a:	f042 02c8 	orr.w	r2, r2, #200	; 0xc8
1a00411e:	eb03 1341 	add.w	r3, r3, r1, lsl #5
1a004122:	491f      	ldr	r1, [pc, #124]	; (1a0041a0 <gpioInit+0x1a8>)
1a004124:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
      Chip_GPIO_SetDir( LPC_GPIO_PORT, gpioPort, ( 1 << gpioPin ), GPIO_INPUT );
1a004128:	f89d 300c 	ldrb.w	r3, [sp, #12]
1a00412c:	f99d 200b 	ldrsb.w	r2, [sp, #11]
1a004130:	2001      	movs	r0, #1
1a004132:	fa00 f102 	lsl.w	r1, r0, r2
1a004136:	4c19      	ldr	r4, [pc, #100]	; (1a00419c <gpioInit+0x1a4>)
1a004138:	f503 6300 	add.w	r3, r3, #2048	; 0x800
1a00413c:	f854 2023 	ldr.w	r2, [r4, r3, lsl #2]
1a004140:	ea22 0201 	bic.w	r2, r2, r1
1a004144:	f844 2023 	str.w	r2, [r4, r3, lsl #2]
1a004148:	e785      	b.n	1a004056 <gpioInit+0x5e>
      Chip_SCU_PinMux(
1a00414a:	f89d 100f 	ldrb.w	r1, [sp, #15]
1a00414e:	f89d 300e 	ldrb.w	r3, [sp, #14]
1a004152:	f89d 200d 	ldrb.w	r2, [sp, #13]
1a004156:	f042 02d0 	orr.w	r2, r2, #208	; 0xd0
1a00415a:	eb03 1341 	add.w	r3, r3, r1, lsl #5
1a00415e:	4910      	ldr	r1, [pc, #64]	; (1a0041a0 <gpioInit+0x1a8>)
1a004160:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
      Chip_GPIO_SetDir( LPC_GPIO_PORT, gpioPort, ( 1 << gpioPin ), GPIO_OUTPUT );
1a004164:	f89d 400c 	ldrb.w	r4, [sp, #12]
1a004168:	f99d 200b 	ldrsb.w	r2, [sp, #11]
1a00416c:	2001      	movs	r0, #1
1a00416e:	fa00 f102 	lsl.w	r1, r0, r2
		pGPIO->DIR[portNum] |= bitValue;
1a004172:	4b0a      	ldr	r3, [pc, #40]	; (1a00419c <gpioInit+0x1a4>)
1a004174:	f504 6500 	add.w	r5, r4, #2048	; 0x800
1a004178:	f853 6025 	ldr.w	r6, [r3, r5, lsl #2]
1a00417c:	4331      	orrs	r1, r6
1a00417e:	f843 1025 	str.w	r1, [r3, r5, lsl #2]
      Chip_GPIO_SetPinState( LPC_GPIO_PORT, gpioPort, gpioPin, 0);
1a004182:	b2d2      	uxtb	r2, r2
	pGPIO->B[port][pin] = setting;
1a004184:	eb03 1344 	add.w	r3, r3, r4, lsl #5
1a004188:	2100      	movs	r1, #0
1a00418a:	5499      	strb	r1, [r3, r2]
1a00418c:	e763      	b.n	1a004056 <gpioInit+0x5e>
	  return FALSE;
1a00418e:	2000      	movs	r0, #0
1a004190:	4770      	bx	lr
	  return FALSE;
1a004192:	2000      	movs	r0, #0
}
1a004194:	4770      	bx	lr
      ret_val = 0;
1a004196:	2000      	movs	r0, #0
1a004198:	e75d      	b.n	1a004056 <gpioInit+0x5e>
1a00419a:	bf00      	nop
1a00419c:	400f4000 	.word	0x400f4000
1a0041a0:	40086000 	.word	0x40086000

1a0041a4 <gpioWrite>:


bool_t gpioWrite( gpioMap_t pin, bool_t value )
{
   if( pin == VCC ){
1a0041a4:	f110 0f02 	cmn.w	r0, #2
1a0041a8:	d02d      	beq.n	1a004206 <gpioWrite+0x62>
	  return FALSE;
   }
   if( pin == GND ){
1a0041aa:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
1a0041ae:	d02c      	beq.n	1a00420a <gpioWrite+0x66>
{
1a0041b0:	b510      	push	{r4, lr}
1a0041b2:	b084      	sub	sp, #16
1a0041b4:	460c      	mov	r4, r1
	  return FALSE;
   }

   bool_t ret_val     = 1;

   int8_t pinNamePort = 0;
1a0041b6:	2300      	movs	r3, #0
1a0041b8:	f88d 300f 	strb.w	r3, [sp, #15]
   int8_t pinNamePin  = 0;
1a0041bc:	f88d 300e 	strb.w	r3, [sp, #14]

   int8_t func        = 0;
1a0041c0:	f88d 300d 	strb.w	r3, [sp, #13]

   int8_t gpioPort    = 0;
1a0041c4:	f88d 300c 	strb.w	r3, [sp, #12]
   int8_t gpioPin     = 0;
1a0041c8:	f88d 300b 	strb.w	r3, [sp, #11]

   gpioObtainPinInit( pin, &pinNamePort, &pinNamePin, &func,
1a0041cc:	f10d 030b 	add.w	r3, sp, #11
1a0041d0:	9301      	str	r3, [sp, #4]
1a0041d2:	ab03      	add	r3, sp, #12
1a0041d4:	9300      	str	r3, [sp, #0]
1a0041d6:	f10d 030d 	add.w	r3, sp, #13
1a0041da:	f10d 020e 	add.w	r2, sp, #14
1a0041de:	f10d 010f 	add.w	r1, sp, #15
1a0041e2:	f7ff feef 	bl	1a003fc4 <gpioObtainPinInit>
                      &gpioPort, &gpioPin );

   Chip_GPIO_SetPinState( LPC_GPIO_PORT, gpioPort, gpioPin, value);
1a0041e6:	f89d 300c 	ldrb.w	r3, [sp, #12]
1a0041ea:	f89d 200b 	ldrb.w	r2, [sp, #11]
1a0041ee:	1c21      	adds	r1, r4, #0
1a0041f0:	bf18      	it	ne
1a0041f2:	2101      	movne	r1, #1
1a0041f4:	015b      	lsls	r3, r3, #5
1a0041f6:	f103 2340 	add.w	r3, r3, #1073758208	; 0x40004000
1a0041fa:	f503 2370 	add.w	r3, r3, #983040	; 0xf0000
1a0041fe:	5499      	strb	r1, [r3, r2]

   return ret_val;
1a004200:	2001      	movs	r0, #1
}
1a004202:	b004      	add	sp, #16
1a004204:	bd10      	pop	{r4, pc}
	  return FALSE;
1a004206:	2000      	movs	r0, #0
1a004208:	4770      	bx	lr
	  return FALSE;
1a00420a:	2000      	movs	r0, #0
}
1a00420c:	4770      	bx	lr

1a00420e <gpioRead>:
}


bool_t gpioRead( gpioMap_t pin )
{
   if( pin == VCC ){
1a00420e:	f110 0f02 	cmn.w	r0, #2
1a004212:	d02c      	beq.n	1a00426e <gpioRead+0x60>
      return TRUE;
   }
   if( pin == GND ){
1a004214:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
1a004218:	d02b      	beq.n	1a004272 <gpioRead+0x64>
{
1a00421a:	b500      	push	{lr}
1a00421c:	b085      	sub	sp, #20
      return FALSE;
   }

   bool_t ret_val     = OFF;

   int8_t pinNamePort = 0;
1a00421e:	2300      	movs	r3, #0
1a004220:	f88d 300f 	strb.w	r3, [sp, #15]
   int8_t pinNamePin  = 0;
1a004224:	f88d 300e 	strb.w	r3, [sp, #14]

   int8_t func        = 0;
1a004228:	f88d 300d 	strb.w	r3, [sp, #13]

   int8_t gpioPort    = 0;
1a00422c:	f88d 300c 	strb.w	r3, [sp, #12]
   int8_t gpioPin     = 0;
1a004230:	f88d 300b 	strb.w	r3, [sp, #11]

   gpioObtainPinInit( pin, &pinNamePort, &pinNamePin, &func,
1a004234:	f10d 030b 	add.w	r3, sp, #11
1a004238:	9301      	str	r3, [sp, #4]
1a00423a:	ab03      	add	r3, sp, #12
1a00423c:	9300      	str	r3, [sp, #0]
1a00423e:	f10d 030d 	add.w	r3, sp, #13
1a004242:	f10d 020e 	add.w	r2, sp, #14
1a004246:	f10d 010f 	add.w	r1, sp, #15
1a00424a:	f7ff febb 	bl	1a003fc4 <gpioObtainPinInit>
                      &gpioPort, &gpioPin );

   ret_val = (bool_t) Chip_GPIO_ReadPortBit( LPC_GPIO_PORT, gpioPort, gpioPin );
1a00424e:	f99d 300c 	ldrsb.w	r3, [sp, #12]
1a004252:	f89d 200b 	ldrb.w	r2, [sp, #11]
	return (bool) pGPIO->B[port][pin];
1a004256:	015b      	lsls	r3, r3, #5
1a004258:	f103 2340 	add.w	r3, r3, #1073758208	; 0x40004000
1a00425c:	f503 2370 	add.w	r3, r3, #983040	; 0xf0000
1a004260:	5c98      	ldrb	r0, [r3, r2]
1a004262:	3000      	adds	r0, #0
1a004264:	bf18      	it	ne
1a004266:	2001      	movne	r0, #1

   return ret_val;
}
1a004268:	b005      	add	sp, #20
1a00426a:	f85d fb04 	ldr.w	pc, [sp], #4
      return TRUE;
1a00426e:	2001      	movs	r0, #1
1a004270:	4770      	bx	lr
      return FALSE;
1a004272:	2000      	movs	r0, #0
}
1a004274:	4770      	bx	lr
1a004276:	Address 0x000000001a004276 is out of bounds.


1a004278 <USB0_IRQHandler>:
/**
 * @brief   Handle interrupt from USB
 * @return  Nothing
 */
#ifndef USB_HOST_ONLY // Parche para envitar conflictos con biblioteca host
void USB_IRQHandler(void){
1a004278:	b508      	push	{r3, lr}
   USBD_API->hw->ISR(g_hUsb);
1a00427a:	4b04      	ldr	r3, [pc, #16]	; (1a00428c <USB0_IRQHandler+0x14>)
1a00427c:	681b      	ldr	r3, [r3, #0]
1a00427e:	681b      	ldr	r3, [r3, #0]
1a004280:	68db      	ldr	r3, [r3, #12]
1a004282:	4a03      	ldr	r2, [pc, #12]	; (1a004290 <USB0_IRQHandler+0x18>)
1a004284:	6810      	ldr	r0, [r2, #0]
1a004286:	4798      	blx	r3
}
1a004288:	bd08      	pop	{r3, pc}
1a00428a:	bf00      	nop
1a00428c:	10003670 	.word	0x10003670
1a004290:	1000348c 	.word	0x1000348c

1a004294 <boardInit>:

/*==================[external functions definition]==========================*/

/* Set up and initialize board hardware */
void boardInit(void)
{
1a004294:	b508      	push	{r3, lr}
   // Read clock settings and update SystemCoreClock variable
   SystemCoreClockUpdate();
1a004296:	f7ff fb4f 	bl	1a003938 <SystemCoreClockUpdate>

   cyclesCounterInit( SystemCoreClock );
1a00429a:	4b18      	ldr	r3, [pc, #96]	; (1a0042fc <boardInit+0x68>)
1a00429c:	6818      	ldr	r0, [r3, #0]
1a00429e:	f7ff fd11 	bl	1a003cc4 <cyclesCounterInit>
      //#error CIAA-NXP

   #elif BOARD==edu_ciaa_nxp

      // Inicializar GPIOs
      gpioInit( 0, GPIO_ENABLE );
1a0042a2:	2105      	movs	r1, #5
1a0042a4:	2000      	movs	r0, #0
1a0042a6:	f7ff fea7 	bl	1a003ff8 <gpioInit>

      // Configuracion de pines de entrada para Teclas de la EDU-CIAA-NXP
      gpioInit( TEC1, GPIO_INPUT );
1a0042aa:	2100      	movs	r1, #0
1a0042ac:	2024      	movs	r0, #36	; 0x24
1a0042ae:	f7ff fea3 	bl	1a003ff8 <gpioInit>
      gpioInit( TEC2, GPIO_INPUT );
1a0042b2:	2100      	movs	r1, #0
1a0042b4:	2025      	movs	r0, #37	; 0x25
1a0042b6:	f7ff fe9f 	bl	1a003ff8 <gpioInit>
      gpioInit( TEC3, GPIO_INPUT );
1a0042ba:	2100      	movs	r1, #0
1a0042bc:	2026      	movs	r0, #38	; 0x26
1a0042be:	f7ff fe9b 	bl	1a003ff8 <gpioInit>
      gpioInit( TEC4, GPIO_INPUT );
1a0042c2:	2100      	movs	r1, #0
1a0042c4:	2027      	movs	r0, #39	; 0x27
1a0042c6:	f7ff fe97 	bl	1a003ff8 <gpioInit>

      // Configuracion de pines de salida para Leds de la EDU-CIAA-NXP
      gpioInit( LEDR, GPIO_OUTPUT );
1a0042ca:	2101      	movs	r1, #1
1a0042cc:	2028      	movs	r0, #40	; 0x28
1a0042ce:	f7ff fe93 	bl	1a003ff8 <gpioInit>
      gpioInit( LEDG, GPIO_OUTPUT );
1a0042d2:	2101      	movs	r1, #1
1a0042d4:	2029      	movs	r0, #41	; 0x29
1a0042d6:	f7ff fe8f 	bl	1a003ff8 <gpioInit>
      gpioInit( LEDB, GPIO_OUTPUT );
1a0042da:	2101      	movs	r1, #1
1a0042dc:	202a      	movs	r0, #42	; 0x2a
1a0042de:	f7ff fe8b 	bl	1a003ff8 <gpioInit>
      gpioInit( LED1, GPIO_OUTPUT );
1a0042e2:	2101      	movs	r1, #1
1a0042e4:	202b      	movs	r0, #43	; 0x2b
1a0042e6:	f7ff fe87 	bl	1a003ff8 <gpioInit>
      gpioInit( LED2, GPIO_OUTPUT );
1a0042ea:	2101      	movs	r1, #1
1a0042ec:	202c      	movs	r0, #44	; 0x2c
1a0042ee:	f7ff fe83 	bl	1a003ff8 <gpioInit>
      gpioInit( LED3, GPIO_OUTPUT );
1a0042f2:	2101      	movs	r1, #1
1a0042f4:	202d      	movs	r0, #45	; 0x2d
1a0042f6:	f7ff fe7f 	bl	1a003ff8 <gpioInit>
   #else
      #error BOARD compile variable must be defined

   #endif

}
1a0042fa:	bd08      	pop	{r3, pc}
1a0042fc:	1000366c 	.word	0x1000366c

1a004300 <delayInaccurateMs>:
/*==================[external functions definition]==========================*/

/* ---- Inaccurate Blocking Delay ---- */

void delayInaccurateMs(tick_t delay_ms)
{
1a004300:	b4f0      	push	{r4, r5, r6, r7}
1a004302:	b084      	sub	sp, #16
   volatile tick_t i;
   volatile tick_t delay;
   delay = INACCURATE_TO_MS * delay_ms;
1a004304:	ea4f 0c81 	mov.w	ip, r1, lsl #2
1a004308:	0083      	lsls	r3, r0, #2
1a00430a:	ea4c 7290 	orr.w	r2, ip, r0, lsr #30
1a00430e:	181b      	adds	r3, r3, r0
1a004310:	eb41 0202 	adc.w	r2, r1, r2
1a004314:	0211      	lsls	r1, r2, #8
1a004316:	ea41 6113 	orr.w	r1, r1, r3, lsr #24
1a00431a:	0218      	lsls	r0, r3, #8
1a00431c:	1ac6      	subs	r6, r0, r3
1a00431e:	eb61 0702 	sbc.w	r7, r1, r2
1a004322:	013b      	lsls	r3, r7, #4
1a004324:	ea43 7316 	orr.w	r3, r3, r6, lsr #28
1a004328:	0132      	lsls	r2, r6, #4
1a00432a:	4616      	mov	r6, r2
1a00432c:	461f      	mov	r7, r3
1a00432e:	e9cd 6700 	strd	r6, r7, [sp]
   for( i=delay; i>0; i-- );
1a004332:	e9dd 2300 	ldrd	r2, r3, [sp]
1a004336:	e9cd 2302 	strd	r2, r3, [sp, #8]
1a00433a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
1a00433e:	4313      	orrs	r3, r2
1a004340:	d008      	beq.n	1a004354 <delayInaccurateMs+0x54>
1a004342:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
1a004346:	f112 34ff 	adds.w	r4, r2, #4294967295	; 0xffffffff
1a00434a:	f143 35ff 	adc.w	r5, r3, #4294967295	; 0xffffffff
1a00434e:	e9cd 4502 	strd	r4, r5, [sp, #8]
1a004352:	e7f2      	b.n	1a00433a <delayInaccurateMs+0x3a>
}
1a004354:	b004      	add	sp, #16
1a004356:	bcf0      	pop	{r4, r5, r6, r7}
1a004358:	4770      	bx	lr

1a00435a <delayInaccurateUs>:

void delayInaccurateUs( tick_t delay_us )
{
1a00435a:	b530      	push	{r4, r5, lr}
1a00435c:	b085      	sub	sp, #20
   volatile tick_t i;
   volatile tick_t delay;
   delay = (INACCURATE_TO_US_x10 * delay_us) / 10;
1a00435e:	1803      	adds	r3, r0, r0
1a004360:	eb41 0201 	adc.w	r2, r1, r1
1a004364:	1818      	adds	r0, r3, r0
1a004366:	eb42 0101 	adc.w	r1, r2, r1
1a00436a:	010b      	lsls	r3, r1, #4
1a00436c:	ea43 7310 	orr.w	r3, r3, r0, lsr #28
1a004370:	0102      	lsls	r2, r0, #4
1a004372:	1880      	adds	r0, r0, r2
1a004374:	eb43 0101 	adc.w	r1, r3, r1
1a004378:	008b      	lsls	r3, r1, #2
1a00437a:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
1a00437e:	0082      	lsls	r2, r0, #2
1a004380:	4610      	mov	r0, r2
1a004382:	4619      	mov	r1, r3
1a004384:	220a      	movs	r2, #10
1a004386:	2300      	movs	r3, #0
1a004388:	f001 fba6 	bl	1a005ad8 <__aeabi_uldivmod>
1a00438c:	e9cd 0100 	strd	r0, r1, [sp]
   for( i=delay; i>0; i-- );
1a004390:	e9dd 2300 	ldrd	r2, r3, [sp]
1a004394:	e9cd 2302 	strd	r2, r3, [sp, #8]
1a004398:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
1a00439c:	4313      	orrs	r3, r2
1a00439e:	d008      	beq.n	1a0043b2 <delayInaccurateUs+0x58>
1a0043a0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
1a0043a4:	f112 34ff 	adds.w	r4, r2, #4294967295	; 0xffffffff
1a0043a8:	f143 35ff 	adc.w	r5, r3, #4294967295	; 0xffffffff
1a0043ac:	e9cd 4502 	strd	r4, r5, [sp, #8]
1a0043b0:	e7f2      	b.n	1a004398 <delayInaccurateUs+0x3e>
}
1a0043b2:	b005      	add	sp, #20
1a0043b4:	bd30      	pop	{r4, r5, pc}
1a0043b6:	Address 0x000000001a0043b6 is out of bounds.


1a0043b8 <delay>:
/* ---- Blocking Delay ---- */

// delay( 1, DELAY_US );

void delay( tick_t duration_ms )
{
1a0043b8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
1a0043bc:	4680      	mov	r8, r0
1a0043be:	4689      	mov	r9, r1
   tick_t startTime = tickRead();
1a0043c0:	f7ff fcf1 	bl	1a003da6 <tickRead>
1a0043c4:	4606      	mov	r6, r0
1a0043c6:	460f      	mov	r7, r1
   while ( (tick_t)(tickRead() - startTime) < duration_ms/tickRateMS );
1a0043c8:	f7ff fced 	bl	1a003da6 <tickRead>
1a0043cc:	1b84      	subs	r4, r0, r6
1a0043ce:	eb61 0507 	sbc.w	r5, r1, r7
1a0043d2:	4b06      	ldr	r3, [pc, #24]	; (1a0043ec <delay+0x34>)
1a0043d4:	e9d3 2300 	ldrd	r2, r3, [r3]
1a0043d8:	4640      	mov	r0, r8
1a0043da:	4649      	mov	r1, r9
1a0043dc:	f001 fb7c 	bl	1a005ad8 <__aeabi_uldivmod>
1a0043e0:	428d      	cmp	r5, r1
1a0043e2:	bf08      	it	eq
1a0043e4:	4284      	cmpeq	r4, r0
1a0043e6:	d3ef      	bcc.n	1a0043c8 <delay+0x10>
}
1a0043e8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
1a0043ec:	10000048 	.word	0x10000048

1a0043f0 <printInitUart>:
{
   *printer = uart;
}

void printInitUart( print_t* printer, uartMap_t uart, uint32_t baudRate )
{
1a0043f0:	b508      	push	{r3, lr}
1a0043f2:	460b      	mov	r3, r1
   *printer = uart;
1a0043f4:	7001      	strb	r1, [r0, #0]
   uartInit( uart, baudRate );
1a0043f6:	4611      	mov	r1, r2
1a0043f8:	4618      	mov	r0, r3
1a0043fa:	f7ff fc87 	bl	1a003d0c <uartInit>
}
1a0043fe:	bd08      	pop	{r3, pc}

1a004400 <pcf8574TGpioPortWrite>:
   pcf8574TGpioPortDirections = directions;
   i2cWrite( I2C0, pcf8574TI2cAddress, &directions, 1, TRUE );
}

static void pcf8574TGpioPortWrite( uint8_t portValue )
{
1a004400:	b500      	push	{lr}
1a004402:	b085      	sub	sp, #20
   pcf8574TGpioPortValue = portValue;
1a004404:	4b09      	ldr	r3, [pc, #36]	; (1a00442c <pcf8574TGpioPortWrite+0x2c>)
1a004406:	7018      	strb	r0, [r3, #0]
   // Or with pcf8574TGpioPortDirections to keep pins initialized as inputs
   uint8_t transmitDataBuffer = portValue | pcf8574TGpioPortDirections;
1a004408:	4b09      	ldr	r3, [pc, #36]	; (1a004430 <pcf8574TGpioPortWrite+0x30>)
1a00440a:	781b      	ldrb	r3, [r3, #0]
1a00440c:	4318      	orrs	r0, r3
1a00440e:	f88d 000f 	strb.w	r0, [sp, #15]
   i2cWrite( I2C0, pcf8574TI2cAddress, &transmitDataBuffer, 1, TRUE );
1a004412:	2301      	movs	r3, #1
1a004414:	9300      	str	r3, [sp, #0]
1a004416:	f10d 020f 	add.w	r2, sp, #15
1a00441a:	4906      	ldr	r1, [pc, #24]	; (1a004434 <pcf8574TGpioPortWrite+0x34>)
1a00441c:	7809      	ldrb	r1, [r1, #0]
1a00441e:	2000      	movs	r0, #0
1a004420:	f7ff fd39 	bl	1a003e96 <i2cWrite>
}
1a004424:	b005      	add	sp, #20
1a004426:	f85d fb04 	ldr.w	pc, [sp], #4
1a00442a:	bf00      	nop
1a00442c:	1000349b 	.word	0x1000349b
1a004430:	1000349a 	.word	0x1000349a
1a004434:	10000050 	.word	0x10000050

1a004438 <pcf8574TGpioWrite>:
{
   return pcf8574TGpioPortRead() & (1<<pin);
}

static void pcf8574TGpioWrite( pcf8574T_gpio_t pin, bool_t value )
{
1a004438:	b508      	push	{r3, lr}
   uint8_t portValue = pcf8574TGpioPortValue;
1a00443a:	4b08      	ldr	r3, [pc, #32]	; (1a00445c <pcf8574TGpioWrite+0x24>)
1a00443c:	781b      	ldrb	r3, [r3, #0]
   if( value ) {
1a00443e:	b139      	cbz	r1, 1a004450 <pcf8574TGpioWrite+0x18>
      portValue |= (1<<pin);
1a004440:	2201      	movs	r2, #1
1a004442:	fa02 f000 	lsl.w	r0, r2, r0
1a004446:	4303      	orrs	r3, r0
1a004448:	b2d8      	uxtb	r0, r3
   } else {
      portValue &= ~(1<<pin);
   }
   pcf8574TGpioPortWrite( portValue );
1a00444a:	f7ff ffd9 	bl	1a004400 <pcf8574TGpioPortWrite>
}
1a00444e:	bd08      	pop	{r3, pc}
      portValue &= ~(1<<pin);
1a004450:	2101      	movs	r1, #1
1a004452:	fa01 f000 	lsl.w	r0, r1, r0
1a004456:	ea23 0000 	bic.w	r0, r3, r0
1a00445a:	e7f6      	b.n	1a00444a <pcf8574TGpioWrite+0x12>
1a00445c:	1000349b 	.word	0x1000349b

1a004460 <lcdPinSet>:



static void lcdPinSet( uint8_t pin, bool_t status )
{
1a004460:	b508      	push	{r3, lr}
#ifdef LCD_HD44780_I2C_PCF8574T
   pcf8574TGpioWrite( pin, status );
1a004462:	f7ff ffe9 	bl	1a004438 <pcf8574TGpioWrite>
#else
   gpioWrite( pin, status );
#endif
}
1a004466:	bd08      	pop	{r3, pc}

1a004468 <lcdSendNibble>:
   lcdPinSet( LCD_HD44780_EN, OFF );      // EN = 0 for H-to-L pulse
   //lcdDelay_us(50); // commands need > 37us to settle
}

static void lcdSendNibble( uint8_t nibble )
{
1a004468:	b510      	push	{r4, lr}
1a00446a:	4604      	mov	r4, r0
   lcdPinSet( LCD_HD44780_D7, ( nibble & 0x80 ) );
1a00446c:	f000 0180 	and.w	r1, r0, #128	; 0x80
1a004470:	2007      	movs	r0, #7
1a004472:	f7ff fff5 	bl	1a004460 <lcdPinSet>
   lcdPinSet( LCD_HD44780_D6, ( nibble & 0x40 ) );
1a004476:	f004 0140 	and.w	r1, r4, #64	; 0x40
1a00447a:	2006      	movs	r0, #6
1a00447c:	f7ff fff0 	bl	1a004460 <lcdPinSet>
   lcdPinSet( LCD_HD44780_D5, ( nibble & 0x20 ) );
1a004480:	f004 0120 	and.w	r1, r4, #32
1a004484:	2005      	movs	r0, #5
1a004486:	f7ff ffeb 	bl	1a004460 <lcdPinSet>
   lcdPinSet( LCD_HD44780_D4, ( nibble & 0x10 ) );
1a00448a:	f004 0110 	and.w	r1, r4, #16
1a00448e:	2004      	movs	r0, #4
1a004490:	f7ff ffe6 	bl	1a004460 <lcdPinSet>
}
1a004494:	bd10      	pop	{r4, pc}

1a004496 <lcdEnablePulse>:
{
1a004496:	b508      	push	{r3, lr}
   lcdPinSet( LCD_HD44780_EN, ON );       // EN = 1 for H-to-L pulse
1a004498:	2101      	movs	r1, #1
1a00449a:	2002      	movs	r0, #2
1a00449c:	f7ff ffe0 	bl	1a004460 <lcdPinSet>
   lcdDelay_us( LCD_EN_PULSE_WAIT_US );   // Wait to make EN wider //lcdDelay_us(1);
1a0044a0:	2019      	movs	r0, #25
1a0044a2:	2100      	movs	r1, #0
1a0044a4:	f7ff ff59 	bl	1a00435a <delayInaccurateUs>
   lcdPinSet( LCD_HD44780_EN, OFF );      // EN = 0 for H-to-L pulse
1a0044a8:	2100      	movs	r1, #0
1a0044aa:	2002      	movs	r0, #2
1a0044ac:	f7ff ffd8 	bl	1a004460 <lcdPinSet>
}
1a0044b0:	bd08      	pop	{r3, pc}
1a0044b2:	Address 0x000000001a0044b2 is out of bounds.


1a0044b4 <pcf8574TGpioPortInit>:
{
1a0044b4:	b500      	push	{lr}
1a0044b6:	b085      	sub	sp, #20
1a0044b8:	f88d 000f 	strb.w	r0, [sp, #15]
   pcf8574TGpioPortDirections = directions;
1a0044bc:	4b06      	ldr	r3, [pc, #24]	; (1a0044d8 <pcf8574TGpioPortInit+0x24>)
1a0044be:	7018      	strb	r0, [r3, #0]
   i2cWrite( I2C0, pcf8574TI2cAddress, &directions, 1, TRUE );
1a0044c0:	2301      	movs	r3, #1
1a0044c2:	9300      	str	r3, [sp, #0]
1a0044c4:	f10d 020f 	add.w	r2, sp, #15
1a0044c8:	4904      	ldr	r1, [pc, #16]	; (1a0044dc <pcf8574TGpioPortInit+0x28>)
1a0044ca:	7809      	ldrb	r1, [r1, #0]
1a0044cc:	2000      	movs	r0, #0
1a0044ce:	f7ff fce2 	bl	1a003e96 <i2cWrite>
}
1a0044d2:	b005      	add	sp, #20
1a0044d4:	f85d fb04 	ldr.w	pc, [sp], #4
1a0044d8:	1000349a 	.word	0x1000349a
1a0044dc:	10000050 	.word	0x10000050

1a0044e0 <pcf8574TInit>:
{
1a0044e0:	b508      	push	{r3, lr}
   pcf8574TI2cAddress = i2cAddress;
1a0044e2:	4b04      	ldr	r3, [pc, #16]	; (1a0044f4 <pcf8574TInit+0x14>)
1a0044e4:	7019      	strb	r1, [r3, #0]
   pcf8574TGpioPortInit( 0x00 ); // Init all GPIOs as outputs
1a0044e6:	2000      	movs	r0, #0
1a0044e8:	f7ff ffe4 	bl	1a0044b4 <pcf8574TGpioPortInit>
   pcf8574TGpioPortWrite( 0x00 ); // Init all as zeros
1a0044ec:	2000      	movs	r0, #0
1a0044ee:	f7ff ff87 	bl	1a004400 <pcf8574TGpioPortWrite>
}
1a0044f2:	bd08      	pop	{r3, pc}
1a0044f4:	10000050 	.word	0x10000050

1a0044f8 <lcdCommand>:

/*==================[definiciones de funciones externas]=====================*/

void lcdCommand( uint8_t cmd )
{
1a0044f8:	b510      	push	{r4, lr}
1a0044fa:	4604      	mov	r4, r0
   lcdSendNibble( cmd & 0xF0 );          // Send high nibble to D7-D4
1a0044fc:	f000 00f0 	and.w	r0, r0, #240	; 0xf0
1a004500:	f7ff ffb2 	bl	1a004468 <lcdSendNibble>

   lcdPinSet( LCD_HD44780_RS, OFF );   // RS = 0 for command
1a004504:	2100      	movs	r1, #0
1a004506:	4608      	mov	r0, r1
1a004508:	f7ff ffaa 	bl	1a004460 <lcdPinSet>
   lcdPinSet( LCD_HD44780_RW, OFF );   // RW = 0 for write
1a00450c:	2100      	movs	r1, #0
1a00450e:	2001      	movs	r0, #1
1a004510:	f7ff ffa6 	bl	1a004460 <lcdPinSet>

   lcdEnablePulse();
1a004514:	f7ff ffbf 	bl	1a004496 <lcdEnablePulse>
   lcdDelay_us( LCD_LOW_WAIT_US );       // Wait
1a004518:	2019      	movs	r0, #25
1a00451a:	2100      	movs	r1, #0
1a00451c:	f7ff ff1d 	bl	1a00435a <delayInaccurateUs>

   lcdSendNibble( cmd << 4 );            // Send low nibble to D7-D4
1a004520:	0120      	lsls	r0, r4, #4
1a004522:	f000 00f0 	and.w	r0, r0, #240	; 0xf0
1a004526:	f7ff ff9f 	bl	1a004468 <lcdSendNibble>
   lcdEnablePulse();
1a00452a:	f7ff ffb4 	bl	1a004496 <lcdEnablePulse>
}
1a00452e:	bd10      	pop	{r4, pc}

1a004530 <lcdData>:

void lcdData( uint8_t data )
{
1a004530:	b510      	push	{r4, lr}
1a004532:	4604      	mov	r4, r0
   lcdSendNibble( data & 0xF0 );         // Send high nibble to D7-D4
1a004534:	f000 00f0 	and.w	r0, r0, #240	; 0xf0
1a004538:	f7ff ff96 	bl	1a004468 <lcdSendNibble>

   lcdPinSet( LCD_HD44780_RS, ON );    // RS = 1 for data
1a00453c:	2101      	movs	r1, #1
1a00453e:	2000      	movs	r0, #0
1a004540:	f7ff ff8e 	bl	1a004460 <lcdPinSet>
   lcdPinSet( LCD_HD44780_RW, OFF );   // RW = 0 for write
1a004544:	2100      	movs	r1, #0
1a004546:	2001      	movs	r0, #1
1a004548:	f7ff ff8a 	bl	1a004460 <lcdPinSet>

   lcdEnablePulse();
1a00454c:	f7ff ffa3 	bl	1a004496 <lcdEnablePulse>

   lcdSendNibble( data << 4 );           // Send low nibble to D7-D4
1a004550:	0120      	lsls	r0, r4, #4
1a004552:	f000 00f0 	and.w	r0, r0, #240	; 0xf0
1a004556:	f7ff ff87 	bl	1a004468 <lcdSendNibble>
   lcdEnablePulse();
1a00455a:	f7ff ff9c 	bl	1a004496 <lcdEnablePulse>
}
1a00455e:	bd10      	pop	{r4, pc}

1a004560 <lcdGoToXY>:
   lcdGoToXY( 0, 0 );
}

void lcdGoToXY( uint8_t x, uint8_t y )
{
   if( x >= lcd.lineWidth || y >= lcd.amountOfLines ) {
1a004560:	b282      	uxth	r2, r0
1a004562:	4b11      	ldr	r3, [pc, #68]	; (1a0045a8 <lcdGoToXY+0x48>)
1a004564:	881b      	ldrh	r3, [r3, #0]
1a004566:	429a      	cmp	r2, r3
1a004568:	d204      	bcs.n	1a004574 <lcdGoToXY+0x14>
1a00456a:	b28b      	uxth	r3, r1
1a00456c:	4a0e      	ldr	r2, [pc, #56]	; (1a0045a8 <lcdGoToXY+0x48>)
1a00456e:	8852      	ldrh	r2, [r2, #2]
1a004570:	4293      	cmp	r3, r2
1a004572:	d300      	bcc.n	1a004576 <lcdGoToXY+0x16>
1a004574:	4770      	bx	lr
{
1a004576:	b530      	push	{r4, r5, lr}
1a004578:	b083      	sub	sp, #12
1a00457a:	460d      	mov	r5, r1
1a00457c:	4604      	mov	r4, r0
      return;
   }
   uint8_t firstCharAdress[] = { 0x80, 0xC0, 0x94, 0xD4 };   // See table 12-5
1a00457e:	4b0b      	ldr	r3, [pc, #44]	; (1a0045ac <lcdGoToXY+0x4c>)
1a004580:	681b      	ldr	r3, [r3, #0]
1a004582:	9301      	str	r3, [sp, #4]
   //lcdCommand( firstCharAdress[ y - 1 ] + x - 1 ); // Start in {x,y} = {1,1}
   lcdCommand( firstCharAdress[y] + x );             // Start in {x,y} = {0,0}
1a004584:	ab02      	add	r3, sp, #8
1a004586:	440b      	add	r3, r1
1a004588:	f813 0c04 	ldrb.w	r0, [r3, #-4]
1a00458c:	4420      	add	r0, r4
1a00458e:	b2c0      	uxtb	r0, r0
1a004590:	f7ff ffb2 	bl	1a0044f8 <lcdCommand>
   lcdDelay_us( LCD_HIGH_WAIT_US );      // Wait
1a004594:	2064      	movs	r0, #100	; 0x64
1a004596:	2100      	movs	r1, #0
1a004598:	f7ff fedf 	bl	1a00435a <delayInaccurateUs>
   lcd.x = x;
1a00459c:	4b02      	ldr	r3, [pc, #8]	; (1a0045a8 <lcdGoToXY+0x48>)
1a00459e:	721c      	strb	r4, [r3, #8]
   lcd.y = y;
1a0045a0:	725d      	strb	r5, [r3, #9]
}
1a0045a2:	b003      	add	sp, #12
1a0045a4:	bd30      	pop	{r4, r5, pc}
1a0045a6:	bf00      	nop
1a0045a8:	10003490 	.word	0x10003490
1a0045ac:	1a00b2d4 	.word	0x1a00b2d4

1a0045b0 <lcdClear>:

void lcdClear( void )
{
1a0045b0:	b508      	push	{r3, lr}
   lcdCommand( 0x01 );                   // Command 0x01 for clear LCD
1a0045b2:	2001      	movs	r0, #1
1a0045b4:	f7ff ffa0 	bl	1a0044f8 <lcdCommand>
   lcdDelay_ms(LCD_CLR_DISP_WAIT_MS);    // Wait
1a0045b8:	2003      	movs	r0, #3
1a0045ba:	2100      	movs	r1, #0
1a0045bc:	f7ff fea0 	bl	1a004300 <delayInaccurateMs>
}
1a0045c0:	bd08      	pop	{r3, pc}
1a0045c2:	Address 0x000000001a0045c2 is out of bounds.


1a0045c4 <lcdInit>:
{
1a0045c4:	b538      	push	{r3, r4, r5, lr}
   lcd.lineWidth = lineWidth;
1a0045c6:	4d25      	ldr	r5, [pc, #148]	; (1a00465c <lcdInit+0x98>)
1a0045c8:	8028      	strh	r0, [r5, #0]
   lcd.amountOfLines = amountOfLines;
1a0045ca:	8069      	strh	r1, [r5, #2]
   lcd.charWidth = charWidth;
1a0045cc:	80aa      	strh	r2, [r5, #4]
   lcd.charHeight = charHeight;
1a0045ce:	80eb      	strh	r3, [r5, #6]
   lcd.x = 0;
1a0045d0:	2400      	movs	r4, #0
1a0045d2:	722c      	strb	r4, [r5, #8]
   lcd.y = 0;
1a0045d4:	726c      	strb	r4, [r5, #9]
   pcf8574TInit( I2C0, PCF8574T_I2C_ADDRESS );
1a0045d6:	2127      	movs	r1, #39	; 0x27
1a0045d8:	4620      	mov	r0, r4
1a0045da:	f7ff ff81 	bl	1a0044e0 <pcf8574TInit>
   lcdPinSet( LCD_HD44780_BACKLIGHT, ON );
1a0045de:	2101      	movs	r1, #1
1a0045e0:	2003      	movs	r0, #3
1a0045e2:	f7ff ff3d 	bl	1a004460 <lcdPinSet>
   lcdPinSet( LCD_HD44780_RW, OFF );     // RW = 0
1a0045e6:	4621      	mov	r1, r4
1a0045e8:	2001      	movs	r0, #1
1a0045ea:	f7ff ff39 	bl	1a004460 <lcdPinSet>
   lcdPinSet( LCD_HD44780_RS, OFF );     // RS = 0
1a0045ee:	4621      	mov	r1, r4
1a0045f0:	4620      	mov	r0, r4
1a0045f2:	f7ff ff35 	bl	1a004460 <lcdPinSet>
   lcdPinSet( LCD_HD44780_EN, OFF );     // EN = 0
1a0045f6:	4621      	mov	r1, r4
1a0045f8:	2002      	movs	r0, #2
1a0045fa:	f7ff ff31 	bl	1a004460 <lcdPinSet>
   lcdCommand( 0x33 );                   // Command 0x33 for 4-bit mode
1a0045fe:	2033      	movs	r0, #51	; 0x33
1a004600:	f7ff ff7a 	bl	1a0044f8 <lcdCommand>
   lcdCommandDelay();                    // Wait
1a004604:	202d      	movs	r0, #45	; 0x2d
1a004606:	2100      	movs	r1, #0
1a004608:	f7ff fea7 	bl	1a00435a <delayInaccurateUs>
   lcdCommand( 0x32 );                   // Command 0x32 for 4-bit mode
1a00460c:	2032      	movs	r0, #50	; 0x32
1a00460e:	f7ff ff73 	bl	1a0044f8 <lcdCommand>
   lcdCommandDelay();                    // Wait
1a004612:	202d      	movs	r0, #45	; 0x2d
1a004614:	2100      	movs	r1, #0
1a004616:	f7ff fea0 	bl	1a00435a <delayInaccurateUs>
   lcdCommand( 0x28 );                   // Command 0x28 for 4-bit mode
1a00461a:	2028      	movs	r0, #40	; 0x28
1a00461c:	f7ff ff6c 	bl	1a0044f8 <lcdCommand>
   lcdCommandDelay();                    // Wait
1a004620:	202d      	movs	r0, #45	; 0x2d
1a004622:	2100      	movs	r1, #0
1a004624:	f7ff fe99 	bl	1a00435a <delayInaccurateUs>
   lcdCommand( 0x0E );                   // Command 0x0E for display on, cursor on
1a004628:	200e      	movs	r0, #14
1a00462a:	f7ff ff65 	bl	1a0044f8 <lcdCommand>
   lcdCommandDelay();                    // Wait
1a00462e:	202d      	movs	r0, #45	; 0x2d
1a004630:	2100      	movs	r1, #0
1a004632:	f7ff fe92 	bl	1a00435a <delayInaccurateUs>
   lcdClear();                           // Command for clear LCD
1a004636:	f7ff ffbb 	bl	1a0045b0 <lcdClear>
   lcdCommand( 0x06 );                   // Command 0x06 for Shift cursor right
1a00463a:	2006      	movs	r0, #6
1a00463c:	f7ff ff5c 	bl	1a0044f8 <lcdCommand>
   lcdCommandDelay();                    // Wait
1a004640:	202d      	movs	r0, #45	; 0x2d
1a004642:	2100      	movs	r1, #0
1a004644:	f7ff fe89 	bl	1a00435a <delayInaccurateUs>
   lcdDelay_ms( 1 );                     // Wait
1a004648:	2001      	movs	r0, #1
1a00464a:	2100      	movs	r1, #0
1a00464c:	f7ff fe58 	bl	1a004300 <delayInaccurateMs>
   lcdGoToXY( 0, 0 );
1a004650:	4621      	mov	r1, r4
1a004652:	4620      	mov	r0, r4
1a004654:	f7ff ff84 	bl	1a004560 <lcdGoToXY>
}
1a004658:	bd38      	pop	{r3, r4, r5, pc}
1a00465a:	bf00      	nop
1a00465c:	10003490 	.word	0x10003490

1a004660 <lcdSendStringRaw>:
   lcdCommand( 0b00001100 | mode );
   lcdDelay_ms(LCD_CLR_DISP_WAIT_MS); // Wait
}

void lcdSendStringRaw( char* str )
{
1a004660:	b538      	push	{r3, r4, r5, lr}
1a004662:	4605      	mov	r5, r0
   uint8_t i = 0;
1a004664:	2400      	movs	r4, #0
   while( str[i] != 0 ) {
1a004666:	5d28      	ldrb	r0, [r5, r4]
1a004668:	b120      	cbz	r0, 1a004674 <lcdSendStringRaw+0x14>
      lcdData( str[i] );
1a00466a:	f7ff ff61 	bl	1a004530 <lcdData>
      i++;
1a00466e:	3401      	adds	r4, #1
1a004670:	b2e4      	uxtb	r4, r4
1a004672:	e7f8      	b.n	1a004666 <lcdSendStringRaw+0x6>
   }
}
1a004674:	bd38      	pop	{r3, r4, r5, pc}
1a004676:	Address 0x000000001a004676 is out of bounds.


1a004678 <mpu9250InitializeControlStructure>:

/*==================[internal functions definition]==========================*/

static int8_t mpu9250InitializeControlStructure( void )
{
	control._tempScale = 333.87f;
1a004678:	4b1b      	ldr	r3, [pc, #108]	; (1a0046e8 <mpu9250InitializeControlStructure+0x70>)
1a00467a:	4a1c      	ldr	r2, [pc, #112]	; (1a0046ec <mpu9250InitializeControlStructure+0x74>)
1a00467c:	619a      	str	r2, [r3, #24]
	control._tempOffset = 21.0f;
1a00467e:	4a1c      	ldr	r2, [pc, #112]	; (1a0046f0 <mpu9250InitializeControlStructure+0x78>)
1a004680:	61da      	str	r2, [r3, #28]
	control._numSamples = 100;
1a004682:	2264      	movs	r2, #100	; 0x64
1a004684:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
	control._axs = 1.0f;
1a004688:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
1a00468c:	f8c3 20cc 	str.w	r2, [r3, #204]	; 0xcc
	control._ays = 1.0f;
1a004690:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0
	control._azs = 1.0f;
1a004694:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
	control._maxCounts = 1000;
1a004698:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
1a00469c:	f8a3 10d8 	strh.w	r1, [r3, #216]	; 0xd8
	control._deltaThresh = 0.3f;
1a0046a0:	4914      	ldr	r1, [pc, #80]	; (1a0046f4 <mpu9250InitializeControlStructure+0x7c>)
1a0046a2:	f8c3 10dc 	str.w	r1, [r3, #220]	; 0xdc
	control._coeff = 8;
1a0046a6:	2108      	movs	r1, #8
1a0046a8:	f883 10e0 	strb.w	r1, [r3, #224]	; 0xe0
	control._hxs = 1.0f;
1a0046ac:	f8c3 211c 	str.w	r2, [r3, #284]	; 0x11c
	control._hys = 1.0f;
1a0046b0:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
	control._hzs = 1.0f;
1a0046b4:	f8c3 2124 	str.w	r2, [r3, #292]	; 0x124
	control.tX[0] = 0;
1a0046b8:	2200      	movs	r2, #0
1a0046ba:	f8a3 2140 	strh.w	r2, [r3, #320]	; 0x140
	control.tX[1] = 1;
1a0046be:	2101      	movs	r1, #1
1a0046c0:	f8a3 1142 	strh.w	r1, [r3, #322]	; 0x142
	control.tX[2] = 0;
1a0046c4:	f8a3 2144 	strh.w	r2, [r3, #324]	; 0x144
	control.tY[0] = 1;
1a0046c8:	f8a3 1146 	strh.w	r1, [r3, #326]	; 0x146
	control.tY[1] = 0;
1a0046cc:	f8a3 2148 	strh.w	r2, [r3, #328]	; 0x148
	control.tY[2] = 0;
1a0046d0:	f8a3 214a 	strh.w	r2, [r3, #330]	; 0x14a
	control.tZ[0] = 0;
1a0046d4:	f8a3 214c 	strh.w	r2, [r3, #332]	; 0x14c
	control.tZ[1] = 0;
1a0046d8:	f8a3 214e 	strh.w	r2, [r3, #334]	; 0x14e
	control.tZ[2] = -1;
1a0046dc:	f64f 72ff 	movw	r2, #65535	; 0xffff
1a0046e0:	f8a3 2150 	strh.w	r2, [r3, #336]	; 0x150
}
1a0046e4:	4770      	bx	lr
1a0046e6:	bf00      	nop
1a0046e8:	100034a0 	.word	0x100034a0
1a0046ec:	43a6ef5c 	.word	0x43a6ef5c
1a0046f0:	41a80000 	.word	0x41a80000
1a0046f4:	3e99999a 	.word	0x3e99999a

1a0046f8 <mpu9250ReadRegisters>:
      return -1;
	}
}

static int8_t mpu9250ReadRegisters( uint8_t subAddress, uint8_t count )
{
1a0046f8:	b500      	push	{lr}
1a0046fa:	b087      	sub	sp, #28
1a0046fc:	f88d 0017 	strb.w	r0, [sp, #23]
	if( i2cRead( I2C0,control.address,&subAddress,1,TRUE,control._buffer,count,TRUE) ){
1a004700:	4a0a      	ldr	r2, [pc, #40]	; (1a00472c <mpu9250ReadRegisters+0x34>)
1a004702:	f812 0b24 	ldrb.w	r0, [r2], #36
1a004706:	2301      	movs	r3, #1
1a004708:	9303      	str	r3, [sp, #12]
1a00470a:	9102      	str	r1, [sp, #8]
1a00470c:	9201      	str	r2, [sp, #4]
1a00470e:	9300      	str	r3, [sp, #0]
1a004710:	f10d 0217 	add.w	r2, sp, #23
1a004714:	4601      	mov	r1, r0
1a004716:	2000      	movs	r0, #0
1a004718:	f7ff fba9 	bl	1a003e6e <i2cRead>
1a00471c:	b118      	cbz	r0, 1a004726 <mpu9250ReadRegisters+0x2e>
		return 1;
1a00471e:	2001      	movs	r0, #1
	} else {
		return -1;
	}
}
1a004720:	b007      	add	sp, #28
1a004722:	f85d fb04 	ldr.w	pc, [sp], #4
		return -1;
1a004726:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
1a00472a:	e7f9      	b.n	1a004720 <mpu9250ReadRegisters+0x28>
1a00472c:	100034a0 	.word	0x100034a0

1a004730 <mpu9250WhoAmI>:
		return -6;
	}
}

static int8_t mpu9250WhoAmI( void )
{
1a004730:	b508      	push	{r3, lr}
	// read the WHO AM I register
	if (mpu9250ReadRegisters(MPU9250_WHO_AM_I,1) < 0) {
1a004732:	2101      	movs	r1, #1
1a004734:	2075      	movs	r0, #117	; 0x75
1a004736:	f7ff ffdf 	bl	1a0046f8 <mpu9250ReadRegisters>
1a00473a:	2800      	cmp	r0, #0
1a00473c:	db03      	blt.n	1a004746 <mpu9250WhoAmI+0x16>
		return -1;
	}
	// return the register value
	return control._buffer[0];
1a00473e:	4b03      	ldr	r3, [pc, #12]	; (1a00474c <mpu9250WhoAmI+0x1c>)
1a004740:	f993 0024 	ldrsb.w	r0, [r3, #36]	; 0x24
}
1a004744:	bd08      	pop	{r3, pc}
		return -1;
1a004746:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
1a00474a:	e7fb      	b.n	1a004744 <mpu9250WhoAmI+0x14>
1a00474c:	100034a0 	.word	0x100034a0

1a004750 <mpu9250WriteRegister>:
{
1a004750:	b5f0      	push	{r4, r5, r6, r7, lr}
1a004752:	b085      	sub	sp, #20
1a004754:	4606      	mov	r6, r0
1a004756:	460c      	mov	r4, r1
	transmitDataBuffer[0] = subAddress;
1a004758:	f88d 000c 	strb.w	r0, [sp, #12]
	transmitDataBuffer[1] = data;
1a00475c:	f88d 100d 	strb.w	r1, [sp, #13]
	i2cWrite(I2C0, control.address, transmitDataBuffer, 2, TRUE);
1a004760:	4d0d      	ldr	r5, [pc, #52]	; (1a004798 <mpu9250WriteRegister+0x48>)
1a004762:	2701      	movs	r7, #1
1a004764:	9700      	str	r7, [sp, #0]
1a004766:	2302      	movs	r3, #2
1a004768:	aa03      	add	r2, sp, #12
1a00476a:	7829      	ldrb	r1, [r5, #0]
1a00476c:	2000      	movs	r0, #0
1a00476e:	f7ff fb92 	bl	1a003e96 <i2cWrite>
	delay(10);
1a004772:	200a      	movs	r0, #10
1a004774:	2100      	movs	r1, #0
1a004776:	f7ff fe1f 	bl	1a0043b8 <delay>
	mpu9250ReadRegisters(subAddress,1);
1a00477a:	4639      	mov	r1, r7
1a00477c:	4630      	mov	r0, r6
1a00477e:	f7ff ffbb 	bl	1a0046f8 <mpu9250ReadRegisters>
	if(control._buffer[0] == data) {
1a004782:	f895 3024 	ldrb.w	r3, [r5, #36]	; 0x24
1a004786:	42a3      	cmp	r3, r4
1a004788:	d003      	beq.n	1a004792 <mpu9250WriteRegister+0x42>
      return -1;
1a00478a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
1a00478e:	b005      	add	sp, #20
1a004790:	bdf0      	pop	{r4, r5, r6, r7, pc}
      return 1;
1a004792:	4638      	mov	r0, r7
1a004794:	e7fb      	b.n	1a00478e <mpu9250WriteRegister+0x3e>
1a004796:	bf00      	nop
1a004798:	100034a0 	.word	0x100034a0

1a00479c <mpu9250ReadAK8963Registers>:
	// return the register value
	return control._buffer[0];
}

static int8_t mpu9250ReadAK8963Registers( uint8_t subAddress, uint8_t count )
{
1a00479c:	b538      	push	{r3, r4, r5, lr}
1a00479e:	4605      	mov	r5, r0
1a0047a0:	460c      	mov	r4, r1
	// set slave 0 to the AK8963 and set for read
	if (mpu9250WriteRegister( MPU9250_I2C_SLV0_ADDR, MPU9250_AK8963_I2C_ADDR | MPU9250_I2C_READ_FLAG) < 0) {
1a0047a2:	218c      	movs	r1, #140	; 0x8c
1a0047a4:	2025      	movs	r0, #37	; 0x25
1a0047a6:	f7ff ffd3 	bl	1a004750 <mpu9250WriteRegister>
1a0047aa:	2800      	cmp	r0, #0
1a0047ac:	db18      	blt.n	1a0047e0 <mpu9250ReadAK8963Registers+0x44>
		return -1;
	}
	// set the register to the desired AK8963 sub address
	if (mpu9250WriteRegister( MPU9250_I2C_SLV0_REG, subAddress) < 0) {
1a0047ae:	4629      	mov	r1, r5
1a0047b0:	2026      	movs	r0, #38	; 0x26
1a0047b2:	f7ff ffcd 	bl	1a004750 <mpu9250WriteRegister>
1a0047b6:	2800      	cmp	r0, #0
1a0047b8:	db15      	blt.n	1a0047e6 <mpu9250ReadAK8963Registers+0x4a>
		return -2;
	}
	// enable I2C and request the bytes
	if (mpu9250WriteRegister( MPU9250_I2C_SLV0_CTRL, MPU9250_I2C_SLV0_EN | count) < 0) {
1a0047ba:	f044 0180 	orr.w	r1, r4, #128	; 0x80
1a0047be:	2027      	movs	r0, #39	; 0x27
1a0047c0:	f7ff ffc6 	bl	1a004750 <mpu9250WriteRegister>
1a0047c4:	2800      	cmp	r0, #0
1a0047c6:	db11      	blt.n	1a0047ec <mpu9250ReadAK8963Registers+0x50>
		return -3;
	}
	delay(1); // takes some time for these registers to fill
1a0047c8:	2001      	movs	r0, #1
1a0047ca:	2100      	movs	r1, #0
1a0047cc:	f7ff fdf4 	bl	1a0043b8 <delay>
	// read the bytes off the MPU9250 EXT_SENS_DATA registers
	control._status = mpu9250ReadRegisters(MPU9250_EXT_SENS_DATA_00,count);
1a0047d0:	4621      	mov	r1, r4
1a0047d2:	2049      	movs	r0, #73	; 0x49
1a0047d4:	f7ff ff90 	bl	1a0046f8 <mpu9250ReadRegisters>
1a0047d8:	4b06      	ldr	r3, [pc, #24]	; (1a0047f4 <mpu9250ReadAK8963Registers+0x58>)
1a0047da:	f883 0152 	strb.w	r0, [r3, #338]	; 0x152
	return control._status;
}
1a0047de:	bd38      	pop	{r3, r4, r5, pc}
		return -1;
1a0047e0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
1a0047e4:	e7fb      	b.n	1a0047de <mpu9250ReadAK8963Registers+0x42>
		return -2;
1a0047e6:	f06f 0001 	mvn.w	r0, #1
1a0047ea:	e7f8      	b.n	1a0047de <mpu9250ReadAK8963Registers+0x42>
		return -3;
1a0047ec:	f06f 0002 	mvn.w	r0, #2
1a0047f0:	e7f5      	b.n	1a0047de <mpu9250ReadAK8963Registers+0x42>
1a0047f2:	bf00      	nop
1a0047f4:	100034a0 	.word	0x100034a0

1a0047f8 <mpu9250WhoAmIAK8963>:
{
1a0047f8:	b508      	push	{r3, lr}
	if (mpu9250ReadAK8963Registers(MPU9250_AK8963_WHO_AM_I,1) < 0) {
1a0047fa:	2101      	movs	r1, #1
1a0047fc:	2000      	movs	r0, #0
1a0047fe:	f7ff ffcd 	bl	1a00479c <mpu9250ReadAK8963Registers>
1a004802:	2800      	cmp	r0, #0
1a004804:	db03      	blt.n	1a00480e <mpu9250WhoAmIAK8963+0x16>
	return control._buffer[0];
1a004806:	4b03      	ldr	r3, [pc, #12]	; (1a004814 <mpu9250WhoAmIAK8963+0x1c>)
1a004808:	f993 0024 	ldrsb.w	r0, [r3, #36]	; 0x24
}
1a00480c:	bd08      	pop	{r3, pc}
		return -1;
1a00480e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
1a004812:	e7fb      	b.n	1a00480c <mpu9250WhoAmIAK8963+0x14>
1a004814:	100034a0 	.word	0x100034a0

1a004818 <mpu9250WriteAK8963Register>:
{
1a004818:	b538      	push	{r3, r4, r5, lr}
1a00481a:	4604      	mov	r4, r0
1a00481c:	460d      	mov	r5, r1
	if (mpu9250WriteRegister( MPU9250_I2C_SLV0_ADDR, MPU9250_AK8963_I2C_ADDR) < 0) {
1a00481e:	210c      	movs	r1, #12
1a004820:	2025      	movs	r0, #37	; 0x25
1a004822:	f7ff ff95 	bl	1a004750 <mpu9250WriteRegister>
1a004826:	2800      	cmp	r0, #0
1a004828:	db1e      	blt.n	1a004868 <mpu9250WriteAK8963Register+0x50>
	if (mpu9250WriteRegister( MPU9250_I2C_SLV0_REG, subAddress) < 0) {
1a00482a:	4621      	mov	r1, r4
1a00482c:	2026      	movs	r0, #38	; 0x26
1a00482e:	f7ff ff8f 	bl	1a004750 <mpu9250WriteRegister>
1a004832:	2800      	cmp	r0, #0
1a004834:	db1b      	blt.n	1a00486e <mpu9250WriteAK8963Register+0x56>
	if (mpu9250WriteRegister( MPU9250_I2C_SLV0_DO, data) < 0) {
1a004836:	4629      	mov	r1, r5
1a004838:	2063      	movs	r0, #99	; 0x63
1a00483a:	f7ff ff89 	bl	1a004750 <mpu9250WriteRegister>
1a00483e:	2800      	cmp	r0, #0
1a004840:	db18      	blt.n	1a004874 <mpu9250WriteAK8963Register+0x5c>
	if (mpu9250WriteRegister( MPU9250_I2C_SLV0_CTRL, MPU9250_I2C_SLV0_EN | (uint8_t)1) < 0) {
1a004842:	2181      	movs	r1, #129	; 0x81
1a004844:	2027      	movs	r0, #39	; 0x27
1a004846:	f7ff ff83 	bl	1a004750 <mpu9250WriteRegister>
1a00484a:	2800      	cmp	r0, #0
1a00484c:	db15      	blt.n	1a00487a <mpu9250WriteAK8963Register+0x62>
	if (mpu9250ReadAK8963Registers(subAddress,1) < 0) {
1a00484e:	2101      	movs	r1, #1
1a004850:	4620      	mov	r0, r4
1a004852:	f7ff ffa3 	bl	1a00479c <mpu9250ReadAK8963Registers>
1a004856:	2800      	cmp	r0, #0
1a004858:	db12      	blt.n	1a004880 <mpu9250WriteAK8963Register+0x68>
	if(control._buffer[0] == data) {
1a00485a:	4b0c      	ldr	r3, [pc, #48]	; (1a00488c <mpu9250WriteAK8963Register+0x74>)
1a00485c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
1a004860:	42ab      	cmp	r3, r5
1a004862:	d110      	bne.n	1a004886 <mpu9250WriteAK8963Register+0x6e>
		return 1;
1a004864:	2001      	movs	r0, #1
}
1a004866:	bd38      	pop	{r3, r4, r5, pc}
		return -1;
1a004868:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
1a00486c:	e7fb      	b.n	1a004866 <mpu9250WriteAK8963Register+0x4e>
		return -2;
1a00486e:	f06f 0001 	mvn.w	r0, #1
1a004872:	e7f8      	b.n	1a004866 <mpu9250WriteAK8963Register+0x4e>
		return -3;
1a004874:	f06f 0002 	mvn.w	r0, #2
1a004878:	e7f5      	b.n	1a004866 <mpu9250WriteAK8963Register+0x4e>
		return -4;
1a00487a:	f06f 0003 	mvn.w	r0, #3
1a00487e:	e7f2      	b.n	1a004866 <mpu9250WriteAK8963Register+0x4e>
		return -5;
1a004880:	f06f 0004 	mvn.w	r0, #4
1a004884:	e7ef      	b.n	1a004866 <mpu9250WriteAK8963Register+0x4e>
		return -6;
1a004886:	f06f 0005 	mvn.w	r0, #5
1a00488a:	e7ec      	b.n	1a004866 <mpu9250WriteAK8963Register+0x4e>
1a00488c:	100034a0 	.word	0x100034a0

1a004890 <mpu9250SetGyroRange>:
	}
	return 1;
}

static int8_t mpu9250SetGyroRange( MPU9250_GyroRange_t range )
{
1a004890:	b510      	push	{r4, lr}
1a004892:	4604      	mov	r4, r0
	switch(range) {
1a004894:	2803      	cmp	r0, #3
1a004896:	d80c      	bhi.n	1a0048b2 <mpu9250SetGyroRange+0x22>
1a004898:	e8df f000 	tbb	[pc, r0]
1a00489c:	241a1002 	.word	0x241a1002
		case MPU9250_GYRO_RANGE_250DPS: {
		  // setting the gyro range to 250DPS
		  if(mpu9250WriteRegister(MPU9250_GYRO_CONFIG, MPU9250_GYRO_FS_SEL_250DPS) < 0){
1a0048a0:	2100      	movs	r1, #0
1a0048a2:	201b      	movs	r0, #27
1a0048a4:	f7ff ff54 	bl	1a004750 <mpu9250WriteRegister>
1a0048a8:	2800      	cmp	r0, #0
1a0048aa:	db25      	blt.n	1a0048f8 <mpu9250SetGyroRange+0x68>
			return -1;
		  }
        // setting the gyro scale to 250DPS
		  control._gyroScale = 250.0f/32767.5f * MPU9250_D2R; 
1a0048ac:	4b18      	ldr	r3, [pc, #96]	; (1a004910 <mpu9250SetGyroRange+0x80>)
1a0048ae:	4a19      	ldr	r2, [pc, #100]	; (1a004914 <mpu9250SetGyroRange+0x84>)
1a0048b0:	609a      	str	r2, [r3, #8]
        // setting the gyro scale to 2000DPS
		  control._gyroScale = 2000.0f/32767.5f * MPU9250_D2R; 
		  break;
		}
	}
	control._gyroRange = range;
1a0048b2:	4b17      	ldr	r3, [pc, #92]	; (1a004910 <mpu9250SetGyroRange+0x80>)
1a0048b4:	f883 4021 	strb.w	r4, [r3, #33]	; 0x21
	return 1;
1a0048b8:	2001      	movs	r0, #1
}
1a0048ba:	bd10      	pop	{r4, pc}
		  if(mpu9250WriteRegister(MPU9250_GYRO_CONFIG, MPU9250_GYRO_FS_SEL_500DPS) < 0){
1a0048bc:	2108      	movs	r1, #8
1a0048be:	201b      	movs	r0, #27
1a0048c0:	f7ff ff46 	bl	1a004750 <mpu9250WriteRegister>
1a0048c4:	2800      	cmp	r0, #0
1a0048c6:	db1a      	blt.n	1a0048fe <mpu9250SetGyroRange+0x6e>
		  control._gyroScale = 500.0f/32767.5f * MPU9250_D2R; 
1a0048c8:	4b11      	ldr	r3, [pc, #68]	; (1a004910 <mpu9250SetGyroRange+0x80>)
1a0048ca:	4a13      	ldr	r2, [pc, #76]	; (1a004918 <mpu9250SetGyroRange+0x88>)
1a0048cc:	609a      	str	r2, [r3, #8]
		  break;
1a0048ce:	e7f0      	b.n	1a0048b2 <mpu9250SetGyroRange+0x22>
		  if(mpu9250WriteRegister(MPU9250_GYRO_CONFIG, MPU9250_GYRO_FS_SEL_1000DPS) < 0){
1a0048d0:	2110      	movs	r1, #16
1a0048d2:	201b      	movs	r0, #27
1a0048d4:	f7ff ff3c 	bl	1a004750 <mpu9250WriteRegister>
1a0048d8:	2800      	cmp	r0, #0
1a0048da:	db13      	blt.n	1a004904 <mpu9250SetGyroRange+0x74>
		  control._gyroScale = 1000.0f/32767.5f * MPU9250_D2R; 
1a0048dc:	4b0c      	ldr	r3, [pc, #48]	; (1a004910 <mpu9250SetGyroRange+0x80>)
1a0048de:	4a0f      	ldr	r2, [pc, #60]	; (1a00491c <mpu9250SetGyroRange+0x8c>)
1a0048e0:	609a      	str	r2, [r3, #8]
		  break;
1a0048e2:	e7e6      	b.n	1a0048b2 <mpu9250SetGyroRange+0x22>
		  if(mpu9250WriteRegister(MPU9250_GYRO_CONFIG, MPU9250_GYRO_FS_SEL_2000DPS) < 0){
1a0048e4:	2118      	movs	r1, #24
1a0048e6:	201b      	movs	r0, #27
1a0048e8:	f7ff ff32 	bl	1a004750 <mpu9250WriteRegister>
1a0048ec:	2800      	cmp	r0, #0
1a0048ee:	db0c      	blt.n	1a00490a <mpu9250SetGyroRange+0x7a>
		  control._gyroScale = 2000.0f/32767.5f * MPU9250_D2R; 
1a0048f0:	4b07      	ldr	r3, [pc, #28]	; (1a004910 <mpu9250SetGyroRange+0x80>)
1a0048f2:	4a0b      	ldr	r2, [pc, #44]	; (1a004920 <mpu9250SetGyroRange+0x90>)
1a0048f4:	609a      	str	r2, [r3, #8]
		  break;
1a0048f6:	e7dc      	b.n	1a0048b2 <mpu9250SetGyroRange+0x22>
			return -1;
1a0048f8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
1a0048fc:	e7dd      	b.n	1a0048ba <mpu9250SetGyroRange+0x2a>
			return -1;
1a0048fe:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
1a004902:	e7da      	b.n	1a0048ba <mpu9250SetGyroRange+0x2a>
			return -1;
1a004904:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
1a004908:	e7d7      	b.n	1a0048ba <mpu9250SetGyroRange+0x2a>
			return -1;
1a00490a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
1a00490e:	e7d4      	b.n	1a0048ba <mpu9250SetGyroRange+0x2a>
1a004910:	100034a0 	.word	0x100034a0
1a004914:	390ba0e4 	.word	0x390ba0e4
1a004918:	398ba0e4 	.word	0x398ba0e4
1a00491c:	3a0ba0e4 	.word	0x3a0ba0e4
1a004920:	3a8ba0e4 	.word	0x3a8ba0e4

1a004924 <mpu9250SetDlpfBandwidth>:

static int8_t mpu9250SetDlpfBandwidth( MPU9250_DlpfBandwidth_t bandwidth )
{
1a004924:	b510      	push	{r4, lr}
1a004926:	4604      	mov	r4, r0
	switch (bandwidth) {
1a004928:	2805      	cmp	r0, #5
1a00492a:	d810      	bhi.n	1a00494e <mpu9250SetDlpfBandwidth+0x2a>
1a00492c:	e8df f000 	tbb	[pc, r0]
1a004930:	32231403 	.word	0x32231403
1a004934:	5041      	.short	0x5041
		case MPU9250_DLPF_BANDWIDTH_184HZ: {
         // setting accel bandwidth to 184Hz
			if (mpu9250WriteRegister(MPU9250_ACCEL_CONFIG2, MPU9250_ACCEL_DLPF_184) < 0) { 
1a004936:	2101      	movs	r1, #1
1a004938:	201d      	movs	r0, #29
1a00493a:	f7ff ff09 	bl	1a004750 <mpu9250WriteRegister>
1a00493e:	2800      	cmp	r0, #0
1a004940:	db55      	blt.n	1a0049ee <mpu9250SetDlpfBandwidth+0xca>
				return -1;
			}
         // setting gyro bandwidth to 184Hz
			if (mpu9250WriteRegister(MPU9250_CONFIG, MPU9250_GYRO_DLPF_184) < 0) { 
1a004942:	2101      	movs	r1, #1
1a004944:	201a      	movs	r0, #26
1a004946:	f7ff ff03 	bl	1a004750 <mpu9250WriteRegister>
1a00494a:	2800      	cmp	r0, #0
1a00494c:	db52      	blt.n	1a0049f4 <mpu9250SetDlpfBandwidth+0xd0>
				return -2;
			}
			break;
		}
	}
	control._bandwidth = bandwidth;
1a00494e:	4b32      	ldr	r3, [pc, #200]	; (1a004a18 <mpu9250SetDlpfBandwidth+0xf4>)
1a004950:	f883 4022 	strb.w	r4, [r3, #34]	; 0x22
	return 1;
1a004954:	2001      	movs	r0, #1
}
1a004956:	bd10      	pop	{r4, pc}
			if (mpu9250WriteRegister(MPU9250_ACCEL_CONFIG2, MPU9250_ACCEL_DLPF_92) < 0) { 
1a004958:	2102      	movs	r1, #2
1a00495a:	201d      	movs	r0, #29
1a00495c:	f7ff fef8 	bl	1a004750 <mpu9250WriteRegister>
1a004960:	2800      	cmp	r0, #0
1a004962:	db4a      	blt.n	1a0049fa <mpu9250SetDlpfBandwidth+0xd6>
			if (mpu9250WriteRegister(MPU9250_CONFIG, MPU9250_GYRO_DLPF_92) < 0) { 
1a004964:	2102      	movs	r1, #2
1a004966:	201a      	movs	r0, #26
1a004968:	f7ff fef2 	bl	1a004750 <mpu9250WriteRegister>
1a00496c:	2800      	cmp	r0, #0
1a00496e:	daee      	bge.n	1a00494e <mpu9250SetDlpfBandwidth+0x2a>
				return -2;
1a004970:	f06f 0001 	mvn.w	r0, #1
1a004974:	e7ef      	b.n	1a004956 <mpu9250SetDlpfBandwidth+0x32>
			if (mpu9250WriteRegister(MPU9250_ACCEL_CONFIG2, MPU9250_ACCEL_DLPF_41) < 0) { 
1a004976:	2103      	movs	r1, #3
1a004978:	201d      	movs	r0, #29
1a00497a:	f7ff fee9 	bl	1a004750 <mpu9250WriteRegister>
1a00497e:	2800      	cmp	r0, #0
1a004980:	db3e      	blt.n	1a004a00 <mpu9250SetDlpfBandwidth+0xdc>
			if (mpu9250WriteRegister(MPU9250_CONFIG, MPU9250_GYRO_DLPF_41) < 0) { 
1a004982:	2103      	movs	r1, #3
1a004984:	201a      	movs	r0, #26
1a004986:	f7ff fee3 	bl	1a004750 <mpu9250WriteRegister>
1a00498a:	2800      	cmp	r0, #0
1a00498c:	dadf      	bge.n	1a00494e <mpu9250SetDlpfBandwidth+0x2a>
				return -2;
1a00498e:	f06f 0001 	mvn.w	r0, #1
1a004992:	e7e0      	b.n	1a004956 <mpu9250SetDlpfBandwidth+0x32>
			if (mpu9250WriteRegister(MPU9250_ACCEL_CONFIG2, MPU9250_ACCEL_DLPF_20) < 0) { 
1a004994:	2104      	movs	r1, #4
1a004996:	201d      	movs	r0, #29
1a004998:	f7ff feda 	bl	1a004750 <mpu9250WriteRegister>
1a00499c:	2800      	cmp	r0, #0
1a00499e:	db32      	blt.n	1a004a06 <mpu9250SetDlpfBandwidth+0xe2>
			if (mpu9250WriteRegister(MPU9250_CONFIG, MPU9250_GYRO_DLPF_20) < 0) { 
1a0049a0:	2104      	movs	r1, #4
1a0049a2:	201a      	movs	r0, #26
1a0049a4:	f7ff fed4 	bl	1a004750 <mpu9250WriteRegister>
1a0049a8:	2800      	cmp	r0, #0
1a0049aa:	dad0      	bge.n	1a00494e <mpu9250SetDlpfBandwidth+0x2a>
				return -2;
1a0049ac:	f06f 0001 	mvn.w	r0, #1
1a0049b0:	e7d1      	b.n	1a004956 <mpu9250SetDlpfBandwidth+0x32>
			if (mpu9250WriteRegister(MPU9250_ACCEL_CONFIG2, MPU9250_ACCEL_DLPF_10) < 0) { 
1a0049b2:	2105      	movs	r1, #5
1a0049b4:	201d      	movs	r0, #29
1a0049b6:	f7ff fecb 	bl	1a004750 <mpu9250WriteRegister>
1a0049ba:	2800      	cmp	r0, #0
1a0049bc:	db26      	blt.n	1a004a0c <mpu9250SetDlpfBandwidth+0xe8>
			if (mpu9250WriteRegister(MPU9250_CONFIG, MPU9250_GYRO_DLPF_10) < 0) { 
1a0049be:	2105      	movs	r1, #5
1a0049c0:	201a      	movs	r0, #26
1a0049c2:	f7ff fec5 	bl	1a004750 <mpu9250WriteRegister>
1a0049c6:	2800      	cmp	r0, #0
1a0049c8:	dac1      	bge.n	1a00494e <mpu9250SetDlpfBandwidth+0x2a>
				return -2;
1a0049ca:	f06f 0001 	mvn.w	r0, #1
1a0049ce:	e7c2      	b.n	1a004956 <mpu9250SetDlpfBandwidth+0x32>
			if (mpu9250WriteRegister(MPU9250_ACCEL_CONFIG2, MPU9250_ACCEL_DLPF_5) < 0) { 
1a0049d0:	2106      	movs	r1, #6
1a0049d2:	201d      	movs	r0, #29
1a0049d4:	f7ff febc 	bl	1a004750 <mpu9250WriteRegister>
1a0049d8:	2800      	cmp	r0, #0
1a0049da:	db1a      	blt.n	1a004a12 <mpu9250SetDlpfBandwidth+0xee>
			if (mpu9250WriteRegister(MPU9250_CONFIG, MPU9250_GYRO_DLPF_5) < 0) { 
1a0049dc:	2106      	movs	r1, #6
1a0049de:	201a      	movs	r0, #26
1a0049e0:	f7ff feb6 	bl	1a004750 <mpu9250WriteRegister>
1a0049e4:	2800      	cmp	r0, #0
1a0049e6:	dab2      	bge.n	1a00494e <mpu9250SetDlpfBandwidth+0x2a>
				return -2;
1a0049e8:	f06f 0001 	mvn.w	r0, #1
1a0049ec:	e7b3      	b.n	1a004956 <mpu9250SetDlpfBandwidth+0x32>
				return -1;
1a0049ee:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
1a0049f2:	e7b0      	b.n	1a004956 <mpu9250SetDlpfBandwidth+0x32>
				return -2;
1a0049f4:	f06f 0001 	mvn.w	r0, #1
1a0049f8:	e7ad      	b.n	1a004956 <mpu9250SetDlpfBandwidth+0x32>
				return -1;
1a0049fa:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
1a0049fe:	e7aa      	b.n	1a004956 <mpu9250SetDlpfBandwidth+0x32>
				return -1;
1a004a00:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
1a004a04:	e7a7      	b.n	1a004956 <mpu9250SetDlpfBandwidth+0x32>
				return -1;
1a004a06:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
1a004a0a:	e7a4      	b.n	1a004956 <mpu9250SetDlpfBandwidth+0x32>
				return -1;
1a004a0c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
1a004a10:	e7a1      	b.n	1a004956 <mpu9250SetDlpfBandwidth+0x32>
				return -1;
1a004a12:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
1a004a16:	e79e      	b.n	1a004956 <mpu9250SetDlpfBandwidth+0x32>
1a004a18:	100034a0 	.word	0x100034a0

1a004a1c <mpu9250SetSrd>:

static int8_t mpu9250SetSrd( uint8_t srd )
{
1a004a1c:	b510      	push	{r4, lr}
1a004a1e:	4604      	mov	r4, r0
	/* setting the sample rate divider to 19 to facilitate setting up 
      magnetometer */
   // setting the sample rate divider
	if (mpu9250WriteRegister(MPU9250_SMPDIV, 19) < 0) {
1a004a20:	2113      	movs	r1, #19
1a004a22:	2019      	movs	r0, #25
1a004a24:	f7ff fe94 	bl	1a004750 <mpu9250WriteRegister>
1a004a28:	2800      	cmp	r0, #0
1a004a2a:	db3d      	blt.n	1a004aa8 <mpu9250SetSrd+0x8c>
		return -1;
	}
	if (srd > 9) {
1a004a2c:	2c09      	cmp	r4, #9
1a004a2e:	d922      	bls.n	1a004a76 <mpu9250SetSrd+0x5a>
		// set AK8963 to Power Down
		if (mpu9250WriteAK8963Register(MPU9250_AK8963_CNTL1, MPU9250_AK8963_PWR_DOWN) < 0) {
1a004a30:	2100      	movs	r1, #0
1a004a32:	200a      	movs	r0, #10
1a004a34:	f7ff fef0 	bl	1a004818 <mpu9250WriteAK8963Register>
1a004a38:	2800      	cmp	r0, #0
1a004a3a:	db38      	blt.n	1a004aae <mpu9250SetSrd+0x92>
			return -2;
		}
		delay(100); // long wait between AK8963 mode changes
1a004a3c:	2064      	movs	r0, #100	; 0x64
1a004a3e:	2100      	movs	r1, #0
1a004a40:	f7ff fcba 	bl	1a0043b8 <delay>
		// set AK8963 to 16 bit resolution, 8 Hz update rate
		if (mpu9250WriteAK8963Register(MPU9250_AK8963_CNTL1, MPU9250_AK8963_CNT_MEAS1) < 0) {
1a004a44:	2112      	movs	r1, #18
1a004a46:	200a      	movs	r0, #10
1a004a48:	f7ff fee6 	bl	1a004818 <mpu9250WriteAK8963Register>
1a004a4c:	2800      	cmp	r0, #0
1a004a4e:	db31      	blt.n	1a004ab4 <mpu9250SetSrd+0x98>
			return -3;
		}
		delay(100); // long wait between AK8963 mode changes
1a004a50:	2064      	movs	r0, #100	; 0x64
1a004a52:	2100      	movs	r1, #0
1a004a54:	f7ff fcb0 	bl	1a0043b8 <delay>
		// instruct the MPU9250 to get 7 bytes of data from the AK8963 at the sample rate
		mpu9250ReadAK8963Registers(MPU9250_AK8963_HXL, 7);
1a004a58:	2107      	movs	r1, #7
1a004a5a:	2003      	movs	r0, #3
1a004a5c:	f7ff fe9e 	bl	1a00479c <mpu9250ReadAK8963Registers>
		delay(100); // long wait between AK8963 mode changes
		// instruct the MPU9250 to get 7 bytes of data from the AK8963 at the sample rate
		mpu9250ReadAK8963Registers(MPU9250_AK8963_HXL, 7);
	}
	/* setting the sample rate divider */
	if (mpu9250WriteRegister(MPU9250_SMPDIV, srd) < 0) { // setting the sample rate divider
1a004a60:	4621      	mov	r1, r4
1a004a62:	2019      	movs	r0, #25
1a004a64:	f7ff fe74 	bl	1a004750 <mpu9250WriteRegister>
1a004a68:	2800      	cmp	r0, #0
1a004a6a:	db2c      	blt.n	1a004ac6 <mpu9250SetSrd+0xaa>
		return -4;
	}
	control._srd = srd;
1a004a6c:	4b17      	ldr	r3, [pc, #92]	; (1a004acc <mpu9250SetSrd+0xb0>)
1a004a6e:	f883 4023 	strb.w	r4, [r3, #35]	; 0x23
	return 1;
1a004a72:	2001      	movs	r0, #1
}
1a004a74:	bd10      	pop	{r4, pc}
		if (mpu9250WriteAK8963Register(MPU9250_AK8963_CNTL1, MPU9250_AK8963_PWR_DOWN) < 0) {
1a004a76:	2100      	movs	r1, #0
1a004a78:	200a      	movs	r0, #10
1a004a7a:	f7ff fecd 	bl	1a004818 <mpu9250WriteAK8963Register>
1a004a7e:	2800      	cmp	r0, #0
1a004a80:	db1b      	blt.n	1a004aba <mpu9250SetSrd+0x9e>
		delay(100); // long wait between AK8963 mode changes
1a004a82:	2064      	movs	r0, #100	; 0x64
1a004a84:	2100      	movs	r1, #0
1a004a86:	f7ff fc97 	bl	1a0043b8 <delay>
		if (mpu9250WriteAK8963Register(MPU9250_AK8963_CNTL1, MPU9250_AK8963_CNT_MEAS2) < 0) {
1a004a8a:	2116      	movs	r1, #22
1a004a8c:	200a      	movs	r0, #10
1a004a8e:	f7ff fec3 	bl	1a004818 <mpu9250WriteAK8963Register>
1a004a92:	2800      	cmp	r0, #0
1a004a94:	db14      	blt.n	1a004ac0 <mpu9250SetSrd+0xa4>
		delay(100); // long wait between AK8963 mode changes
1a004a96:	2064      	movs	r0, #100	; 0x64
1a004a98:	2100      	movs	r1, #0
1a004a9a:	f7ff fc8d 	bl	1a0043b8 <delay>
		mpu9250ReadAK8963Registers(MPU9250_AK8963_HXL, 7);
1a004a9e:	2107      	movs	r1, #7
1a004aa0:	2003      	movs	r0, #3
1a004aa2:	f7ff fe7b 	bl	1a00479c <mpu9250ReadAK8963Registers>
1a004aa6:	e7db      	b.n	1a004a60 <mpu9250SetSrd+0x44>
		return -1;
1a004aa8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
1a004aac:	e7e2      	b.n	1a004a74 <mpu9250SetSrd+0x58>
			return -2;
1a004aae:	f06f 0001 	mvn.w	r0, #1
1a004ab2:	e7df      	b.n	1a004a74 <mpu9250SetSrd+0x58>
			return -3;
1a004ab4:	f06f 0002 	mvn.w	r0, #2
1a004ab8:	e7dc      	b.n	1a004a74 <mpu9250SetSrd+0x58>
			return -2;
1a004aba:	f06f 0001 	mvn.w	r0, #1
1a004abe:	e7d9      	b.n	1a004a74 <mpu9250SetSrd+0x58>
			return -3;
1a004ac0:	f06f 0002 	mvn.w	r0, #2
1a004ac4:	e7d6      	b.n	1a004a74 <mpu9250SetSrd+0x58>
		return -4;
1a004ac6:	f06f 0003 	mvn.w	r0, #3
1a004aca:	e7d3      	b.n	1a004a74 <mpu9250SetSrd+0x58>
1a004acc:	100034a0 	.word	0x100034a0

1a004ad0 <mpu9250Read>:
	return 1;
}

//Read sensor registers and store data at control structure
bool_t mpu9250Read(void)
{
1a004ad0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
1a004ad4:	b083      	sub	sp, #12
	// grab the data from the MPU9250
	if( !mpu9250ReadRegisters(MPU9250_ACCEL_OUT, 21) ){
1a004ad6:	2115      	movs	r1, #21
1a004ad8:	203b      	movs	r0, #59	; 0x3b
1a004ada:	f7ff fe0d 	bl	1a0046f8 <mpu9250ReadRegisters>
1a004ade:	2800      	cmp	r0, #0
1a004ae0:	f000 8136 	beq.w	1a004d50 <mpu9250Read+0x280>
		return 0;
	}
	// combine into 16 bit values
	control._axcounts = (((int16_t)control._buffer[0]) << 8)  | control._buffer[1];
1a004ae4:	4b9b      	ldr	r3, [pc, #620]	; (1a004d54 <mpu9250Read+0x284>)
1a004ae6:	f893 b024 	ldrb.w	fp, [r3, #36]	; 0x24
1a004aea:	f893 1025 	ldrb.w	r1, [r3, #37]	; 0x25
1a004aee:	ea41 210b 	orr.w	r1, r1, fp, lsl #8
1a004af2:	fa0f fb81 	sxth.w	fp, r1
1a004af6:	f8a3 b12c 	strh.w	fp, [r3, #300]	; 0x12c
	control._aycounts = (((int16_t)control._buffer[2]) << 8)  | control._buffer[3];
1a004afa:	f893 2026 	ldrb.w	r2, [r3, #38]	; 0x26
1a004afe:	f893 1027 	ldrb.w	r1, [r3, #39]	; 0x27
1a004b02:	ea41 2102 	orr.w	r1, r1, r2, lsl #8
1a004b06:	b209      	sxth	r1, r1
1a004b08:	f8a3 112e 	strh.w	r1, [r3, #302]	; 0x12e
	control._azcounts = (((int16_t)control._buffer[4]) << 8)  | control._buffer[5];
1a004b0c:	f893 0028 	ldrb.w	r0, [r3, #40]	; 0x28
1a004b10:	f893 2029 	ldrb.w	r2, [r3, #41]	; 0x29
1a004b14:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
1a004b18:	b212      	sxth	r2, r2
1a004b1a:	f8a3 2130 	strh.w	r2, [r3, #304]	; 0x130
	control._tcounts  = (((int16_t)control._buffer[6]) << 8)  | control._buffer[7];
1a004b1e:	f893 402a 	ldrb.w	r4, [r3, #42]	; 0x2a
1a004b22:	f893 002b 	ldrb.w	r0, [r3, #43]	; 0x2b
1a004b26:	ea40 2004 	orr.w	r0, r0, r4, lsl #8
1a004b2a:	b200      	sxth	r0, r0
1a004b2c:	ee05 0a90 	vmov	s11, r0
1a004b30:	f8a3 013e 	strh.w	r0, [r3, #318]	; 0x13e
	control._gxcounts = (((int16_t)control._buffer[8]) << 8)  | control._buffer[9];
1a004b34:	f893 502c 	ldrb.w	r5, [r3, #44]	; 0x2c
1a004b38:	f893 602d 	ldrb.w	r6, [r3, #45]	; 0x2d
1a004b3c:	ea46 2605 	orr.w	r6, r6, r5, lsl #8
1a004b40:	b236      	sxth	r6, r6
1a004b42:	f8a3 6132 	strh.w	r6, [r3, #306]	; 0x132
	control._gycounts = (((int16_t)control._buffer[10]) << 8) | control._buffer[11];
1a004b46:	f893 402e 	ldrb.w	r4, [r3, #46]	; 0x2e
1a004b4a:	f893 002f 	ldrb.w	r0, [r3, #47]	; 0x2f
1a004b4e:	ea40 2004 	orr.w	r0, r0, r4, lsl #8
1a004b52:	b200      	sxth	r0, r0
1a004b54:	f8a3 0134 	strh.w	r0, [r3, #308]	; 0x134
	control._gzcounts = (((int16_t)control._buffer[12]) << 8) | control._buffer[13];
1a004b58:	f893 4030 	ldrb.w	r4, [r3, #48]	; 0x30
1a004b5c:	f893 5031 	ldrb.w	r5, [r3, #49]	; 0x31
1a004b60:	ea45 2504 	orr.w	r5, r5, r4, lsl #8
1a004b64:	b22d      	sxth	r5, r5
1a004b66:	f8a3 5136 	strh.w	r5, [r3, #310]	; 0x136
	control._hxcounts = (((int16_t)control._buffer[15]) << 8) | control._buffer[14];
1a004b6a:	f893 7033 	ldrb.w	r7, [r3, #51]	; 0x33
1a004b6e:	f893 4032 	ldrb.w	r4, [r3, #50]	; 0x32
1a004b72:	ea44 2407 	orr.w	r4, r4, r7, lsl #8
1a004b76:	b224      	sxth	r4, r4
1a004b78:	ee06 4a90 	vmov	s13, r4
1a004b7c:	f8a3 4138 	strh.w	r4, [r3, #312]	; 0x138
	control._hycounts = (((int16_t)control._buffer[17]) << 8) | control._buffer[16];
1a004b80:	f893 7035 	ldrb.w	r7, [r3, #53]	; 0x35
1a004b84:	f893 4034 	ldrb.w	r4, [r3, #52]	; 0x34
1a004b88:	ea44 2407 	orr.w	r4, r4, r7, lsl #8
1a004b8c:	b224      	sxth	r4, r4
1a004b8e:	ee07 4a10 	vmov	s14, r4
1a004b92:	f8a3 413a 	strh.w	r4, [r3, #314]	; 0x13a
	control._hzcounts = (((int16_t)control._buffer[19]) << 8) | control._buffer[18];
1a004b96:	f893 7037 	ldrb.w	r7, [r3, #55]	; 0x37
1a004b9a:	f893 4036 	ldrb.w	r4, [r3, #54]	; 0x36
1a004b9e:	ea44 2407 	orr.w	r4, r4, r7, lsl #8
1a004ba2:	b224      	sxth	r4, r4
1a004ba4:	ee07 4a90 	vmov	s15, r4
1a004ba8:	f8a3 413c 	strh.w	r4, [r3, #316]	; 0x13c
	// transform and convert to float values
	control._ax = (((float)(control.tX[0]*control._axcounts + control.tX[1]*control._aycounts + control.tX[2]*control._azcounts) * control._accelScale) - control._axb)*control._axs;
1a004bac:	f9b3 a140 	ldrsh.w	sl, [r3, #320]	; 0x140
1a004bb0:	f9b3 7142 	ldrsh.w	r7, [r3, #322]	; 0x142
1a004bb4:	fb01 f407 	mul.w	r4, r1, r7
1a004bb8:	fb0b 4c0a 	mla	ip, fp, sl, r4
1a004bbc:	f9b3 4144 	ldrsh.w	r4, [r3, #324]	; 0x144
1a004bc0:	9401      	str	r4, [sp, #4]
1a004bc2:	fb02 cc04 	mla	ip, r2, r4, ip
1a004bc6:	ee06 ca10 	vmov	s12, ip
1a004bca:	eeb8 6ac6 	vcvt.f32.s32	s12, s12
1a004bce:	ed93 5a01 	vldr	s10, [r3, #4]
1a004bd2:	ee26 6a05 	vmul.f32	s12, s12, s10
1a004bd6:	edd3 4a30 	vldr	s9, [r3, #192]	; 0xc0
1a004bda:	ee36 6a64 	vsub.f32	s12, s12, s9
1a004bde:	edd3 4a33 	vldr	s9, [r3, #204]	; 0xcc
1a004be2:	ee26 6a24 	vmul.f32	s12, s12, s9
1a004be6:	ed83 6a0f 	vstr	s12, [r3, #60]	; 0x3c
	control._ay = (((float)(control.tY[0]*control._axcounts + control.tY[1]*control._aycounts + control.tY[2]*control._azcounts) * control._accelScale) - control._ayb)*control._ays;
1a004bea:	f9b3 e146 	ldrsh.w	lr, [r3, #326]	; 0x146
1a004bee:	f9b3 8148 	ldrsh.w	r8, [r3, #328]	; 0x148
1a004bf2:	fb08 fc01 	mul.w	ip, r8, r1
1a004bf6:	fb0e cc0b 	mla	ip, lr, fp, ip
1a004bfa:	f9b3 414a 	ldrsh.w	r4, [r3, #330]	; 0x14a
1a004bfe:	fb04 cc02 	mla	ip, r4, r2, ip
1a004c02:	ee06 ca10 	vmov	s12, ip
1a004c06:	eeb8 6ac6 	vcvt.f32.s32	s12, s12
1a004c0a:	ee25 6a06 	vmul.f32	s12, s10, s12
1a004c0e:	edd3 4a31 	vldr	s9, [r3, #196]	; 0xc4
1a004c12:	ee36 6a64 	vsub.f32	s12, s12, s9
1a004c16:	edd3 4a34 	vldr	s9, [r3, #208]	; 0xd0
1a004c1a:	ee26 6a24 	vmul.f32	s12, s12, s9
1a004c1e:	ed83 6a10 	vstr	s12, [r3, #64]	; 0x40
	control._az = (((float)(control.tZ[0]*control._axcounts + control.tZ[1]*control._aycounts + control.tZ[2]*control._azcounts) * control._accelScale) - control._azb)*control._azs;
1a004c22:	f9b3 c14c 	ldrsh.w	ip, [r3, #332]	; 0x14c
1a004c26:	f9b3 914e 	ldrsh.w	r9, [r3, #334]	; 0x14e
1a004c2a:	fb09 f101 	mul.w	r1, r9, r1
1a004c2e:	fb0c 110b 	mla	r1, ip, fp, r1
1a004c32:	f9b3 b150 	ldrsh.w	fp, [r3, #336]	; 0x150
1a004c36:	fb0b 1102 	mla	r1, fp, r2, r1
1a004c3a:	ee06 1a10 	vmov	s12, r1
1a004c3e:	eeb8 6ac6 	vcvt.f32.s32	s12, s12
1a004c42:	ee25 5a06 	vmul.f32	s10, s10, s12
1a004c46:	ed93 6a32 	vldr	s12, [r3, #200]	; 0xc8
1a004c4a:	ee35 5a46 	vsub.f32	s10, s10, s12
1a004c4e:	ed93 6a35 	vldr	s12, [r3, #212]	; 0xd4
1a004c52:	ee25 5a06 	vmul.f32	s10, s10, s12
1a004c56:	ed83 5a11 	vstr	s10, [r3, #68]	; 0x44
	control._gx = ((float) (control.tX[0]*control._gxcounts + control.tX[1]*control._gycounts + control.tX[2]*control._gzcounts) * control._gyroScale) -  control._gxb;
1a004c5a:	fb00 f707 	mul.w	r7, r0, r7
1a004c5e:	fb06 770a 	mla	r7, r6, sl, r7
1a004c62:	9a01      	ldr	r2, [sp, #4]
1a004c64:	fb05 7202 	mla	r2, r5, r2, r7
1a004c68:	ee06 2a10 	vmov	s12, r2
1a004c6c:	eeb8 6ac6 	vcvt.f32.s32	s12, s12
1a004c70:	ed93 5a02 	vldr	s10, [r3, #8]
1a004c74:	ee26 6a05 	vmul.f32	s12, s12, s10
1a004c78:	edd3 4a20 	vldr	s9, [r3, #128]	; 0x80
1a004c7c:	ee36 6a64 	vsub.f32	s12, s12, s9
1a004c80:	ed83 6a12 	vstr	s12, [r3, #72]	; 0x48
	control._gy = ((float) (control.tY[0]*control._gxcounts + control.tY[1]*control._gycounts + control.tY[2]*control._gzcounts) * control._gyroScale) -  control._gyb;
1a004c84:	fb00 f808 	mul.w	r8, r0, r8
1a004c88:	fb06 8e0e 	mla	lr, r6, lr, r8
1a004c8c:	fb05 e204 	mla	r2, r5, r4, lr
1a004c90:	ee06 2a10 	vmov	s12, r2
1a004c94:	eeb8 6ac6 	vcvt.f32.s32	s12, s12
1a004c98:	ee25 6a06 	vmul.f32	s12, s10, s12
1a004c9c:	edd3 4a21 	vldr	s9, [r3, #132]	; 0x84
1a004ca0:	ee36 6a64 	vsub.f32	s12, s12, s9
1a004ca4:	ed83 6a13 	vstr	s12, [r3, #76]	; 0x4c
	control._gz = ((float) (control.tZ[0]*control._gxcounts + control.tZ[1]*control._gycounts + control.tZ[2]*control._gzcounts) * control._gyroScale) -  control._gzb;
1a004ca8:	fb00 f009 	mul.w	r0, r0, r9
1a004cac:	fb06 000c 	mla	r0, r6, ip, r0
1a004cb0:	fb05 050b 	mla	r5, r5, fp, r0
1a004cb4:	ee06 5a10 	vmov	s12, r5
1a004cb8:	eeb8 6ac6 	vcvt.f32.s32	s12, s12
1a004cbc:	ee25 5a06 	vmul.f32	s10, s10, s12
1a004cc0:	ed93 6a22 	vldr	s12, [r3, #136]	; 0x88
1a004cc4:	ee35 5a46 	vsub.f32	s10, s10, s12
1a004cc8:	ed83 5a14 	vstr	s10, [r3, #80]	; 0x50
	control._hx = (((float)(control._hxcounts) * control._magScaleX) - control._hxb)*control._hxs;
1a004ccc:	eef8 6ae6 	vcvt.f32.s32	s13, s13
1a004cd0:	ed93 6a03 	vldr	s12, [r3, #12]
1a004cd4:	ee66 6a86 	vmul.f32	s13, s13, s12
1a004cd8:	ed93 6a44 	vldr	s12, [r3, #272]	; 0x110
1a004cdc:	ee76 6ac6 	vsub.f32	s13, s13, s12
1a004ce0:	ed93 6a47 	vldr	s12, [r3, #284]	; 0x11c
1a004ce4:	ee66 6a86 	vmul.f32	s13, s13, s12
1a004ce8:	edc3 6a15 	vstr	s13, [r3, #84]	; 0x54
	control._hy = (((float)(control._hycounts) * control._magScaleY) - control._hyb)*control._hys;
1a004cec:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
1a004cf0:	edd3 6a04 	vldr	s13, [r3, #16]
1a004cf4:	ee27 7a26 	vmul.f32	s14, s14, s13
1a004cf8:	edd3 6a45 	vldr	s13, [r3, #276]	; 0x114
1a004cfc:	ee37 7a66 	vsub.f32	s14, s14, s13
1a004d00:	edd3 6a48 	vldr	s13, [r3, #288]	; 0x120
1a004d04:	ee27 7a26 	vmul.f32	s14, s14, s13
1a004d08:	ed83 7a16 	vstr	s14, [r3, #88]	; 0x58
	control._hz = (((float)(control._hzcounts) * control._magScaleZ) - control._hzb)*control._hzs;
1a004d0c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
1a004d10:	ed93 7a05 	vldr	s14, [r3, #20]
1a004d14:	ee67 7a87 	vmul.f32	s15, s15, s14
1a004d18:	ed93 7a46 	vldr	s14, [r3, #280]	; 0x118
1a004d1c:	ee77 7ac7 	vsub.f32	s15, s15, s14
1a004d20:	ed93 7a49 	vldr	s14, [r3, #292]	; 0x124
1a004d24:	ee67 7a87 	vmul.f32	s15, s15, s14
1a004d28:	edc3 7a17 	vstr	s15, [r3, #92]	; 0x5c
	control._t = ((((float) control._tcounts)  - control._tempOffset)/ control._tempScale) + control._tempOffset;
1a004d2c:	eef8 5ae5 	vcvt.f32.s32	s11, s11
1a004d30:	edd3 7a07 	vldr	s15, [r3, #28]
1a004d34:	ee75 5ae7 	vsub.f32	s11, s11, s15
1a004d38:	edd3 6a06 	vldr	s13, [r3, #24]
1a004d3c:	ee85 7aa6 	vdiv.f32	s14, s11, s13
1a004d40:	ee77 7a87 	vadd.f32	s15, s15, s14
1a004d44:	edc3 7a18 	vstr	s15, [r3, #96]	; 0x60
	return 1;
1a004d48:	2001      	movs	r0, #1
}
1a004d4a:	b003      	add	sp, #12
1a004d4c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		return 0;
1a004d50:	2000      	movs	r0, #0
1a004d52:	e7fa      	b.n	1a004d4a <mpu9250Read+0x27a>
1a004d54:	100034a0 	.word	0x100034a0

1a004d58 <mpu9250GetGyroX_rads>:

// Returns the gyroscope measurement in the x direction, rad/s
float mpu9250GetGyroX_rads( void )
{
	return control._gx;
}
1a004d58:	4b01      	ldr	r3, [pc, #4]	; (1a004d60 <mpu9250GetGyroX_rads+0x8>)
1a004d5a:	ed93 0a12 	vldr	s0, [r3, #72]	; 0x48
1a004d5e:	4770      	bx	lr
1a004d60:	100034a0 	.word	0x100034a0

1a004d64 <mpu9250GetGyroY_rads>:

// Returns the gyroscope measurement in the y direction, rad/s
float mpu9250GetGyroY_rads( void )
{
	return control._gy;
}
1a004d64:	4b01      	ldr	r3, [pc, #4]	; (1a004d6c <mpu9250GetGyroY_rads+0x8>)
1a004d66:	ed93 0a13 	vldr	s0, [r3, #76]	; 0x4c
1a004d6a:	4770      	bx	lr
1a004d6c:	100034a0 	.word	0x100034a0

1a004d70 <mpu9250GetGyroZ_rads>:

// Returns the gyroscope measurement in the z direction, rad/s
float mpu9250GetGyroZ_rads( void )
{
	return control._gz;
}
1a004d70:	4b01      	ldr	r3, [pc, #4]	; (1a004d78 <mpu9250GetGyroZ_rads+0x8>)
1a004d72:	ed93 0a14 	vldr	s0, [r3, #80]	; 0x50
1a004d76:	4770      	bx	lr
1a004d78:	100034a0 	.word	0x100034a0

1a004d7c <mpu9250CalibrateGyro>:
{
1a004d7c:	b538      	push	{r3, r4, r5, lr}
1a004d7e:	ed2d 8b02 	vpush	{d8}
	if (mpu9250SetGyroRange(MPU9250_GYRO_RANGE_250DPS) < 0) {
1a004d82:	2000      	movs	r0, #0
1a004d84:	f7ff fd84 	bl	1a004890 <mpu9250SetGyroRange>
1a004d88:	2800      	cmp	r0, #0
1a004d8a:	f2c0 8090 	blt.w	1a004eae <mpu9250CalibrateGyro+0x132>
	if (mpu9250SetDlpfBandwidth(MPU9250_DLPF_BANDWIDTH_20HZ) < 0) {
1a004d8e:	2003      	movs	r0, #3
1a004d90:	f7ff fdc8 	bl	1a004924 <mpu9250SetDlpfBandwidth>
1a004d94:	2800      	cmp	r0, #0
1a004d96:	f2c0 808d 	blt.w	1a004eb4 <mpu9250CalibrateGyro+0x138>
	if (mpu9250SetSrd(19) < 0) {
1a004d9a:	2013      	movs	r0, #19
1a004d9c:	f7ff fe3e 	bl	1a004a1c <mpu9250SetSrd>
1a004da0:	2800      	cmp	r0, #0
1a004da2:	f2c0 808a 	blt.w	1a004eba <mpu9250CalibrateGyro+0x13e>
	control._gxbD = 0;
1a004da6:	4b4b      	ldr	r3, [pc, #300]	; (1a004ed4 <mpu9250CalibrateGyro+0x158>)
1a004da8:	2000      	movs	r0, #0
1a004daa:	2100      	movs	r1, #0
1a004dac:	e9c3 011a 	strd	r0, r1, [r3, #104]	; 0x68
	control._gybD = 0;
1a004db0:	e9c3 011c 	strd	r0, r1, [r3, #112]	; 0x70
	control._gzbD = 0;
1a004db4:	e9c3 011e 	strd	r0, r1, [r3, #120]	; 0x78
	for (uint8_t i=0; i < control._numSamples; i++) {
1a004db8:	2500      	movs	r5, #0
1a004dba:	4b46      	ldr	r3, [pc, #280]	; (1a004ed4 <mpu9250CalibrateGyro+0x158>)
1a004dbc:	f893 3064 	ldrb.w	r3, [r3, #100]	; 0x64
1a004dc0:	42ab      	cmp	r3, r5
1a004dc2:	d94b      	bls.n	1a004e5c <mpu9250CalibrateGyro+0xe0>
		mpu9250Read();
1a004dc4:	f7ff fe84 	bl	1a004ad0 <mpu9250Read>
		control._gxbD += ((mpu9250GetGyroX_rads() + control._gxb)/control._numSamples);
1a004dc8:	f7ff ffc6 	bl	1a004d58 <mpu9250GetGyroX_rads>
1a004dcc:	4c41      	ldr	r4, [pc, #260]	; (1a004ed4 <mpu9250CalibrateGyro+0x158>)
1a004dce:	edd4 7a20 	vldr	s15, [r4, #128]	; 0x80
1a004dd2:	ee30 0a27 	vadd.f32	s0, s0, s15
1a004dd6:	f894 3064 	ldrb.w	r3, [r4, #100]	; 0x64
1a004dda:	ee08 3a10 	vmov	s16, r3
1a004dde:	eeb8 8ac8 	vcvt.f32.s32	s16, s16
1a004de2:	eec0 7a08 	vdiv.f32	s15, s0, s16
1a004de6:	ee17 0a90 	vmov	r0, s15
1a004dea:	f000 fb33 	bl	1a005454 <__aeabi_f2d>
1a004dee:	4602      	mov	r2, r0
1a004df0:	460b      	mov	r3, r1
1a004df2:	e9d4 011a 	ldrd	r0, r1, [r4, #104]	; 0x68
1a004df6:	f000 f9cf 	bl	1a005198 <__adddf3>
1a004dfa:	e9c4 011a 	strd	r0, r1, [r4, #104]	; 0x68
		control._gybD += ((mpu9250GetGyroY_rads() + control._gyb)/control._numSamples);
1a004dfe:	f7ff ffb1 	bl	1a004d64 <mpu9250GetGyroY_rads>
1a004e02:	edd4 7a21 	vldr	s15, [r4, #132]	; 0x84
1a004e06:	ee30 0a27 	vadd.f32	s0, s0, s15
1a004e0a:	eec0 7a08 	vdiv.f32	s15, s0, s16
1a004e0e:	ee17 0a90 	vmov	r0, s15
1a004e12:	f000 fb1f 	bl	1a005454 <__aeabi_f2d>
1a004e16:	4602      	mov	r2, r0
1a004e18:	460b      	mov	r3, r1
1a004e1a:	e9d4 011c 	ldrd	r0, r1, [r4, #112]	; 0x70
1a004e1e:	f000 f9bb 	bl	1a005198 <__adddf3>
1a004e22:	e9c4 011c 	strd	r0, r1, [r4, #112]	; 0x70
		control._gzbD += ((mpu9250GetGyroZ_rads() + control._gzb)/control._numSamples);
1a004e26:	f7ff ffa3 	bl	1a004d70 <mpu9250GetGyroZ_rads>
1a004e2a:	edd4 7a22 	vldr	s15, [r4, #136]	; 0x88
1a004e2e:	ee30 0a27 	vadd.f32	s0, s0, s15
1a004e32:	eec0 7a08 	vdiv.f32	s15, s0, s16
1a004e36:	ee17 0a90 	vmov	r0, s15
1a004e3a:	f000 fb0b 	bl	1a005454 <__aeabi_f2d>
1a004e3e:	4602      	mov	r2, r0
1a004e40:	460b      	mov	r3, r1
1a004e42:	e9d4 011e 	ldrd	r0, r1, [r4, #120]	; 0x78
1a004e46:	f000 f9a7 	bl	1a005198 <__adddf3>
1a004e4a:	e9c4 011e 	strd	r0, r1, [r4, #120]	; 0x78
		delay(20);
1a004e4e:	2014      	movs	r0, #20
1a004e50:	2100      	movs	r1, #0
1a004e52:	f7ff fab1 	bl	1a0043b8 <delay>
	for (uint8_t i=0; i < control._numSamples; i++) {
1a004e56:	3501      	adds	r5, #1
1a004e58:	b2ed      	uxtb	r5, r5
1a004e5a:	e7ae      	b.n	1a004dba <mpu9250CalibrateGyro+0x3e>
	control._gxb = (float)control._gxbD;
1a004e5c:	4c1d      	ldr	r4, [pc, #116]	; (1a004ed4 <mpu9250CalibrateGyro+0x158>)
1a004e5e:	e9d4 011a 	ldrd	r0, r1, [r4, #104]	; 0x68
1a004e62:	f000 fde9 	bl	1a005a38 <__aeabi_d2f>
1a004e66:	f8c4 0080 	str.w	r0, [r4, #128]	; 0x80
	control._gyb = (float)control._gybD;
1a004e6a:	e9d4 011c 	ldrd	r0, r1, [r4, #112]	; 0x70
1a004e6e:	f000 fde3 	bl	1a005a38 <__aeabi_d2f>
1a004e72:	f8c4 0084 	str.w	r0, [r4, #132]	; 0x84
	control._gzb = (float)control._gzbD;
1a004e76:	e9d4 011e 	ldrd	r0, r1, [r4, #120]	; 0x78
1a004e7a:	f000 fddd 	bl	1a005a38 <__aeabi_d2f>
1a004e7e:	f8c4 0088 	str.w	r0, [r4, #136]	; 0x88
	if (mpu9250SetGyroRange(control._gyroRange) < 0) {
1a004e82:	f894 0021 	ldrb.w	r0, [r4, #33]	; 0x21
1a004e86:	f7ff fd03 	bl	1a004890 <mpu9250SetGyroRange>
1a004e8a:	2800      	cmp	r0, #0
1a004e8c:	db18      	blt.n	1a004ec0 <mpu9250CalibrateGyro+0x144>
	if (mpu9250SetDlpfBandwidth(control._bandwidth) < 0) {
1a004e8e:	f894 0022 	ldrb.w	r0, [r4, #34]	; 0x22
1a004e92:	f7ff fd47 	bl	1a004924 <mpu9250SetDlpfBandwidth>
1a004e96:	2800      	cmp	r0, #0
1a004e98:	db15      	blt.n	1a004ec6 <mpu9250CalibrateGyro+0x14a>
	if (mpu9250SetSrd(control._srd) < 0) {
1a004e9a:	f894 0023 	ldrb.w	r0, [r4, #35]	; 0x23
1a004e9e:	f7ff fdbd 	bl	1a004a1c <mpu9250SetSrd>
1a004ea2:	2800      	cmp	r0, #0
1a004ea4:	db12      	blt.n	1a004ecc <mpu9250CalibrateGyro+0x150>
	return 1;
1a004ea6:	2001      	movs	r0, #1
}
1a004ea8:	ecbd 8b02 	vpop	{d8}
1a004eac:	bd38      	pop	{r3, r4, r5, pc}
		return -1;
1a004eae:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
1a004eb2:	e7f9      	b.n	1a004ea8 <mpu9250CalibrateGyro+0x12c>
		return -2;
1a004eb4:	f06f 0001 	mvn.w	r0, #1
1a004eb8:	e7f6      	b.n	1a004ea8 <mpu9250CalibrateGyro+0x12c>
		return -3;
1a004eba:	f06f 0002 	mvn.w	r0, #2
1a004ebe:	e7f3      	b.n	1a004ea8 <mpu9250CalibrateGyro+0x12c>
		return -4;
1a004ec0:	f06f 0003 	mvn.w	r0, #3
1a004ec4:	e7f0      	b.n	1a004ea8 <mpu9250CalibrateGyro+0x12c>
		return -5;
1a004ec6:	f06f 0004 	mvn.w	r0, #4
1a004eca:	e7ed      	b.n	1a004ea8 <mpu9250CalibrateGyro+0x12c>
		return -6;
1a004ecc:	f06f 0005 	mvn.w	r0, #5
1a004ed0:	e7ea      	b.n	1a004ea8 <mpu9250CalibrateGyro+0x12c>
1a004ed2:	bf00      	nop
1a004ed4:	100034a0 	.word	0x100034a0

1a004ed8 <mpu9250Init>:
{
1a004ed8:	b510      	push	{r4, lr}
1a004eda:	4604      	mov	r4, r0
	mpu9250InitializeControlStructure();
1a004edc:	f7ff fbcc 	bl	1a004678 <mpu9250InitializeControlStructure>
	control.address = address;
1a004ee0:	4ba2      	ldr	r3, [pc, #648]	; (1a00516c <mpu9250Init+0x294>)
1a004ee2:	701c      	strb	r4, [r3, #0]
	i2cInit(I2C0, MPU9250_I2C_RATE);
1a004ee4:	49a2      	ldr	r1, [pc, #648]	; (1a005170 <mpu9250Init+0x298>)
1a004ee6:	2000      	movs	r0, #0
1a004ee8:	f7fe ffba 	bl	1a003e60 <i2cInit>
	if (mpu9250WriteRegister(MPU9250_PWR_MGMNT_1, MPU9250_CLOCK_SEL_PLL) < 0) {
1a004eec:	2101      	movs	r1, #1
1a004eee:	206b      	movs	r0, #107	; 0x6b
1a004ef0:	f7ff fc2e 	bl	1a004750 <mpu9250WriteRegister>
1a004ef4:	2800      	cmp	r0, #0
1a004ef6:	f2c0 80fd 	blt.w	1a0050f4 <mpu9250Init+0x21c>
	if (mpu9250WriteRegister(MPU9250_USER_CTRL, MPU9250_I2C_MST_EN) < 0) {
1a004efa:	2120      	movs	r1, #32
1a004efc:	206a      	movs	r0, #106	; 0x6a
1a004efe:	f7ff fc27 	bl	1a004750 <mpu9250WriteRegister>
1a004f02:	2800      	cmp	r0, #0
1a004f04:	f2c0 80f9 	blt.w	1a0050fa <mpu9250Init+0x222>
	if (mpu9250WriteRegister(MPU9250_I2C_MST_CTRL, MPU9250_I2C_MST_CLK) < 0) {
1a004f08:	210d      	movs	r1, #13
1a004f0a:	2024      	movs	r0, #36	; 0x24
1a004f0c:	f7ff fc20 	bl	1a004750 <mpu9250WriteRegister>
1a004f10:	2800      	cmp	r0, #0
1a004f12:	f2c0 80f5 	blt.w	1a005100 <mpu9250Init+0x228>
	mpu9250WriteAK8963Register(MPU9250_AK8963_CNTL1, MPU9250_AK8963_PWR_DOWN);
1a004f16:	2100      	movs	r1, #0
1a004f18:	200a      	movs	r0, #10
1a004f1a:	f7ff fc7d 	bl	1a004818 <mpu9250WriteAK8963Register>
	mpu9250WriteRegister(MPU9250_PWR_MGMNT_1, MPU9250_PWR_RESET);
1a004f1e:	2180      	movs	r1, #128	; 0x80
1a004f20:	206b      	movs	r0, #107	; 0x6b
1a004f22:	f7ff fc15 	bl	1a004750 <mpu9250WriteRegister>
	delay(1);
1a004f26:	2001      	movs	r0, #1
1a004f28:	2100      	movs	r1, #0
1a004f2a:	f7ff fa45 	bl	1a0043b8 <delay>
	mpu9250WriteAK8963Register(MPU9250_AK8963_CNTL2, MPU9250_AK8963_RESET);
1a004f2e:	2101      	movs	r1, #1
1a004f30:	200b      	movs	r0, #11
1a004f32:	f7ff fc71 	bl	1a004818 <mpu9250WriteAK8963Register>
	if (mpu9250WriteRegister(MPU9250_PWR_MGMNT_1, MPU9250_CLOCK_SEL_PLL) < 0) {
1a004f36:	2101      	movs	r1, #1
1a004f38:	206b      	movs	r0, #107	; 0x6b
1a004f3a:	f7ff fc09 	bl	1a004750 <mpu9250WriteRegister>
1a004f3e:	2800      	cmp	r0, #0
1a004f40:	f2c0 80e1 	blt.w	1a005106 <mpu9250Init+0x22e>
	if ((mpu9250WhoAmI() != 113) && (mpu9250WhoAmI() != 115)) {
1a004f44:	f7ff fbf4 	bl	1a004730 <mpu9250WhoAmI>
1a004f48:	2871      	cmp	r0, #113	; 0x71
1a004f4a:	d004      	beq.n	1a004f56 <mpu9250Init+0x7e>
1a004f4c:	f7ff fbf0 	bl	1a004730 <mpu9250WhoAmI>
1a004f50:	2873      	cmp	r0, #115	; 0x73
1a004f52:	f040 80db 	bne.w	1a00510c <mpu9250Init+0x234>
	if (mpu9250WriteRegister(MPU9250_PWR_MGMNT_2, MPU9250_SEN_ENABLE) < 0) {
1a004f56:	2100      	movs	r1, #0
1a004f58:	206c      	movs	r0, #108	; 0x6c
1a004f5a:	f7ff fbf9 	bl	1a004750 <mpu9250WriteRegister>
1a004f5e:	2800      	cmp	r0, #0
1a004f60:	f2c0 80d7 	blt.w	1a005112 <mpu9250Init+0x23a>
	if (mpu9250WriteRegister(MPU9250_ACCEL_CONFIG, MPU9250_ACCEL_FS_SEL_16G) < 0) {
1a004f64:	2118      	movs	r1, #24
1a004f66:	201c      	movs	r0, #28
1a004f68:	f7ff fbf2 	bl	1a004750 <mpu9250WriteRegister>
1a004f6c:	2800      	cmp	r0, #0
1a004f6e:	f2c0 80d3 	blt.w	1a005118 <mpu9250Init+0x240>
	control._accelScale = MPU9250_G * 16.0f / 32767.5f; // setting the accel scale to 16G
1a004f72:	4b7e      	ldr	r3, [pc, #504]	; (1a00516c <mpu9250Init+0x294>)
1a004f74:	4a7f      	ldr	r2, [pc, #508]	; (1a005174 <mpu9250Init+0x29c>)
1a004f76:	605a      	str	r2, [r3, #4]
	control._accelRange = MPU9250_ACCEL_RANGE_16G;
1a004f78:	2203      	movs	r2, #3
1a004f7a:	f883 2020 	strb.w	r2, [r3, #32]
	if (mpu9250WriteRegister(MPU9250_GYRO_CONFIG, MPU9250_GYRO_FS_SEL_2000DPS) < 0) {
1a004f7e:	2118      	movs	r1, #24
1a004f80:	201b      	movs	r0, #27
1a004f82:	f7ff fbe5 	bl	1a004750 <mpu9250WriteRegister>
1a004f86:	2800      	cmp	r0, #0
1a004f88:	f2c0 80c9 	blt.w	1a00511e <mpu9250Init+0x246>
	control._gyroScale = 2000.0f / 32767.5f * MPU9250_D2R; 
1a004f8c:	4b77      	ldr	r3, [pc, #476]	; (1a00516c <mpu9250Init+0x294>)
1a004f8e:	4a7a      	ldr	r2, [pc, #488]	; (1a005178 <mpu9250Init+0x2a0>)
1a004f90:	609a      	str	r2, [r3, #8]
	control._gyroRange = MPU9250_GYRO_RANGE_2000DPS;
1a004f92:	2203      	movs	r2, #3
1a004f94:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
	if (mpu9250WriteRegister(MPU9250_ACCEL_CONFIG2, MPU9250_ACCEL_DLPF_184) < 0) {
1a004f98:	2101      	movs	r1, #1
1a004f9a:	201d      	movs	r0, #29
1a004f9c:	f7ff fbd8 	bl	1a004750 <mpu9250WriteRegister>
1a004fa0:	2800      	cmp	r0, #0
1a004fa2:	f2c0 80bf 	blt.w	1a005124 <mpu9250Init+0x24c>
	if (mpu9250WriteRegister(MPU9250_CONFIG, MPU9250_GYRO_DLPF_184) < 0) { 
1a004fa6:	2101      	movs	r1, #1
1a004fa8:	201a      	movs	r0, #26
1a004faa:	f7ff fbd1 	bl	1a004750 <mpu9250WriteRegister>
1a004fae:	2800      	cmp	r0, #0
1a004fb0:	f2c0 80bb 	blt.w	1a00512a <mpu9250Init+0x252>
	control._bandwidth = MPU9250_DLPF_BANDWIDTH_184HZ;
1a004fb4:	2100      	movs	r1, #0
1a004fb6:	4b6d      	ldr	r3, [pc, #436]	; (1a00516c <mpu9250Init+0x294>)
1a004fb8:	f883 1022 	strb.w	r1, [r3, #34]	; 0x22
	if (mpu9250WriteRegister(MPU9250_SMPDIV, 0x00) < 0) {
1a004fbc:	2019      	movs	r0, #25
1a004fbe:	f7ff fbc7 	bl	1a004750 <mpu9250WriteRegister>
1a004fc2:	2800      	cmp	r0, #0
1a004fc4:	f2c0 80b4 	blt.w	1a005130 <mpu9250Init+0x258>
	control._srd = 0;
1a004fc8:	4b68      	ldr	r3, [pc, #416]	; (1a00516c <mpu9250Init+0x294>)
1a004fca:	2200      	movs	r2, #0
1a004fcc:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
	if (mpu9250WriteRegister(MPU9250_USER_CTRL, MPU9250_I2C_MST_EN) < 0) {
1a004fd0:	2120      	movs	r1, #32
1a004fd2:	206a      	movs	r0, #106	; 0x6a
1a004fd4:	f7ff fbbc 	bl	1a004750 <mpu9250WriteRegister>
1a004fd8:	2800      	cmp	r0, #0
1a004fda:	f2c0 80ac 	blt.w	1a005136 <mpu9250Init+0x25e>
	if (mpu9250WriteRegister(MPU9250_I2C_MST_CTRL, MPU9250_I2C_MST_CLK) < 0) {
1a004fde:	210d      	movs	r1, #13
1a004fe0:	2024      	movs	r0, #36	; 0x24
1a004fe2:	f7ff fbb5 	bl	1a004750 <mpu9250WriteRegister>
1a004fe6:	2800      	cmp	r0, #0
1a004fe8:	f2c0 80a8 	blt.w	1a00513c <mpu9250Init+0x264>
	if (mpu9250WhoAmIAK8963() != 72) {
1a004fec:	f7ff fc04 	bl	1a0047f8 <mpu9250WhoAmIAK8963>
1a004ff0:	2848      	cmp	r0, #72	; 0x48
1a004ff2:	f040 80a6 	bne.w	1a005142 <mpu9250Init+0x26a>
	if (mpu9250WriteAK8963Register(MPU9250_AK8963_CNTL1, MPU9250_AK8963_PWR_DOWN) < 0) {
1a004ff6:	2100      	movs	r1, #0
1a004ff8:	200a      	movs	r0, #10
1a004ffa:	f7ff fc0d 	bl	1a004818 <mpu9250WriteAK8963Register>
1a004ffe:	2800      	cmp	r0, #0
1a005000:	f2c0 80a2 	blt.w	1a005148 <mpu9250Init+0x270>
	delay(100); // long wait between AK8963 mode changes
1a005004:	2064      	movs	r0, #100	; 0x64
1a005006:	2100      	movs	r1, #0
1a005008:	f7ff f9d6 	bl	1a0043b8 <delay>
	if (mpu9250WriteAK8963Register(MPU9250_AK8963_CNTL1, MPU9250_AK8963_FUSE_ROM) < 0) {
1a00500c:	210f      	movs	r1, #15
1a00500e:	200a      	movs	r0, #10
1a005010:	f7ff fc02 	bl	1a004818 <mpu9250WriteAK8963Register>
1a005014:	2800      	cmp	r0, #0
1a005016:	f2c0 809a 	blt.w	1a00514e <mpu9250Init+0x276>
	delay(100); // long wait between AK8963 mode changes
1a00501a:	2064      	movs	r0, #100	; 0x64
1a00501c:	2100      	movs	r1, #0
1a00501e:	f7ff f9cb 	bl	1a0043b8 <delay>
	mpu9250ReadAK8963Registers(MPU9250_AK8963_ASA, 3);
1a005022:	2103      	movs	r1, #3
1a005024:	2010      	movs	r0, #16
1a005026:	f7ff fbb9 	bl	1a00479c <mpu9250ReadAK8963Registers>
	control._magScaleX = ((((float) control._buffer[0]) - 128.0f) / (256.0f) + 1.0f) * 4912.0f
1a00502a:	4b50      	ldr	r3, [pc, #320]	; (1a00516c <mpu9250Init+0x294>)
1a00502c:	f893 2024 	ldrb.w	r2, [r3, #36]	; 0x24
1a005030:	ee07 2a10 	vmov	s14, r2
1a005034:	eeb8 7a47 	vcvt.f32.u32	s14, s14
1a005038:	eddf 4a50 	vldr	s9, [pc, #320]	; 1a00517c <mpu9250Init+0x2a4>
1a00503c:	ee37 7a64 	vsub.f32	s14, s14, s9
1a005040:	ed9f 5a4f 	vldr	s10, [pc, #316]	; 1a005180 <mpu9250Init+0x2a8>
1a005044:	ee27 7a05 	vmul.f32	s14, s14, s10
1a005048:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
1a00504c:	ee37 7a25 	vadd.f32	s14, s14, s11
1a005050:	ed9f 6a4c 	vldr	s12, [pc, #304]	; 1a005184 <mpu9250Init+0x2ac>
1a005054:	ee27 7a06 	vmul.f32	s14, s14, s12
			/ 32760.0f; // micro Tesla
1a005058:	eddf 6a4b 	vldr	s13, [pc, #300]	; 1a005188 <mpu9250Init+0x2b0>
1a00505c:	eec7 7a26 	vdiv.f32	s15, s14, s13
	control._magScaleX = ((((float) control._buffer[0]) - 128.0f) / (256.0f) + 1.0f) * 4912.0f
1a005060:	edc3 7a03 	vstr	s15, [r3, #12]
	control._magScaleY = ((((float) control._buffer[1]) - 128.0f) / (256.0f) + 1.0f) * 4912.0f
1a005064:	f893 2025 	ldrb.w	r2, [r3, #37]	; 0x25
1a005068:	ee07 2a10 	vmov	s14, r2
1a00506c:	eeb8 7a47 	vcvt.f32.u32	s14, s14
1a005070:	ee37 7a64 	vsub.f32	s14, s14, s9
1a005074:	ee27 7a05 	vmul.f32	s14, s14, s10
1a005078:	ee37 7a25 	vadd.f32	s14, s14, s11
1a00507c:	ee27 7a06 	vmul.f32	s14, s14, s12
			/ 32760.0f; // micro Tesla
1a005080:	eec7 7a26 	vdiv.f32	s15, s14, s13
	control._magScaleY = ((((float) control._buffer[1]) - 128.0f) / (256.0f) + 1.0f) * 4912.0f
1a005084:	edc3 7a04 	vstr	s15, [r3, #16]
	control._magScaleZ = ((((float) control._buffer[2]) - 128.0f) / (256.0f) + 1.0f) * 4912.0f
1a005088:	f893 2026 	ldrb.w	r2, [r3, #38]	; 0x26
1a00508c:	ee07 2a90 	vmov	s15, r2
1a005090:	eef8 7a67 	vcvt.f32.u32	s15, s15
1a005094:	ee77 7ae4 	vsub.f32	s15, s15, s9
1a005098:	ee67 7a85 	vmul.f32	s15, s15, s10
1a00509c:	ee77 7aa5 	vadd.f32	s15, s15, s11
1a0050a0:	ee67 7a86 	vmul.f32	s15, s15, s12
			/ 32760.0f; // micro Tesla
1a0050a4:	ee87 7aa6 	vdiv.f32	s14, s15, s13
	control._magScaleZ = ((((float) control._buffer[2]) - 128.0f) / (256.0f) + 1.0f) * 4912.0f
1a0050a8:	ed83 7a05 	vstr	s14, [r3, #20]
	if (mpu9250WriteAK8963Register(MPU9250_AK8963_CNTL1, MPU9250_AK8963_PWR_DOWN) < 0) {
1a0050ac:	2100      	movs	r1, #0
1a0050ae:	200a      	movs	r0, #10
1a0050b0:	f7ff fbb2 	bl	1a004818 <mpu9250WriteAK8963Register>
1a0050b4:	2800      	cmp	r0, #0
1a0050b6:	db4d      	blt.n	1a005154 <mpu9250Init+0x27c>
	delay(100); // long wait between AK8963 mode changes
1a0050b8:	2064      	movs	r0, #100	; 0x64
1a0050ba:	2100      	movs	r1, #0
1a0050bc:	f7ff f97c 	bl	1a0043b8 <delay>
	if (mpu9250WriteAK8963Register(MPU9250_AK8963_CNTL1, MPU9250_AK8963_CNT_MEAS2) < 0) {
1a0050c0:	2116      	movs	r1, #22
1a0050c2:	200a      	movs	r0, #10
1a0050c4:	f7ff fba8 	bl	1a004818 <mpu9250WriteAK8963Register>
1a0050c8:	2800      	cmp	r0, #0
1a0050ca:	db46      	blt.n	1a00515a <mpu9250Init+0x282>
	delay(100); // long wait between AK8963 mode changes
1a0050cc:	2064      	movs	r0, #100	; 0x64
1a0050ce:	2100      	movs	r1, #0
1a0050d0:	f7ff f972 	bl	1a0043b8 <delay>
	if (mpu9250WriteRegister(MPU9250_PWR_MGMNT_1, MPU9250_CLOCK_SEL_PLL) < 0) {
1a0050d4:	2101      	movs	r1, #1
1a0050d6:	206b      	movs	r0, #107	; 0x6b
1a0050d8:	f7ff fb3a 	bl	1a004750 <mpu9250WriteRegister>
1a0050dc:	2800      	cmp	r0, #0
1a0050de:	db3f      	blt.n	1a005160 <mpu9250Init+0x288>
	mpu9250ReadAK8963Registers(MPU9250_AK8963_HXL, 7);
1a0050e0:	2107      	movs	r1, #7
1a0050e2:	2003      	movs	r0, #3
1a0050e4:	f7ff fb5a 	bl	1a00479c <mpu9250ReadAK8963Registers>
	if (mpu9250CalibrateGyro() < 0) {
1a0050e8:	f7ff fe48 	bl	1a004d7c <mpu9250CalibrateGyro>
1a0050ec:	2800      	cmp	r0, #0
1a0050ee:	db3a      	blt.n	1a005166 <mpu9250Init+0x28e>
	return 1;
1a0050f0:	2001      	movs	r0, #1
}
1a0050f2:	bd10      	pop	{r4, pc}
		return -1;
1a0050f4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
1a0050f8:	e7fb      	b.n	1a0050f2 <mpu9250Init+0x21a>
		return -2;
1a0050fa:	f06f 0001 	mvn.w	r0, #1
1a0050fe:	e7f8      	b.n	1a0050f2 <mpu9250Init+0x21a>
		return -3;
1a005100:	f06f 0002 	mvn.w	r0, #2
1a005104:	e7f5      	b.n	1a0050f2 <mpu9250Init+0x21a>
		return -4;
1a005106:	f06f 0003 	mvn.w	r0, #3
1a00510a:	e7f2      	b.n	1a0050f2 <mpu9250Init+0x21a>
		return -5;
1a00510c:	f06f 0004 	mvn.w	r0, #4
1a005110:	e7ef      	b.n	1a0050f2 <mpu9250Init+0x21a>
		return -6;
1a005112:	f06f 0005 	mvn.w	r0, #5
1a005116:	e7ec      	b.n	1a0050f2 <mpu9250Init+0x21a>
		return -7;
1a005118:	f06f 0006 	mvn.w	r0, #6
1a00511c:	e7e9      	b.n	1a0050f2 <mpu9250Init+0x21a>
		return -8;
1a00511e:	f06f 0007 	mvn.w	r0, #7
1a005122:	e7e6      	b.n	1a0050f2 <mpu9250Init+0x21a>
		return -9;
1a005124:	f06f 0008 	mvn.w	r0, #8
1a005128:	e7e3      	b.n	1a0050f2 <mpu9250Init+0x21a>
		return -10;
1a00512a:	f06f 0009 	mvn.w	r0, #9
1a00512e:	e7e0      	b.n	1a0050f2 <mpu9250Init+0x21a>
		return -11;
1a005130:	f06f 000a 	mvn.w	r0, #10
1a005134:	e7dd      	b.n	1a0050f2 <mpu9250Init+0x21a>
		return -12;
1a005136:	f06f 000b 	mvn.w	r0, #11
1a00513a:	e7da      	b.n	1a0050f2 <mpu9250Init+0x21a>
		return -13;
1a00513c:	f06f 000c 	mvn.w	r0, #12
1a005140:	e7d7      	b.n	1a0050f2 <mpu9250Init+0x21a>
		return -14;
1a005142:	f06f 000d 	mvn.w	r0, #13
1a005146:	e7d4      	b.n	1a0050f2 <mpu9250Init+0x21a>
		return -15;
1a005148:	f06f 000e 	mvn.w	r0, #14
1a00514c:	e7d1      	b.n	1a0050f2 <mpu9250Init+0x21a>
		return -16;
1a00514e:	f06f 000f 	mvn.w	r0, #15
1a005152:	e7ce      	b.n	1a0050f2 <mpu9250Init+0x21a>
		return -17;
1a005154:	f06f 0010 	mvn.w	r0, #16
1a005158:	e7cb      	b.n	1a0050f2 <mpu9250Init+0x21a>
		return -18;
1a00515a:	f06f 0011 	mvn.w	r0, #17
1a00515e:	e7c8      	b.n	1a0050f2 <mpu9250Init+0x21a>
		return -19;
1a005160:	f06f 0012 	mvn.w	r0, #18
1a005164:	e7c5      	b.n	1a0050f2 <mpu9250Init+0x21a>
		return -20;
1a005166:	f06f 0013 	mvn.w	r0, #19
1a00516a:	e7c2      	b.n	1a0050f2 <mpu9250Init+0x21a>
1a00516c:	100034a0 	.word	0x100034a0
1a005170:	00061a80 	.word	0x00061a80
1a005174:	3b9cea16 	.word	0x3b9cea16
1a005178:	3a8ba0e4 	.word	0x3a8ba0e4
1a00517c:	43000000 	.word	0x43000000
1a005180:	3b800000 	.word	0x3b800000
1a005184:	45998000 	.word	0x45998000
1a005188:	46fff000 	.word	0x46fff000

1a00518c <__aeabi_drsub>:
1a00518c:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
1a005190:	e002      	b.n	1a005198 <__adddf3>
1a005192:	bf00      	nop

1a005194 <__aeabi_dsub>:
1a005194:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

1a005198 <__adddf3>:
1a005198:	b530      	push	{r4, r5, lr}
1a00519a:	ea4f 0441 	mov.w	r4, r1, lsl #1
1a00519e:	ea4f 0543 	mov.w	r5, r3, lsl #1
1a0051a2:	ea94 0f05 	teq	r4, r5
1a0051a6:	bf08      	it	eq
1a0051a8:	ea90 0f02 	teqeq	r0, r2
1a0051ac:	bf1f      	itttt	ne
1a0051ae:	ea54 0c00 	orrsne.w	ip, r4, r0
1a0051b2:	ea55 0c02 	orrsne.w	ip, r5, r2
1a0051b6:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
1a0051ba:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
1a0051be:	f000 80e2 	beq.w	1a005386 <__adddf3+0x1ee>
1a0051c2:	ea4f 5454 	mov.w	r4, r4, lsr #21
1a0051c6:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
1a0051ca:	bfb8      	it	lt
1a0051cc:	426d      	neglt	r5, r5
1a0051ce:	dd0c      	ble.n	1a0051ea <__adddf3+0x52>
1a0051d0:	442c      	add	r4, r5
1a0051d2:	ea80 0202 	eor.w	r2, r0, r2
1a0051d6:	ea81 0303 	eor.w	r3, r1, r3
1a0051da:	ea82 0000 	eor.w	r0, r2, r0
1a0051de:	ea83 0101 	eor.w	r1, r3, r1
1a0051e2:	ea80 0202 	eor.w	r2, r0, r2
1a0051e6:	ea81 0303 	eor.w	r3, r1, r3
1a0051ea:	2d36      	cmp	r5, #54	; 0x36
1a0051ec:	bf88      	it	hi
1a0051ee:	bd30      	pophi	{r4, r5, pc}
1a0051f0:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
1a0051f4:	ea4f 3101 	mov.w	r1, r1, lsl #12
1a0051f8:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
1a0051fc:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
1a005200:	d002      	beq.n	1a005208 <__adddf3+0x70>
1a005202:	4240      	negs	r0, r0
1a005204:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
1a005208:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
1a00520c:	ea4f 3303 	mov.w	r3, r3, lsl #12
1a005210:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
1a005214:	d002      	beq.n	1a00521c <__adddf3+0x84>
1a005216:	4252      	negs	r2, r2
1a005218:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
1a00521c:	ea94 0f05 	teq	r4, r5
1a005220:	f000 80a7 	beq.w	1a005372 <__adddf3+0x1da>
1a005224:	f1a4 0401 	sub.w	r4, r4, #1
1a005228:	f1d5 0e20 	rsbs	lr, r5, #32
1a00522c:	db0d      	blt.n	1a00524a <__adddf3+0xb2>
1a00522e:	fa02 fc0e 	lsl.w	ip, r2, lr
1a005232:	fa22 f205 	lsr.w	r2, r2, r5
1a005236:	1880      	adds	r0, r0, r2
1a005238:	f141 0100 	adc.w	r1, r1, #0
1a00523c:	fa03 f20e 	lsl.w	r2, r3, lr
1a005240:	1880      	adds	r0, r0, r2
1a005242:	fa43 f305 	asr.w	r3, r3, r5
1a005246:	4159      	adcs	r1, r3
1a005248:	e00e      	b.n	1a005268 <__adddf3+0xd0>
1a00524a:	f1a5 0520 	sub.w	r5, r5, #32
1a00524e:	f10e 0e20 	add.w	lr, lr, #32
1a005252:	2a01      	cmp	r2, #1
1a005254:	fa03 fc0e 	lsl.w	ip, r3, lr
1a005258:	bf28      	it	cs
1a00525a:	f04c 0c02 	orrcs.w	ip, ip, #2
1a00525e:	fa43 f305 	asr.w	r3, r3, r5
1a005262:	18c0      	adds	r0, r0, r3
1a005264:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
1a005268:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
1a00526c:	d507      	bpl.n	1a00527e <__adddf3+0xe6>
1a00526e:	f04f 0e00 	mov.w	lr, #0
1a005272:	f1dc 0c00 	rsbs	ip, ip, #0
1a005276:	eb7e 0000 	sbcs.w	r0, lr, r0
1a00527a:	eb6e 0101 	sbc.w	r1, lr, r1
1a00527e:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
1a005282:	d31b      	bcc.n	1a0052bc <__adddf3+0x124>
1a005284:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
1a005288:	d30c      	bcc.n	1a0052a4 <__adddf3+0x10c>
1a00528a:	0849      	lsrs	r1, r1, #1
1a00528c:	ea5f 0030 	movs.w	r0, r0, rrx
1a005290:	ea4f 0c3c 	mov.w	ip, ip, rrx
1a005294:	f104 0401 	add.w	r4, r4, #1
1a005298:	ea4f 5244 	mov.w	r2, r4, lsl #21
1a00529c:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
1a0052a0:	f080 809a 	bcs.w	1a0053d8 <__adddf3+0x240>
1a0052a4:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
1a0052a8:	bf08      	it	eq
1a0052aa:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
1a0052ae:	f150 0000 	adcs.w	r0, r0, #0
1a0052b2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
1a0052b6:	ea41 0105 	orr.w	r1, r1, r5
1a0052ba:	bd30      	pop	{r4, r5, pc}
1a0052bc:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
1a0052c0:	4140      	adcs	r0, r0
1a0052c2:	eb41 0101 	adc.w	r1, r1, r1
1a0052c6:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
1a0052ca:	f1a4 0401 	sub.w	r4, r4, #1
1a0052ce:	d1e9      	bne.n	1a0052a4 <__adddf3+0x10c>
1a0052d0:	f091 0f00 	teq	r1, #0
1a0052d4:	bf04      	itt	eq
1a0052d6:	4601      	moveq	r1, r0
1a0052d8:	2000      	moveq	r0, #0
1a0052da:	fab1 f381 	clz	r3, r1
1a0052de:	bf08      	it	eq
1a0052e0:	3320      	addeq	r3, #32
1a0052e2:	f1a3 030b 	sub.w	r3, r3, #11
1a0052e6:	f1b3 0220 	subs.w	r2, r3, #32
1a0052ea:	da0c      	bge.n	1a005306 <__adddf3+0x16e>
1a0052ec:	320c      	adds	r2, #12
1a0052ee:	dd08      	ble.n	1a005302 <__adddf3+0x16a>
1a0052f0:	f102 0c14 	add.w	ip, r2, #20
1a0052f4:	f1c2 020c 	rsb	r2, r2, #12
1a0052f8:	fa01 f00c 	lsl.w	r0, r1, ip
1a0052fc:	fa21 f102 	lsr.w	r1, r1, r2
1a005300:	e00c      	b.n	1a00531c <__adddf3+0x184>
1a005302:	f102 0214 	add.w	r2, r2, #20
1a005306:	bfd8      	it	le
1a005308:	f1c2 0c20 	rsble	ip, r2, #32
1a00530c:	fa01 f102 	lsl.w	r1, r1, r2
1a005310:	fa20 fc0c 	lsr.w	ip, r0, ip
1a005314:	bfdc      	itt	le
1a005316:	ea41 010c 	orrle.w	r1, r1, ip
1a00531a:	4090      	lslle	r0, r2
1a00531c:	1ae4      	subs	r4, r4, r3
1a00531e:	bfa2      	ittt	ge
1a005320:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
1a005324:	4329      	orrge	r1, r5
1a005326:	bd30      	popge	{r4, r5, pc}
1a005328:	ea6f 0404 	mvn.w	r4, r4
1a00532c:	3c1f      	subs	r4, #31
1a00532e:	da1c      	bge.n	1a00536a <__adddf3+0x1d2>
1a005330:	340c      	adds	r4, #12
1a005332:	dc0e      	bgt.n	1a005352 <__adddf3+0x1ba>
1a005334:	f104 0414 	add.w	r4, r4, #20
1a005338:	f1c4 0220 	rsb	r2, r4, #32
1a00533c:	fa20 f004 	lsr.w	r0, r0, r4
1a005340:	fa01 f302 	lsl.w	r3, r1, r2
1a005344:	ea40 0003 	orr.w	r0, r0, r3
1a005348:	fa21 f304 	lsr.w	r3, r1, r4
1a00534c:	ea45 0103 	orr.w	r1, r5, r3
1a005350:	bd30      	pop	{r4, r5, pc}
1a005352:	f1c4 040c 	rsb	r4, r4, #12
1a005356:	f1c4 0220 	rsb	r2, r4, #32
1a00535a:	fa20 f002 	lsr.w	r0, r0, r2
1a00535e:	fa01 f304 	lsl.w	r3, r1, r4
1a005362:	ea40 0003 	orr.w	r0, r0, r3
1a005366:	4629      	mov	r1, r5
1a005368:	bd30      	pop	{r4, r5, pc}
1a00536a:	fa21 f004 	lsr.w	r0, r1, r4
1a00536e:	4629      	mov	r1, r5
1a005370:	bd30      	pop	{r4, r5, pc}
1a005372:	f094 0f00 	teq	r4, #0
1a005376:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
1a00537a:	bf06      	itte	eq
1a00537c:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
1a005380:	3401      	addeq	r4, #1
1a005382:	3d01      	subne	r5, #1
1a005384:	e74e      	b.n	1a005224 <__adddf3+0x8c>
1a005386:	ea7f 5c64 	mvns.w	ip, r4, asr #21
1a00538a:	bf18      	it	ne
1a00538c:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
1a005390:	d029      	beq.n	1a0053e6 <__adddf3+0x24e>
1a005392:	ea94 0f05 	teq	r4, r5
1a005396:	bf08      	it	eq
1a005398:	ea90 0f02 	teqeq	r0, r2
1a00539c:	d005      	beq.n	1a0053aa <__adddf3+0x212>
1a00539e:	ea54 0c00 	orrs.w	ip, r4, r0
1a0053a2:	bf04      	itt	eq
1a0053a4:	4619      	moveq	r1, r3
1a0053a6:	4610      	moveq	r0, r2
1a0053a8:	bd30      	pop	{r4, r5, pc}
1a0053aa:	ea91 0f03 	teq	r1, r3
1a0053ae:	bf1e      	ittt	ne
1a0053b0:	2100      	movne	r1, #0
1a0053b2:	2000      	movne	r0, #0
1a0053b4:	bd30      	popne	{r4, r5, pc}
1a0053b6:	ea5f 5c54 	movs.w	ip, r4, lsr #21
1a0053ba:	d105      	bne.n	1a0053c8 <__adddf3+0x230>
1a0053bc:	0040      	lsls	r0, r0, #1
1a0053be:	4149      	adcs	r1, r1
1a0053c0:	bf28      	it	cs
1a0053c2:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
1a0053c6:	bd30      	pop	{r4, r5, pc}
1a0053c8:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
1a0053cc:	bf3c      	itt	cc
1a0053ce:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
1a0053d2:	bd30      	popcc	{r4, r5, pc}
1a0053d4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
1a0053d8:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
1a0053dc:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
1a0053e0:	f04f 0000 	mov.w	r0, #0
1a0053e4:	bd30      	pop	{r4, r5, pc}
1a0053e6:	ea7f 5c64 	mvns.w	ip, r4, asr #21
1a0053ea:	bf1a      	itte	ne
1a0053ec:	4619      	movne	r1, r3
1a0053ee:	4610      	movne	r0, r2
1a0053f0:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
1a0053f4:	bf1c      	itt	ne
1a0053f6:	460b      	movne	r3, r1
1a0053f8:	4602      	movne	r2, r0
1a0053fa:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
1a0053fe:	bf06      	itte	eq
1a005400:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
1a005404:	ea91 0f03 	teqeq	r1, r3
1a005408:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
1a00540c:	bd30      	pop	{r4, r5, pc}
1a00540e:	bf00      	nop

1a005410 <__aeabi_ui2d>:
1a005410:	f090 0f00 	teq	r0, #0
1a005414:	bf04      	itt	eq
1a005416:	2100      	moveq	r1, #0
1a005418:	4770      	bxeq	lr
1a00541a:	b530      	push	{r4, r5, lr}
1a00541c:	f44f 6480 	mov.w	r4, #1024	; 0x400
1a005420:	f104 0432 	add.w	r4, r4, #50	; 0x32
1a005424:	f04f 0500 	mov.w	r5, #0
1a005428:	f04f 0100 	mov.w	r1, #0
1a00542c:	e750      	b.n	1a0052d0 <__adddf3+0x138>
1a00542e:	bf00      	nop

1a005430 <__aeabi_i2d>:
1a005430:	f090 0f00 	teq	r0, #0
1a005434:	bf04      	itt	eq
1a005436:	2100      	moveq	r1, #0
1a005438:	4770      	bxeq	lr
1a00543a:	b530      	push	{r4, r5, lr}
1a00543c:	f44f 6480 	mov.w	r4, #1024	; 0x400
1a005440:	f104 0432 	add.w	r4, r4, #50	; 0x32
1a005444:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
1a005448:	bf48      	it	mi
1a00544a:	4240      	negmi	r0, r0
1a00544c:	f04f 0100 	mov.w	r1, #0
1a005450:	e73e      	b.n	1a0052d0 <__adddf3+0x138>
1a005452:	bf00      	nop

1a005454 <__aeabi_f2d>:
1a005454:	0042      	lsls	r2, r0, #1
1a005456:	ea4f 01e2 	mov.w	r1, r2, asr #3
1a00545a:	ea4f 0131 	mov.w	r1, r1, rrx
1a00545e:	ea4f 7002 	mov.w	r0, r2, lsl #28
1a005462:	bf1f      	itttt	ne
1a005464:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
1a005468:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
1a00546c:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
1a005470:	4770      	bxne	lr
1a005472:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
1a005476:	bf08      	it	eq
1a005478:	4770      	bxeq	lr
1a00547a:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
1a00547e:	bf04      	itt	eq
1a005480:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
1a005484:	4770      	bxeq	lr
1a005486:	b530      	push	{r4, r5, lr}
1a005488:	f44f 7460 	mov.w	r4, #896	; 0x380
1a00548c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
1a005490:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
1a005494:	e71c      	b.n	1a0052d0 <__adddf3+0x138>
1a005496:	bf00      	nop

1a005498 <__aeabi_ul2d>:
1a005498:	ea50 0201 	orrs.w	r2, r0, r1
1a00549c:	bf08      	it	eq
1a00549e:	4770      	bxeq	lr
1a0054a0:	b530      	push	{r4, r5, lr}
1a0054a2:	f04f 0500 	mov.w	r5, #0
1a0054a6:	e00a      	b.n	1a0054be <__aeabi_l2d+0x16>

1a0054a8 <__aeabi_l2d>:
1a0054a8:	ea50 0201 	orrs.w	r2, r0, r1
1a0054ac:	bf08      	it	eq
1a0054ae:	4770      	bxeq	lr
1a0054b0:	b530      	push	{r4, r5, lr}
1a0054b2:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
1a0054b6:	d502      	bpl.n	1a0054be <__aeabi_l2d+0x16>
1a0054b8:	4240      	negs	r0, r0
1a0054ba:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
1a0054be:	f44f 6480 	mov.w	r4, #1024	; 0x400
1a0054c2:	f104 0432 	add.w	r4, r4, #50	; 0x32
1a0054c6:	ea5f 5c91 	movs.w	ip, r1, lsr #22
1a0054ca:	f43f aed8 	beq.w	1a00527e <__adddf3+0xe6>
1a0054ce:	f04f 0203 	mov.w	r2, #3
1a0054d2:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
1a0054d6:	bf18      	it	ne
1a0054d8:	3203      	addne	r2, #3
1a0054da:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
1a0054de:	bf18      	it	ne
1a0054e0:	3203      	addne	r2, #3
1a0054e2:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
1a0054e6:	f1c2 0320 	rsb	r3, r2, #32
1a0054ea:	fa00 fc03 	lsl.w	ip, r0, r3
1a0054ee:	fa20 f002 	lsr.w	r0, r0, r2
1a0054f2:	fa01 fe03 	lsl.w	lr, r1, r3
1a0054f6:	ea40 000e 	orr.w	r0, r0, lr
1a0054fa:	fa21 f102 	lsr.w	r1, r1, r2
1a0054fe:	4414      	add	r4, r2
1a005500:	e6bd      	b.n	1a00527e <__adddf3+0xe6>
1a005502:	bf00      	nop

1a005504 <__aeabi_dmul>:
1a005504:	b570      	push	{r4, r5, r6, lr}
1a005506:	f04f 0cff 	mov.w	ip, #255	; 0xff
1a00550a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
1a00550e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
1a005512:	bf1d      	ittte	ne
1a005514:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
1a005518:	ea94 0f0c 	teqne	r4, ip
1a00551c:	ea95 0f0c 	teqne	r5, ip
1a005520:	f000 f8de 	bleq	1a0056e0 <__aeabi_dmul+0x1dc>
1a005524:	442c      	add	r4, r5
1a005526:	ea81 0603 	eor.w	r6, r1, r3
1a00552a:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
1a00552e:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
1a005532:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
1a005536:	bf18      	it	ne
1a005538:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
1a00553c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
1a005540:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
1a005544:	d038      	beq.n	1a0055b8 <__aeabi_dmul+0xb4>
1a005546:	fba0 ce02 	umull	ip, lr, r0, r2
1a00554a:	f04f 0500 	mov.w	r5, #0
1a00554e:	fbe1 e502 	umlal	lr, r5, r1, r2
1a005552:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
1a005556:	fbe0 e503 	umlal	lr, r5, r0, r3
1a00555a:	f04f 0600 	mov.w	r6, #0
1a00555e:	fbe1 5603 	umlal	r5, r6, r1, r3
1a005562:	f09c 0f00 	teq	ip, #0
1a005566:	bf18      	it	ne
1a005568:	f04e 0e01 	orrne.w	lr, lr, #1
1a00556c:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
1a005570:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
1a005574:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
1a005578:	d204      	bcs.n	1a005584 <__aeabi_dmul+0x80>
1a00557a:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
1a00557e:	416d      	adcs	r5, r5
1a005580:	eb46 0606 	adc.w	r6, r6, r6
1a005584:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
1a005588:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
1a00558c:	ea4f 20c5 	mov.w	r0, r5, lsl #11
1a005590:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
1a005594:	ea4f 2ece 	mov.w	lr, lr, lsl #11
1a005598:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
1a00559c:	bf88      	it	hi
1a00559e:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
1a0055a2:	d81e      	bhi.n	1a0055e2 <__aeabi_dmul+0xde>
1a0055a4:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
1a0055a8:	bf08      	it	eq
1a0055aa:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
1a0055ae:	f150 0000 	adcs.w	r0, r0, #0
1a0055b2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
1a0055b6:	bd70      	pop	{r4, r5, r6, pc}
1a0055b8:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
1a0055bc:	ea46 0101 	orr.w	r1, r6, r1
1a0055c0:	ea40 0002 	orr.w	r0, r0, r2
1a0055c4:	ea81 0103 	eor.w	r1, r1, r3
1a0055c8:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
1a0055cc:	bfc2      	ittt	gt
1a0055ce:	ebd4 050c 	rsbsgt	r5, r4, ip
1a0055d2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
1a0055d6:	bd70      	popgt	{r4, r5, r6, pc}
1a0055d8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
1a0055dc:	f04f 0e00 	mov.w	lr, #0
1a0055e0:	3c01      	subs	r4, #1
1a0055e2:	f300 80ab 	bgt.w	1a00573c <__aeabi_dmul+0x238>
1a0055e6:	f114 0f36 	cmn.w	r4, #54	; 0x36
1a0055ea:	bfde      	ittt	le
1a0055ec:	2000      	movle	r0, #0
1a0055ee:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
1a0055f2:	bd70      	pople	{r4, r5, r6, pc}
1a0055f4:	f1c4 0400 	rsb	r4, r4, #0
1a0055f8:	3c20      	subs	r4, #32
1a0055fa:	da35      	bge.n	1a005668 <__aeabi_dmul+0x164>
1a0055fc:	340c      	adds	r4, #12
1a0055fe:	dc1b      	bgt.n	1a005638 <__aeabi_dmul+0x134>
1a005600:	f104 0414 	add.w	r4, r4, #20
1a005604:	f1c4 0520 	rsb	r5, r4, #32
1a005608:	fa00 f305 	lsl.w	r3, r0, r5
1a00560c:	fa20 f004 	lsr.w	r0, r0, r4
1a005610:	fa01 f205 	lsl.w	r2, r1, r5
1a005614:	ea40 0002 	orr.w	r0, r0, r2
1a005618:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
1a00561c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
1a005620:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
1a005624:	fa21 f604 	lsr.w	r6, r1, r4
1a005628:	eb42 0106 	adc.w	r1, r2, r6
1a00562c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
1a005630:	bf08      	it	eq
1a005632:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
1a005636:	bd70      	pop	{r4, r5, r6, pc}
1a005638:	f1c4 040c 	rsb	r4, r4, #12
1a00563c:	f1c4 0520 	rsb	r5, r4, #32
1a005640:	fa00 f304 	lsl.w	r3, r0, r4
1a005644:	fa20 f005 	lsr.w	r0, r0, r5
1a005648:	fa01 f204 	lsl.w	r2, r1, r4
1a00564c:	ea40 0002 	orr.w	r0, r0, r2
1a005650:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
1a005654:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
1a005658:	f141 0100 	adc.w	r1, r1, #0
1a00565c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
1a005660:	bf08      	it	eq
1a005662:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
1a005666:	bd70      	pop	{r4, r5, r6, pc}
1a005668:	f1c4 0520 	rsb	r5, r4, #32
1a00566c:	fa00 f205 	lsl.w	r2, r0, r5
1a005670:	ea4e 0e02 	orr.w	lr, lr, r2
1a005674:	fa20 f304 	lsr.w	r3, r0, r4
1a005678:	fa01 f205 	lsl.w	r2, r1, r5
1a00567c:	ea43 0302 	orr.w	r3, r3, r2
1a005680:	fa21 f004 	lsr.w	r0, r1, r4
1a005684:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
1a005688:	fa21 f204 	lsr.w	r2, r1, r4
1a00568c:	ea20 0002 	bic.w	r0, r0, r2
1a005690:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
1a005694:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
1a005698:	bf08      	it	eq
1a00569a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
1a00569e:	bd70      	pop	{r4, r5, r6, pc}
1a0056a0:	f094 0f00 	teq	r4, #0
1a0056a4:	d10f      	bne.n	1a0056c6 <__aeabi_dmul+0x1c2>
1a0056a6:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
1a0056aa:	0040      	lsls	r0, r0, #1
1a0056ac:	eb41 0101 	adc.w	r1, r1, r1
1a0056b0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
1a0056b4:	bf08      	it	eq
1a0056b6:	3c01      	subeq	r4, #1
1a0056b8:	d0f7      	beq.n	1a0056aa <__aeabi_dmul+0x1a6>
1a0056ba:	ea41 0106 	orr.w	r1, r1, r6
1a0056be:	f095 0f00 	teq	r5, #0
1a0056c2:	bf18      	it	ne
1a0056c4:	4770      	bxne	lr
1a0056c6:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
1a0056ca:	0052      	lsls	r2, r2, #1
1a0056cc:	eb43 0303 	adc.w	r3, r3, r3
1a0056d0:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
1a0056d4:	bf08      	it	eq
1a0056d6:	3d01      	subeq	r5, #1
1a0056d8:	d0f7      	beq.n	1a0056ca <__aeabi_dmul+0x1c6>
1a0056da:	ea43 0306 	orr.w	r3, r3, r6
1a0056de:	4770      	bx	lr
1a0056e0:	ea94 0f0c 	teq	r4, ip
1a0056e4:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
1a0056e8:	bf18      	it	ne
1a0056ea:	ea95 0f0c 	teqne	r5, ip
1a0056ee:	d00c      	beq.n	1a00570a <__aeabi_dmul+0x206>
1a0056f0:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
1a0056f4:	bf18      	it	ne
1a0056f6:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
1a0056fa:	d1d1      	bne.n	1a0056a0 <__aeabi_dmul+0x19c>
1a0056fc:	ea81 0103 	eor.w	r1, r1, r3
1a005700:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
1a005704:	f04f 0000 	mov.w	r0, #0
1a005708:	bd70      	pop	{r4, r5, r6, pc}
1a00570a:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
1a00570e:	bf06      	itte	eq
1a005710:	4610      	moveq	r0, r2
1a005712:	4619      	moveq	r1, r3
1a005714:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
1a005718:	d019      	beq.n	1a00574e <__aeabi_dmul+0x24a>
1a00571a:	ea94 0f0c 	teq	r4, ip
1a00571e:	d102      	bne.n	1a005726 <__aeabi_dmul+0x222>
1a005720:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
1a005724:	d113      	bne.n	1a00574e <__aeabi_dmul+0x24a>
1a005726:	ea95 0f0c 	teq	r5, ip
1a00572a:	d105      	bne.n	1a005738 <__aeabi_dmul+0x234>
1a00572c:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
1a005730:	bf1c      	itt	ne
1a005732:	4610      	movne	r0, r2
1a005734:	4619      	movne	r1, r3
1a005736:	d10a      	bne.n	1a00574e <__aeabi_dmul+0x24a>
1a005738:	ea81 0103 	eor.w	r1, r1, r3
1a00573c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
1a005740:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
1a005744:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
1a005748:	f04f 0000 	mov.w	r0, #0
1a00574c:	bd70      	pop	{r4, r5, r6, pc}
1a00574e:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
1a005752:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
1a005756:	bd70      	pop	{r4, r5, r6, pc}

1a005758 <__aeabi_ddiv>:
1a005758:	b570      	push	{r4, r5, r6, lr}
1a00575a:	f04f 0cff 	mov.w	ip, #255	; 0xff
1a00575e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
1a005762:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
1a005766:	bf1d      	ittte	ne
1a005768:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
1a00576c:	ea94 0f0c 	teqne	r4, ip
1a005770:	ea95 0f0c 	teqne	r5, ip
1a005774:	f000 f8a7 	bleq	1a0058c6 <__aeabi_ddiv+0x16e>
1a005778:	eba4 0405 	sub.w	r4, r4, r5
1a00577c:	ea81 0e03 	eor.w	lr, r1, r3
1a005780:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
1a005784:	ea4f 3101 	mov.w	r1, r1, lsl #12
1a005788:	f000 8088 	beq.w	1a00589c <__aeabi_ddiv+0x144>
1a00578c:	ea4f 3303 	mov.w	r3, r3, lsl #12
1a005790:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
1a005794:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
1a005798:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
1a00579c:	ea4f 2202 	mov.w	r2, r2, lsl #8
1a0057a0:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
1a0057a4:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
1a0057a8:	ea4f 2600 	mov.w	r6, r0, lsl #8
1a0057ac:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
1a0057b0:	429d      	cmp	r5, r3
1a0057b2:	bf08      	it	eq
1a0057b4:	4296      	cmpeq	r6, r2
1a0057b6:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
1a0057ba:	f504 7440 	add.w	r4, r4, #768	; 0x300
1a0057be:	d202      	bcs.n	1a0057c6 <__aeabi_ddiv+0x6e>
1a0057c0:	085b      	lsrs	r3, r3, #1
1a0057c2:	ea4f 0232 	mov.w	r2, r2, rrx
1a0057c6:	1ab6      	subs	r6, r6, r2
1a0057c8:	eb65 0503 	sbc.w	r5, r5, r3
1a0057cc:	085b      	lsrs	r3, r3, #1
1a0057ce:	ea4f 0232 	mov.w	r2, r2, rrx
1a0057d2:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
1a0057d6:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
1a0057da:	ebb6 0e02 	subs.w	lr, r6, r2
1a0057de:	eb75 0e03 	sbcs.w	lr, r5, r3
1a0057e2:	bf22      	ittt	cs
1a0057e4:	1ab6      	subcs	r6, r6, r2
1a0057e6:	4675      	movcs	r5, lr
1a0057e8:	ea40 000c 	orrcs.w	r0, r0, ip
1a0057ec:	085b      	lsrs	r3, r3, #1
1a0057ee:	ea4f 0232 	mov.w	r2, r2, rrx
1a0057f2:	ebb6 0e02 	subs.w	lr, r6, r2
1a0057f6:	eb75 0e03 	sbcs.w	lr, r5, r3
1a0057fa:	bf22      	ittt	cs
1a0057fc:	1ab6      	subcs	r6, r6, r2
1a0057fe:	4675      	movcs	r5, lr
1a005800:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
1a005804:	085b      	lsrs	r3, r3, #1
1a005806:	ea4f 0232 	mov.w	r2, r2, rrx
1a00580a:	ebb6 0e02 	subs.w	lr, r6, r2
1a00580e:	eb75 0e03 	sbcs.w	lr, r5, r3
1a005812:	bf22      	ittt	cs
1a005814:	1ab6      	subcs	r6, r6, r2
1a005816:	4675      	movcs	r5, lr
1a005818:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
1a00581c:	085b      	lsrs	r3, r3, #1
1a00581e:	ea4f 0232 	mov.w	r2, r2, rrx
1a005822:	ebb6 0e02 	subs.w	lr, r6, r2
1a005826:	eb75 0e03 	sbcs.w	lr, r5, r3
1a00582a:	bf22      	ittt	cs
1a00582c:	1ab6      	subcs	r6, r6, r2
1a00582e:	4675      	movcs	r5, lr
1a005830:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
1a005834:	ea55 0e06 	orrs.w	lr, r5, r6
1a005838:	d018      	beq.n	1a00586c <__aeabi_ddiv+0x114>
1a00583a:	ea4f 1505 	mov.w	r5, r5, lsl #4
1a00583e:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
1a005842:	ea4f 1606 	mov.w	r6, r6, lsl #4
1a005846:	ea4f 03c3 	mov.w	r3, r3, lsl #3
1a00584a:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
1a00584e:	ea4f 02c2 	mov.w	r2, r2, lsl #3
1a005852:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
1a005856:	d1c0      	bne.n	1a0057da <__aeabi_ddiv+0x82>
1a005858:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
1a00585c:	d10b      	bne.n	1a005876 <__aeabi_ddiv+0x11e>
1a00585e:	ea41 0100 	orr.w	r1, r1, r0
1a005862:	f04f 0000 	mov.w	r0, #0
1a005866:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
1a00586a:	e7b6      	b.n	1a0057da <__aeabi_ddiv+0x82>
1a00586c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
1a005870:	bf04      	itt	eq
1a005872:	4301      	orreq	r1, r0
1a005874:	2000      	moveq	r0, #0
1a005876:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
1a00587a:	bf88      	it	hi
1a00587c:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
1a005880:	f63f aeaf 	bhi.w	1a0055e2 <__aeabi_dmul+0xde>
1a005884:	ebb5 0c03 	subs.w	ip, r5, r3
1a005888:	bf04      	itt	eq
1a00588a:	ebb6 0c02 	subseq.w	ip, r6, r2
1a00588e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
1a005892:	f150 0000 	adcs.w	r0, r0, #0
1a005896:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
1a00589a:	bd70      	pop	{r4, r5, r6, pc}
1a00589c:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
1a0058a0:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
1a0058a4:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
1a0058a8:	bfc2      	ittt	gt
1a0058aa:	ebd4 050c 	rsbsgt	r5, r4, ip
1a0058ae:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
1a0058b2:	bd70      	popgt	{r4, r5, r6, pc}
1a0058b4:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
1a0058b8:	f04f 0e00 	mov.w	lr, #0
1a0058bc:	3c01      	subs	r4, #1
1a0058be:	e690      	b.n	1a0055e2 <__aeabi_dmul+0xde>
1a0058c0:	ea45 0e06 	orr.w	lr, r5, r6
1a0058c4:	e68d      	b.n	1a0055e2 <__aeabi_dmul+0xde>
1a0058c6:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
1a0058ca:	ea94 0f0c 	teq	r4, ip
1a0058ce:	bf08      	it	eq
1a0058d0:	ea95 0f0c 	teqeq	r5, ip
1a0058d4:	f43f af3b 	beq.w	1a00574e <__aeabi_dmul+0x24a>
1a0058d8:	ea94 0f0c 	teq	r4, ip
1a0058dc:	d10a      	bne.n	1a0058f4 <__aeabi_ddiv+0x19c>
1a0058de:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
1a0058e2:	f47f af34 	bne.w	1a00574e <__aeabi_dmul+0x24a>
1a0058e6:	ea95 0f0c 	teq	r5, ip
1a0058ea:	f47f af25 	bne.w	1a005738 <__aeabi_dmul+0x234>
1a0058ee:	4610      	mov	r0, r2
1a0058f0:	4619      	mov	r1, r3
1a0058f2:	e72c      	b.n	1a00574e <__aeabi_dmul+0x24a>
1a0058f4:	ea95 0f0c 	teq	r5, ip
1a0058f8:	d106      	bne.n	1a005908 <__aeabi_ddiv+0x1b0>
1a0058fa:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
1a0058fe:	f43f aefd 	beq.w	1a0056fc <__aeabi_dmul+0x1f8>
1a005902:	4610      	mov	r0, r2
1a005904:	4619      	mov	r1, r3
1a005906:	e722      	b.n	1a00574e <__aeabi_dmul+0x24a>
1a005908:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
1a00590c:	bf18      	it	ne
1a00590e:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
1a005912:	f47f aec5 	bne.w	1a0056a0 <__aeabi_dmul+0x19c>
1a005916:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
1a00591a:	f47f af0d 	bne.w	1a005738 <__aeabi_dmul+0x234>
1a00591e:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
1a005922:	f47f aeeb 	bne.w	1a0056fc <__aeabi_dmul+0x1f8>
1a005926:	e712      	b.n	1a00574e <__aeabi_dmul+0x24a>

1a005928 <__gedf2>:
1a005928:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
1a00592c:	e006      	b.n	1a00593c <__cmpdf2+0x4>
1a00592e:	bf00      	nop

1a005930 <__ledf2>:
1a005930:	f04f 0c01 	mov.w	ip, #1
1a005934:	e002      	b.n	1a00593c <__cmpdf2+0x4>
1a005936:	bf00      	nop

1a005938 <__cmpdf2>:
1a005938:	f04f 0c01 	mov.w	ip, #1
1a00593c:	f84d cd04 	str.w	ip, [sp, #-4]!
1a005940:	ea4f 0c41 	mov.w	ip, r1, lsl #1
1a005944:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
1a005948:	ea4f 0c43 	mov.w	ip, r3, lsl #1
1a00594c:	bf18      	it	ne
1a00594e:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
1a005952:	d01b      	beq.n	1a00598c <__cmpdf2+0x54>
1a005954:	b001      	add	sp, #4
1a005956:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
1a00595a:	bf0c      	ite	eq
1a00595c:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
1a005960:	ea91 0f03 	teqne	r1, r3
1a005964:	bf02      	ittt	eq
1a005966:	ea90 0f02 	teqeq	r0, r2
1a00596a:	2000      	moveq	r0, #0
1a00596c:	4770      	bxeq	lr
1a00596e:	f110 0f00 	cmn.w	r0, #0
1a005972:	ea91 0f03 	teq	r1, r3
1a005976:	bf58      	it	pl
1a005978:	4299      	cmppl	r1, r3
1a00597a:	bf08      	it	eq
1a00597c:	4290      	cmpeq	r0, r2
1a00597e:	bf2c      	ite	cs
1a005980:	17d8      	asrcs	r0, r3, #31
1a005982:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
1a005986:	f040 0001 	orr.w	r0, r0, #1
1a00598a:	4770      	bx	lr
1a00598c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
1a005990:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
1a005994:	d102      	bne.n	1a00599c <__cmpdf2+0x64>
1a005996:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
1a00599a:	d107      	bne.n	1a0059ac <__cmpdf2+0x74>
1a00599c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
1a0059a0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
1a0059a4:	d1d6      	bne.n	1a005954 <__cmpdf2+0x1c>
1a0059a6:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
1a0059aa:	d0d3      	beq.n	1a005954 <__cmpdf2+0x1c>
1a0059ac:	f85d 0b04 	ldr.w	r0, [sp], #4
1a0059b0:	4770      	bx	lr
1a0059b2:	bf00      	nop

1a0059b4 <__aeabi_cdrcmple>:
1a0059b4:	4684      	mov	ip, r0
1a0059b6:	4610      	mov	r0, r2
1a0059b8:	4662      	mov	r2, ip
1a0059ba:	468c      	mov	ip, r1
1a0059bc:	4619      	mov	r1, r3
1a0059be:	4663      	mov	r3, ip
1a0059c0:	e000      	b.n	1a0059c4 <__aeabi_cdcmpeq>
1a0059c2:	bf00      	nop

1a0059c4 <__aeabi_cdcmpeq>:
1a0059c4:	b501      	push	{r0, lr}
1a0059c6:	f7ff ffb7 	bl	1a005938 <__cmpdf2>
1a0059ca:	2800      	cmp	r0, #0
1a0059cc:	bf48      	it	mi
1a0059ce:	f110 0f00 	cmnmi.w	r0, #0
1a0059d2:	bd01      	pop	{r0, pc}

1a0059d4 <__aeabi_dcmpeq>:
1a0059d4:	f84d ed08 	str.w	lr, [sp, #-8]!
1a0059d8:	f7ff fff4 	bl	1a0059c4 <__aeabi_cdcmpeq>
1a0059dc:	bf0c      	ite	eq
1a0059de:	2001      	moveq	r0, #1
1a0059e0:	2000      	movne	r0, #0
1a0059e2:	f85d fb08 	ldr.w	pc, [sp], #8
1a0059e6:	bf00      	nop

1a0059e8 <__aeabi_dcmplt>:
1a0059e8:	f84d ed08 	str.w	lr, [sp, #-8]!
1a0059ec:	f7ff ffea 	bl	1a0059c4 <__aeabi_cdcmpeq>
1a0059f0:	bf34      	ite	cc
1a0059f2:	2001      	movcc	r0, #1
1a0059f4:	2000      	movcs	r0, #0
1a0059f6:	f85d fb08 	ldr.w	pc, [sp], #8
1a0059fa:	bf00      	nop

1a0059fc <__aeabi_dcmple>:
1a0059fc:	f84d ed08 	str.w	lr, [sp, #-8]!
1a005a00:	f7ff ffe0 	bl	1a0059c4 <__aeabi_cdcmpeq>
1a005a04:	bf94      	ite	ls
1a005a06:	2001      	movls	r0, #1
1a005a08:	2000      	movhi	r0, #0
1a005a0a:	f85d fb08 	ldr.w	pc, [sp], #8
1a005a0e:	bf00      	nop

1a005a10 <__aeabi_dcmpge>:
1a005a10:	f84d ed08 	str.w	lr, [sp, #-8]!
1a005a14:	f7ff ffce 	bl	1a0059b4 <__aeabi_cdrcmple>
1a005a18:	bf94      	ite	ls
1a005a1a:	2001      	movls	r0, #1
1a005a1c:	2000      	movhi	r0, #0
1a005a1e:	f85d fb08 	ldr.w	pc, [sp], #8
1a005a22:	bf00      	nop

1a005a24 <__aeabi_dcmpgt>:
1a005a24:	f84d ed08 	str.w	lr, [sp, #-8]!
1a005a28:	f7ff ffc4 	bl	1a0059b4 <__aeabi_cdrcmple>
1a005a2c:	bf34      	ite	cc
1a005a2e:	2001      	movcc	r0, #1
1a005a30:	2000      	movcs	r0, #0
1a005a32:	f85d fb08 	ldr.w	pc, [sp], #8
1a005a36:	bf00      	nop

1a005a38 <__aeabi_d2f>:
1a005a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
1a005a3c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
1a005a40:	bf24      	itt	cs
1a005a42:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
1a005a46:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
1a005a4a:	d90d      	bls.n	1a005a68 <__aeabi_d2f+0x30>
1a005a4c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
1a005a50:	ea4f 02c0 	mov.w	r2, r0, lsl #3
1a005a54:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
1a005a58:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
1a005a5c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
1a005a60:	bf08      	it	eq
1a005a62:	f020 0001 	biceq.w	r0, r0, #1
1a005a66:	4770      	bx	lr
1a005a68:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
1a005a6c:	d121      	bne.n	1a005ab2 <__aeabi_d2f+0x7a>
1a005a6e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
1a005a72:	bfbc      	itt	lt
1a005a74:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
1a005a78:	4770      	bxlt	lr
1a005a7a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
1a005a7e:	ea4f 5252 	mov.w	r2, r2, lsr #21
1a005a82:	f1c2 0218 	rsb	r2, r2, #24
1a005a86:	f1c2 0c20 	rsb	ip, r2, #32
1a005a8a:	fa10 f30c 	lsls.w	r3, r0, ip
1a005a8e:	fa20 f002 	lsr.w	r0, r0, r2
1a005a92:	bf18      	it	ne
1a005a94:	f040 0001 	orrne.w	r0, r0, #1
1a005a98:	ea4f 23c1 	mov.w	r3, r1, lsl #11
1a005a9c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
1a005aa0:	fa03 fc0c 	lsl.w	ip, r3, ip
1a005aa4:	ea40 000c 	orr.w	r0, r0, ip
1a005aa8:	fa23 f302 	lsr.w	r3, r3, r2
1a005aac:	ea4f 0343 	mov.w	r3, r3, lsl #1
1a005ab0:	e7cc      	b.n	1a005a4c <__aeabi_d2f+0x14>
1a005ab2:	ea7f 5362 	mvns.w	r3, r2, asr #21
1a005ab6:	d107      	bne.n	1a005ac8 <__aeabi_d2f+0x90>
1a005ab8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
1a005abc:	bf1e      	ittt	ne
1a005abe:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
1a005ac2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
1a005ac6:	4770      	bxne	lr
1a005ac8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
1a005acc:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
1a005ad0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
1a005ad4:	4770      	bx	lr
1a005ad6:	bf00      	nop

1a005ad8 <__aeabi_uldivmod>:
1a005ad8:	b953      	cbnz	r3, 1a005af0 <__aeabi_uldivmod+0x18>
1a005ada:	b94a      	cbnz	r2, 1a005af0 <__aeabi_uldivmod+0x18>
1a005adc:	2900      	cmp	r1, #0
1a005ade:	bf08      	it	eq
1a005ae0:	2800      	cmpeq	r0, #0
1a005ae2:	bf1c      	itt	ne
1a005ae4:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
1a005ae8:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
1a005aec:	f000 b974 	b.w	1a005dd8 <__aeabi_idiv0>
1a005af0:	f1ad 0c08 	sub.w	ip, sp, #8
1a005af4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
1a005af8:	f000 f806 	bl	1a005b08 <__udivmoddi4>
1a005afc:	f8dd e004 	ldr.w	lr, [sp, #4]
1a005b00:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
1a005b04:	b004      	add	sp, #16
1a005b06:	4770      	bx	lr

1a005b08 <__udivmoddi4>:
1a005b08:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
1a005b0c:	9e08      	ldr	r6, [sp, #32]
1a005b0e:	4604      	mov	r4, r0
1a005b10:	4688      	mov	r8, r1
1a005b12:	2b00      	cmp	r3, #0
1a005b14:	f040 8085 	bne.w	1a005c22 <__udivmoddi4+0x11a>
1a005b18:	428a      	cmp	r2, r1
1a005b1a:	4615      	mov	r5, r2
1a005b1c:	d948      	bls.n	1a005bb0 <__udivmoddi4+0xa8>
1a005b1e:	fab2 f282 	clz	r2, r2
1a005b22:	b14a      	cbz	r2, 1a005b38 <__udivmoddi4+0x30>
1a005b24:	f1c2 0720 	rsb	r7, r2, #32
1a005b28:	fa01 f302 	lsl.w	r3, r1, r2
1a005b2c:	fa20 f707 	lsr.w	r7, r0, r7
1a005b30:	4095      	lsls	r5, r2
1a005b32:	ea47 0803 	orr.w	r8, r7, r3
1a005b36:	4094      	lsls	r4, r2
1a005b38:	ea4f 4e15 	mov.w	lr, r5, lsr #16
1a005b3c:	0c23      	lsrs	r3, r4, #16
1a005b3e:	fbb8 f7fe 	udiv	r7, r8, lr
1a005b42:	fa1f fc85 	uxth.w	ip, r5
1a005b46:	fb0e 8817 	mls	r8, lr, r7, r8
1a005b4a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
1a005b4e:	fb07 f10c 	mul.w	r1, r7, ip
1a005b52:	4299      	cmp	r1, r3
1a005b54:	d909      	bls.n	1a005b6a <__udivmoddi4+0x62>
1a005b56:	18eb      	adds	r3, r5, r3
1a005b58:	f107 30ff 	add.w	r0, r7, #4294967295	; 0xffffffff
1a005b5c:	f080 80e3 	bcs.w	1a005d26 <__udivmoddi4+0x21e>
1a005b60:	4299      	cmp	r1, r3
1a005b62:	f240 80e0 	bls.w	1a005d26 <__udivmoddi4+0x21e>
1a005b66:	3f02      	subs	r7, #2
1a005b68:	442b      	add	r3, r5
1a005b6a:	1a5b      	subs	r3, r3, r1
1a005b6c:	b2a4      	uxth	r4, r4
1a005b6e:	fbb3 f0fe 	udiv	r0, r3, lr
1a005b72:	fb0e 3310 	mls	r3, lr, r0, r3
1a005b76:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
1a005b7a:	fb00 fc0c 	mul.w	ip, r0, ip
1a005b7e:	45a4      	cmp	ip, r4
1a005b80:	d909      	bls.n	1a005b96 <__udivmoddi4+0x8e>
1a005b82:	192c      	adds	r4, r5, r4
1a005b84:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
1a005b88:	f080 80cb 	bcs.w	1a005d22 <__udivmoddi4+0x21a>
1a005b8c:	45a4      	cmp	ip, r4
1a005b8e:	f240 80c8 	bls.w	1a005d22 <__udivmoddi4+0x21a>
1a005b92:	3802      	subs	r0, #2
1a005b94:	442c      	add	r4, r5
1a005b96:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
1a005b9a:	eba4 040c 	sub.w	r4, r4, ip
1a005b9e:	2700      	movs	r7, #0
1a005ba0:	b11e      	cbz	r6, 1a005baa <__udivmoddi4+0xa2>
1a005ba2:	40d4      	lsrs	r4, r2
1a005ba4:	2300      	movs	r3, #0
1a005ba6:	e9c6 4300 	strd	r4, r3, [r6]
1a005baa:	4639      	mov	r1, r7
1a005bac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
1a005bb0:	2a00      	cmp	r2, #0
1a005bb2:	d053      	beq.n	1a005c5c <__udivmoddi4+0x154>
1a005bb4:	fab2 f282 	clz	r2, r2
1a005bb8:	2a00      	cmp	r2, #0
1a005bba:	f040 80b6 	bne.w	1a005d2a <__udivmoddi4+0x222>
1a005bbe:	1b49      	subs	r1, r1, r5
1a005bc0:	ea4f 4e15 	mov.w	lr, r5, lsr #16
1a005bc4:	fa1f f885 	uxth.w	r8, r5
1a005bc8:	2701      	movs	r7, #1
1a005bca:	fbb1 fcfe 	udiv	ip, r1, lr
1a005bce:	0c23      	lsrs	r3, r4, #16
1a005bd0:	fb0e 111c 	mls	r1, lr, ip, r1
1a005bd4:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
1a005bd8:	fb08 f10c 	mul.w	r1, r8, ip
1a005bdc:	4299      	cmp	r1, r3
1a005bde:	d907      	bls.n	1a005bf0 <__udivmoddi4+0xe8>
1a005be0:	18eb      	adds	r3, r5, r3
1a005be2:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
1a005be6:	d202      	bcs.n	1a005bee <__udivmoddi4+0xe6>
1a005be8:	4299      	cmp	r1, r3
1a005bea:	f200 80ec 	bhi.w	1a005dc6 <__udivmoddi4+0x2be>
1a005bee:	4684      	mov	ip, r0
1a005bf0:	1a59      	subs	r1, r3, r1
1a005bf2:	b2a3      	uxth	r3, r4
1a005bf4:	fbb1 f0fe 	udiv	r0, r1, lr
1a005bf8:	fb0e 1410 	mls	r4, lr, r0, r1
1a005bfc:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
1a005c00:	fb08 f800 	mul.w	r8, r8, r0
1a005c04:	45a0      	cmp	r8, r4
1a005c06:	d907      	bls.n	1a005c18 <__udivmoddi4+0x110>
1a005c08:	192c      	adds	r4, r5, r4
1a005c0a:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
1a005c0e:	d202      	bcs.n	1a005c16 <__udivmoddi4+0x10e>
1a005c10:	45a0      	cmp	r8, r4
1a005c12:	f200 80dc 	bhi.w	1a005dce <__udivmoddi4+0x2c6>
1a005c16:	4618      	mov	r0, r3
1a005c18:	eba4 0408 	sub.w	r4, r4, r8
1a005c1c:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
1a005c20:	e7be      	b.n	1a005ba0 <__udivmoddi4+0x98>
1a005c22:	428b      	cmp	r3, r1
1a005c24:	d908      	bls.n	1a005c38 <__udivmoddi4+0x130>
1a005c26:	2e00      	cmp	r6, #0
1a005c28:	d078      	beq.n	1a005d1c <__udivmoddi4+0x214>
1a005c2a:	2700      	movs	r7, #0
1a005c2c:	e9c6 0100 	strd	r0, r1, [r6]
1a005c30:	4638      	mov	r0, r7
1a005c32:	4639      	mov	r1, r7
1a005c34:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
1a005c38:	fab3 f783 	clz	r7, r3
1a005c3c:	b97f      	cbnz	r7, 1a005c5e <__udivmoddi4+0x156>
1a005c3e:	428b      	cmp	r3, r1
1a005c40:	d302      	bcc.n	1a005c48 <__udivmoddi4+0x140>
1a005c42:	4282      	cmp	r2, r0
1a005c44:	f200 80bd 	bhi.w	1a005dc2 <__udivmoddi4+0x2ba>
1a005c48:	1a84      	subs	r4, r0, r2
1a005c4a:	eb61 0303 	sbc.w	r3, r1, r3
1a005c4e:	2001      	movs	r0, #1
1a005c50:	4698      	mov	r8, r3
1a005c52:	2e00      	cmp	r6, #0
1a005c54:	d0a9      	beq.n	1a005baa <__udivmoddi4+0xa2>
1a005c56:	e9c6 4800 	strd	r4, r8, [r6]
1a005c5a:	e7a6      	b.n	1a005baa <__udivmoddi4+0xa2>
1a005c5c:	deff      	udf	#255	; 0xff
1a005c5e:	f1c7 0520 	rsb	r5, r7, #32
1a005c62:	40bb      	lsls	r3, r7
1a005c64:	fa22 fc05 	lsr.w	ip, r2, r5
1a005c68:	ea4c 0c03 	orr.w	ip, ip, r3
1a005c6c:	fa01 f407 	lsl.w	r4, r1, r7
1a005c70:	fa20 f805 	lsr.w	r8, r0, r5
1a005c74:	fa21 f305 	lsr.w	r3, r1, r5
1a005c78:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
1a005c7c:	ea48 0404 	orr.w	r4, r8, r4
1a005c80:	fbb3 f9fe 	udiv	r9, r3, lr
1a005c84:	0c21      	lsrs	r1, r4, #16
1a005c86:	fb0e 3319 	mls	r3, lr, r9, r3
1a005c8a:	fa1f f88c 	uxth.w	r8, ip
1a005c8e:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
1a005c92:	fb09 fa08 	mul.w	sl, r9, r8
1a005c96:	459a      	cmp	sl, r3
1a005c98:	fa02 f207 	lsl.w	r2, r2, r7
1a005c9c:	fa00 f107 	lsl.w	r1, r0, r7
1a005ca0:	d90b      	bls.n	1a005cba <__udivmoddi4+0x1b2>
1a005ca2:	eb1c 0303 	adds.w	r3, ip, r3
1a005ca6:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
1a005caa:	f080 8088 	bcs.w	1a005dbe <__udivmoddi4+0x2b6>
1a005cae:	459a      	cmp	sl, r3
1a005cb0:	f240 8085 	bls.w	1a005dbe <__udivmoddi4+0x2b6>
1a005cb4:	f1a9 0902 	sub.w	r9, r9, #2
1a005cb8:	4463      	add	r3, ip
1a005cba:	eba3 030a 	sub.w	r3, r3, sl
1a005cbe:	b2a4      	uxth	r4, r4
1a005cc0:	fbb3 f0fe 	udiv	r0, r3, lr
1a005cc4:	fb0e 3310 	mls	r3, lr, r0, r3
1a005cc8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
1a005ccc:	fb00 f808 	mul.w	r8, r0, r8
1a005cd0:	45a0      	cmp	r8, r4
1a005cd2:	d908      	bls.n	1a005ce6 <__udivmoddi4+0x1de>
1a005cd4:	eb1c 0404 	adds.w	r4, ip, r4
1a005cd8:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
1a005cdc:	d26b      	bcs.n	1a005db6 <__udivmoddi4+0x2ae>
1a005cde:	45a0      	cmp	r8, r4
1a005ce0:	d969      	bls.n	1a005db6 <__udivmoddi4+0x2ae>
1a005ce2:	3802      	subs	r0, #2
1a005ce4:	4464      	add	r4, ip
1a005ce6:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
1a005cea:	eba4 0408 	sub.w	r4, r4, r8
1a005cee:	fba0 8902 	umull	r8, r9, r0, r2
1a005cf2:	454c      	cmp	r4, r9
1a005cf4:	46c6      	mov	lr, r8
1a005cf6:	464b      	mov	r3, r9
1a005cf8:	d354      	bcc.n	1a005da4 <__udivmoddi4+0x29c>
1a005cfa:	d051      	beq.n	1a005da0 <__udivmoddi4+0x298>
1a005cfc:	2e00      	cmp	r6, #0
1a005cfe:	d069      	beq.n	1a005dd4 <__udivmoddi4+0x2cc>
1a005d00:	ebb1 020e 	subs.w	r2, r1, lr
1a005d04:	eb64 0403 	sbc.w	r4, r4, r3
1a005d08:	fa04 f505 	lsl.w	r5, r4, r5
1a005d0c:	fa22 f307 	lsr.w	r3, r2, r7
1a005d10:	40fc      	lsrs	r4, r7
1a005d12:	431d      	orrs	r5, r3
1a005d14:	e9c6 5400 	strd	r5, r4, [r6]
1a005d18:	2700      	movs	r7, #0
1a005d1a:	e746      	b.n	1a005baa <__udivmoddi4+0xa2>
1a005d1c:	4637      	mov	r7, r6
1a005d1e:	4630      	mov	r0, r6
1a005d20:	e743      	b.n	1a005baa <__udivmoddi4+0xa2>
1a005d22:	4618      	mov	r0, r3
1a005d24:	e737      	b.n	1a005b96 <__udivmoddi4+0x8e>
1a005d26:	4607      	mov	r7, r0
1a005d28:	e71f      	b.n	1a005b6a <__udivmoddi4+0x62>
1a005d2a:	f1c2 0320 	rsb	r3, r2, #32
1a005d2e:	fa20 f703 	lsr.w	r7, r0, r3
1a005d32:	4095      	lsls	r5, r2
1a005d34:	fa01 f002 	lsl.w	r0, r1, r2
1a005d38:	fa21 f303 	lsr.w	r3, r1, r3
1a005d3c:	ea4f 4e15 	mov.w	lr, r5, lsr #16
1a005d40:	4338      	orrs	r0, r7
1a005d42:	0c01      	lsrs	r1, r0, #16
1a005d44:	fbb3 f7fe 	udiv	r7, r3, lr
1a005d48:	fa1f f885 	uxth.w	r8, r5
1a005d4c:	fb0e 3317 	mls	r3, lr, r7, r3
1a005d50:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
1a005d54:	fb07 f308 	mul.w	r3, r7, r8
1a005d58:	428b      	cmp	r3, r1
1a005d5a:	fa04 f402 	lsl.w	r4, r4, r2
1a005d5e:	d907      	bls.n	1a005d70 <__udivmoddi4+0x268>
1a005d60:	1869      	adds	r1, r5, r1
1a005d62:	f107 3cff 	add.w	ip, r7, #4294967295	; 0xffffffff
1a005d66:	d228      	bcs.n	1a005dba <__udivmoddi4+0x2b2>
1a005d68:	428b      	cmp	r3, r1
1a005d6a:	d926      	bls.n	1a005dba <__udivmoddi4+0x2b2>
1a005d6c:	3f02      	subs	r7, #2
1a005d6e:	4429      	add	r1, r5
1a005d70:	1acb      	subs	r3, r1, r3
1a005d72:	b281      	uxth	r1, r0
1a005d74:	fbb3 f0fe 	udiv	r0, r3, lr
1a005d78:	fb0e 3310 	mls	r3, lr, r0, r3
1a005d7c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
1a005d80:	fb00 f308 	mul.w	r3, r0, r8
1a005d84:	428b      	cmp	r3, r1
1a005d86:	d907      	bls.n	1a005d98 <__udivmoddi4+0x290>
1a005d88:	1869      	adds	r1, r5, r1
1a005d8a:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
1a005d8e:	d210      	bcs.n	1a005db2 <__udivmoddi4+0x2aa>
1a005d90:	428b      	cmp	r3, r1
1a005d92:	d90e      	bls.n	1a005db2 <__udivmoddi4+0x2aa>
1a005d94:	3802      	subs	r0, #2
1a005d96:	4429      	add	r1, r5
1a005d98:	1ac9      	subs	r1, r1, r3
1a005d9a:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
1a005d9e:	e714      	b.n	1a005bca <__udivmoddi4+0xc2>
1a005da0:	4541      	cmp	r1, r8
1a005da2:	d2ab      	bcs.n	1a005cfc <__udivmoddi4+0x1f4>
1a005da4:	ebb8 0e02 	subs.w	lr, r8, r2
1a005da8:	eb69 020c 	sbc.w	r2, r9, ip
1a005dac:	3801      	subs	r0, #1
1a005dae:	4613      	mov	r3, r2
1a005db0:	e7a4      	b.n	1a005cfc <__udivmoddi4+0x1f4>
1a005db2:	4660      	mov	r0, ip
1a005db4:	e7f0      	b.n	1a005d98 <__udivmoddi4+0x290>
1a005db6:	4618      	mov	r0, r3
1a005db8:	e795      	b.n	1a005ce6 <__udivmoddi4+0x1de>
1a005dba:	4667      	mov	r7, ip
1a005dbc:	e7d8      	b.n	1a005d70 <__udivmoddi4+0x268>
1a005dbe:	4681      	mov	r9, r0
1a005dc0:	e77b      	b.n	1a005cba <__udivmoddi4+0x1b2>
1a005dc2:	4638      	mov	r0, r7
1a005dc4:	e745      	b.n	1a005c52 <__udivmoddi4+0x14a>
1a005dc6:	f1ac 0c02 	sub.w	ip, ip, #2
1a005dca:	442b      	add	r3, r5
1a005dcc:	e710      	b.n	1a005bf0 <__udivmoddi4+0xe8>
1a005dce:	3802      	subs	r0, #2
1a005dd0:	442c      	add	r4, r5
1a005dd2:	e721      	b.n	1a005c18 <__udivmoddi4+0x110>
1a005dd4:	4637      	mov	r7, r6
1a005dd6:	e6e8      	b.n	1a005baa <__udivmoddi4+0xa2>

1a005dd8 <__aeabi_idiv0>:
1a005dd8:	4770      	bx	lr
1a005dda:	bf00      	nop

1a005ddc <__sflush_r>:
1a005ddc:	f9b1 300c 	ldrsh.w	r3, [r1, #12]
1a005de0:	b29a      	uxth	r2, r3
1a005de2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
1a005de6:	460c      	mov	r4, r1
1a005de8:	0711      	lsls	r1, r2, #28
1a005dea:	4680      	mov	r8, r0
1a005dec:	d448      	bmi.n	1a005e80 <__sflush_r+0xa4>
1a005dee:	6862      	ldr	r2, [r4, #4]
1a005df0:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
1a005df4:	2a00      	cmp	r2, #0
1a005df6:	81a3      	strh	r3, [r4, #12]
1a005df8:	dd5d      	ble.n	1a005eb6 <__sflush_r+0xda>
1a005dfa:	6aa5      	ldr	r5, [r4, #40]	; 0x28
1a005dfc:	2d00      	cmp	r5, #0
1a005dfe:	d057      	beq.n	1a005eb0 <__sflush_r+0xd4>
1a005e00:	2200      	movs	r2, #0
1a005e02:	b29b      	uxth	r3, r3
1a005e04:	f8d8 6000 	ldr.w	r6, [r8]
1a005e08:	69e1      	ldr	r1, [r4, #28]
1a005e0a:	f8c8 2000 	str.w	r2, [r8]
1a005e0e:	f413 5280 	ands.w	r2, r3, #4096	; 0x1000
1a005e12:	d154      	bne.n	1a005ebe <__sflush_r+0xe2>
1a005e14:	2301      	movs	r3, #1
1a005e16:	4640      	mov	r0, r8
1a005e18:	47a8      	blx	r5
1a005e1a:	1c43      	adds	r3, r0, #1
1a005e1c:	4602      	mov	r2, r0
1a005e1e:	d065      	beq.n	1a005eec <__sflush_r+0x110>
1a005e20:	89a3      	ldrh	r3, [r4, #12]
1a005e22:	6aa5      	ldr	r5, [r4, #40]	; 0x28
1a005e24:	69e1      	ldr	r1, [r4, #28]
1a005e26:	075f      	lsls	r7, r3, #29
1a005e28:	d505      	bpl.n	1a005e36 <__sflush_r+0x5a>
1a005e2a:	6860      	ldr	r0, [r4, #4]
1a005e2c:	6b23      	ldr	r3, [r4, #48]	; 0x30
1a005e2e:	1a12      	subs	r2, r2, r0
1a005e30:	b10b      	cbz	r3, 1a005e36 <__sflush_r+0x5a>
1a005e32:	6be3      	ldr	r3, [r4, #60]	; 0x3c
1a005e34:	1ad2      	subs	r2, r2, r3
1a005e36:	2300      	movs	r3, #0
1a005e38:	4640      	mov	r0, r8
1a005e3a:	47a8      	blx	r5
1a005e3c:	1c45      	adds	r5, r0, #1
1a005e3e:	d148      	bne.n	1a005ed2 <__sflush_r+0xf6>
1a005e40:	f8d8 2000 	ldr.w	r2, [r8]
1a005e44:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
1a005e48:	2a00      	cmp	r2, #0
1a005e4a:	d05c      	beq.n	1a005f06 <__sflush_r+0x12a>
1a005e4c:	2a1d      	cmp	r2, #29
1a005e4e:	d001      	beq.n	1a005e54 <__sflush_r+0x78>
1a005e50:	2a16      	cmp	r2, #22
1a005e52:	d164      	bne.n	1a005f1e <__sflush_r+0x142>
1a005e54:	6922      	ldr	r2, [r4, #16]
1a005e56:	2100      	movs	r1, #0
1a005e58:	e9c4 2100 	strd	r2, r1, [r4]
1a005e5c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
1a005e60:	81a3      	strh	r3, [r4, #12]
1a005e62:	6b21      	ldr	r1, [r4, #48]	; 0x30
1a005e64:	f8c8 6000 	str.w	r6, [r8]
1a005e68:	b311      	cbz	r1, 1a005eb0 <__sflush_r+0xd4>
1a005e6a:	f104 0340 	add.w	r3, r4, #64	; 0x40
1a005e6e:	4299      	cmp	r1, r3
1a005e70:	d002      	beq.n	1a005e78 <__sflush_r+0x9c>
1a005e72:	4640      	mov	r0, r8
1a005e74:	f000 f93a 	bl	1a0060ec <_free_r>
1a005e78:	2000      	movs	r0, #0
1a005e7a:	6320      	str	r0, [r4, #48]	; 0x30
1a005e7c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
1a005e80:	6926      	ldr	r6, [r4, #16]
1a005e82:	b1ae      	cbz	r6, 1a005eb0 <__sflush_r+0xd4>
1a005e84:	6825      	ldr	r5, [r4, #0]
1a005e86:	6026      	str	r6, [r4, #0]
1a005e88:	0791      	lsls	r1, r2, #30
1a005e8a:	bf0c      	ite	eq
1a005e8c:	6963      	ldreq	r3, [r4, #20]
1a005e8e:	2300      	movne	r3, #0
1a005e90:	1bad      	subs	r5, r5, r6
1a005e92:	60a3      	str	r3, [r4, #8]
1a005e94:	e00a      	b.n	1a005eac <__sflush_r+0xd0>
1a005e96:	462b      	mov	r3, r5
1a005e98:	4632      	mov	r2, r6
1a005e9a:	6a67      	ldr	r7, [r4, #36]	; 0x24
1a005e9c:	69e1      	ldr	r1, [r4, #28]
1a005e9e:	4640      	mov	r0, r8
1a005ea0:	47b8      	blx	r7
1a005ea2:	2800      	cmp	r0, #0
1a005ea4:	eba5 0500 	sub.w	r5, r5, r0
1a005ea8:	4406      	add	r6, r0
1a005eaa:	dd0a      	ble.n	1a005ec2 <__sflush_r+0xe6>
1a005eac:	2d00      	cmp	r5, #0
1a005eae:	dcf2      	bgt.n	1a005e96 <__sflush_r+0xba>
1a005eb0:	2000      	movs	r0, #0
1a005eb2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
1a005eb6:	6be2      	ldr	r2, [r4, #60]	; 0x3c
1a005eb8:	2a00      	cmp	r2, #0
1a005eba:	dc9e      	bgt.n	1a005dfa <__sflush_r+0x1e>
1a005ebc:	e7f8      	b.n	1a005eb0 <__sflush_r+0xd4>
1a005ebe:	6d22      	ldr	r2, [r4, #80]	; 0x50
1a005ec0:	e7b1      	b.n	1a005e26 <__sflush_r+0x4a>
1a005ec2:	89a3      	ldrh	r3, [r4, #12]
1a005ec4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
1a005ec8:	81a3      	strh	r3, [r4, #12]
1a005eca:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
1a005ece:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
1a005ed2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
1a005ed6:	6922      	ldr	r2, [r4, #16]
1a005ed8:	6022      	str	r2, [r4, #0]
1a005eda:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
1a005ede:	2200      	movs	r2, #0
1a005ee0:	6062      	str	r2, [r4, #4]
1a005ee2:	04da      	lsls	r2, r3, #19
1a005ee4:	81a3      	strh	r3, [r4, #12]
1a005ee6:	d5bc      	bpl.n	1a005e62 <__sflush_r+0x86>
1a005ee8:	6520      	str	r0, [r4, #80]	; 0x50
1a005eea:	e7ba      	b.n	1a005e62 <__sflush_r+0x86>
1a005eec:	f8d8 3000 	ldr.w	r3, [r8]
1a005ef0:	2b00      	cmp	r3, #0
1a005ef2:	d095      	beq.n	1a005e20 <__sflush_r+0x44>
1a005ef4:	2b1d      	cmp	r3, #29
1a005ef6:	d00f      	beq.n	1a005f18 <__sflush_r+0x13c>
1a005ef8:	2b16      	cmp	r3, #22
1a005efa:	d00d      	beq.n	1a005f18 <__sflush_r+0x13c>
1a005efc:	89a3      	ldrh	r3, [r4, #12]
1a005efe:	f043 0340 	orr.w	r3, r3, #64	; 0x40
1a005f02:	81a3      	strh	r3, [r4, #12]
1a005f04:	e7d5      	b.n	1a005eb2 <__sflush_r+0xd6>
1a005f06:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
1a005f0a:	6921      	ldr	r1, [r4, #16]
1a005f0c:	81a3      	strh	r3, [r4, #12]
1a005f0e:	04db      	lsls	r3, r3, #19
1a005f10:	e9c4 1200 	strd	r1, r2, [r4]
1a005f14:	d5a5      	bpl.n	1a005e62 <__sflush_r+0x86>
1a005f16:	e7e7      	b.n	1a005ee8 <__sflush_r+0x10c>
1a005f18:	f8c8 6000 	str.w	r6, [r8]
1a005f1c:	e7c8      	b.n	1a005eb0 <__sflush_r+0xd4>
1a005f1e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
1a005f22:	81a3      	strh	r3, [r4, #12]
1a005f24:	e7c5      	b.n	1a005eb2 <__sflush_r+0xd6>
1a005f26:	bf00      	nop

1a005f28 <_fflush_r>:
1a005f28:	b538      	push	{r3, r4, r5, lr}
1a005f2a:	460d      	mov	r5, r1
1a005f2c:	4604      	mov	r4, r0
1a005f2e:	b108      	cbz	r0, 1a005f34 <_fflush_r+0xc>
1a005f30:	6b83      	ldr	r3, [r0, #56]	; 0x38
1a005f32:	b1a3      	cbz	r3, 1a005f5e <_fflush_r+0x36>
1a005f34:	f9b5 000c 	ldrsh.w	r0, [r5, #12]
1a005f38:	b1b8      	cbz	r0, 1a005f6a <_fflush_r+0x42>
1a005f3a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
1a005f3c:	07db      	lsls	r3, r3, #31
1a005f3e:	d401      	bmi.n	1a005f44 <_fflush_r+0x1c>
1a005f40:	0581      	lsls	r1, r0, #22
1a005f42:	d515      	bpl.n	1a005f70 <_fflush_r+0x48>
1a005f44:	4620      	mov	r0, r4
1a005f46:	4629      	mov	r1, r5
1a005f48:	f7ff ff48 	bl	1a005ddc <__sflush_r>
1a005f4c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
1a005f4e:	07da      	lsls	r2, r3, #31
1a005f50:	4604      	mov	r4, r0
1a005f52:	d402      	bmi.n	1a005f5a <_fflush_r+0x32>
1a005f54:	89ab      	ldrh	r3, [r5, #12]
1a005f56:	059b      	lsls	r3, r3, #22
1a005f58:	d50e      	bpl.n	1a005f78 <_fflush_r+0x50>
1a005f5a:	4620      	mov	r0, r4
1a005f5c:	bd38      	pop	{r3, r4, r5, pc}
1a005f5e:	f000 f83f 	bl	1a005fe0 <__sinit>
1a005f62:	f9b5 000c 	ldrsh.w	r0, [r5, #12]
1a005f66:	2800      	cmp	r0, #0
1a005f68:	d1e7      	bne.n	1a005f3a <_fflush_r+0x12>
1a005f6a:	4604      	mov	r4, r0
1a005f6c:	4620      	mov	r0, r4
1a005f6e:	bd38      	pop	{r3, r4, r5, pc}
1a005f70:	6da8      	ldr	r0, [r5, #88]	; 0x58
1a005f72:	f000 fa03 	bl	1a00637c <__retarget_lock_acquire_recursive>
1a005f76:	e7e5      	b.n	1a005f44 <_fflush_r+0x1c>
1a005f78:	6da8      	ldr	r0, [r5, #88]	; 0x58
1a005f7a:	f000 fa01 	bl	1a006380 <__retarget_lock_release_recursive>
1a005f7e:	4620      	mov	r0, r4
1a005f80:	bd38      	pop	{r3, r4, r5, pc}
1a005f82:	bf00      	nop

1a005f84 <std>:
1a005f84:	b510      	push	{r4, lr}
1a005f86:	2300      	movs	r3, #0
1a005f88:	4604      	mov	r4, r0
1a005f8a:	8181      	strh	r1, [r0, #12]
1a005f8c:	81c2      	strh	r2, [r0, #14]
1a005f8e:	e9c0 3300 	strd	r3, r3, [r0]
1a005f92:	6083      	str	r3, [r0, #8]
1a005f94:	6643      	str	r3, [r0, #100]	; 0x64
1a005f96:	e9c0 3304 	strd	r3, r3, [r0, #16]
1a005f9a:	6183      	str	r3, [r0, #24]
1a005f9c:	4619      	mov	r1, r3
1a005f9e:	2208      	movs	r2, #8
1a005fa0:	305c      	adds	r0, #92	; 0x5c
1a005fa2:	f000 fd41 	bl	1a006a28 <memset>
1a005fa6:	4807      	ldr	r0, [pc, #28]	; (1a005fc4 <std+0x40>)
1a005fa8:	4907      	ldr	r1, [pc, #28]	; (1a005fc8 <std+0x44>)
1a005faa:	4a08      	ldr	r2, [pc, #32]	; (1a005fcc <std+0x48>)
1a005fac:	4b08      	ldr	r3, [pc, #32]	; (1a005fd0 <std+0x4c>)
1a005fae:	62e3      	str	r3, [r4, #44]	; 0x2c
1a005fb0:	e9c4 4007 	strd	r4, r0, [r4, #28]
1a005fb4:	e9c4 1209 	strd	r1, r2, [r4, #36]	; 0x24
1a005fb8:	f104 0058 	add.w	r0, r4, #88	; 0x58
1a005fbc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
1a005fc0:	f000 b9d8 	b.w	1a006374 <__retarget_lock_init_recursive>
1a005fc4:	1a006bb5 	.word	0x1a006bb5
1a005fc8:	1a006bd9 	.word	0x1a006bd9
1a005fcc:	1a006c19 	.word	0x1a006c19
1a005fd0:	1a006c39 	.word	0x1a006c39

1a005fd4 <_cleanup_r>:
1a005fd4:	4901      	ldr	r1, [pc, #4]	; (1a005fdc <_cleanup_r+0x8>)
1a005fd6:	f000 b97f 	b.w	1a0062d8 <_fwalk_reent>
1a005fda:	bf00      	nop
1a005fdc:	1a009945 	.word	0x1a009945

1a005fe0 <__sinit>:
1a005fe0:	b510      	push	{r4, lr}
1a005fe2:	4604      	mov	r4, r0
1a005fe4:	4811      	ldr	r0, [pc, #68]	; (1a00602c <__sinit+0x4c>)
1a005fe6:	f000 f9c9 	bl	1a00637c <__retarget_lock_acquire_recursive>
1a005fea:	6ba2      	ldr	r2, [r4, #56]	; 0x38
1a005fec:	b9c2      	cbnz	r2, 1a006020 <__sinit+0x40>
1a005fee:	f504 733b 	add.w	r3, r4, #748	; 0x2ec
1a005ff2:	480f      	ldr	r0, [pc, #60]	; (1a006030 <__sinit+0x50>)
1a005ff4:	f8c4 22e0 	str.w	r2, [r4, #736]	; 0x2e0
1a005ff8:	2103      	movs	r1, #3
1a005ffa:	e9c4 13b9 	strd	r1, r3, [r4, #740]	; 0x2e4
1a005ffe:	63e0      	str	r0, [r4, #60]	; 0x3c
1a006000:	2104      	movs	r1, #4
1a006002:	6860      	ldr	r0, [r4, #4]
1a006004:	f7ff ffbe 	bl	1a005f84 <std>
1a006008:	2201      	movs	r2, #1
1a00600a:	2109      	movs	r1, #9
1a00600c:	68a0      	ldr	r0, [r4, #8]
1a00600e:	f7ff ffb9 	bl	1a005f84 <std>
1a006012:	2202      	movs	r2, #2
1a006014:	2112      	movs	r1, #18
1a006016:	68e0      	ldr	r0, [r4, #12]
1a006018:	f7ff ffb4 	bl	1a005f84 <std>
1a00601c:	2301      	movs	r3, #1
1a00601e:	63a3      	str	r3, [r4, #56]	; 0x38
1a006020:	4802      	ldr	r0, [pc, #8]	; (1a00602c <__sinit+0x4c>)
1a006022:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
1a006026:	f000 b9ab 	b.w	1a006380 <__retarget_lock_release_recursive>
1a00602a:	bf00      	nop
1a00602c:	10003680 	.word	0x10003680
1a006030:	1a005fd5 	.word	0x1a005fd5

1a006034 <__sfp_lock_acquire>:
1a006034:	4801      	ldr	r0, [pc, #4]	; (1a00603c <__sfp_lock_acquire+0x8>)
1a006036:	f000 b9a1 	b.w	1a00637c <__retarget_lock_acquire_recursive>
1a00603a:	bf00      	nop
1a00603c:	10003694 	.word	0x10003694

1a006040 <__sfp_lock_release>:
1a006040:	4801      	ldr	r0, [pc, #4]	; (1a006048 <__sfp_lock_release+0x8>)
1a006042:	f000 b99d 	b.w	1a006380 <__retarget_lock_release_recursive>
1a006046:	bf00      	nop
1a006048:	10003694 	.word	0x10003694

1a00604c <_malloc_trim_r>:
1a00604c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1a00604e:	4f24      	ldr	r7, [pc, #144]	; (1a0060e0 <_malloc_trim_r+0x94>)
1a006050:	460c      	mov	r4, r1
1a006052:	4606      	mov	r6, r0
1a006054:	f000 fd38 	bl	1a006ac8 <__malloc_lock>
1a006058:	68bb      	ldr	r3, [r7, #8]
1a00605a:	685d      	ldr	r5, [r3, #4]
1a00605c:	f5c4 617e 	rsb	r1, r4, #4064	; 0xfe0
1a006060:	310f      	adds	r1, #15
1a006062:	f025 0503 	bic.w	r5, r5, #3
1a006066:	4429      	add	r1, r5
1a006068:	f421 617f 	bic.w	r1, r1, #4080	; 0xff0
1a00606c:	f021 010f 	bic.w	r1, r1, #15
1a006070:	f5a1 5480 	sub.w	r4, r1, #4096	; 0x1000
1a006074:	f5b4 5f80 	cmp.w	r4, #4096	; 0x1000
1a006078:	db07      	blt.n	1a00608a <_malloc_trim_r+0x3e>
1a00607a:	2100      	movs	r1, #0
1a00607c:	4630      	mov	r0, r6
1a00607e:	f7fa fcb5 	bl	1a0009ec <_sbrk_r>
1a006082:	68bb      	ldr	r3, [r7, #8]
1a006084:	442b      	add	r3, r5
1a006086:	4298      	cmp	r0, r3
1a006088:	d004      	beq.n	1a006094 <_malloc_trim_r+0x48>
1a00608a:	4630      	mov	r0, r6
1a00608c:	f000 fd22 	bl	1a006ad4 <__malloc_unlock>
1a006090:	2000      	movs	r0, #0
1a006092:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1a006094:	4261      	negs	r1, r4
1a006096:	4630      	mov	r0, r6
1a006098:	f7fa fca8 	bl	1a0009ec <_sbrk_r>
1a00609c:	3001      	adds	r0, #1
1a00609e:	d00d      	beq.n	1a0060bc <_malloc_trim_r+0x70>
1a0060a0:	4b10      	ldr	r3, [pc, #64]	; (1a0060e4 <_malloc_trim_r+0x98>)
1a0060a2:	68ba      	ldr	r2, [r7, #8]
1a0060a4:	6819      	ldr	r1, [r3, #0]
1a0060a6:	1b2d      	subs	r5, r5, r4
1a0060a8:	f045 0501 	orr.w	r5, r5, #1
1a0060ac:	4630      	mov	r0, r6
1a0060ae:	1b09      	subs	r1, r1, r4
1a0060b0:	6055      	str	r5, [r2, #4]
1a0060b2:	6019      	str	r1, [r3, #0]
1a0060b4:	f000 fd0e 	bl	1a006ad4 <__malloc_unlock>
1a0060b8:	2001      	movs	r0, #1
1a0060ba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1a0060bc:	2100      	movs	r1, #0
1a0060be:	4630      	mov	r0, r6
1a0060c0:	f7fa fc94 	bl	1a0009ec <_sbrk_r>
1a0060c4:	68ba      	ldr	r2, [r7, #8]
1a0060c6:	1a83      	subs	r3, r0, r2
1a0060c8:	2b0f      	cmp	r3, #15
1a0060ca:	ddde      	ble.n	1a00608a <_malloc_trim_r+0x3e>
1a0060cc:	4c06      	ldr	r4, [pc, #24]	; (1a0060e8 <_malloc_trim_r+0x9c>)
1a0060ce:	4905      	ldr	r1, [pc, #20]	; (1a0060e4 <_malloc_trim_r+0x98>)
1a0060d0:	6824      	ldr	r4, [r4, #0]
1a0060d2:	f043 0301 	orr.w	r3, r3, #1
1a0060d6:	1b00      	subs	r0, r0, r4
1a0060d8:	6053      	str	r3, [r2, #4]
1a0060da:	6008      	str	r0, [r1, #0]
1a0060dc:	e7d5      	b.n	1a00608a <_malloc_trim_r+0x3e>
1a0060de:	bf00      	nop
1a0060e0:	10000480 	.word	0x10000480
1a0060e4:	100035f8 	.word	0x100035f8
1a0060e8:	10000888 	.word	0x10000888

1a0060ec <_free_r>:
1a0060ec:	2900      	cmp	r1, #0
1a0060ee:	d05d      	beq.n	1a0061ac <_free_r+0xc0>
1a0060f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1a0060f2:	460f      	mov	r7, r1
1a0060f4:	4606      	mov	r6, r0
1a0060f6:	f000 fce7 	bl	1a006ac8 <__malloc_lock>
1a0060fa:	f857 cc04 	ldr.w	ip, [r7, #-4]
1a0060fe:	4c73      	ldr	r4, [pc, #460]	; (1a0062cc <_free_r+0x1e0>)
1a006100:	f02c 0301 	bic.w	r3, ip, #1
1a006104:	f1a7 0008 	sub.w	r0, r7, #8
1a006108:	18c2      	adds	r2, r0, r3
1a00610a:	68a1      	ldr	r1, [r4, #8]
1a00610c:	6855      	ldr	r5, [r2, #4]
1a00610e:	4291      	cmp	r1, r2
1a006110:	f025 0503 	bic.w	r5, r5, #3
1a006114:	d07f      	beq.n	1a006216 <_free_r+0x12a>
1a006116:	f01c 0f01 	tst.w	ip, #1
1a00611a:	6055      	str	r5, [r2, #4]
1a00611c:	eb02 0105 	add.w	r1, r2, r5
1a006120:	d133      	bne.n	1a00618a <_free_r+0x9e>
1a006122:	f857 ec08 	ldr.w	lr, [r7, #-8]
1a006126:	6849      	ldr	r1, [r1, #4]
1a006128:	eba0 000e 	sub.w	r0, r0, lr
1a00612c:	f104 0c08 	add.w	ip, r4, #8
1a006130:	6887      	ldr	r7, [r0, #8]
1a006132:	4567      	cmp	r7, ip
1a006134:	4473      	add	r3, lr
1a006136:	f001 0101 	and.w	r1, r1, #1
1a00613a:	d060      	beq.n	1a0061fe <_free_r+0x112>
1a00613c:	f8d0 e00c 	ldr.w	lr, [r0, #12]
1a006140:	f8c7 e00c 	str.w	lr, [r7, #12]
1a006144:	f8ce 7008 	str.w	r7, [lr, #8]
1a006148:	2900      	cmp	r1, #0
1a00614a:	f000 8089 	beq.w	1a006260 <_free_r+0x174>
1a00614e:	f043 0101 	orr.w	r1, r3, #1
1a006152:	6041      	str	r1, [r0, #4]
1a006154:	6013      	str	r3, [r2, #0]
1a006156:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
1a00615a:	d230      	bcs.n	1a0061be <_free_r+0xd2>
1a00615c:	08db      	lsrs	r3, r3, #3
1a00615e:	1c59      	adds	r1, r3, #1
1a006160:	6865      	ldr	r5, [r4, #4]
1a006162:	109a      	asrs	r2, r3, #2
1a006164:	2301      	movs	r3, #1
1a006166:	4093      	lsls	r3, r2
1a006168:	432b      	orrs	r3, r5
1a00616a:	eb04 02c1 	add.w	r2, r4, r1, lsl #3
1a00616e:	f854 5031 	ldr.w	r5, [r4, r1, lsl #3]
1a006172:	6063      	str	r3, [r4, #4]
1a006174:	3a08      	subs	r2, #8
1a006176:	e9c0 5202 	strd	r5, r2, [r0, #8]
1a00617a:	f844 0031 	str.w	r0, [r4, r1, lsl #3]
1a00617e:	60e8      	str	r0, [r5, #12]
1a006180:	4630      	mov	r0, r6
1a006182:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
1a006186:	f000 bca5 	b.w	1a006ad4 <__malloc_unlock>
1a00618a:	6849      	ldr	r1, [r1, #4]
1a00618c:	07c9      	lsls	r1, r1, #31
1a00618e:	d40e      	bmi.n	1a0061ae <_free_r+0xc2>
1a006190:	442b      	add	r3, r5
1a006192:	f104 0c08 	add.w	ip, r4, #8
1a006196:	6891      	ldr	r1, [r2, #8]
1a006198:	4561      	cmp	r1, ip
1a00619a:	f043 0501 	orr.w	r5, r3, #1
1a00619e:	d067      	beq.n	1a006270 <_free_r+0x184>
1a0061a0:	68d2      	ldr	r2, [r2, #12]
1a0061a2:	60ca      	str	r2, [r1, #12]
1a0061a4:	6091      	str	r1, [r2, #8]
1a0061a6:	6045      	str	r5, [r0, #4]
1a0061a8:	50c3      	str	r3, [r0, r3]
1a0061aa:	e7d4      	b.n	1a006156 <_free_r+0x6a>
1a0061ac:	4770      	bx	lr
1a0061ae:	f043 0101 	orr.w	r1, r3, #1
1a0061b2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
1a0061b6:	f847 1c04 	str.w	r1, [r7, #-4]
1a0061ba:	6013      	str	r3, [r2, #0]
1a0061bc:	d3ce      	bcc.n	1a00615c <_free_r+0x70>
1a0061be:	0a5a      	lsrs	r2, r3, #9
1a0061c0:	2a04      	cmp	r2, #4
1a0061c2:	d842      	bhi.n	1a00624a <_free_r+0x15e>
1a0061c4:	099a      	lsrs	r2, r3, #6
1a0061c6:	f102 0739 	add.w	r7, r2, #57	; 0x39
1a0061ca:	00ff      	lsls	r7, r7, #3
1a0061cc:	f102 0138 	add.w	r1, r2, #56	; 0x38
1a0061d0:	19e5      	adds	r5, r4, r7
1a0061d2:	59e2      	ldr	r2, [r4, r7]
1a0061d4:	3d08      	subs	r5, #8
1a0061d6:	4295      	cmp	r5, r2
1a0061d8:	d051      	beq.n	1a00627e <_free_r+0x192>
1a0061da:	6851      	ldr	r1, [r2, #4]
1a0061dc:	f021 0103 	bic.w	r1, r1, #3
1a0061e0:	4299      	cmp	r1, r3
1a0061e2:	d902      	bls.n	1a0061ea <_free_r+0xfe>
1a0061e4:	6892      	ldr	r2, [r2, #8]
1a0061e6:	4295      	cmp	r5, r2
1a0061e8:	d1f7      	bne.n	1a0061da <_free_r+0xee>
1a0061ea:	68d5      	ldr	r5, [r2, #12]
1a0061ec:	e9c0 2502 	strd	r2, r5, [r0, #8]
1a0061f0:	60a8      	str	r0, [r5, #8]
1a0061f2:	60d0      	str	r0, [r2, #12]
1a0061f4:	4630      	mov	r0, r6
1a0061f6:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
1a0061fa:	f000 bc6b 	b.w	1a006ad4 <__malloc_unlock>
1a0061fe:	2900      	cmp	r1, #0
1a006200:	d15e      	bne.n	1a0062c0 <_free_r+0x1d4>
1a006202:	e9d2 1202 	ldrd	r1, r2, [r2, #8]
1a006206:	442b      	add	r3, r5
1a006208:	f043 0401 	orr.w	r4, r3, #1
1a00620c:	60ca      	str	r2, [r1, #12]
1a00620e:	6091      	str	r1, [r2, #8]
1a006210:	6044      	str	r4, [r0, #4]
1a006212:	50c3      	str	r3, [r0, r3]
1a006214:	e7b4      	b.n	1a006180 <_free_r+0x94>
1a006216:	f01c 0f01 	tst.w	ip, #1
1a00621a:	442b      	add	r3, r5
1a00621c:	d107      	bne.n	1a00622e <_free_r+0x142>
1a00621e:	f857 2c08 	ldr.w	r2, [r7, #-8]
1a006222:	1a80      	subs	r0, r0, r2
1a006224:	4413      	add	r3, r2
1a006226:	e9d0 1202 	ldrd	r1, r2, [r0, #8]
1a00622a:	60ca      	str	r2, [r1, #12]
1a00622c:	6091      	str	r1, [r2, #8]
1a00622e:	4a28      	ldr	r2, [pc, #160]	; (1a0062d0 <_free_r+0x1e4>)
1a006230:	6812      	ldr	r2, [r2, #0]
1a006232:	f043 0101 	orr.w	r1, r3, #1
1a006236:	429a      	cmp	r2, r3
1a006238:	6041      	str	r1, [r0, #4]
1a00623a:	60a0      	str	r0, [r4, #8]
1a00623c:	d8a0      	bhi.n	1a006180 <_free_r+0x94>
1a00623e:	4b25      	ldr	r3, [pc, #148]	; (1a0062d4 <_free_r+0x1e8>)
1a006240:	4630      	mov	r0, r6
1a006242:	6819      	ldr	r1, [r3, #0]
1a006244:	f7ff ff02 	bl	1a00604c <_malloc_trim_r>
1a006248:	e79a      	b.n	1a006180 <_free_r+0x94>
1a00624a:	2a14      	cmp	r2, #20
1a00624c:	d90a      	bls.n	1a006264 <_free_r+0x178>
1a00624e:	2a54      	cmp	r2, #84	; 0x54
1a006250:	d81d      	bhi.n	1a00628e <_free_r+0x1a2>
1a006252:	0b1a      	lsrs	r2, r3, #12
1a006254:	f102 076f 	add.w	r7, r2, #111	; 0x6f
1a006258:	00ff      	lsls	r7, r7, #3
1a00625a:	f102 016e 	add.w	r1, r2, #110	; 0x6e
1a00625e:	e7b7      	b.n	1a0061d0 <_free_r+0xe4>
1a006260:	442b      	add	r3, r5
1a006262:	e798      	b.n	1a006196 <_free_r+0xaa>
1a006264:	f102 075c 	add.w	r7, r2, #92	; 0x5c
1a006268:	00ff      	lsls	r7, r7, #3
1a00626a:	f102 015b 	add.w	r1, r2, #91	; 0x5b
1a00626e:	e7af      	b.n	1a0061d0 <_free_r+0xe4>
1a006270:	e9c4 0004 	strd	r0, r0, [r4, #16]
1a006274:	e9c0 cc02 	strd	ip, ip, [r0, #8]
1a006278:	6045      	str	r5, [r0, #4]
1a00627a:	50c3      	str	r3, [r0, r3]
1a00627c:	e780      	b.n	1a006180 <_free_r+0x94>
1a00627e:	6863      	ldr	r3, [r4, #4]
1a006280:	1089      	asrs	r1, r1, #2
1a006282:	2701      	movs	r7, #1
1a006284:	fa07 f101 	lsl.w	r1, r7, r1
1a006288:	4319      	orrs	r1, r3
1a00628a:	6061      	str	r1, [r4, #4]
1a00628c:	e7ae      	b.n	1a0061ec <_free_r+0x100>
1a00628e:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
1a006292:	d806      	bhi.n	1a0062a2 <_free_r+0x1b6>
1a006294:	0bda      	lsrs	r2, r3, #15
1a006296:	f102 0778 	add.w	r7, r2, #120	; 0x78
1a00629a:	00ff      	lsls	r7, r7, #3
1a00629c:	f102 0177 	add.w	r1, r2, #119	; 0x77
1a0062a0:	e796      	b.n	1a0061d0 <_free_r+0xe4>
1a0062a2:	f240 5154 	movw	r1, #1364	; 0x554
1a0062a6:	428a      	cmp	r2, r1
1a0062a8:	d806      	bhi.n	1a0062b8 <_free_r+0x1cc>
1a0062aa:	0c9a      	lsrs	r2, r3, #18
1a0062ac:	f102 077d 	add.w	r7, r2, #125	; 0x7d
1a0062b0:	00ff      	lsls	r7, r7, #3
1a0062b2:	f102 017c 	add.w	r1, r2, #124	; 0x7c
1a0062b6:	e78b      	b.n	1a0061d0 <_free_r+0xe4>
1a0062b8:	f44f 777e 	mov.w	r7, #1016	; 0x3f8
1a0062bc:	217e      	movs	r1, #126	; 0x7e
1a0062be:	e787      	b.n	1a0061d0 <_free_r+0xe4>
1a0062c0:	f043 0101 	orr.w	r1, r3, #1
1a0062c4:	6041      	str	r1, [r0, #4]
1a0062c6:	6013      	str	r3, [r2, #0]
1a0062c8:	e75a      	b.n	1a006180 <_free_r+0x94>
1a0062ca:	bf00      	nop
1a0062cc:	10000480 	.word	0x10000480
1a0062d0:	1000088c 	.word	0x1000088c
1a0062d4:	10003628 	.word	0x10003628

1a0062d8 <_fwalk_reent>:
1a0062d8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
1a0062dc:	f510 7738 	adds.w	r7, r0, #736	; 0x2e0
1a0062e0:	d01f      	beq.n	1a006322 <_fwalk_reent+0x4a>
1a0062e2:	4688      	mov	r8, r1
1a0062e4:	4606      	mov	r6, r0
1a0062e6:	f04f 0900 	mov.w	r9, #0
1a0062ea:	e9d7 5401 	ldrd	r5, r4, [r7, #4]
1a0062ee:	3d01      	subs	r5, #1
1a0062f0:	d411      	bmi.n	1a006316 <_fwalk_reent+0x3e>
1a0062f2:	89a3      	ldrh	r3, [r4, #12]
1a0062f4:	2b01      	cmp	r3, #1
1a0062f6:	f105 35ff 	add.w	r5, r5, #4294967295	; 0xffffffff
1a0062fa:	d908      	bls.n	1a00630e <_fwalk_reent+0x36>
1a0062fc:	f9b4 300e 	ldrsh.w	r3, [r4, #14]
1a006300:	3301      	adds	r3, #1
1a006302:	4621      	mov	r1, r4
1a006304:	4630      	mov	r0, r6
1a006306:	d002      	beq.n	1a00630e <_fwalk_reent+0x36>
1a006308:	47c0      	blx	r8
1a00630a:	ea49 0900 	orr.w	r9, r9, r0
1a00630e:	1c6b      	adds	r3, r5, #1
1a006310:	f104 0468 	add.w	r4, r4, #104	; 0x68
1a006314:	d1ed      	bne.n	1a0062f2 <_fwalk_reent+0x1a>
1a006316:	683f      	ldr	r7, [r7, #0]
1a006318:	2f00      	cmp	r7, #0
1a00631a:	d1e6      	bne.n	1a0062ea <_fwalk_reent+0x12>
1a00631c:	4648      	mov	r0, r9
1a00631e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
1a006322:	46b9      	mov	r9, r7
1a006324:	4648      	mov	r0, r9
1a006326:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
1a00632a:	bf00      	nop

1a00632c <__libc_init_array>:
1a00632c:	b570      	push	{r4, r5, r6, lr}
1a00632e:	4e0d      	ldr	r6, [pc, #52]	; (1a006364 <__libc_init_array+0x38>)
1a006330:	4d0d      	ldr	r5, [pc, #52]	; (1a006368 <__libc_init_array+0x3c>)
1a006332:	1b76      	subs	r6, r6, r5
1a006334:	10b6      	asrs	r6, r6, #2
1a006336:	d006      	beq.n	1a006346 <__libc_init_array+0x1a>
1a006338:	2400      	movs	r4, #0
1a00633a:	3401      	adds	r4, #1
1a00633c:	f855 3b04 	ldr.w	r3, [r5], #4
1a006340:	4798      	blx	r3
1a006342:	42a6      	cmp	r6, r4
1a006344:	d1f9      	bne.n	1a00633a <__libc_init_array+0xe>
1a006346:	4e09      	ldr	r6, [pc, #36]	; (1a00636c <__libc_init_array+0x40>)
1a006348:	4d09      	ldr	r5, [pc, #36]	; (1a006370 <__libc_init_array+0x44>)
1a00634a:	1b76      	subs	r6, r6, r5
1a00634c:	f7fa faf9 	bl	1a000942 <_init>
1a006350:	10b6      	asrs	r6, r6, #2
1a006352:	d006      	beq.n	1a006362 <__libc_init_array+0x36>
1a006354:	2400      	movs	r4, #0
1a006356:	3401      	adds	r4, #1
1a006358:	f855 3b04 	ldr.w	r3, [r5], #4
1a00635c:	4798      	blx	r3
1a00635e:	42a6      	cmp	r6, r4
1a006360:	d1f9      	bne.n	1a006356 <__libc_init_array+0x2a>
1a006362:	bd70      	pop	{r4, r5, r6, pc}
1a006364:	1a00b560 	.word	0x1a00b560
1a006368:	1a00b560 	.word	0x1a00b560
1a00636c:	1a00b564 	.word	0x1a00b564
1a006370:	1a00b560 	.word	0x1a00b560

1a006374 <__retarget_lock_init_recursive>:
1a006374:	4770      	bx	lr
1a006376:	bf00      	nop

1a006378 <__retarget_lock_close_recursive>:
1a006378:	4770      	bx	lr
1a00637a:	bf00      	nop

1a00637c <__retarget_lock_acquire_recursive>:
1a00637c:	4770      	bx	lr
1a00637e:	bf00      	nop

1a006380 <__retarget_lock_release_recursive>:
1a006380:	4770      	bx	lr
1a006382:	bf00      	nop

1a006384 <_malloc_r>:
1a006384:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
1a006388:	f101 050b 	add.w	r5, r1, #11
1a00638c:	2d16      	cmp	r5, #22
1a00638e:	b083      	sub	sp, #12
1a006390:	4606      	mov	r6, r0
1a006392:	d823      	bhi.n	1a0063dc <_malloc_r+0x58>
1a006394:	2910      	cmp	r1, #16
1a006396:	f200 80b9 	bhi.w	1a00650c <_malloc_r+0x188>
1a00639a:	f000 fb95 	bl	1a006ac8 <__malloc_lock>
1a00639e:	2510      	movs	r5, #16
1a0063a0:	2318      	movs	r3, #24
1a0063a2:	2002      	movs	r0, #2
1a0063a4:	4fba      	ldr	r7, [pc, #744]	; (1a006690 <_malloc_r+0x30c>)
1a0063a6:	443b      	add	r3, r7
1a0063a8:	f1a3 0208 	sub.w	r2, r3, #8
1a0063ac:	685c      	ldr	r4, [r3, #4]
1a0063ae:	4294      	cmp	r4, r2
1a0063b0:	f000 80b9 	beq.w	1a006526 <_malloc_r+0x1a2>
1a0063b4:	6863      	ldr	r3, [r4, #4]
1a0063b6:	f023 0303 	bic.w	r3, r3, #3
1a0063ba:	4423      	add	r3, r4
1a0063bc:	e9d4 5102 	ldrd	r5, r1, [r4, #8]
1a0063c0:	685a      	ldr	r2, [r3, #4]
1a0063c2:	60e9      	str	r1, [r5, #12]
1a0063c4:	f042 0201 	orr.w	r2, r2, #1
1a0063c8:	4630      	mov	r0, r6
1a0063ca:	608d      	str	r5, [r1, #8]
1a0063cc:	605a      	str	r2, [r3, #4]
1a0063ce:	f000 fb81 	bl	1a006ad4 <__malloc_unlock>
1a0063d2:	3408      	adds	r4, #8
1a0063d4:	4620      	mov	r0, r4
1a0063d6:	b003      	add	sp, #12
1a0063d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
1a0063dc:	f035 0507 	bics.w	r5, r5, #7
1a0063e0:	f100 8094 	bmi.w	1a00650c <_malloc_r+0x188>
1a0063e4:	42a9      	cmp	r1, r5
1a0063e6:	f200 8091 	bhi.w	1a00650c <_malloc_r+0x188>
1a0063ea:	f000 fb6d 	bl	1a006ac8 <__malloc_lock>
1a0063ee:	f5b5 7ffc 	cmp.w	r5, #504	; 0x1f8
1a0063f2:	f0c0 81a2 	bcc.w	1a00673a <_malloc_r+0x3b6>
1a0063f6:	0a6b      	lsrs	r3, r5, #9
1a0063f8:	f000 808f 	beq.w	1a00651a <_malloc_r+0x196>
1a0063fc:	2b04      	cmp	r3, #4
1a0063fe:	f200 8178 	bhi.w	1a0066f2 <_malloc_r+0x36e>
1a006402:	09ab      	lsrs	r3, r5, #6
1a006404:	f103 0039 	add.w	r0, r3, #57	; 0x39
1a006408:	f103 0c38 	add.w	ip, r3, #56	; 0x38
1a00640c:	00c3      	lsls	r3, r0, #3
1a00640e:	4fa0      	ldr	r7, [pc, #640]	; (1a006690 <_malloc_r+0x30c>)
1a006410:	443b      	add	r3, r7
1a006412:	f1a3 0108 	sub.w	r1, r3, #8
1a006416:	685c      	ldr	r4, [r3, #4]
1a006418:	42a1      	cmp	r1, r4
1a00641a:	d106      	bne.n	1a00642a <_malloc_r+0xa6>
1a00641c:	e00c      	b.n	1a006438 <_malloc_r+0xb4>
1a00641e:	2a00      	cmp	r2, #0
1a006420:	f280 8127 	bge.w	1a006672 <_malloc_r+0x2ee>
1a006424:	68e4      	ldr	r4, [r4, #12]
1a006426:	42a1      	cmp	r1, r4
1a006428:	d006      	beq.n	1a006438 <_malloc_r+0xb4>
1a00642a:	6863      	ldr	r3, [r4, #4]
1a00642c:	f023 0303 	bic.w	r3, r3, #3
1a006430:	1b5a      	subs	r2, r3, r5
1a006432:	2a0f      	cmp	r2, #15
1a006434:	ddf3      	ble.n	1a00641e <_malloc_r+0x9a>
1a006436:	4660      	mov	r0, ip
1a006438:	693c      	ldr	r4, [r7, #16]
1a00643a:	f8df c268 	ldr.w	ip, [pc, #616]	; 1a0066a4 <_malloc_r+0x320>
1a00643e:	4564      	cmp	r4, ip
1a006440:	d07c      	beq.n	1a00653c <_malloc_r+0x1b8>
1a006442:	6863      	ldr	r3, [r4, #4]
1a006444:	f023 0303 	bic.w	r3, r3, #3
1a006448:	1b5a      	subs	r2, r3, r5
1a00644a:	2a0f      	cmp	r2, #15
1a00644c:	f300 8183 	bgt.w	1a006756 <_malloc_r+0x3d2>
1a006450:	2a00      	cmp	r2, #0
1a006452:	e9c7 cc04 	strd	ip, ip, [r7, #16]
1a006456:	f280 8174 	bge.w	1a006742 <_malloc_r+0x3be>
1a00645a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
1a00645e:	f080 8125 	bcs.w	1a0066ac <_malloc_r+0x328>
1a006462:	08db      	lsrs	r3, r3, #3
1a006464:	1c59      	adds	r1, r3, #1
1a006466:	687a      	ldr	r2, [r7, #4]
1a006468:	f857 8031 	ldr.w	r8, [r7, r1, lsl #3]
1a00646c:	f8c4 8008 	str.w	r8, [r4, #8]
1a006470:	f04f 0e01 	mov.w	lr, #1
1a006474:	109b      	asrs	r3, r3, #2
1a006476:	fa0e f303 	lsl.w	r3, lr, r3
1a00647a:	eb07 0ec1 	add.w	lr, r7, r1, lsl #3
1a00647e:	4313      	orrs	r3, r2
1a006480:	f1ae 0208 	sub.w	r2, lr, #8
1a006484:	60e2      	str	r2, [r4, #12]
1a006486:	607b      	str	r3, [r7, #4]
1a006488:	f847 4031 	str.w	r4, [r7, r1, lsl #3]
1a00648c:	f8c8 400c 	str.w	r4, [r8, #12]
1a006490:	1082      	asrs	r2, r0, #2
1a006492:	2401      	movs	r4, #1
1a006494:	4094      	lsls	r4, r2
1a006496:	429c      	cmp	r4, r3
1a006498:	d856      	bhi.n	1a006548 <_malloc_r+0x1c4>
1a00649a:	421c      	tst	r4, r3
1a00649c:	d106      	bne.n	1a0064ac <_malloc_r+0x128>
1a00649e:	f020 0003 	bic.w	r0, r0, #3
1a0064a2:	0064      	lsls	r4, r4, #1
1a0064a4:	421c      	tst	r4, r3
1a0064a6:	f100 0004 	add.w	r0, r0, #4
1a0064aa:	d0fa      	beq.n	1a0064a2 <_malloc_r+0x11e>
1a0064ac:	eb07 09c0 	add.w	r9, r7, r0, lsl #3
1a0064b0:	46ce      	mov	lr, r9
1a0064b2:	4680      	mov	r8, r0
1a0064b4:	f8de 300c 	ldr.w	r3, [lr, #12]
1a0064b8:	459e      	cmp	lr, r3
1a0064ba:	d107      	bne.n	1a0064cc <_malloc_r+0x148>
1a0064bc:	e125      	b.n	1a00670a <_malloc_r+0x386>
1a0064be:	2a00      	cmp	r2, #0
1a0064c0:	f280 812c 	bge.w	1a00671c <_malloc_r+0x398>
1a0064c4:	68db      	ldr	r3, [r3, #12]
1a0064c6:	459e      	cmp	lr, r3
1a0064c8:	f000 811f 	beq.w	1a00670a <_malloc_r+0x386>
1a0064cc:	6859      	ldr	r1, [r3, #4]
1a0064ce:	f021 0103 	bic.w	r1, r1, #3
1a0064d2:	1b4a      	subs	r2, r1, r5
1a0064d4:	2a0f      	cmp	r2, #15
1a0064d6:	ddf2      	ble.n	1a0064be <_malloc_r+0x13a>
1a0064d8:	e9d3 8e02 	ldrd	r8, lr, [r3, #8]
1a0064dc:	195c      	adds	r4, r3, r5
1a0064de:	f045 0501 	orr.w	r5, r5, #1
1a0064e2:	605d      	str	r5, [r3, #4]
1a0064e4:	f042 0501 	orr.w	r5, r2, #1
1a0064e8:	f8c8 e00c 	str.w	lr, [r8, #12]
1a0064ec:	4630      	mov	r0, r6
1a0064ee:	f8ce 8008 	str.w	r8, [lr, #8]
1a0064f2:	e9c7 4404 	strd	r4, r4, [r7, #16]
1a0064f6:	e9c4 cc02 	strd	ip, ip, [r4, #8]
1a0064fa:	6065      	str	r5, [r4, #4]
1a0064fc:	505a      	str	r2, [r3, r1]
1a0064fe:	9300      	str	r3, [sp, #0]
1a006500:	f000 fae8 	bl	1a006ad4 <__malloc_unlock>
1a006504:	9b00      	ldr	r3, [sp, #0]
1a006506:	f103 0408 	add.w	r4, r3, #8
1a00650a:	e002      	b.n	1a006512 <_malloc_r+0x18e>
1a00650c:	230c      	movs	r3, #12
1a00650e:	6033      	str	r3, [r6, #0]
1a006510:	2400      	movs	r4, #0
1a006512:	4620      	mov	r0, r4
1a006514:	b003      	add	sp, #12
1a006516:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
1a00651a:	f44f 7300 	mov.w	r3, #512	; 0x200
1a00651e:	2040      	movs	r0, #64	; 0x40
1a006520:	f04f 0c3f 	mov.w	ip, #63	; 0x3f
1a006524:	e773      	b.n	1a00640e <_malloc_r+0x8a>
1a006526:	68dc      	ldr	r4, [r3, #12]
1a006528:	42a3      	cmp	r3, r4
1a00652a:	bf08      	it	eq
1a00652c:	3002      	addeq	r0, #2
1a00652e:	f47f af41 	bne.w	1a0063b4 <_malloc_r+0x30>
1a006532:	693c      	ldr	r4, [r7, #16]
1a006534:	f8df c16c 	ldr.w	ip, [pc, #364]	; 1a0066a4 <_malloc_r+0x320>
1a006538:	4564      	cmp	r4, ip
1a00653a:	d182      	bne.n	1a006442 <_malloc_r+0xbe>
1a00653c:	687b      	ldr	r3, [r7, #4]
1a00653e:	1082      	asrs	r2, r0, #2
1a006540:	2401      	movs	r4, #1
1a006542:	4094      	lsls	r4, r2
1a006544:	429c      	cmp	r4, r3
1a006546:	d9a8      	bls.n	1a00649a <_malloc_r+0x116>
1a006548:	68bc      	ldr	r4, [r7, #8]
1a00654a:	6863      	ldr	r3, [r4, #4]
1a00654c:	f023 0803 	bic.w	r8, r3, #3
1a006550:	45a8      	cmp	r8, r5
1a006552:	d303      	bcc.n	1a00655c <_malloc_r+0x1d8>
1a006554:	eba8 0305 	sub.w	r3, r8, r5
1a006558:	2b0f      	cmp	r3, #15
1a00655a:	dc7a      	bgt.n	1a006652 <_malloc_r+0x2ce>
1a00655c:	f8df 9148 	ldr.w	r9, [pc, #328]	; 1a0066a8 <_malloc_r+0x324>
1a006560:	4b4c      	ldr	r3, [pc, #304]	; (1a006694 <_malloc_r+0x310>)
1a006562:	f8d9 2000 	ldr.w	r2, [r9]
1a006566:	681b      	ldr	r3, [r3, #0]
1a006568:	3201      	adds	r2, #1
1a00656a:	442b      	add	r3, r5
1a00656c:	eb04 0a08 	add.w	sl, r4, r8
1a006570:	f000 813c 	beq.w	1a0067ec <_malloc_r+0x468>
1a006574:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
1a006578:	330f      	adds	r3, #15
1a00657a:	f423 6b7f 	bic.w	fp, r3, #4080	; 0xff0
1a00657e:	f02b 0b0f 	bic.w	fp, fp, #15
1a006582:	4659      	mov	r1, fp
1a006584:	4630      	mov	r0, r6
1a006586:	f7fa fa31 	bl	1a0009ec <_sbrk_r>
1a00658a:	1c41      	adds	r1, r0, #1
1a00658c:	4602      	mov	r2, r0
1a00658e:	f000 80fc 	beq.w	1a00678a <_malloc_r+0x406>
1a006592:	4582      	cmp	sl, r0
1a006594:	f200 80f7 	bhi.w	1a006786 <_malloc_r+0x402>
1a006598:	4b3f      	ldr	r3, [pc, #252]	; (1a006698 <_malloc_r+0x314>)
1a00659a:	6818      	ldr	r0, [r3, #0]
1a00659c:	4458      	add	r0, fp
1a00659e:	6018      	str	r0, [r3, #0]
1a0065a0:	4601      	mov	r1, r0
1a0065a2:	f000 8157 	beq.w	1a006854 <_malloc_r+0x4d0>
1a0065a6:	f8d9 0000 	ldr.w	r0, [r9]
1a0065aa:	9301      	str	r3, [sp, #4]
1a0065ac:	3001      	adds	r0, #1
1a0065ae:	bf1b      	ittet	ne
1a0065b0:	eba2 0a0a 	subne.w	sl, r2, sl
1a0065b4:	4451      	addne	r1, sl
1a0065b6:	f8c9 2000 	streq.w	r2, [r9]
1a0065ba:	6019      	strne	r1, [r3, #0]
1a0065bc:	f012 0a07 	ands.w	sl, r2, #7
1a0065c0:	f000 8120 	beq.w	1a006804 <_malloc_r+0x480>
1a0065c4:	f1ca 0108 	rsb	r1, sl, #8
1a0065c8:	440a      	add	r2, r1
1a0065ca:	f5ca 5180 	rsb	r1, sl, #4096	; 0x1000
1a0065ce:	4493      	add	fp, r2
1a0065d0:	3108      	adds	r1, #8
1a0065d2:	eba1 010b 	sub.w	r1, r1, fp
1a0065d6:	f3c1 090b 	ubfx	r9, r1, #0, #12
1a0065da:	4649      	mov	r1, r9
1a0065dc:	4630      	mov	r0, r6
1a0065de:	9200      	str	r2, [sp, #0]
1a0065e0:	f7fa fa04 	bl	1a0009ec <_sbrk_r>
1a0065e4:	1c42      	adds	r2, r0, #1
1a0065e6:	e9dd 2300 	ldrd	r2, r3, [sp]
1a0065ea:	f000 8158 	beq.w	1a00689e <_malloc_r+0x51a>
1a0065ee:	1a80      	subs	r0, r0, r2
1a0065f0:	eb00 0b09 	add.w	fp, r0, r9
1a0065f4:	6818      	ldr	r0, [r3, #0]
1a0065f6:	60ba      	str	r2, [r7, #8]
1a0065f8:	f04b 0101 	orr.w	r1, fp, #1
1a0065fc:	4448      	add	r0, r9
1a0065fe:	42bc      	cmp	r4, r7
1a006600:	6051      	str	r1, [r2, #4]
1a006602:	6018      	str	r0, [r3, #0]
1a006604:	f000 8132 	beq.w	1a00686c <_malloc_r+0x4e8>
1a006608:	f1b8 0f0f 	cmp.w	r8, #15
1a00660c:	f240 8130 	bls.w	1a006870 <_malloc_r+0x4ec>
1a006610:	6861      	ldr	r1, [r4, #4]
1a006612:	f1a8 0c0c 	sub.w	ip, r8, #12
1a006616:	f02c 0c07 	bic.w	ip, ip, #7
1a00661a:	f001 0101 	and.w	r1, r1, #1
1a00661e:	eb04 0e0c 	add.w	lr, r4, ip
1a006622:	ea41 010c 	orr.w	r1, r1, ip
1a006626:	f04f 0805 	mov.w	r8, #5
1a00662a:	f1bc 0f0f 	cmp.w	ip, #15
1a00662e:	6061      	str	r1, [r4, #4]
1a006630:	e9ce 8801 	strd	r8, r8, [lr, #4]
1a006634:	f200 813b 	bhi.w	1a0068ae <_malloc_r+0x52a>
1a006638:	6851      	ldr	r1, [r2, #4]
1a00663a:	4614      	mov	r4, r2
1a00663c:	4b17      	ldr	r3, [pc, #92]	; (1a00669c <_malloc_r+0x318>)
1a00663e:	681a      	ldr	r2, [r3, #0]
1a006640:	4282      	cmp	r2, r0
1a006642:	bf38      	it	cc
1a006644:	6018      	strcc	r0, [r3, #0]
1a006646:	4b16      	ldr	r3, [pc, #88]	; (1a0066a0 <_malloc_r+0x31c>)
1a006648:	681a      	ldr	r2, [r3, #0]
1a00664a:	4282      	cmp	r2, r0
1a00664c:	bf38      	it	cc
1a00664e:	6018      	strcc	r0, [r3, #0]
1a006650:	e09d      	b.n	1a00678e <_malloc_r+0x40a>
1a006652:	1962      	adds	r2, r4, r5
1a006654:	f043 0301 	orr.w	r3, r3, #1
1a006658:	f045 0501 	orr.w	r5, r5, #1
1a00665c:	6065      	str	r5, [r4, #4]
1a00665e:	4630      	mov	r0, r6
1a006660:	60ba      	str	r2, [r7, #8]
1a006662:	6053      	str	r3, [r2, #4]
1a006664:	f000 fa36 	bl	1a006ad4 <__malloc_unlock>
1a006668:	3408      	adds	r4, #8
1a00666a:	4620      	mov	r0, r4
1a00666c:	b003      	add	sp, #12
1a00666e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
1a006672:	4423      	add	r3, r4
1a006674:	68e1      	ldr	r1, [r4, #12]
1a006676:	685a      	ldr	r2, [r3, #4]
1a006678:	68a5      	ldr	r5, [r4, #8]
1a00667a:	f042 0201 	orr.w	r2, r2, #1
1a00667e:	60e9      	str	r1, [r5, #12]
1a006680:	4630      	mov	r0, r6
1a006682:	608d      	str	r5, [r1, #8]
1a006684:	605a      	str	r2, [r3, #4]
1a006686:	f000 fa25 	bl	1a006ad4 <__malloc_unlock>
1a00668a:	3408      	adds	r4, #8
1a00668c:	e741      	b.n	1a006512 <_malloc_r+0x18e>
1a00668e:	bf00      	nop
1a006690:	10000480 	.word	0x10000480
1a006694:	10003628 	.word	0x10003628
1a006698:	100035f8 	.word	0x100035f8
1a00669c:	10003620 	.word	0x10003620
1a0066a0:	10003624 	.word	0x10003624
1a0066a4:	10000488 	.word	0x10000488
1a0066a8:	10000888 	.word	0x10000888
1a0066ac:	0a5a      	lsrs	r2, r3, #9
1a0066ae:	2a04      	cmp	r2, #4
1a0066b0:	d963      	bls.n	1a00677a <_malloc_r+0x3f6>
1a0066b2:	2a14      	cmp	r2, #20
1a0066b4:	f200 80b7 	bhi.w	1a006826 <_malloc_r+0x4a2>
1a0066b8:	f102 015c 	add.w	r1, r2, #92	; 0x5c
1a0066bc:	00c9      	lsls	r1, r1, #3
1a0066be:	325b      	adds	r2, #91	; 0x5b
1a0066c0:	eb07 0e01 	add.w	lr, r7, r1
1a0066c4:	5879      	ldr	r1, [r7, r1]
1a0066c6:	f1ae 0e08 	sub.w	lr, lr, #8
1a0066ca:	458e      	cmp	lr, r1
1a0066cc:	f000 8091 	beq.w	1a0067f2 <_malloc_r+0x46e>
1a0066d0:	684a      	ldr	r2, [r1, #4]
1a0066d2:	f022 0203 	bic.w	r2, r2, #3
1a0066d6:	429a      	cmp	r2, r3
1a0066d8:	d902      	bls.n	1a0066e0 <_malloc_r+0x35c>
1a0066da:	6889      	ldr	r1, [r1, #8]
1a0066dc:	458e      	cmp	lr, r1
1a0066de:	d1f7      	bne.n	1a0066d0 <_malloc_r+0x34c>
1a0066e0:	f8d1 e00c 	ldr.w	lr, [r1, #12]
1a0066e4:	687b      	ldr	r3, [r7, #4]
1a0066e6:	e9c4 1e02 	strd	r1, lr, [r4, #8]
1a0066ea:	f8ce 4008 	str.w	r4, [lr, #8]
1a0066ee:	60cc      	str	r4, [r1, #12]
1a0066f0:	e6ce      	b.n	1a006490 <_malloc_r+0x10c>
1a0066f2:	2b14      	cmp	r3, #20
1a0066f4:	d959      	bls.n	1a0067aa <_malloc_r+0x426>
1a0066f6:	2b54      	cmp	r3, #84	; 0x54
1a0066f8:	f200 809d 	bhi.w	1a006836 <_malloc_r+0x4b2>
1a0066fc:	0b2b      	lsrs	r3, r5, #12
1a0066fe:	f103 006f 	add.w	r0, r3, #111	; 0x6f
1a006702:	f103 0c6e 	add.w	ip, r3, #110	; 0x6e
1a006706:	00c3      	lsls	r3, r0, #3
1a006708:	e681      	b.n	1a00640e <_malloc_r+0x8a>
1a00670a:	f108 0801 	add.w	r8, r8, #1
1a00670e:	f018 0f03 	tst.w	r8, #3
1a006712:	f10e 0e08 	add.w	lr, lr, #8
1a006716:	f47f aecd 	bne.w	1a0064b4 <_malloc_r+0x130>
1a00671a:	e051      	b.n	1a0067c0 <_malloc_r+0x43c>
1a00671c:	4419      	add	r1, r3
1a00671e:	461c      	mov	r4, r3
1a006720:	684a      	ldr	r2, [r1, #4]
1a006722:	68db      	ldr	r3, [r3, #12]
1a006724:	f854 5f08 	ldr.w	r5, [r4, #8]!
1a006728:	f042 0201 	orr.w	r2, r2, #1
1a00672c:	604a      	str	r2, [r1, #4]
1a00672e:	4630      	mov	r0, r6
1a006730:	60eb      	str	r3, [r5, #12]
1a006732:	609d      	str	r5, [r3, #8]
1a006734:	f000 f9ce 	bl	1a006ad4 <__malloc_unlock>
1a006738:	e6eb      	b.n	1a006512 <_malloc_r+0x18e>
1a00673a:	08e8      	lsrs	r0, r5, #3
1a00673c:	f105 0308 	add.w	r3, r5, #8
1a006740:	e630      	b.n	1a0063a4 <_malloc_r+0x20>
1a006742:	4423      	add	r3, r4
1a006744:	4630      	mov	r0, r6
1a006746:	685a      	ldr	r2, [r3, #4]
1a006748:	f042 0201 	orr.w	r2, r2, #1
1a00674c:	605a      	str	r2, [r3, #4]
1a00674e:	3408      	adds	r4, #8
1a006750:	f000 f9c0 	bl	1a006ad4 <__malloc_unlock>
1a006754:	e6dd      	b.n	1a006512 <_malloc_r+0x18e>
1a006756:	1961      	adds	r1, r4, r5
1a006758:	f045 0e01 	orr.w	lr, r5, #1
1a00675c:	f042 0501 	orr.w	r5, r2, #1
1a006760:	f8c4 e004 	str.w	lr, [r4, #4]
1a006764:	4630      	mov	r0, r6
1a006766:	e9c7 1104 	strd	r1, r1, [r7, #16]
1a00676a:	e9c1 cc02 	strd	ip, ip, [r1, #8]
1a00676e:	604d      	str	r5, [r1, #4]
1a006770:	50e2      	str	r2, [r4, r3]
1a006772:	f000 f9af 	bl	1a006ad4 <__malloc_unlock>
1a006776:	3408      	adds	r4, #8
1a006778:	e6cb      	b.n	1a006512 <_malloc_r+0x18e>
1a00677a:	099a      	lsrs	r2, r3, #6
1a00677c:	f102 0139 	add.w	r1, r2, #57	; 0x39
1a006780:	00c9      	lsls	r1, r1, #3
1a006782:	3238      	adds	r2, #56	; 0x38
1a006784:	e79c      	b.n	1a0066c0 <_malloc_r+0x33c>
1a006786:	42bc      	cmp	r4, r7
1a006788:	d05f      	beq.n	1a00684a <_malloc_r+0x4c6>
1a00678a:	68bc      	ldr	r4, [r7, #8]
1a00678c:	6861      	ldr	r1, [r4, #4]
1a00678e:	f021 0b03 	bic.w	fp, r1, #3
1a006792:	45ab      	cmp	fp, r5
1a006794:	ebab 0305 	sub.w	r3, fp, r5
1a006798:	d302      	bcc.n	1a0067a0 <_malloc_r+0x41c>
1a00679a:	2b0f      	cmp	r3, #15
1a00679c:	f73f af59 	bgt.w	1a006652 <_malloc_r+0x2ce>
1a0067a0:	4630      	mov	r0, r6
1a0067a2:	f000 f997 	bl	1a006ad4 <__malloc_unlock>
1a0067a6:	2400      	movs	r4, #0
1a0067a8:	e6b3      	b.n	1a006512 <_malloc_r+0x18e>
1a0067aa:	f103 005c 	add.w	r0, r3, #92	; 0x5c
1a0067ae:	f103 0c5b 	add.w	ip, r3, #91	; 0x5b
1a0067b2:	00c3      	lsls	r3, r0, #3
1a0067b4:	e62b      	b.n	1a00640e <_malloc_r+0x8a>
1a0067b6:	f859 3908 	ldr.w	r3, [r9], #-8
1a0067ba:	454b      	cmp	r3, r9
1a0067bc:	f040 8096 	bne.w	1a0068ec <_malloc_r+0x568>
1a0067c0:	f010 0f03 	tst.w	r0, #3
1a0067c4:	f100 30ff 	add.w	r0, r0, #4294967295	; 0xffffffff
1a0067c8:	d1f5      	bne.n	1a0067b6 <_malloc_r+0x432>
1a0067ca:	687b      	ldr	r3, [r7, #4]
1a0067cc:	ea23 0304 	bic.w	r3, r3, r4
1a0067d0:	607b      	str	r3, [r7, #4]
1a0067d2:	0064      	lsls	r4, r4, #1
1a0067d4:	429c      	cmp	r4, r3
1a0067d6:	f63f aeb7 	bhi.w	1a006548 <_malloc_r+0x1c4>
1a0067da:	b91c      	cbnz	r4, 1a0067e4 <_malloc_r+0x460>
1a0067dc:	e6b4      	b.n	1a006548 <_malloc_r+0x1c4>
1a0067de:	0064      	lsls	r4, r4, #1
1a0067e0:	f108 0804 	add.w	r8, r8, #4
1a0067e4:	421c      	tst	r4, r3
1a0067e6:	d0fa      	beq.n	1a0067de <_malloc_r+0x45a>
1a0067e8:	4640      	mov	r0, r8
1a0067ea:	e65f      	b.n	1a0064ac <_malloc_r+0x128>
1a0067ec:	f103 0b10 	add.w	fp, r3, #16
1a0067f0:	e6c7      	b.n	1a006582 <_malloc_r+0x1fe>
1a0067f2:	687b      	ldr	r3, [r7, #4]
1a0067f4:	1092      	asrs	r2, r2, #2
1a0067f6:	f04f 0801 	mov.w	r8, #1
1a0067fa:	fa08 f202 	lsl.w	r2, r8, r2
1a0067fe:	4313      	orrs	r3, r2
1a006800:	607b      	str	r3, [r7, #4]
1a006802:	e770      	b.n	1a0066e6 <_malloc_r+0x362>
1a006804:	eb02 000b 	add.w	r0, r2, fp
1a006808:	4240      	negs	r0, r0
1a00680a:	f3c0 090b 	ubfx	r9, r0, #0, #12
1a00680e:	4649      	mov	r1, r9
1a006810:	4630      	mov	r0, r6
1a006812:	9200      	str	r2, [sp, #0]
1a006814:	f7fa f8ea 	bl	1a0009ec <_sbrk_r>
1a006818:	1c43      	adds	r3, r0, #1
1a00681a:	e9dd 2300 	ldrd	r2, r3, [sp]
1a00681e:	f47f aee6 	bne.w	1a0065ee <_malloc_r+0x26a>
1a006822:	46d1      	mov	r9, sl
1a006824:	e6e6      	b.n	1a0065f4 <_malloc_r+0x270>
1a006826:	2a54      	cmp	r2, #84	; 0x54
1a006828:	d825      	bhi.n	1a006876 <_malloc_r+0x4f2>
1a00682a:	0b1a      	lsrs	r2, r3, #12
1a00682c:	f102 016f 	add.w	r1, r2, #111	; 0x6f
1a006830:	00c9      	lsls	r1, r1, #3
1a006832:	326e      	adds	r2, #110	; 0x6e
1a006834:	e744      	b.n	1a0066c0 <_malloc_r+0x33c>
1a006836:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
1a00683a:	d825      	bhi.n	1a006888 <_malloc_r+0x504>
1a00683c:	0beb      	lsrs	r3, r5, #15
1a00683e:	f103 0078 	add.w	r0, r3, #120	; 0x78
1a006842:	f103 0c77 	add.w	ip, r3, #119	; 0x77
1a006846:	00c3      	lsls	r3, r0, #3
1a006848:	e5e1      	b.n	1a00640e <_malloc_r+0x8a>
1a00684a:	4b29      	ldr	r3, [pc, #164]	; (1a0068f0 <_malloc_r+0x56c>)
1a00684c:	6819      	ldr	r1, [r3, #0]
1a00684e:	4459      	add	r1, fp
1a006850:	6019      	str	r1, [r3, #0]
1a006852:	e6a8      	b.n	1a0065a6 <_malloc_r+0x222>
1a006854:	f3ca 0c0b 	ubfx	ip, sl, #0, #12
1a006858:	f1bc 0f00 	cmp.w	ip, #0
1a00685c:	f47f aea3 	bne.w	1a0065a6 <_malloc_r+0x222>
1a006860:	44c3      	add	fp, r8
1a006862:	68bc      	ldr	r4, [r7, #8]
1a006864:	f04b 0101 	orr.w	r1, fp, #1
1a006868:	6061      	str	r1, [r4, #4]
1a00686a:	e6e7      	b.n	1a00663c <_malloc_r+0x2b8>
1a00686c:	4614      	mov	r4, r2
1a00686e:	e6e5      	b.n	1a00663c <_malloc_r+0x2b8>
1a006870:	2301      	movs	r3, #1
1a006872:	6053      	str	r3, [r2, #4]
1a006874:	e794      	b.n	1a0067a0 <_malloc_r+0x41c>
1a006876:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
1a00687a:	d823      	bhi.n	1a0068c4 <_malloc_r+0x540>
1a00687c:	0bda      	lsrs	r2, r3, #15
1a00687e:	f102 0178 	add.w	r1, r2, #120	; 0x78
1a006882:	00c9      	lsls	r1, r1, #3
1a006884:	3277      	adds	r2, #119	; 0x77
1a006886:	e71b      	b.n	1a0066c0 <_malloc_r+0x33c>
1a006888:	f240 5254 	movw	r2, #1364	; 0x554
1a00688c:	4293      	cmp	r3, r2
1a00688e:	d823      	bhi.n	1a0068d8 <_malloc_r+0x554>
1a006890:	0cab      	lsrs	r3, r5, #18
1a006892:	f103 007d 	add.w	r0, r3, #125	; 0x7d
1a006896:	f103 0c7c 	add.w	ip, r3, #124	; 0x7c
1a00689a:	00c3      	lsls	r3, r0, #3
1a00689c:	e5b7      	b.n	1a00640e <_malloc_r+0x8a>
1a00689e:	f1aa 0a08 	sub.w	sl, sl, #8
1a0068a2:	44d3      	add	fp, sl
1a0068a4:	ebab 0b02 	sub.w	fp, fp, r2
1a0068a8:	f04f 0900 	mov.w	r9, #0
1a0068ac:	e6a2      	b.n	1a0065f4 <_malloc_r+0x270>
1a0068ae:	f104 0108 	add.w	r1, r4, #8
1a0068b2:	4630      	mov	r0, r6
1a0068b4:	9300      	str	r3, [sp, #0]
1a0068b6:	f7ff fc19 	bl	1a0060ec <_free_r>
1a0068ba:	68bc      	ldr	r4, [r7, #8]
1a0068bc:	9b00      	ldr	r3, [sp, #0]
1a0068be:	6861      	ldr	r1, [r4, #4]
1a0068c0:	6818      	ldr	r0, [r3, #0]
1a0068c2:	e6bb      	b.n	1a00663c <_malloc_r+0x2b8>
1a0068c4:	f240 5154 	movw	r1, #1364	; 0x554
1a0068c8:	428a      	cmp	r2, r1
1a0068ca:	d80b      	bhi.n	1a0068e4 <_malloc_r+0x560>
1a0068cc:	0c9a      	lsrs	r2, r3, #18
1a0068ce:	f102 017d 	add.w	r1, r2, #125	; 0x7d
1a0068d2:	00c9      	lsls	r1, r1, #3
1a0068d4:	327c      	adds	r2, #124	; 0x7c
1a0068d6:	e6f3      	b.n	1a0066c0 <_malloc_r+0x33c>
1a0068d8:	f44f 737e 	mov.w	r3, #1016	; 0x3f8
1a0068dc:	207f      	movs	r0, #127	; 0x7f
1a0068de:	f04f 0c7e 	mov.w	ip, #126	; 0x7e
1a0068e2:	e594      	b.n	1a00640e <_malloc_r+0x8a>
1a0068e4:	f44f 717e 	mov.w	r1, #1016	; 0x3f8
1a0068e8:	227e      	movs	r2, #126	; 0x7e
1a0068ea:	e6e9      	b.n	1a0066c0 <_malloc_r+0x33c>
1a0068ec:	687b      	ldr	r3, [r7, #4]
1a0068ee:	e770      	b.n	1a0067d2 <_malloc_r+0x44e>
1a0068f0:	100035f8 	.word	0x100035f8

1a0068f4 <memcpy>:
1a0068f4:	4684      	mov	ip, r0
1a0068f6:	ea41 0300 	orr.w	r3, r1, r0
1a0068fa:	f013 0303 	ands.w	r3, r3, #3
1a0068fe:	d16d      	bne.n	1a0069dc <memcpy+0xe8>
1a006900:	3a40      	subs	r2, #64	; 0x40
1a006902:	d341      	bcc.n	1a006988 <memcpy+0x94>
1a006904:	f851 3b04 	ldr.w	r3, [r1], #4
1a006908:	f840 3b04 	str.w	r3, [r0], #4
1a00690c:	f851 3b04 	ldr.w	r3, [r1], #4
1a006910:	f840 3b04 	str.w	r3, [r0], #4
1a006914:	f851 3b04 	ldr.w	r3, [r1], #4
1a006918:	f840 3b04 	str.w	r3, [r0], #4
1a00691c:	f851 3b04 	ldr.w	r3, [r1], #4
1a006920:	f840 3b04 	str.w	r3, [r0], #4
1a006924:	f851 3b04 	ldr.w	r3, [r1], #4
1a006928:	f840 3b04 	str.w	r3, [r0], #4
1a00692c:	f851 3b04 	ldr.w	r3, [r1], #4
1a006930:	f840 3b04 	str.w	r3, [r0], #4
1a006934:	f851 3b04 	ldr.w	r3, [r1], #4
1a006938:	f840 3b04 	str.w	r3, [r0], #4
1a00693c:	f851 3b04 	ldr.w	r3, [r1], #4
1a006940:	f840 3b04 	str.w	r3, [r0], #4
1a006944:	f851 3b04 	ldr.w	r3, [r1], #4
1a006948:	f840 3b04 	str.w	r3, [r0], #4
1a00694c:	f851 3b04 	ldr.w	r3, [r1], #4
1a006950:	f840 3b04 	str.w	r3, [r0], #4
1a006954:	f851 3b04 	ldr.w	r3, [r1], #4
1a006958:	f840 3b04 	str.w	r3, [r0], #4
1a00695c:	f851 3b04 	ldr.w	r3, [r1], #4
1a006960:	f840 3b04 	str.w	r3, [r0], #4
1a006964:	f851 3b04 	ldr.w	r3, [r1], #4
1a006968:	f840 3b04 	str.w	r3, [r0], #4
1a00696c:	f851 3b04 	ldr.w	r3, [r1], #4
1a006970:	f840 3b04 	str.w	r3, [r0], #4
1a006974:	f851 3b04 	ldr.w	r3, [r1], #4
1a006978:	f840 3b04 	str.w	r3, [r0], #4
1a00697c:	f851 3b04 	ldr.w	r3, [r1], #4
1a006980:	f840 3b04 	str.w	r3, [r0], #4
1a006984:	3a40      	subs	r2, #64	; 0x40
1a006986:	d2bd      	bcs.n	1a006904 <memcpy+0x10>
1a006988:	3230      	adds	r2, #48	; 0x30
1a00698a:	d311      	bcc.n	1a0069b0 <memcpy+0xbc>
1a00698c:	f851 3b04 	ldr.w	r3, [r1], #4
1a006990:	f840 3b04 	str.w	r3, [r0], #4
1a006994:	f851 3b04 	ldr.w	r3, [r1], #4
1a006998:	f840 3b04 	str.w	r3, [r0], #4
1a00699c:	f851 3b04 	ldr.w	r3, [r1], #4
1a0069a0:	f840 3b04 	str.w	r3, [r0], #4
1a0069a4:	f851 3b04 	ldr.w	r3, [r1], #4
1a0069a8:	f840 3b04 	str.w	r3, [r0], #4
1a0069ac:	3a10      	subs	r2, #16
1a0069ae:	d2ed      	bcs.n	1a00698c <memcpy+0x98>
1a0069b0:	320c      	adds	r2, #12
1a0069b2:	d305      	bcc.n	1a0069c0 <memcpy+0xcc>
1a0069b4:	f851 3b04 	ldr.w	r3, [r1], #4
1a0069b8:	f840 3b04 	str.w	r3, [r0], #4
1a0069bc:	3a04      	subs	r2, #4
1a0069be:	d2f9      	bcs.n	1a0069b4 <memcpy+0xc0>
1a0069c0:	3204      	adds	r2, #4
1a0069c2:	d008      	beq.n	1a0069d6 <memcpy+0xe2>
1a0069c4:	07d2      	lsls	r2, r2, #31
1a0069c6:	bf1c      	itt	ne
1a0069c8:	f811 3b01 	ldrbne.w	r3, [r1], #1
1a0069cc:	f800 3b01 	strbne.w	r3, [r0], #1
1a0069d0:	d301      	bcc.n	1a0069d6 <memcpy+0xe2>
1a0069d2:	880b      	ldrh	r3, [r1, #0]
1a0069d4:	8003      	strh	r3, [r0, #0]
1a0069d6:	4660      	mov	r0, ip
1a0069d8:	4770      	bx	lr
1a0069da:	bf00      	nop
1a0069dc:	2a08      	cmp	r2, #8
1a0069de:	d313      	bcc.n	1a006a08 <memcpy+0x114>
1a0069e0:	078b      	lsls	r3, r1, #30
1a0069e2:	d08d      	beq.n	1a006900 <memcpy+0xc>
1a0069e4:	f010 0303 	ands.w	r3, r0, #3
1a0069e8:	d08a      	beq.n	1a006900 <memcpy+0xc>
1a0069ea:	f1c3 0304 	rsb	r3, r3, #4
1a0069ee:	1ad2      	subs	r2, r2, r3
1a0069f0:	07db      	lsls	r3, r3, #31
1a0069f2:	bf1c      	itt	ne
1a0069f4:	f811 3b01 	ldrbne.w	r3, [r1], #1
1a0069f8:	f800 3b01 	strbne.w	r3, [r0], #1
1a0069fc:	d380      	bcc.n	1a006900 <memcpy+0xc>
1a0069fe:	f831 3b02 	ldrh.w	r3, [r1], #2
1a006a02:	f820 3b02 	strh.w	r3, [r0], #2
1a006a06:	e77b      	b.n	1a006900 <memcpy+0xc>
1a006a08:	3a04      	subs	r2, #4
1a006a0a:	d3d9      	bcc.n	1a0069c0 <memcpy+0xcc>
1a006a0c:	3a01      	subs	r2, #1
1a006a0e:	f811 3b01 	ldrb.w	r3, [r1], #1
1a006a12:	f800 3b01 	strb.w	r3, [r0], #1
1a006a16:	d2f9      	bcs.n	1a006a0c <memcpy+0x118>
1a006a18:	780b      	ldrb	r3, [r1, #0]
1a006a1a:	7003      	strb	r3, [r0, #0]
1a006a1c:	784b      	ldrb	r3, [r1, #1]
1a006a1e:	7043      	strb	r3, [r0, #1]
1a006a20:	788b      	ldrb	r3, [r1, #2]
1a006a22:	7083      	strb	r3, [r0, #2]
1a006a24:	4660      	mov	r0, ip
1a006a26:	4770      	bx	lr

1a006a28 <memset>:
1a006a28:	b4f0      	push	{r4, r5, r6, r7}
1a006a2a:	0786      	lsls	r6, r0, #30
1a006a2c:	d046      	beq.n	1a006abc <memset+0x94>
1a006a2e:	1e54      	subs	r4, r2, #1
1a006a30:	2a00      	cmp	r2, #0
1a006a32:	d03c      	beq.n	1a006aae <memset+0x86>
1a006a34:	b2ca      	uxtb	r2, r1
1a006a36:	4603      	mov	r3, r0
1a006a38:	e002      	b.n	1a006a40 <memset+0x18>
1a006a3a:	f114 34ff 	adds.w	r4, r4, #4294967295	; 0xffffffff
1a006a3e:	d336      	bcc.n	1a006aae <memset+0x86>
1a006a40:	f803 2b01 	strb.w	r2, [r3], #1
1a006a44:	079d      	lsls	r5, r3, #30
1a006a46:	d1f8      	bne.n	1a006a3a <memset+0x12>
1a006a48:	2c03      	cmp	r4, #3
1a006a4a:	d929      	bls.n	1a006aa0 <memset+0x78>
1a006a4c:	b2cd      	uxtb	r5, r1
1a006a4e:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
1a006a52:	2c0f      	cmp	r4, #15
1a006a54:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
1a006a58:	d933      	bls.n	1a006ac2 <memset+0x9a>
1a006a5a:	f1a4 0610 	sub.w	r6, r4, #16
1a006a5e:	0936      	lsrs	r6, r6, #4
1a006a60:	f103 0720 	add.w	r7, r3, #32
1a006a64:	eb07 1706 	add.w	r7, r7, r6, lsl #4
1a006a68:	f103 0210 	add.w	r2, r3, #16
1a006a6c:	e942 5504 	strd	r5, r5, [r2, #-16]
1a006a70:	e942 5502 	strd	r5, r5, [r2, #-8]
1a006a74:	3210      	adds	r2, #16
1a006a76:	42ba      	cmp	r2, r7
1a006a78:	d1f8      	bne.n	1a006a6c <memset+0x44>
1a006a7a:	1c72      	adds	r2, r6, #1
1a006a7c:	f014 0f0c 	tst.w	r4, #12
1a006a80:	eb03 1202 	add.w	r2, r3, r2, lsl #4
1a006a84:	f004 060f 	and.w	r6, r4, #15
1a006a88:	d013      	beq.n	1a006ab2 <memset+0x8a>
1a006a8a:	1f33      	subs	r3, r6, #4
1a006a8c:	f023 0303 	bic.w	r3, r3, #3
1a006a90:	3304      	adds	r3, #4
1a006a92:	4413      	add	r3, r2
1a006a94:	f842 5b04 	str.w	r5, [r2], #4
1a006a98:	4293      	cmp	r3, r2
1a006a9a:	d1fb      	bne.n	1a006a94 <memset+0x6c>
1a006a9c:	f006 0403 	and.w	r4, r6, #3
1a006aa0:	b12c      	cbz	r4, 1a006aae <memset+0x86>
1a006aa2:	b2c9      	uxtb	r1, r1
1a006aa4:	441c      	add	r4, r3
1a006aa6:	f803 1b01 	strb.w	r1, [r3], #1
1a006aaa:	429c      	cmp	r4, r3
1a006aac:	d1fb      	bne.n	1a006aa6 <memset+0x7e>
1a006aae:	bcf0      	pop	{r4, r5, r6, r7}
1a006ab0:	4770      	bx	lr
1a006ab2:	4634      	mov	r4, r6
1a006ab4:	4613      	mov	r3, r2
1a006ab6:	2c00      	cmp	r4, #0
1a006ab8:	d1f3      	bne.n	1a006aa2 <memset+0x7a>
1a006aba:	e7f8      	b.n	1a006aae <memset+0x86>
1a006abc:	4614      	mov	r4, r2
1a006abe:	4603      	mov	r3, r0
1a006ac0:	e7c2      	b.n	1a006a48 <memset+0x20>
1a006ac2:	461a      	mov	r2, r3
1a006ac4:	4626      	mov	r6, r4
1a006ac6:	e7e0      	b.n	1a006a8a <memset+0x62>

1a006ac8 <__malloc_lock>:
1a006ac8:	4801      	ldr	r0, [pc, #4]	; (1a006ad0 <__malloc_lock+0x8>)
1a006aca:	f7ff bc57 	b.w	1a00637c <__retarget_lock_acquire_recursive>
1a006ace:	bf00      	nop
1a006ad0:	10003684 	.word	0x10003684

1a006ad4 <__malloc_unlock>:
1a006ad4:	4801      	ldr	r0, [pc, #4]	; (1a006adc <__malloc_unlock+0x8>)
1a006ad6:	f7ff bc53 	b.w	1a006380 <__retarget_lock_release_recursive>
1a006ada:	bf00      	nop
1a006adc:	10003684 	.word	0x10003684

1a006ae0 <printf>:
1a006ae0:	b40f      	push	{r0, r1, r2, r3}
1a006ae2:	b500      	push	{lr}
1a006ae4:	4907      	ldr	r1, [pc, #28]	; (1a006b04 <printf+0x24>)
1a006ae6:	b083      	sub	sp, #12
1a006ae8:	ab04      	add	r3, sp, #16
1a006aea:	6808      	ldr	r0, [r1, #0]
1a006aec:	f853 2b04 	ldr.w	r2, [r3], #4
1a006af0:	6881      	ldr	r1, [r0, #8]
1a006af2:	9301      	str	r3, [sp, #4]
1a006af4:	f000 f914 	bl	1a006d20 <_vfprintf_r>
1a006af8:	b003      	add	sp, #12
1a006afa:	f85d eb04 	ldr.w	lr, [sp], #4
1a006afe:	b004      	add	sp, #16
1a006b00:	4770      	bx	lr
1a006b02:	bf00      	nop
1a006b04:	10000054 	.word	0x10000054

1a006b08 <_puts_r>:
1a006b08:	b570      	push	{r4, r5, r6, lr}
1a006b0a:	4605      	mov	r5, r0
1a006b0c:	b088      	sub	sp, #32
1a006b0e:	4608      	mov	r0, r1
1a006b10:	460c      	mov	r4, r1
1a006b12:	f000 f895 	bl	1a006c40 <strlen>
1a006b16:	4a22      	ldr	r2, [pc, #136]	; (1a006ba0 <_puts_r+0x98>)
1a006b18:	6bab      	ldr	r3, [r5, #56]	; 0x38
1a006b1a:	9404      	str	r4, [sp, #16]
1a006b1c:	2601      	movs	r6, #1
1a006b1e:	1c44      	adds	r4, r0, #1
1a006b20:	a904      	add	r1, sp, #16
1a006b22:	9206      	str	r2, [sp, #24]
1a006b24:	2202      	movs	r2, #2
1a006b26:	9403      	str	r4, [sp, #12]
1a006b28:	9005      	str	r0, [sp, #20]
1a006b2a:	68ac      	ldr	r4, [r5, #8]
1a006b2c:	9607      	str	r6, [sp, #28]
1a006b2e:	e9cd 1201 	strd	r1, r2, [sp, #4]
1a006b32:	b31b      	cbz	r3, 1a006b7c <_puts_r+0x74>
1a006b34:	6e61      	ldr	r1, [r4, #100]	; 0x64
1a006b36:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
1a006b3a:	07ce      	lsls	r6, r1, #31
1a006b3c:	b29a      	uxth	r2, r3
1a006b3e:	d401      	bmi.n	1a006b44 <_puts_r+0x3c>
1a006b40:	0590      	lsls	r0, r2, #22
1a006b42:	d525      	bpl.n	1a006b90 <_puts_r+0x88>
1a006b44:	0491      	lsls	r1, r2, #18
1a006b46:	d406      	bmi.n	1a006b56 <_puts_r+0x4e>
1a006b48:	6e62      	ldr	r2, [r4, #100]	; 0x64
1a006b4a:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
1a006b4e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
1a006b52:	81a3      	strh	r3, [r4, #12]
1a006b54:	6662      	str	r2, [r4, #100]	; 0x64
1a006b56:	4628      	mov	r0, r5
1a006b58:	aa01      	add	r2, sp, #4
1a006b5a:	4621      	mov	r1, r4
1a006b5c:	f002 ff5a 	bl	1a009a14 <__sfvwrite_r>
1a006b60:	6e63      	ldr	r3, [r4, #100]	; 0x64
1a006b62:	2800      	cmp	r0, #0
1a006b64:	bf14      	ite	ne
1a006b66:	f04f 35ff 	movne.w	r5, #4294967295	; 0xffffffff
1a006b6a:	250a      	moveq	r5, #10
1a006b6c:	07da      	lsls	r2, r3, #31
1a006b6e:	d402      	bmi.n	1a006b76 <_puts_r+0x6e>
1a006b70:	89a3      	ldrh	r3, [r4, #12]
1a006b72:	059b      	lsls	r3, r3, #22
1a006b74:	d506      	bpl.n	1a006b84 <_puts_r+0x7c>
1a006b76:	4628      	mov	r0, r5
1a006b78:	b008      	add	sp, #32
1a006b7a:	bd70      	pop	{r4, r5, r6, pc}
1a006b7c:	4628      	mov	r0, r5
1a006b7e:	f7ff fa2f 	bl	1a005fe0 <__sinit>
1a006b82:	e7d7      	b.n	1a006b34 <_puts_r+0x2c>
1a006b84:	6da0      	ldr	r0, [r4, #88]	; 0x58
1a006b86:	f7ff fbfb 	bl	1a006380 <__retarget_lock_release_recursive>
1a006b8a:	4628      	mov	r0, r5
1a006b8c:	b008      	add	sp, #32
1a006b8e:	bd70      	pop	{r4, r5, r6, pc}
1a006b90:	6da0      	ldr	r0, [r4, #88]	; 0x58
1a006b92:	f7ff fbf3 	bl	1a00637c <__retarget_lock_acquire_recursive>
1a006b96:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
1a006b9a:	b29a      	uxth	r2, r3
1a006b9c:	e7d2      	b.n	1a006b44 <_puts_r+0x3c>
1a006b9e:	bf00      	nop
1a006ba0:	1a00b2d8 	.word	0x1a00b2d8

1a006ba4 <puts>:
1a006ba4:	4b02      	ldr	r3, [pc, #8]	; (1a006bb0 <puts+0xc>)
1a006ba6:	4601      	mov	r1, r0
1a006ba8:	6818      	ldr	r0, [r3, #0]
1a006baa:	f7ff bfad 	b.w	1a006b08 <_puts_r>
1a006bae:	bf00      	nop
1a006bb0:	10000054 	.word	0x10000054

1a006bb4 <__sread>:
1a006bb4:	b510      	push	{r4, lr}
1a006bb6:	460c      	mov	r4, r1
1a006bb8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
1a006bbc:	f7f9 feda 	bl	1a000974 <_read_r>
1a006bc0:	2800      	cmp	r0, #0
1a006bc2:	db03      	blt.n	1a006bcc <__sread+0x18>
1a006bc4:	6d23      	ldr	r3, [r4, #80]	; 0x50
1a006bc6:	4403      	add	r3, r0
1a006bc8:	6523      	str	r3, [r4, #80]	; 0x50
1a006bca:	bd10      	pop	{r4, pc}
1a006bcc:	89a3      	ldrh	r3, [r4, #12]
1a006bce:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
1a006bd2:	81a3      	strh	r3, [r4, #12]
1a006bd4:	bd10      	pop	{r4, pc}
1a006bd6:	bf00      	nop

1a006bd8 <__swrite>:
1a006bd8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
1a006bdc:	4616      	mov	r6, r2
1a006bde:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
1a006be2:	461f      	mov	r7, r3
1a006be4:	05d3      	lsls	r3, r2, #23
1a006be6:	460c      	mov	r4, r1
1a006be8:	4605      	mov	r5, r0
1a006bea:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
1a006bee:	d409      	bmi.n	1a006c04 <__swrite+0x2c>
1a006bf0:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
1a006bf4:	81a2      	strh	r2, [r4, #12]
1a006bf6:	463b      	mov	r3, r7
1a006bf8:	4632      	mov	r2, r6
1a006bfa:	4628      	mov	r0, r5
1a006bfc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
1a006c00:	f7f9 bedf 	b.w	1a0009c2 <_write_r>
1a006c04:	2200      	movs	r2, #0
1a006c06:	2302      	movs	r3, #2
1a006c08:	f7f9 feaf 	bl	1a00096a <_lseek_r>
1a006c0c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
1a006c10:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
1a006c14:	e7ec      	b.n	1a006bf0 <__swrite+0x18>
1a006c16:	bf00      	nop

1a006c18 <__sseek>:
1a006c18:	b510      	push	{r4, lr}
1a006c1a:	460c      	mov	r4, r1
1a006c1c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
1a006c20:	f7f9 fea3 	bl	1a00096a <_lseek_r>
1a006c24:	89a3      	ldrh	r3, [r4, #12]
1a006c26:	1c42      	adds	r2, r0, #1
1a006c28:	bf0e      	itee	eq
1a006c2a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
1a006c2e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
1a006c32:	6520      	strne	r0, [r4, #80]	; 0x50
1a006c34:	81a3      	strh	r3, [r4, #12]
1a006c36:	bd10      	pop	{r4, pc}

1a006c38 <__sclose>:
1a006c38:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
1a006c3c:	f7f9 be82 	b.w	1a000944 <_close_r>

1a006c40 <strlen>:
1a006c40:	f890 f000 	pld	[r0]
1a006c44:	e96d 4502 	strd	r4, r5, [sp, #-8]!
1a006c48:	f020 0107 	bic.w	r1, r0, #7
1a006c4c:	f06f 0c00 	mvn.w	ip, #0
1a006c50:	f010 0407 	ands.w	r4, r0, #7
1a006c54:	f891 f020 	pld	[r1, #32]
1a006c58:	f040 8049 	bne.w	1a006cee <strlen+0xae>
1a006c5c:	f04f 0400 	mov.w	r4, #0
1a006c60:	f06f 0007 	mvn.w	r0, #7
1a006c64:	e9d1 2300 	ldrd	r2, r3, [r1]
1a006c68:	f891 f040 	pld	[r1, #64]	; 0x40
1a006c6c:	f100 0008 	add.w	r0, r0, #8
1a006c70:	fa82 f24c 	uadd8	r2, r2, ip
1a006c74:	faa4 f28c 	sel	r2, r4, ip
1a006c78:	fa83 f34c 	uadd8	r3, r3, ip
1a006c7c:	faa2 f38c 	sel	r3, r2, ip
1a006c80:	bb4b      	cbnz	r3, 1a006cd6 <strlen+0x96>
1a006c82:	e9d1 2302 	ldrd	r2, r3, [r1, #8]
1a006c86:	fa82 f24c 	uadd8	r2, r2, ip
1a006c8a:	f100 0008 	add.w	r0, r0, #8
1a006c8e:	faa4 f28c 	sel	r2, r4, ip
1a006c92:	fa83 f34c 	uadd8	r3, r3, ip
1a006c96:	faa2 f38c 	sel	r3, r2, ip
1a006c9a:	b9e3      	cbnz	r3, 1a006cd6 <strlen+0x96>
1a006c9c:	e9d1 2304 	ldrd	r2, r3, [r1, #16]
1a006ca0:	fa82 f24c 	uadd8	r2, r2, ip
1a006ca4:	f100 0008 	add.w	r0, r0, #8
1a006ca8:	faa4 f28c 	sel	r2, r4, ip
1a006cac:	fa83 f34c 	uadd8	r3, r3, ip
1a006cb0:	faa2 f38c 	sel	r3, r2, ip
1a006cb4:	b97b      	cbnz	r3, 1a006cd6 <strlen+0x96>
1a006cb6:	e9d1 2306 	ldrd	r2, r3, [r1, #24]
1a006cba:	f101 0120 	add.w	r1, r1, #32
1a006cbe:	fa82 f24c 	uadd8	r2, r2, ip
1a006cc2:	f100 0008 	add.w	r0, r0, #8
1a006cc6:	faa4 f28c 	sel	r2, r4, ip
1a006cca:	fa83 f34c 	uadd8	r3, r3, ip
1a006cce:	faa2 f38c 	sel	r3, r2, ip
1a006cd2:	2b00      	cmp	r3, #0
1a006cd4:	d0c6      	beq.n	1a006c64 <strlen+0x24>
1a006cd6:	2a00      	cmp	r2, #0
1a006cd8:	bf04      	itt	eq
1a006cda:	3004      	addeq	r0, #4
1a006cdc:	461a      	moveq	r2, r3
1a006cde:	ba12      	rev	r2, r2
1a006ce0:	fab2 f282 	clz	r2, r2
1a006ce4:	e8fd 4502 	ldrd	r4, r5, [sp], #8
1a006ce8:	eb00 00d2 	add.w	r0, r0, r2, lsr #3
1a006cec:	4770      	bx	lr
1a006cee:	e9d1 2300 	ldrd	r2, r3, [r1]
1a006cf2:	f004 0503 	and.w	r5, r4, #3
1a006cf6:	f1c4 0000 	rsb	r0, r4, #0
1a006cfa:	ea4f 05c5 	mov.w	r5, r5, lsl #3
1a006cfe:	f014 0f04 	tst.w	r4, #4
1a006d02:	f891 f040 	pld	[r1, #64]	; 0x40
1a006d06:	fa0c f505 	lsl.w	r5, ip, r5
1a006d0a:	ea62 0205 	orn	r2, r2, r5
1a006d0e:	bf1c      	itt	ne
1a006d10:	ea63 0305 	ornne	r3, r3, r5
1a006d14:	4662      	movne	r2, ip
1a006d16:	f04f 0400 	mov.w	r4, #0
1a006d1a:	e7a9      	b.n	1a006c70 <strlen+0x30>
1a006d1c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff

1a006d20 <_vfprintf_r>:
1a006d20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
1a006d24:	b0d5      	sub	sp, #340	; 0x154
1a006d26:	461c      	mov	r4, r3
1a006d28:	4689      	mov	r9, r1
1a006d2a:	4617      	mov	r7, r2
1a006d2c:	4605      	mov	r5, r0
1a006d2e:	9005      	str	r0, [sp, #20]
1a006d30:	f002 fff4 	bl	1a009d1c <_localeconv_r>
1a006d34:	6803      	ldr	r3, [r0, #0]
1a006d36:	9315      	str	r3, [sp, #84]	; 0x54
1a006d38:	4618      	mov	r0, r3
1a006d3a:	f7ff ff81 	bl	1a006c40 <strlen>
1a006d3e:	9408      	str	r4, [sp, #32]
1a006d40:	9013      	str	r0, [sp, #76]	; 0x4c
1a006d42:	b11d      	cbz	r5, 1a006d4c <_vfprintf_r+0x2c>
1a006d44:	6bab      	ldr	r3, [r5, #56]	; 0x38
1a006d46:	2b00      	cmp	r3, #0
1a006d48:	f000 8411 	beq.w	1a00756e <_vfprintf_r+0x84e>
1a006d4c:	f8d9 1064 	ldr.w	r1, [r9, #100]	; 0x64
1a006d50:	f9b9 200c 	ldrsh.w	r2, [r9, #12]
1a006d54:	07cd      	lsls	r5, r1, #31
1a006d56:	b293      	uxth	r3, r2
1a006d58:	d402      	bmi.n	1a006d60 <_vfprintf_r+0x40>
1a006d5a:	0598      	lsls	r0, r3, #22
1a006d5c:	f140 8754 	bpl.w	1a007c08 <_vfprintf_r+0xee8>
1a006d60:	0499      	lsls	r1, r3, #18
1a006d62:	d40a      	bmi.n	1a006d7a <_vfprintf_r+0x5a>
1a006d64:	f8d9 1064 	ldr.w	r1, [r9, #100]	; 0x64
1a006d68:	f442 5300 	orr.w	r3, r2, #8192	; 0x2000
1a006d6c:	f421 5100 	bic.w	r1, r1, #8192	; 0x2000
1a006d70:	f8a9 300c 	strh.w	r3, [r9, #12]
1a006d74:	f8c9 1064 	str.w	r1, [r9, #100]	; 0x64
1a006d78:	b29b      	uxth	r3, r3
1a006d7a:	071a      	lsls	r2, r3, #28
1a006d7c:	f140 80bf 	bpl.w	1a006efe <_vfprintf_r+0x1de>
1a006d80:	f8d9 2010 	ldr.w	r2, [r9, #16]
1a006d84:	2a00      	cmp	r2, #0
1a006d86:	f000 80ba 	beq.w	1a006efe <_vfprintf_r+0x1de>
1a006d8a:	f003 021a 	and.w	r2, r3, #26
1a006d8e:	2a0a      	cmp	r2, #10
1a006d90:	f000 80c3 	beq.w	1a006f1a <_vfprintf_r+0x1fa>
1a006d94:	2300      	movs	r3, #0
1a006d96:	ed9f 7b9c 	vldr	d7, [pc, #624]	; 1a007008 <_vfprintf_r+0x2e8>
1a006d9a:	9312      	str	r3, [sp, #72]	; 0x48
1a006d9c:	e9cd 3329 	strd	r3, r3, [sp, #164]	; 0xa4
1a006da0:	9314      	str	r3, [sp, #80]	; 0x50
1a006da2:	9316      	str	r3, [sp, #88]	; 0x58
1a006da4:	e9cd 3318 	strd	r3, r3, [sp, #96]	; 0x60
1a006da8:	9317      	str	r3, [sp, #92]	; 0x5c
1a006daa:	9304      	str	r3, [sp, #16]
1a006dac:	ab2b      	add	r3, sp, #172	; 0xac
1a006dae:	9328      	str	r3, [sp, #160]	; 0xa0
1a006db0:	469b      	mov	fp, r3
1a006db2:	783b      	ldrb	r3, [r7, #0]
1a006db4:	f8cd 901c 	str.w	r9, [sp, #28]
1a006db8:	ed8d 7b10 	vstr	d7, [sp, #64]	; 0x40
1a006dbc:	2b00      	cmp	r3, #0
1a006dbe:	f000 8267 	beq.w	1a007290 <_vfprintf_r+0x570>
1a006dc2:	2b25      	cmp	r3, #37	; 0x25
1a006dc4:	f001 80ab 	beq.w	1a007f1e <_vfprintf_r+0x11fe>
1a006dc8:	463d      	mov	r5, r7
1a006dca:	e003      	b.n	1a006dd4 <_vfprintf_r+0xb4>
1a006dcc:	2b25      	cmp	r3, #37	; 0x25
1a006dce:	f000 80bb 	beq.w	1a006f48 <_vfprintf_r+0x228>
1a006dd2:	4625      	mov	r5, r4
1a006dd4:	786b      	ldrb	r3, [r5, #1]
1a006dd6:	1c6c      	adds	r4, r5, #1
1a006dd8:	2b00      	cmp	r3, #0
1a006dda:	d1f7      	bne.n	1a006dcc <_vfprintf_r+0xac>
1a006ddc:	1be6      	subs	r6, r4, r7
1a006dde:	f000 8257 	beq.w	1a007290 <_vfprintf_r+0x570>
1a006de2:	e9dd 3229 	ldrd	r3, r2, [sp, #164]	; 0xa4
1a006de6:	3301      	adds	r3, #1
1a006de8:	4432      	add	r2, r6
1a006dea:	2b07      	cmp	r3, #7
1a006dec:	f8cb 7000 	str.w	r7, [fp]
1a006df0:	f8cb 6004 	str.w	r6, [fp, #4]
1a006df4:	e9cd 3229 	strd	r3, r2, [sp, #164]	; 0xa4
1a006df8:	f300 80aa 	bgt.w	1a006f50 <_vfprintf_r+0x230>
1a006dfc:	f10b 0b08 	add.w	fp, fp, #8
1a006e00:	9a04      	ldr	r2, [sp, #16]
1a006e02:	786b      	ldrb	r3, [r5, #1]
1a006e04:	4432      	add	r2, r6
1a006e06:	9204      	str	r2, [sp, #16]
1a006e08:	2b00      	cmp	r3, #0
1a006e0a:	f000 8241 	beq.w	1a007290 <_vfprintf_r+0x570>
1a006e0e:	2300      	movs	r3, #0
1a006e10:	f894 8001 	ldrb.w	r8, [r4, #1]
1a006e14:	9306      	str	r3, [sp, #24]
1a006e16:	f88d 3083 	strb.w	r3, [sp, #131]	; 0x83
1a006e1a:	9302      	str	r3, [sp, #8]
1a006e1c:	f104 0a01 	add.w	sl, r4, #1
1a006e20:	f04f 39ff 	mov.w	r9, #4294967295	; 0xffffffff
1a006e24:	262b      	movs	r6, #43	; 0x2b
1a006e26:	2120      	movs	r1, #32
1a006e28:	f10a 0a01 	add.w	sl, sl, #1
1a006e2c:	f1a8 0320 	sub.w	r3, r8, #32
1a006e30:	2b5a      	cmp	r3, #90	; 0x5a
1a006e32:	f200 83a1 	bhi.w	1a007578 <_vfprintf_r+0x858>
1a006e36:	e8df f013 	tbh	[pc, r3, lsl #1]
1a006e3a:	0282      	.short	0x0282
1a006e3c:	039f039f 	.word	0x039f039f
1a006e40:	039f027b 	.word	0x039f027b
1a006e44:	039f039f 	.word	0x039f039f
1a006e48:	039f0301 	.word	0x039f0301
1a006e4c:	02f6039f 	.word	0x02f6039f
1a006e50:	039f00df 	.word	0x039f00df
1a006e54:	032b00c4 	.word	0x032b00c4
1a006e58:	0324039f 	.word	0x0324039f
1a006e5c:	00960096 	.word	0x00960096
1a006e60:	00960096 	.word	0x00960096
1a006e64:	00960096 	.word	0x00960096
1a006e68:	00960096 	.word	0x00960096
1a006e6c:	039f0096 	.word	0x039f0096
1a006e70:	039f039f 	.word	0x039f039f
1a006e74:	039f039f 	.word	0x039f039f
1a006e78:	039f039f 	.word	0x039f039f
1a006e7c:	039f0345 	.word	0x039f0345
1a006e80:	016201a8 	.word	0x016201a8
1a006e84:	03450345 	.word	0x03450345
1a006e88:	039f0345 	.word	0x039f0345
1a006e8c:	039f039f 	.word	0x039f039f
1a006e90:	015b039f 	.word	0x015b039f
1a006e94:	039f039f 	.word	0x039f039f
1a006e98:	039f014e 	.word	0x039f014e
1a006e9c:	039f039f 	.word	0x039f039f
1a006ea0:	039f0123 	.word	0x039f0123
1a006ea4:	039f0115 	.word	0x039f0115
1a006ea8:	00cb039f 	.word	0x00cb039f
1a006eac:	039f039f 	.word	0x039f039f
1a006eb0:	039f039f 	.word	0x039f039f
1a006eb4:	039f039f 	.word	0x039f039f
1a006eb8:	039f039f 	.word	0x039f039f
1a006ebc:	039f0345 	.word	0x039f0345
1a006ec0:	00ef01a8 	.word	0x00ef01a8
1a006ec4:	03450345 	.word	0x03450345
1a006ec8:	02700345 	.word	0x02700345
1a006ecc:	005b00ef 	.word	0x005b00ef
1a006ed0:	02eb039f 	.word	0x02eb039f
1a006ed4:	02d1039f 	.word	0x02d1039f
1a006ed8:	028c02bd 	.word	0x028c02bd
1a006edc:	039f005b 	.word	0x039f005b
1a006ee0:	005f0123 	.word	0x005f0123
1a006ee4:	039f0387 	.word	0x039f0387
1a006ee8:	00a5039f 	.word	0x00a5039f
1a006eec:	005f039f 	.word	0x005f039f
1a006ef0:	9b02      	ldr	r3, [sp, #8]
1a006ef2:	f043 0320 	orr.w	r3, r3, #32
1a006ef6:	9302      	str	r3, [sp, #8]
1a006ef8:	f89a 8000 	ldrb.w	r8, [sl]
1a006efc:	e794      	b.n	1a006e28 <_vfprintf_r+0x108>
1a006efe:	4649      	mov	r1, r9
1a006f00:	9805      	ldr	r0, [sp, #20]
1a006f02:	f001 fcf9 	bl	1a0088f8 <__swsetup_r>
1a006f06:	2800      	cmp	r0, #0
1a006f08:	f041 8381 	bne.w	1a00860e <_vfprintf_r+0x18ee>
1a006f0c:	f8b9 300c 	ldrh.w	r3, [r9, #12]
1a006f10:	f003 021a 	and.w	r2, r3, #26
1a006f14:	2a0a      	cmp	r2, #10
1a006f16:	f47f af3d 	bne.w	1a006d94 <_vfprintf_r+0x74>
1a006f1a:	f9b9 200e 	ldrsh.w	r2, [r9, #14]
1a006f1e:	2a00      	cmp	r2, #0
1a006f20:	f6ff af38 	blt.w	1a006d94 <_vfprintf_r+0x74>
1a006f24:	f8d9 2064 	ldr.w	r2, [r9, #100]	; 0x64
1a006f28:	07d6      	lsls	r6, r2, #31
1a006f2a:	d402      	bmi.n	1a006f32 <_vfprintf_r+0x212>
1a006f2c:	059d      	lsls	r5, r3, #22
1a006f2e:	f141 8190 	bpl.w	1a008252 <_vfprintf_r+0x1532>
1a006f32:	4623      	mov	r3, r4
1a006f34:	463a      	mov	r2, r7
1a006f36:	4649      	mov	r1, r9
1a006f38:	9805      	ldr	r0, [sp, #20]
1a006f3a:	f001 fc9b 	bl	1a008874 <__sbprintf>
1a006f3e:	9004      	str	r0, [sp, #16]
1a006f40:	9804      	ldr	r0, [sp, #16]
1a006f42:	b055      	add	sp, #340	; 0x154
1a006f44:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
1a006f48:	1be6      	subs	r6, r4, r7
1a006f4a:	f43f af60 	beq.w	1a006e0e <_vfprintf_r+0xee>
1a006f4e:	e748      	b.n	1a006de2 <_vfprintf_r+0xc2>
1a006f50:	aa28      	add	r2, sp, #160	; 0xa0
1a006f52:	9907      	ldr	r1, [sp, #28]
1a006f54:	9805      	ldr	r0, [sp, #20]
1a006f56:	f003 fd87 	bl	1a00aa68 <__sprint_r>
1a006f5a:	2800      	cmp	r0, #0
1a006f5c:	f041 8427 	bne.w	1a0087ae <_vfprintf_r+0x1a8e>
1a006f60:	f10d 0bac 	add.w	fp, sp, #172	; 0xac
1a006f64:	e74c      	b.n	1a006e00 <_vfprintf_r+0xe0>
1a006f66:	f1a8 0330 	sub.w	r3, r8, #48	; 0x30
1a006f6a:	2200      	movs	r2, #0
1a006f6c:	f81a 8b01 	ldrb.w	r8, [sl], #1
1a006f70:	eb02 0282 	add.w	r2, r2, r2, lsl #2
1a006f74:	eb03 0242 	add.w	r2, r3, r2, lsl #1
1a006f78:	f1a8 0330 	sub.w	r3, r8, #48	; 0x30
1a006f7c:	2b09      	cmp	r3, #9
1a006f7e:	d9f5      	bls.n	1a006f6c <_vfprintf_r+0x24c>
1a006f80:	9206      	str	r2, [sp, #24]
1a006f82:	e753      	b.n	1a006e2c <_vfprintf_r+0x10c>
1a006f84:	4b22      	ldr	r3, [pc, #136]	; (1a007010 <_vfprintf_r+0x2f0>)
1a006f86:	9314      	str	r3, [sp, #80]	; 0x50
1a006f88:	9b02      	ldr	r3, [sp, #8]
1a006f8a:	069f      	lsls	r7, r3, #26
1a006f8c:	d525      	bpl.n	1a006fda <_vfprintf_r+0x2ba>
1a006f8e:	9c08      	ldr	r4, [sp, #32]
1a006f90:	3407      	adds	r4, #7
1a006f92:	f024 0307 	bic.w	r3, r4, #7
1a006f96:	e8f3 4502 	ldrd	r4, r5, [r3], #8
1a006f9a:	9308      	str	r3, [sp, #32]
1a006f9c:	9a02      	ldr	r2, [sp, #8]
1a006f9e:	07d1      	lsls	r1, r2, #31
1a006fa0:	d50a      	bpl.n	1a006fb8 <_vfprintf_r+0x298>
1a006fa2:	ea54 0305 	orrs.w	r3, r4, r5
1a006fa6:	d007      	beq.n	1a006fb8 <_vfprintf_r+0x298>
1a006fa8:	2330      	movs	r3, #48	; 0x30
1a006faa:	f042 0202 	orr.w	r2, r2, #2
1a006fae:	f88d 8085 	strb.w	r8, [sp, #133]	; 0x85
1a006fb2:	9202      	str	r2, [sp, #8]
1a006fb4:	f88d 3084 	strb.w	r3, [sp, #132]	; 0x84
1a006fb8:	9b02      	ldr	r3, [sp, #8]
1a006fba:	f423 6680 	bic.w	r6, r3, #1024	; 0x400
1a006fbe:	2302      	movs	r3, #2
1a006fc0:	e1d9      	b.n	1a007376 <_vfprintf_r+0x656>
1a006fc2:	f89a 8000 	ldrb.w	r8, [sl]
1a006fc6:	9b02      	ldr	r3, [sp, #8]
1a006fc8:	f043 0304 	orr.w	r3, r3, #4
1a006fcc:	9302      	str	r3, [sp, #8]
1a006fce:	e72b      	b.n	1a006e28 <_vfprintf_r+0x108>
1a006fd0:	4b10      	ldr	r3, [pc, #64]	; (1a007014 <_vfprintf_r+0x2f4>)
1a006fd2:	9314      	str	r3, [sp, #80]	; 0x50
1a006fd4:	9b02      	ldr	r3, [sp, #8]
1a006fd6:	069f      	lsls	r7, r3, #26
1a006fd8:	d4d9      	bmi.n	1a006f8e <_vfprintf_r+0x26e>
1a006fda:	9b08      	ldr	r3, [sp, #32]
1a006fdc:	f853 4b04 	ldr.w	r4, [r3], #4
1a006fe0:	9308      	str	r3, [sp, #32]
1a006fe2:	9b02      	ldr	r3, [sp, #8]
1a006fe4:	06de      	lsls	r6, r3, #27
1a006fe6:	f100 864f 	bmi.w	1a007c88 <_vfprintf_r+0xf68>
1a006fea:	9b02      	ldr	r3, [sp, #8]
1a006fec:	065d      	lsls	r5, r3, #25
1a006fee:	f140 8647 	bpl.w	1a007c80 <_vfprintf_r+0xf60>
1a006ff2:	b2a4      	uxth	r4, r4
1a006ff4:	2500      	movs	r5, #0
1a006ff6:	e7d1      	b.n	1a006f9c <_vfprintf_r+0x27c>
1a006ff8:	f88d 6083 	strb.w	r6, [sp, #131]	; 0x83
1a006ffc:	f89a 8000 	ldrb.w	r8, [sl]
1a007000:	e712      	b.n	1a006e28 <_vfprintf_r+0x108>
1a007002:	bf00      	nop
1a007004:	f3af 8000 	nop.w
	...
1a007010:	1a00b300 	.word	0x1a00b300
1a007014:	1a00b2ec 	.word	0x1a00b2ec
1a007018:	9e02      	ldr	r6, [sp, #8]
1a00701a:	06b0      	lsls	r0, r6, #26
1a00701c:	f140 870b 	bpl.w	1a007e36 <_vfprintf_r+0x1116>
1a007020:	9c08      	ldr	r4, [sp, #32]
1a007022:	3407      	adds	r4, #7
1a007024:	f024 0307 	bic.w	r3, r4, #7
1a007028:	4619      	mov	r1, r3
1a00702a:	e8f1 2302 	ldrd	r2, r3, [r1], #8
1a00702e:	9108      	str	r1, [sp, #32]
1a007030:	4614      	mov	r4, r2
1a007032:	461d      	mov	r5, r3
1a007034:	2a00      	cmp	r2, #0
1a007036:	f173 0300 	sbcs.w	r3, r3, #0
1a00703a:	db71      	blt.n	1a007120 <_vfprintf_r+0x400>
1a00703c:	f1b9 3fff 	cmp.w	r9, #4294967295	; 0xffffffff
1a007040:	f000 82c5 	beq.w	1a0075ce <_vfprintf_r+0x8ae>
1a007044:	f026 0380 	bic.w	r3, r6, #128	; 0x80
1a007048:	9302      	str	r3, [sp, #8]
1a00704a:	ea54 0305 	orrs.w	r3, r4, r5
1a00704e:	f040 82bd 	bne.w	1a0075cc <_vfprintf_r+0x8ac>
1a007052:	f1b9 0f00 	cmp.w	r9, #0
1a007056:	f041 810e 	bne.w	1a008276 <_vfprintf_r+0x1556>
1a00705a:	f04f 0900 	mov.w	r9, #0
1a00705e:	464e      	mov	r6, r9
1a007060:	af54      	add	r7, sp, #336	; 0x150
1a007062:	e2bf      	b.n	1a0075e4 <_vfprintf_r+0x8c4>
1a007064:	9b02      	ldr	r3, [sp, #8]
1a007066:	069d      	lsls	r5, r3, #26
1a007068:	f043 0610 	orr.w	r6, r3, #16
1a00706c:	f100 828f 	bmi.w	1a00758e <_vfprintf_r+0x86e>
1a007070:	9b08      	ldr	r3, [sp, #32]
1a007072:	1d1a      	adds	r2, r3, #4
1a007074:	9b08      	ldr	r3, [sp, #32]
1a007076:	9208      	str	r2, [sp, #32]
1a007078:	681c      	ldr	r4, [r3, #0]
1a00707a:	2500      	movs	r5, #0
1a00707c:	2301      	movs	r3, #1
1a00707e:	e17a      	b.n	1a007376 <_vfprintf_r+0x656>
1a007080:	9c08      	ldr	r4, [sp, #32]
1a007082:	f854 7b04 	ldr.w	r7, [r4], #4
1a007086:	2500      	movs	r5, #0
1a007088:	f88d 5083 	strb.w	r5, [sp, #131]	; 0x83
1a00708c:	2f00      	cmp	r7, #0
1a00708e:	f000 8737 	beq.w	1a007f00 <_vfprintf_r+0x11e0>
1a007092:	f1b9 3fff 	cmp.w	r9, #4294967295	; 0xffffffff
1a007096:	f000 87bc 	beq.w	1a008012 <_vfprintf_r+0x12f2>
1a00709a:	464a      	mov	r2, r9
1a00709c:	4629      	mov	r1, r5
1a00709e:	4638      	mov	r0, r7
1a0070a0:	f002 febe 	bl	1a009e20 <memchr>
1a0070a4:	9009      	str	r0, [sp, #36]	; 0x24
1a0070a6:	2800      	cmp	r0, #0
1a0070a8:	f001 824a 	beq.w	1a008540 <_vfprintf_r+0x1820>
1a0070ac:	9b09      	ldr	r3, [sp, #36]	; 0x24
1a0070ae:	46a9      	mov	r9, r5
1a0070b0:	1bde      	subs	r6, r3, r7
1a0070b2:	e9cd 990e 	strd	r9, r9, [sp, #56]	; 0x38
1a0070b6:	ea26 73e6 	bic.w	r3, r6, r6, asr #31
1a0070ba:	f89d 2083 	ldrb.w	r2, [sp, #131]	; 0x83
1a0070be:	9408      	str	r4, [sp, #32]
1a0070c0:	9303      	str	r3, [sp, #12]
1a0070c2:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
1a0070c6:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
1a0070ca:	2a00      	cmp	r2, #0
1a0070cc:	d06f      	beq.n	1a0071ae <_vfprintf_r+0x48e>
1a0070ce:	9b03      	ldr	r3, [sp, #12]
1a0070d0:	3301      	adds	r3, #1
1a0070d2:	9303      	str	r3, [sp, #12]
1a0070d4:	e06b      	b.n	1a0071ae <_vfprintf_r+0x48e>
1a0070d6:	9b02      	ldr	r3, [sp, #8]
1a0070d8:	069c      	lsls	r4, r3, #26
1a0070da:	f043 0610 	orr.w	r6, r3, #16
1a0070de:	f100 825f 	bmi.w	1a0075a0 <_vfprintf_r+0x880>
1a0070e2:	9b08      	ldr	r3, [sp, #32]
1a0070e4:	1d1a      	adds	r2, r3, #4
1a0070e6:	9b08      	ldr	r3, [sp, #32]
1a0070e8:	9208      	str	r2, [sp, #32]
1a0070ea:	681c      	ldr	r4, [r3, #0]
1a0070ec:	2500      	movs	r5, #0
1a0070ee:	e25e      	b.n	1a0075ae <_vfprintf_r+0x88e>
1a0070f0:	9b02      	ldr	r3, [sp, #8]
1a0070f2:	f89a 8000 	ldrb.w	r8, [sl]
1a0070f6:	f043 0308 	orr.w	r3, r3, #8
1a0070fa:	9302      	str	r3, [sp, #8]
1a0070fc:	e694      	b.n	1a006e28 <_vfprintf_r+0x108>
1a0070fe:	9b02      	ldr	r3, [sp, #8]
1a007100:	069c      	lsls	r4, r3, #26
1a007102:	f043 0610 	orr.w	r6, r3, #16
1a007106:	d48b      	bmi.n	1a007020 <_vfprintf_r+0x300>
1a007108:	9b08      	ldr	r3, [sp, #32]
1a00710a:	1d1a      	adds	r2, r3, #4
1a00710c:	9b08      	ldr	r3, [sp, #32]
1a00710e:	9208      	str	r2, [sp, #32]
1a007110:	681c      	ldr	r4, [r3, #0]
1a007112:	17e5      	asrs	r5, r4, #31
1a007114:	4622      	mov	r2, r4
1a007116:	462b      	mov	r3, r5
1a007118:	2a00      	cmp	r2, #0
1a00711a:	f173 0300 	sbcs.w	r3, r3, #0
1a00711e:	da8d      	bge.n	1a00703c <_vfprintf_r+0x31c>
1a007120:	4264      	negs	r4, r4
1a007122:	f04f 032d 	mov.w	r3, #45	; 0x2d
1a007126:	eb65 0545 	sbc.w	r5, r5, r5, lsl #1
1a00712a:	f1b9 3fff 	cmp.w	r9, #4294967295	; 0xffffffff
1a00712e:	f88d 3083 	strb.w	r3, [sp, #131]	; 0x83
1a007132:	f04f 0301 	mov.w	r3, #1
1a007136:	f040 8125 	bne.w	1a007384 <_vfprintf_r+0x664>
1a00713a:	2b01      	cmp	r3, #1
1a00713c:	f000 8247 	beq.w	1a0075ce <_vfprintf_r+0x8ae>
1a007140:	2b02      	cmp	r3, #2
1a007142:	f000 8479 	beq.w	1a007a38 <_vfprintf_r+0xd18>
1a007146:	a954      	add	r1, sp, #336	; 0x150
1a007148:	e000      	b.n	1a00714c <_vfprintf_r+0x42c>
1a00714a:	4639      	mov	r1, r7
1a00714c:	08e2      	lsrs	r2, r4, #3
1a00714e:	ea42 7245 	orr.w	r2, r2, r5, lsl #29
1a007152:	08e8      	lsrs	r0, r5, #3
1a007154:	f004 0307 	and.w	r3, r4, #7
1a007158:	4605      	mov	r5, r0
1a00715a:	4614      	mov	r4, r2
1a00715c:	3330      	adds	r3, #48	; 0x30
1a00715e:	ea54 0205 	orrs.w	r2, r4, r5
1a007162:	f801 3c01 	strb.w	r3, [r1, #-1]
1a007166:	f101 37ff 	add.w	r7, r1, #4294967295	; 0xffffffff
1a00716a:	d1ee      	bne.n	1a00714a <_vfprintf_r+0x42a>
1a00716c:	07f2      	lsls	r2, r6, #31
1a00716e:	f140 8288 	bpl.w	1a007682 <_vfprintf_r+0x962>
1a007172:	2b30      	cmp	r3, #48	; 0x30
1a007174:	f000 8285 	beq.w	1a007682 <_vfprintf_r+0x962>
1a007178:	2330      	movs	r3, #48	; 0x30
1a00717a:	3902      	subs	r1, #2
1a00717c:	f807 3c01 	strb.w	r3, [r7, #-1]
1a007180:	ab54      	add	r3, sp, #336	; 0x150
1a007182:	9602      	str	r6, [sp, #8]
1a007184:	460f      	mov	r7, r1
1a007186:	1a5e      	subs	r6, r3, r1
1a007188:	e22c      	b.n	1a0075e4 <_vfprintf_r+0x8c4>
1a00718a:	9c08      	ldr	r4, [sp, #32]
1a00718c:	2300      	movs	r3, #0
1a00718e:	f854 2b04 	ldr.w	r2, [r4], #4
1a007192:	f88d 20ec 	strb.w	r2, [sp, #236]	; 0xec
1a007196:	2601      	movs	r6, #1
1a007198:	461a      	mov	r2, r3
1a00719a:	9603      	str	r6, [sp, #12]
1a00719c:	9408      	str	r4, [sp, #32]
1a00719e:	e9cd 220e 	strd	r2, r2, [sp, #56]	; 0x38
1a0071a2:	f88d 3083 	strb.w	r3, [sp, #131]	; 0x83
1a0071a6:	9209      	str	r2, [sp, #36]	; 0x24
1a0071a8:	4691      	mov	r9, r2
1a0071aa:	920c      	str	r2, [sp, #48]	; 0x30
1a0071ac:	af3b      	add	r7, sp, #236	; 0xec
1a0071ae:	9b02      	ldr	r3, [sp, #8]
1a0071b0:	f013 0302 	ands.w	r3, r3, #2
1a0071b4:	930a      	str	r3, [sp, #40]	; 0x28
1a0071b6:	d002      	beq.n	1a0071be <_vfprintf_r+0x49e>
1a0071b8:	9b03      	ldr	r3, [sp, #12]
1a0071ba:	3302      	adds	r3, #2
1a0071bc:	9303      	str	r3, [sp, #12]
1a0071be:	9b02      	ldr	r3, [sp, #8]
1a0071c0:	9c2a      	ldr	r4, [sp, #168]	; 0xa8
1a0071c2:	f013 0384 	ands.w	r3, r3, #132	; 0x84
1a0071c6:	930b      	str	r3, [sp, #44]	; 0x2c
1a0071c8:	d104      	bne.n	1a0071d4 <_vfprintf_r+0x4b4>
1a0071ca:	9b06      	ldr	r3, [sp, #24]
1a0071cc:	9903      	ldr	r1, [sp, #12]
1a0071ce:	1a5d      	subs	r5, r3, r1
1a0071d0:	2d00      	cmp	r5, #0
1a0071d2:	dc66      	bgt.n	1a0072a2 <_vfprintf_r+0x582>
1a0071d4:	b172      	cbz	r2, 1a0071f4 <_vfprintf_r+0x4d4>
1a0071d6:	9a29      	ldr	r2, [sp, #164]	; 0xa4
1a0071d8:	3201      	adds	r2, #1
1a0071da:	3401      	adds	r4, #1
1a0071dc:	f10d 0083 	add.w	r0, sp, #131	; 0x83
1a0071e0:	2101      	movs	r1, #1
1a0071e2:	2a07      	cmp	r2, #7
1a0071e4:	e9cd 2429 	strd	r2, r4, [sp, #164]	; 0xa4
1a0071e8:	e9cb 0100 	strd	r0, r1, [fp]
1a0071ec:	f300 83b1 	bgt.w	1a007952 <_vfprintf_r+0xc32>
1a0071f0:	f10b 0b08 	add.w	fp, fp, #8
1a0071f4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
1a0071f6:	b16b      	cbz	r3, 1a007214 <_vfprintf_r+0x4f4>
1a0071f8:	9b29      	ldr	r3, [sp, #164]	; 0xa4
1a0071fa:	3301      	adds	r3, #1
1a0071fc:	3402      	adds	r4, #2
1a0071fe:	a921      	add	r1, sp, #132	; 0x84
1a007200:	2202      	movs	r2, #2
1a007202:	2b07      	cmp	r3, #7
1a007204:	e9cd 3429 	strd	r3, r4, [sp, #164]	; 0xa4
1a007208:	e9cb 1200 	strd	r1, r2, [fp]
1a00720c:	f300 83ad 	bgt.w	1a00796a <_vfprintf_r+0xc4a>
1a007210:	f10b 0b08 	add.w	fp, fp, #8
1a007214:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
1a007216:	2b80      	cmp	r3, #128	; 0x80
1a007218:	f000 8295 	beq.w	1a007746 <_vfprintf_r+0xa26>
1a00721c:	eba9 0506 	sub.w	r5, r9, r6
1a007220:	2d00      	cmp	r5, #0
1a007222:	f300 82d3 	bgt.w	1a0077cc <_vfprintf_r+0xaac>
1a007226:	9b02      	ldr	r3, [sp, #8]
1a007228:	05db      	lsls	r3, r3, #23
1a00722a:	f100 822e 	bmi.w	1a00768a <_vfprintf_r+0x96a>
1a00722e:	9b29      	ldr	r3, [sp, #164]	; 0xa4
1a007230:	f8cb 7000 	str.w	r7, [fp]
1a007234:	3301      	adds	r3, #1
1a007236:	4434      	add	r4, r6
1a007238:	2b07      	cmp	r3, #7
1a00723a:	942a      	str	r4, [sp, #168]	; 0xa8
1a00723c:	f8cb 6004 	str.w	r6, [fp, #4]
1a007240:	9329      	str	r3, [sp, #164]	; 0xa4
1a007242:	f300 8325 	bgt.w	1a007890 <_vfprintf_r+0xb70>
1a007246:	f10b 0b08 	add.w	fp, fp, #8
1a00724a:	9b02      	ldr	r3, [sp, #8]
1a00724c:	075d      	lsls	r5, r3, #29
1a00724e:	d505      	bpl.n	1a00725c <_vfprintf_r+0x53c>
1a007250:	9b06      	ldr	r3, [sp, #24]
1a007252:	9a03      	ldr	r2, [sp, #12]
1a007254:	1a9d      	subs	r5, r3, r2
1a007256:	2d00      	cmp	r5, #0
1a007258:	f300 83ae 	bgt.w	1a0079b8 <_vfprintf_r+0xc98>
1a00725c:	9b04      	ldr	r3, [sp, #16]
1a00725e:	9a06      	ldr	r2, [sp, #24]
1a007260:	9903      	ldr	r1, [sp, #12]
1a007262:	428a      	cmp	r2, r1
1a007264:	bfac      	ite	ge
1a007266:	189b      	addge	r3, r3, r2
1a007268:	185b      	addlt	r3, r3, r1
1a00726a:	9304      	str	r3, [sp, #16]
1a00726c:	2c00      	cmp	r4, #0
1a00726e:	f040 82e7 	bne.w	1a007840 <_vfprintf_r+0xb20>
1a007272:	2300      	movs	r3, #0
1a007274:	9329      	str	r3, [sp, #164]	; 0xa4
1a007276:	9b09      	ldr	r3, [sp, #36]	; 0x24
1a007278:	b11b      	cbz	r3, 1a007282 <_vfprintf_r+0x562>
1a00727a:	9909      	ldr	r1, [sp, #36]	; 0x24
1a00727c:	9805      	ldr	r0, [sp, #20]
1a00727e:	f7fe ff35 	bl	1a0060ec <_free_r>
1a007282:	f10d 0bac 	add.w	fp, sp, #172	; 0xac
1a007286:	4657      	mov	r7, sl
1a007288:	783b      	ldrb	r3, [r7, #0]
1a00728a:	2b00      	cmp	r3, #0
1a00728c:	f47f ad99 	bne.w	1a006dc2 <_vfprintf_r+0xa2>
1a007290:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
1a007292:	f8dd 901c 	ldr.w	r9, [sp, #28]
1a007296:	2b00      	cmp	r3, #0
1a007298:	f040 86f5 	bne.w	1a008086 <_vfprintf_r+0x1366>
1a00729c:	2300      	movs	r3, #0
1a00729e:	9329      	str	r3, [sp, #164]	; 0xa4
1a0072a0:	e375      	b.n	1a00798e <_vfprintf_r+0xc6e>
1a0072a2:	2d10      	cmp	r5, #16
1a0072a4:	9a29      	ldr	r2, [sp, #164]	; 0xa4
1a0072a6:	dd29      	ble.n	1a0072fc <_vfprintf_r+0x5dc>
1a0072a8:	4659      	mov	r1, fp
1a0072aa:	4620      	mov	r0, r4
1a0072ac:	961e      	str	r6, [sp, #120]	; 0x78
1a0072ae:	2310      	movs	r3, #16
1a0072b0:	9c05      	ldr	r4, [sp, #20]
1a0072b2:	9e07      	ldr	r6, [sp, #28]
1a0072b4:	46bb      	mov	fp, r7
1a0072b6:	e004      	b.n	1a0072c2 <_vfprintf_r+0x5a2>
1a0072b8:	3d10      	subs	r5, #16
1a0072ba:	2d10      	cmp	r5, #16
1a0072bc:	f101 0108 	add.w	r1, r1, #8
1a0072c0:	dd18      	ble.n	1a0072f4 <_vfprintf_r+0x5d4>
1a0072c2:	3201      	adds	r2, #1
1a0072c4:	4fbc      	ldr	r7, [pc, #752]	; (1a0075b8 <_vfprintf_r+0x898>)
1a0072c6:	3010      	adds	r0, #16
1a0072c8:	2a07      	cmp	r2, #7
1a0072ca:	e9cd 2029 	strd	r2, r0, [sp, #164]	; 0xa4
1a0072ce:	e9c1 7300 	strd	r7, r3, [r1]
1a0072d2:	ddf1      	ble.n	1a0072b8 <_vfprintf_r+0x598>
1a0072d4:	aa28      	add	r2, sp, #160	; 0xa0
1a0072d6:	4631      	mov	r1, r6
1a0072d8:	4620      	mov	r0, r4
1a0072da:	f003 fbc5 	bl	1a00aa68 <__sprint_r>
1a0072de:	2800      	cmp	r0, #0
1a0072e0:	f040 834f 	bne.w	1a007982 <_vfprintf_r+0xc62>
1a0072e4:	3d10      	subs	r5, #16
1a0072e6:	2d10      	cmp	r5, #16
1a0072e8:	e9dd 2029 	ldrd	r2, r0, [sp, #164]	; 0xa4
1a0072ec:	a92b      	add	r1, sp, #172	; 0xac
1a0072ee:	f04f 0310 	mov.w	r3, #16
1a0072f2:	dce6      	bgt.n	1a0072c2 <_vfprintf_r+0x5a2>
1a0072f4:	9e1e      	ldr	r6, [sp, #120]	; 0x78
1a0072f6:	465f      	mov	r7, fp
1a0072f8:	4604      	mov	r4, r0
1a0072fa:	468b      	mov	fp, r1
1a0072fc:	3201      	adds	r2, #1
1a0072fe:	4bae      	ldr	r3, [pc, #696]	; (1a0075b8 <_vfprintf_r+0x898>)
1a007300:	442c      	add	r4, r5
1a007302:	2a07      	cmp	r2, #7
1a007304:	e9cd 2429 	strd	r2, r4, [sp, #164]	; 0xa4
1a007308:	e9cb 3500 	strd	r3, r5, [fp]
1a00730c:	f300 862a 	bgt.w	1a007f64 <_vfprintf_r+0x1244>
1a007310:	f10b 0b08 	add.w	fp, fp, #8
1a007314:	f89d 2083 	ldrb.w	r2, [sp, #131]	; 0x83
1a007318:	e75c      	b.n	1a0071d4 <_vfprintf_r+0x4b4>
1a00731a:	f89a 8000 	ldrb.w	r8, [sl]
1a00731e:	9b02      	ldr	r3, [sp, #8]
1a007320:	f1b8 0f68 	cmp.w	r8, #104	; 0x68
1a007324:	f000 85e3 	beq.w	1a007eee <_vfprintf_r+0x11ce>
1a007328:	f043 0340 	orr.w	r3, r3, #64	; 0x40
1a00732c:	9302      	str	r3, [sp, #8]
1a00732e:	e57b      	b.n	1a006e28 <_vfprintf_r+0x108>
1a007330:	9b02      	ldr	r3, [sp, #8]
1a007332:	f89a 8000 	ldrb.w	r8, [sl]
1a007336:	f043 0301 	orr.w	r3, r3, #1
1a00733a:	9302      	str	r3, [sp, #8]
1a00733c:	e574      	b.n	1a006e28 <_vfprintf_r+0x108>
1a00733e:	f89d 3083 	ldrb.w	r3, [sp, #131]	; 0x83
1a007342:	f89a 8000 	ldrb.w	r8, [sl]
1a007346:	2b00      	cmp	r3, #0
1a007348:	f47f ad6e 	bne.w	1a006e28 <_vfprintf_r+0x108>
1a00734c:	f88d 1083 	strb.w	r1, [sp, #131]	; 0x83
1a007350:	e56a      	b.n	1a006e28 <_vfprintf_r+0x108>
1a007352:	9c08      	ldr	r4, [sp, #32]
1a007354:	f647 0230 	movw	r2, #30768	; 0x7830
1a007358:	f854 3b04 	ldr.w	r3, [r4], #4
1a00735c:	f8ad 2084 	strh.w	r2, [sp, #132]	; 0x84
1a007360:	9a02      	ldr	r2, [sp, #8]
1a007362:	9408      	str	r4, [sp, #32]
1a007364:	461c      	mov	r4, r3
1a007366:	4b95      	ldr	r3, [pc, #596]	; (1a0075bc <_vfprintf_r+0x89c>)
1a007368:	9314      	str	r3, [sp, #80]	; 0x50
1a00736a:	f042 0602 	orr.w	r6, r2, #2
1a00736e:	2500      	movs	r5, #0
1a007370:	2302      	movs	r3, #2
1a007372:	f04f 0878 	mov.w	r8, #120	; 0x78
1a007376:	2200      	movs	r2, #0
1a007378:	f1b9 3fff 	cmp.w	r9, #4294967295	; 0xffffffff
1a00737c:	f88d 2083 	strb.w	r2, [sp, #131]	; 0x83
1a007380:	f43f aedb 	beq.w	1a00713a <_vfprintf_r+0x41a>
1a007384:	f026 0280 	bic.w	r2, r6, #128	; 0x80
1a007388:	9202      	str	r2, [sp, #8]
1a00738a:	ea54 0205 	orrs.w	r2, r4, r5
1a00738e:	f040 82dd 	bne.w	1a00794c <_vfprintf_r+0xc2c>
1a007392:	f1b9 0f00 	cmp.w	r9, #0
1a007396:	f040 8348 	bne.w	1a007a2a <_vfprintf_r+0xd0a>
1a00739a:	2b00      	cmp	r3, #0
1a00739c:	f47f ae5d 	bne.w	1a00705a <_vfprintf_r+0x33a>
1a0073a0:	f016 0601 	ands.w	r6, r6, #1
1a0073a4:	f000 846a 	beq.w	1a007c7c <_vfprintf_r+0xf5c>
1a0073a8:	2330      	movs	r3, #48	; 0x30
1a0073aa:	f88d 314f 	strb.w	r3, [sp, #335]	; 0x14f
1a0073ae:	f20d 174f 	addw	r7, sp, #335	; 0x14f
1a0073b2:	e117      	b.n	1a0075e4 <_vfprintf_r+0x8c4>
1a0073b4:	9e02      	ldr	r6, [sp, #8]
1a0073b6:	06b0      	lsls	r0, r6, #26
1a0073b8:	f100 80f2 	bmi.w	1a0075a0 <_vfprintf_r+0x880>
1a0073bc:	9b02      	ldr	r3, [sp, #8]
1a0073be:	9a08      	ldr	r2, [sp, #32]
1a0073c0:	06d9      	lsls	r1, r3, #27
1a0073c2:	f852 4b04 	ldr.w	r4, [r2], #4
1a0073c6:	f101 8243 	bmi.w	1a008850 <_vfprintf_r+0x1b30>
1a0073ca:	9e02      	ldr	r6, [sp, #8]
1a0073cc:	4633      	mov	r3, r6
1a0073ce:	065b      	lsls	r3, r3, #25
1a0073d0:	f140 8635 	bpl.w	1a00803e <_vfprintf_r+0x131e>
1a0073d4:	9208      	str	r2, [sp, #32]
1a0073d6:	b2a4      	uxth	r4, r4
1a0073d8:	2500      	movs	r5, #0
1a0073da:	e0e8      	b.n	1a0075ae <_vfprintf_r+0x88e>
1a0073dc:	9902      	ldr	r1, [sp, #8]
1a0073de:	9a08      	ldr	r2, [sp, #32]
1a0073e0:	0689      	lsls	r1, r1, #26
1a0073e2:	f102 0304 	add.w	r3, r2, #4
1a0073e6:	f100 8452 	bmi.w	1a007c8e <_vfprintf_r+0xf6e>
1a0073ea:	9a02      	ldr	r2, [sp, #8]
1a0073ec:	06d7      	lsls	r7, r2, #27
1a0073ee:	f100 85e1 	bmi.w	1a007fb4 <_vfprintf_r+0x1294>
1a0073f2:	9a02      	ldr	r2, [sp, #8]
1a0073f4:	0656      	lsls	r6, r2, #25
1a0073f6:	f100 8664 	bmi.w	1a0080c2 <_vfprintf_r+0x13a2>
1a0073fa:	9a02      	ldr	r2, [sp, #8]
1a0073fc:	0595      	lsls	r5, r2, #22
1a0073fe:	f140 85d9 	bpl.w	1a007fb4 <_vfprintf_r+0x1294>
1a007402:	9a08      	ldr	r2, [sp, #32]
1a007404:	9308      	str	r3, [sp, #32]
1a007406:	6812      	ldr	r2, [r2, #0]
1a007408:	9b04      	ldr	r3, [sp, #16]
1a00740a:	7013      	strb	r3, [r2, #0]
1a00740c:	4657      	mov	r7, sl
1a00740e:	e73b      	b.n	1a007288 <_vfprintf_r+0x568>
1a007410:	f89a 8000 	ldrb.w	r8, [sl]
1a007414:	9b02      	ldr	r3, [sp, #8]
1a007416:	f1b8 0f6c 	cmp.w	r8, #108	; 0x6c
1a00741a:	f000 855f 	beq.w	1a007edc <_vfprintf_r+0x11bc>
1a00741e:	f043 0310 	orr.w	r3, r3, #16
1a007422:	9302      	str	r3, [sp, #8]
1a007424:	e500      	b.n	1a006e28 <_vfprintf_r+0x108>
1a007426:	9b08      	ldr	r3, [sp, #32]
1a007428:	f89a 8000 	ldrb.w	r8, [sl]
1a00742c:	f853 2b04 	ldr.w	r2, [r3], #4
1a007430:	9206      	str	r2, [sp, #24]
1a007432:	2a00      	cmp	r2, #0
1a007434:	f2c0 8513 	blt.w	1a007e5e <_vfprintf_r+0x113e>
1a007438:	9308      	str	r3, [sp, #32]
1a00743a:	e4f5      	b.n	1a006e28 <_vfprintf_r+0x108>
1a00743c:	9d05      	ldr	r5, [sp, #20]
1a00743e:	4628      	mov	r0, r5
1a007440:	f002 fc6c 	bl	1a009d1c <_localeconv_r>
1a007444:	6843      	ldr	r3, [r0, #4]
1a007446:	9317      	str	r3, [sp, #92]	; 0x5c
1a007448:	4618      	mov	r0, r3
1a00744a:	f7ff fbf9 	bl	1a006c40 <strlen>
1a00744e:	9019      	str	r0, [sp, #100]	; 0x64
1a007450:	4604      	mov	r4, r0
1a007452:	4628      	mov	r0, r5
1a007454:	f002 fc62 	bl	1a009d1c <_localeconv_r>
1a007458:	6883      	ldr	r3, [r0, #8]
1a00745a:	9318      	str	r3, [sp, #96]	; 0x60
1a00745c:	2120      	movs	r1, #32
1a00745e:	2c00      	cmp	r4, #0
1a007460:	f43f ad4a 	beq.w	1a006ef8 <_vfprintf_r+0x1d8>
1a007464:	9b18      	ldr	r3, [sp, #96]	; 0x60
1a007466:	f89a 8000 	ldrb.w	r8, [sl]
1a00746a:	2b00      	cmp	r3, #0
1a00746c:	f43f acdc 	beq.w	1a006e28 <_vfprintf_r+0x108>
1a007470:	781b      	ldrb	r3, [r3, #0]
1a007472:	2b00      	cmp	r3, #0
1a007474:	f43f acd8 	beq.w	1a006e28 <_vfprintf_r+0x108>
1a007478:	9b02      	ldr	r3, [sp, #8]
1a00747a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
1a00747e:	9302      	str	r3, [sp, #8]
1a007480:	e4d2      	b.n	1a006e28 <_vfprintf_r+0x108>
1a007482:	9b02      	ldr	r3, [sp, #8]
1a007484:	f89a 8000 	ldrb.w	r8, [sl]
1a007488:	f043 0380 	orr.w	r3, r3, #128	; 0x80
1a00748c:	9302      	str	r3, [sp, #8]
1a00748e:	e4cb      	b.n	1a006e28 <_vfprintf_r+0x108>
1a007490:	4652      	mov	r2, sl
1a007492:	f812 8b01 	ldrb.w	r8, [r2], #1
1a007496:	f1b8 0f2a 	cmp.w	r8, #42	; 0x2a
1a00749a:	f001 81be 	beq.w	1a00881a <_vfprintf_r+0x1afa>
1a00749e:	f1a8 0330 	sub.w	r3, r8, #48	; 0x30
1a0074a2:	2b09      	cmp	r3, #9
1a0074a4:	4692      	mov	sl, r2
1a0074a6:	f04f 0900 	mov.w	r9, #0
1a0074aa:	f63f acbf 	bhi.w	1a006e2c <_vfprintf_r+0x10c>
1a0074ae:	f81a 8b01 	ldrb.w	r8, [sl], #1
1a0074b2:	eb09 0989 	add.w	r9, r9, r9, lsl #2
1a0074b6:	eb03 0949 	add.w	r9, r3, r9, lsl #1
1a0074ba:	f1a8 0330 	sub.w	r3, r8, #48	; 0x30
1a0074be:	2b09      	cmp	r3, #9
1a0074c0:	d9f5      	bls.n	1a0074ae <_vfprintf_r+0x78e>
1a0074c2:	e4b3      	b.n	1a006e2c <_vfprintf_r+0x10c>
1a0074c4:	9c08      	ldr	r4, [sp, #32]
1a0074c6:	3407      	adds	r4, #7
1a0074c8:	f024 0307 	bic.w	r3, r4, #7
1a0074cc:	ecb3 7b02 	vldmia	r3!, {d7}
1a0074d0:	ec55 4b17 	vmov	r4, r5, d7
1a0074d4:	9308      	str	r3, [sp, #32]
1a0074d6:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
1a0074da:	931b      	str	r3, [sp, #108]	; 0x6c
1a0074dc:	ed8d 7a1a 	vstr	s14, [sp, #104]	; 0x68
1a0074e0:	e9dd 011a 	ldrd	r0, r1, [sp, #104]	; 0x68
1a0074e4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
1a0074e8:	4b35      	ldr	r3, [pc, #212]	; (1a0075c0 <_vfprintf_r+0x8a0>)
1a0074ea:	ed8d 7b10 	vstr	d7, [sp, #64]	; 0x40
1a0074ee:	f003 fc13 	bl	1a00ad18 <__aeabi_dcmpun>
1a0074f2:	2800      	cmp	r0, #0
1a0074f4:	f040 83dc 	bne.w	1a007cb0 <_vfprintf_r+0xf90>
1a0074f8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
1a0074fc:	4b30      	ldr	r3, [pc, #192]	; (1a0075c0 <_vfprintf_r+0x8a0>)
1a0074fe:	e9dd 011a 	ldrd	r0, r1, [sp, #104]	; 0x68
1a007502:	f7fe fa7b 	bl	1a0059fc <__aeabi_dcmple>
1a007506:	2800      	cmp	r0, #0
1a007508:	f040 83d2 	bne.w	1a007cb0 <_vfprintf_r+0xf90>
1a00750c:	2200      	movs	r2, #0
1a00750e:	2300      	movs	r3, #0
1a007510:	4620      	mov	r0, r4
1a007512:	4629      	mov	r1, r5
1a007514:	f7fe fa68 	bl	1a0059e8 <__aeabi_dcmplt>
1a007518:	2800      	cmp	r0, #0
1a00751a:	f040 8780 	bne.w	1a00841e <_vfprintf_r+0x16fe>
1a00751e:	f89d 2083 	ldrb.w	r2, [sp, #131]	; 0x83
1a007522:	4f28      	ldr	r7, [pc, #160]	; (1a0075c4 <_vfprintf_r+0x8a4>)
1a007524:	4b28      	ldr	r3, [pc, #160]	; (1a0075c8 <_vfprintf_r+0x8a8>)
1a007526:	9802      	ldr	r0, [sp, #8]
1a007528:	2100      	movs	r1, #0
1a00752a:	2603      	movs	r6, #3
1a00752c:	f020 0080 	bic.w	r0, r0, #128	; 0x80
1a007530:	9603      	str	r6, [sp, #12]
1a007532:	9109      	str	r1, [sp, #36]	; 0x24
1a007534:	9002      	str	r0, [sp, #8]
1a007536:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
1a00753a:	bfc8      	it	gt
1a00753c:	461f      	movgt	r7, r3
1a00753e:	4689      	mov	r9, r1
1a007540:	910c      	str	r1, [sp, #48]	; 0x30
1a007542:	e9cd 110e 	strd	r1, r1, [sp, #56]	; 0x38
1a007546:	e5c0      	b.n	1a0070ca <_vfprintf_r+0x3aa>
1a007548:	9e02      	ldr	r6, [sp, #8]
1a00754a:	06b4      	lsls	r4, r6, #26
1a00754c:	d41f      	bmi.n	1a00758e <_vfprintf_r+0x86e>
1a00754e:	9b02      	ldr	r3, [sp, #8]
1a007550:	9a08      	ldr	r2, [sp, #32]
1a007552:	06d8      	lsls	r0, r3, #27
1a007554:	f852 4b04 	ldr.w	r4, [r2], #4
1a007558:	f101 8174 	bmi.w	1a008844 <_vfprintf_r+0x1b24>
1a00755c:	9e02      	ldr	r6, [sp, #8]
1a00755e:	0671      	lsls	r1, r6, #25
1a007560:	f140 8577 	bpl.w	1a008052 <_vfprintf_r+0x1332>
1a007564:	9208      	str	r2, [sp, #32]
1a007566:	b2a4      	uxth	r4, r4
1a007568:	2500      	movs	r5, #0
1a00756a:	2301      	movs	r3, #1
1a00756c:	e703      	b.n	1a007376 <_vfprintf_r+0x656>
1a00756e:	9805      	ldr	r0, [sp, #20]
1a007570:	f7fe fd36 	bl	1a005fe0 <__sinit>
1a007574:	f7ff bbea 	b.w	1a006d4c <_vfprintf_r+0x2c>
1a007578:	f1b8 0f00 	cmp.w	r8, #0
1a00757c:	f43f ae88 	beq.w	1a007290 <_vfprintf_r+0x570>
1a007580:	2300      	movs	r3, #0
1a007582:	2601      	movs	r6, #1
1a007584:	461a      	mov	r2, r3
1a007586:	9603      	str	r6, [sp, #12]
1a007588:	f88d 80ec 	strb.w	r8, [sp, #236]	; 0xec
1a00758c:	e607      	b.n	1a00719e <_vfprintf_r+0x47e>
1a00758e:	9c08      	ldr	r4, [sp, #32]
1a007590:	3407      	adds	r4, #7
1a007592:	f024 0307 	bic.w	r3, r4, #7
1a007596:	e8f3 4502 	ldrd	r4, r5, [r3], #8
1a00759a:	9308      	str	r3, [sp, #32]
1a00759c:	2301      	movs	r3, #1
1a00759e:	e6ea      	b.n	1a007376 <_vfprintf_r+0x656>
1a0075a0:	9c08      	ldr	r4, [sp, #32]
1a0075a2:	3407      	adds	r4, #7
1a0075a4:	f024 0307 	bic.w	r3, r4, #7
1a0075a8:	e8f3 4502 	ldrd	r4, r5, [r3], #8
1a0075ac:	9308      	str	r3, [sp, #32]
1a0075ae:	f426 6680 	bic.w	r6, r6, #1024	; 0x400
1a0075b2:	2300      	movs	r3, #0
1a0075b4:	e6df      	b.n	1a007376 <_vfprintf_r+0x656>
1a0075b6:	bf00      	nop
1a0075b8:	1a00b320 	.word	0x1a00b320
1a0075bc:	1a00b300 	.word	0x1a00b300
1a0075c0:	7fefffff 	.word	0x7fefffff
1a0075c4:	1a00b2dc 	.word	0x1a00b2dc
1a0075c8:	1a00b2e0 	.word	0x1a00b2e0
1a0075cc:	9e02      	ldr	r6, [sp, #8]
1a0075ce:	2d00      	cmp	r5, #0
1a0075d0:	bf08      	it	eq
1a0075d2:	2c0a      	cmpeq	r4, #10
1a0075d4:	d213      	bcs.n	1a0075fe <_vfprintf_r+0x8de>
1a0075d6:	3430      	adds	r4, #48	; 0x30
1a0075d8:	9602      	str	r6, [sp, #8]
1a0075da:	f88d 414f 	strb.w	r4, [sp, #335]	; 0x14f
1a0075de:	2601      	movs	r6, #1
1a0075e0:	f20d 174f 	addw	r7, sp, #335	; 0x14f
1a0075e4:	2300      	movs	r3, #0
1a0075e6:	454e      	cmp	r6, r9
1a0075e8:	9309      	str	r3, [sp, #36]	; 0x24
1a0075ea:	930c      	str	r3, [sp, #48]	; 0x30
1a0075ec:	e9cd 330e 	strd	r3, r3, [sp, #56]	; 0x38
1a0075f0:	4633      	mov	r3, r6
1a0075f2:	bfb8      	it	lt
1a0075f4:	464b      	movlt	r3, r9
1a0075f6:	f89d 2083 	ldrb.w	r2, [sp, #131]	; 0x83
1a0075fa:	9303      	str	r3, [sp, #12]
1a0075fc:	e565      	b.n	1a0070ca <_vfprintf_r+0x3aa>
1a0075fe:	f406 6380 	and.w	r3, r6, #1024	; 0x400
1a007602:	2200      	movs	r2, #0
1a007604:	e9cd a802 	strd	sl, r8, [sp, #8]
1a007608:	f8cd b024 	str.w	fp, [sp, #36]	; 0x24
1a00760c:	af54      	add	r7, sp, #336	; 0x150
1a00760e:	46cb      	mov	fp, r9
1a007610:	4692      	mov	sl, r2
1a007612:	46b1      	mov	r9, r6
1a007614:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
1a007618:	461e      	mov	r6, r3
1a00761a:	e007      	b.n	1a00762c <_vfprintf_r+0x90c>
1a00761c:	f7fe fa5c 	bl	1a005ad8 <__aeabi_uldivmod>
1a007620:	2d00      	cmp	r5, #0
1a007622:	bf08      	it	eq
1a007624:	2c0a      	cmpeq	r4, #10
1a007626:	d320      	bcc.n	1a00766a <_vfprintf_r+0x94a>
1a007628:	4604      	mov	r4, r0
1a00762a:	460d      	mov	r5, r1
1a00762c:	220a      	movs	r2, #10
1a00762e:	2300      	movs	r3, #0
1a007630:	4620      	mov	r0, r4
1a007632:	4629      	mov	r1, r5
1a007634:	f7fe fa50 	bl	1a005ad8 <__aeabi_uldivmod>
1a007638:	f102 0c30 	add.w	ip, r2, #48	; 0x30
1a00763c:	f807 cc01 	strb.w	ip, [r7, #-1]
1a007640:	4620      	mov	r0, r4
1a007642:	4629      	mov	r1, r5
1a007644:	220a      	movs	r2, #10
1a007646:	2300      	movs	r3, #0
1a007648:	f10a 0a01 	add.w	sl, sl, #1
1a00764c:	3f01      	subs	r7, #1
1a00764e:	2e00      	cmp	r6, #0
1a007650:	d0e4      	beq.n	1a00761c <_vfprintf_r+0x8fc>
1a007652:	f898 c000 	ldrb.w	ip, [r8]
1a007656:	45e2      	cmp	sl, ip
1a007658:	d1e0      	bne.n	1a00761c <_vfprintf_r+0x8fc>
1a00765a:	f1ba 0fff 	cmp.w	sl, #255	; 0xff
1a00765e:	d0dd      	beq.n	1a00761c <_vfprintf_r+0x8fc>
1a007660:	429d      	cmp	r5, r3
1a007662:	bf08      	it	eq
1a007664:	4294      	cmpeq	r4, r2
1a007666:	f080 871e 	bcs.w	1a0084a6 <_vfprintf_r+0x1786>
1a00766a:	f8cd a048 	str.w	sl, [sp, #72]	; 0x48
1a00766e:	464e      	mov	r6, r9
1a007670:	f8cd 8060 	str.w	r8, [sp, #96]	; 0x60
1a007674:	46d9      	mov	r9, fp
1a007676:	f8dd a008 	ldr.w	sl, [sp, #8]
1a00767a:	f8dd 800c 	ldr.w	r8, [sp, #12]
1a00767e:	f8dd b024 	ldr.w	fp, [sp, #36]	; 0x24
1a007682:	9602      	str	r6, [sp, #8]
1a007684:	ab54      	add	r3, sp, #336	; 0x150
1a007686:	1bde      	subs	r6, r3, r7
1a007688:	e7ac      	b.n	1a0075e4 <_vfprintf_r+0x8c4>
1a00768a:	f1b8 0f65 	cmp.w	r8, #101	; 0x65
1a00768e:	f340 810a 	ble.w	1a0078a6 <_vfprintf_r+0xb86>
1a007692:	2200      	movs	r2, #0
1a007694:	2300      	movs	r3, #0
1a007696:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
1a00769a:	f7fe f99b 	bl	1a0059d4 <__aeabi_dcmpeq>
1a00769e:	2800      	cmp	r0, #0
1a0076a0:	f000 81de 	beq.w	1a007a60 <_vfprintf_r+0xd40>
1a0076a4:	9b29      	ldr	r3, [sp, #164]	; 0xa4
1a0076a6:	4ac2      	ldr	r2, [pc, #776]	; (1a0079b0 <_vfprintf_r+0xc90>)
1a0076a8:	f8cb 2000 	str.w	r2, [fp]
1a0076ac:	3301      	adds	r3, #1
1a0076ae:	3401      	adds	r4, #1
1a0076b0:	2201      	movs	r2, #1
1a0076b2:	2b07      	cmp	r3, #7
1a0076b4:	e9cd 3429 	strd	r3, r4, [sp, #164]	; 0xa4
1a0076b8:	f8cb 2004 	str.w	r2, [fp, #4]
1a0076bc:	f300 8463 	bgt.w	1a007f86 <_vfprintf_r+0x1266>
1a0076c0:	f10b 0b08 	add.w	fp, fp, #8
1a0076c4:	9b22      	ldr	r3, [sp, #136]	; 0x88
1a0076c6:	9a12      	ldr	r2, [sp, #72]	; 0x48
1a0076c8:	9c2a      	ldr	r4, [sp, #168]	; 0xa8
1a0076ca:	4293      	cmp	r3, r2
1a0076cc:	f280 82a5 	bge.w	1a007c1a <_vfprintf_r+0xefa>
1a0076d0:	9b29      	ldr	r3, [sp, #164]	; 0xa4
1a0076d2:	9a15      	ldr	r2, [sp, #84]	; 0x54
1a0076d4:	f8cb 2000 	str.w	r2, [fp]
1a0076d8:	9a13      	ldr	r2, [sp, #76]	; 0x4c
1a0076da:	f8cb 2004 	str.w	r2, [fp, #4]
1a0076de:	3301      	adds	r3, #1
1a0076e0:	4414      	add	r4, r2
1a0076e2:	2b07      	cmp	r3, #7
1a0076e4:	e9cd 3429 	strd	r3, r4, [sp, #164]	; 0xa4
1a0076e8:	f300 83ec 	bgt.w	1a007ec4 <_vfprintf_r+0x11a4>
1a0076ec:	f10b 0b08 	add.w	fp, fp, #8
1a0076f0:	9b12      	ldr	r3, [sp, #72]	; 0x48
1a0076f2:	1e5d      	subs	r5, r3, #1
1a0076f4:	2d00      	cmp	r5, #0
1a0076f6:	f77f ada8 	ble.w	1a00724a <_vfprintf_r+0x52a>
1a0076fa:	2d10      	cmp	r5, #16
1a0076fc:	9a29      	ldr	r2, [sp, #164]	; 0xa4
1a0076fe:	4bad      	ldr	r3, [pc, #692]	; (1a0079b4 <_vfprintf_r+0xc94>)
1a007700:	f340 844e 	ble.w	1a007fa0 <_vfprintf_r+0x1280>
1a007704:	2610      	movs	r6, #16
1a007706:	9f05      	ldr	r7, [sp, #20]
1a007708:	f8dd 801c 	ldr.w	r8, [sp, #28]
1a00770c:	4699      	mov	r9, r3
1a00770e:	e005      	b.n	1a00771c <_vfprintf_r+0x9fc>
1a007710:	f10b 0b08 	add.w	fp, fp, #8
1a007714:	3d10      	subs	r5, #16
1a007716:	2d10      	cmp	r5, #16
1a007718:	f340 8441 	ble.w	1a007f9e <_vfprintf_r+0x127e>
1a00771c:	3201      	adds	r2, #1
1a00771e:	3410      	adds	r4, #16
1a007720:	2a07      	cmp	r2, #7
1a007722:	e9cd 2429 	strd	r2, r4, [sp, #164]	; 0xa4
1a007726:	e9cb 9600 	strd	r9, r6, [fp]
1a00772a:	ddf1      	ble.n	1a007710 <_vfprintf_r+0x9f0>
1a00772c:	aa28      	add	r2, sp, #160	; 0xa0
1a00772e:	4641      	mov	r1, r8
1a007730:	4638      	mov	r0, r7
1a007732:	f003 f999 	bl	1a00aa68 <__sprint_r>
1a007736:	2800      	cmp	r0, #0
1a007738:	f040 8423 	bne.w	1a007f82 <_vfprintf_r+0x1262>
1a00773c:	e9dd 2429 	ldrd	r2, r4, [sp, #164]	; 0xa4
1a007740:	f10d 0bac 	add.w	fp, sp, #172	; 0xac
1a007744:	e7e6      	b.n	1a007714 <_vfprintf_r+0x9f4>
1a007746:	9b06      	ldr	r3, [sp, #24]
1a007748:	9a03      	ldr	r2, [sp, #12]
1a00774a:	1a9d      	subs	r5, r3, r2
1a00774c:	2d00      	cmp	r5, #0
1a00774e:	f77f ad65 	ble.w	1a00721c <_vfprintf_r+0x4fc>
1a007752:	2d10      	cmp	r5, #16
1a007754:	9a29      	ldr	r2, [sp, #164]	; 0xa4
1a007756:	4b97      	ldr	r3, [pc, #604]	; (1a0079b4 <_vfprintf_r+0xc94>)
1a007758:	dd28      	ble.n	1a0077ac <_vfprintf_r+0xa8c>
1a00775a:	960a      	str	r6, [sp, #40]	; 0x28
1a00775c:	4659      	mov	r1, fp
1a00775e:	4620      	mov	r0, r4
1a007760:	46bb      	mov	fp, r7
1a007762:	9c05      	ldr	r4, [sp, #20]
1a007764:	9e07      	ldr	r6, [sp, #28]
1a007766:	461f      	mov	r7, r3
1a007768:	e004      	b.n	1a007774 <_vfprintf_r+0xa54>
1a00776a:	3d10      	subs	r5, #16
1a00776c:	2d10      	cmp	r5, #16
1a00776e:	f101 0108 	add.w	r1, r1, #8
1a007772:	dd16      	ble.n	1a0077a2 <_vfprintf_r+0xa82>
1a007774:	3201      	adds	r2, #1
1a007776:	3010      	adds	r0, #16
1a007778:	2310      	movs	r3, #16
1a00777a:	2a07      	cmp	r2, #7
1a00777c:	e9cd 2029 	strd	r2, r0, [sp, #164]	; 0xa4
1a007780:	600f      	str	r7, [r1, #0]
1a007782:	604b      	str	r3, [r1, #4]
1a007784:	ddf1      	ble.n	1a00776a <_vfprintf_r+0xa4a>
1a007786:	aa28      	add	r2, sp, #160	; 0xa0
1a007788:	4631      	mov	r1, r6
1a00778a:	4620      	mov	r0, r4
1a00778c:	f003 f96c 	bl	1a00aa68 <__sprint_r>
1a007790:	2800      	cmp	r0, #0
1a007792:	f040 80f6 	bne.w	1a007982 <_vfprintf_r+0xc62>
1a007796:	3d10      	subs	r5, #16
1a007798:	2d10      	cmp	r5, #16
1a00779a:	e9dd 2029 	ldrd	r2, r0, [sp, #164]	; 0xa4
1a00779e:	a92b      	add	r1, sp, #172	; 0xac
1a0077a0:	dce8      	bgt.n	1a007774 <_vfprintf_r+0xa54>
1a0077a2:	9e0a      	ldr	r6, [sp, #40]	; 0x28
1a0077a4:	463b      	mov	r3, r7
1a0077a6:	4604      	mov	r4, r0
1a0077a8:	465f      	mov	r7, fp
1a0077aa:	468b      	mov	fp, r1
1a0077ac:	3201      	adds	r2, #1
1a0077ae:	442c      	add	r4, r5
1a0077b0:	2a07      	cmp	r2, #7
1a0077b2:	e9cd 2429 	strd	r2, r4, [sp, #164]	; 0xa4
1a0077b6:	e9cb 3500 	strd	r3, r5, [fp]
1a0077ba:	f300 8355 	bgt.w	1a007e68 <_vfprintf_r+0x1148>
1a0077be:	eba9 0506 	sub.w	r5, r9, r6
1a0077c2:	2d00      	cmp	r5, #0
1a0077c4:	f10b 0b08 	add.w	fp, fp, #8
1a0077c8:	f77f ad2d 	ble.w	1a007226 <_vfprintf_r+0x506>
1a0077cc:	2d10      	cmp	r5, #16
1a0077ce:	9a29      	ldr	r2, [sp, #164]	; 0xa4
1a0077d0:	4b78      	ldr	r3, [pc, #480]	; (1a0079b4 <_vfprintf_r+0xc94>)
1a0077d2:	dd29      	ble.n	1a007828 <_vfprintf_r+0xb08>
1a0077d4:	960a      	str	r6, [sp, #40]	; 0x28
1a0077d6:	4659      	mov	r1, fp
1a0077d8:	4620      	mov	r0, r4
1a0077da:	46bb      	mov	fp, r7
1a0077dc:	f04f 0910 	mov.w	r9, #16
1a0077e0:	9c05      	ldr	r4, [sp, #20]
1a0077e2:	9e07      	ldr	r6, [sp, #28]
1a0077e4:	461f      	mov	r7, r3
1a0077e6:	e004      	b.n	1a0077f2 <_vfprintf_r+0xad2>
1a0077e8:	3d10      	subs	r5, #16
1a0077ea:	2d10      	cmp	r5, #16
1a0077ec:	f101 0108 	add.w	r1, r1, #8
1a0077f0:	dd15      	ble.n	1a00781e <_vfprintf_r+0xafe>
1a0077f2:	3201      	adds	r2, #1
1a0077f4:	3010      	adds	r0, #16
1a0077f6:	2a07      	cmp	r2, #7
1a0077f8:	e9cd 2029 	strd	r2, r0, [sp, #164]	; 0xa4
1a0077fc:	e9c1 7900 	strd	r7, r9, [r1]
1a007800:	ddf2      	ble.n	1a0077e8 <_vfprintf_r+0xac8>
1a007802:	aa28      	add	r2, sp, #160	; 0xa0
1a007804:	4631      	mov	r1, r6
1a007806:	4620      	mov	r0, r4
1a007808:	f003 f92e 	bl	1a00aa68 <__sprint_r>
1a00780c:	2800      	cmp	r0, #0
1a00780e:	f040 80b8 	bne.w	1a007982 <_vfprintf_r+0xc62>
1a007812:	3d10      	subs	r5, #16
1a007814:	2d10      	cmp	r5, #16
1a007816:	e9dd 2029 	ldrd	r2, r0, [sp, #164]	; 0xa4
1a00781a:	a92b      	add	r1, sp, #172	; 0xac
1a00781c:	dce9      	bgt.n	1a0077f2 <_vfprintf_r+0xad2>
1a00781e:	9e0a      	ldr	r6, [sp, #40]	; 0x28
1a007820:	463b      	mov	r3, r7
1a007822:	4604      	mov	r4, r0
1a007824:	465f      	mov	r7, fp
1a007826:	468b      	mov	fp, r1
1a007828:	3201      	adds	r2, #1
1a00782a:	442c      	add	r4, r5
1a00782c:	2a07      	cmp	r2, #7
1a00782e:	e9cd 2429 	strd	r2, r4, [sp, #164]	; 0xa4
1a007832:	e9cb 3500 	strd	r3, r5, [fp]
1a007836:	f300 81da 	bgt.w	1a007bee <_vfprintf_r+0xece>
1a00783a:	f10b 0b08 	add.w	fp, fp, #8
1a00783e:	e4f2      	b.n	1a007226 <_vfprintf_r+0x506>
1a007840:	aa28      	add	r2, sp, #160	; 0xa0
1a007842:	9907      	ldr	r1, [sp, #28]
1a007844:	9805      	ldr	r0, [sp, #20]
1a007846:	f003 f90f 	bl	1a00aa68 <__sprint_r>
1a00784a:	2800      	cmp	r0, #0
1a00784c:	f43f ad11 	beq.w	1a007272 <_vfprintf_r+0x552>
1a007850:	f8dd 901c 	ldr.w	r9, [sp, #28]
1a007854:	e096      	b.n	1a007984 <_vfprintf_r+0xc64>
1a007856:	9a29      	ldr	r2, [sp, #164]	; 0xa4
1a007858:	9915      	ldr	r1, [sp, #84]	; 0x54
1a00785a:	f8cb 1000 	str.w	r1, [fp]
1a00785e:	9913      	ldr	r1, [sp, #76]	; 0x4c
1a007860:	f8cb 1004 	str.w	r1, [fp, #4]
1a007864:	3201      	adds	r2, #1
1a007866:	440c      	add	r4, r1
1a007868:	2a07      	cmp	r2, #7
1a00786a:	942a      	str	r4, [sp, #168]	; 0xa8
1a00786c:	9229      	str	r2, [sp, #164]	; 0xa4
1a00786e:	f300 84e1 	bgt.w	1a008234 <_vfprintf_r+0x1514>
1a007872:	f10b 0b08 	add.w	fp, fp, #8
1a007876:	2b00      	cmp	r3, #0
1a007878:	f2c0 86a2 	blt.w	1a0085c0 <_vfprintf_r+0x18a0>
1a00787c:	9b12      	ldr	r3, [sp, #72]	; 0x48
1a00787e:	3201      	adds	r2, #1
1a007880:	441c      	add	r4, r3
1a007882:	2a07      	cmp	r2, #7
1a007884:	e9cd 2429 	strd	r2, r4, [sp, #164]	; 0xa4
1a007888:	e9cb 7300 	strd	r7, r3, [fp]
1a00788c:	f77f acdb 	ble.w	1a007246 <_vfprintf_r+0x526>
1a007890:	aa28      	add	r2, sp, #160	; 0xa0
1a007892:	9907      	ldr	r1, [sp, #28]
1a007894:	9805      	ldr	r0, [sp, #20]
1a007896:	f003 f8e7 	bl	1a00aa68 <__sprint_r>
1a00789a:	2800      	cmp	r0, #0
1a00789c:	d1d8      	bne.n	1a007850 <_vfprintf_r+0xb30>
1a00789e:	9c2a      	ldr	r4, [sp, #168]	; 0xa8
1a0078a0:	f10d 0bac 	add.w	fp, sp, #172	; 0xac
1a0078a4:	e4d1      	b.n	1a00724a <_vfprintf_r+0x52a>
1a0078a6:	9a12      	ldr	r2, [sp, #72]	; 0x48
1a0078a8:	9b29      	ldr	r3, [sp, #164]	; 0xa4
1a0078aa:	2a01      	cmp	r2, #1
1a0078ac:	f104 0401 	add.w	r4, r4, #1
1a0078b0:	f103 0501 	add.w	r5, r3, #1
1a0078b4:	f10b 0608 	add.w	r6, fp, #8
1a0078b8:	f340 8158 	ble.w	1a007b6c <_vfprintf_r+0xe4c>
1a0078bc:	2301      	movs	r3, #1
1a0078be:	2d07      	cmp	r5, #7
1a0078c0:	f8cb 7000 	str.w	r7, [fp]
1a0078c4:	e9cd 5429 	strd	r5, r4, [sp, #164]	; 0xa4
1a0078c8:	f8cb 3004 	str.w	r3, [fp, #4]
1a0078cc:	f300 832a 	bgt.w	1a007f24 <_vfprintf_r+0x1204>
1a0078d0:	9b13      	ldr	r3, [sp, #76]	; 0x4c
1a0078d2:	9a15      	ldr	r2, [sp, #84]	; 0x54
1a0078d4:	1c69      	adds	r1, r5, #1
1a0078d6:	441c      	add	r4, r3
1a0078d8:	2907      	cmp	r1, #7
1a0078da:	910b      	str	r1, [sp, #44]	; 0x2c
1a0078dc:	e9cd 1429 	strd	r1, r4, [sp, #164]	; 0xa4
1a0078e0:	e9c6 2300 	strd	r2, r3, [r6]
1a0078e4:	f300 832a 	bgt.w	1a007f3c <_vfprintf_r+0x121c>
1a0078e8:	3608      	adds	r6, #8
1a0078ea:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
1a0078ec:	9d12      	ldr	r5, [sp, #72]	; 0x48
1a0078ee:	f102 0901 	add.w	r9, r2, #1
1a0078f2:	2300      	movs	r3, #0
1a0078f4:	2200      	movs	r2, #0
1a0078f6:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
1a0078fa:	f8cd 9028 	str.w	r9, [sp, #40]	; 0x28
1a0078fe:	f106 0b08 	add.w	fp, r6, #8
1a007902:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
1a007906:	f7fe f865 	bl	1a0059d4 <__aeabi_dcmpeq>
1a00790a:	2800      	cmp	r0, #0
1a00790c:	f040 8141 	bne.w	1a007b92 <_vfprintf_r+0xe72>
1a007910:	9b0a      	ldr	r3, [sp, #40]	; 0x28
1a007912:	f8c6 8004 	str.w	r8, [r6, #4]
1a007916:	3701      	adds	r7, #1
1a007918:	4444      	add	r4, r8
1a00791a:	2b07      	cmp	r3, #7
1a00791c:	6037      	str	r7, [r6, #0]
1a00791e:	942a      	str	r4, [sp, #168]	; 0xa8
1a007920:	9329      	str	r3, [sp, #164]	; 0xa4
1a007922:	f300 82bf 	bgt.w	1a007ea4 <_vfprintf_r+0x1184>
1a007926:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
1a007928:	f106 0310 	add.w	r3, r6, #16
1a00792c:	3202      	adds	r2, #2
1a00792e:	465e      	mov	r6, fp
1a007930:	920a      	str	r2, [sp, #40]	; 0x28
1a007932:	469b      	mov	fp, r3
1a007934:	9a16      	ldr	r2, [sp, #88]	; 0x58
1a007936:	6072      	str	r2, [r6, #4]
1a007938:	4414      	add	r4, r2
1a00793a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
1a00793c:	942a      	str	r4, [sp, #168]	; 0xa8
1a00793e:	ab24      	add	r3, sp, #144	; 0x90
1a007940:	2a07      	cmp	r2, #7
1a007942:	9229      	str	r2, [sp, #164]	; 0xa4
1a007944:	6033      	str	r3, [r6, #0]
1a007946:	f77f ac80 	ble.w	1a00724a <_vfprintf_r+0x52a>
1a00794a:	e7a1      	b.n	1a007890 <_vfprintf_r+0xb70>
1a00794c:	9e02      	ldr	r6, [sp, #8]
1a00794e:	f7ff bbf4 	b.w	1a00713a <_vfprintf_r+0x41a>
1a007952:	aa28      	add	r2, sp, #160	; 0xa0
1a007954:	9907      	ldr	r1, [sp, #28]
1a007956:	9805      	ldr	r0, [sp, #20]
1a007958:	f003 f886 	bl	1a00aa68 <__sprint_r>
1a00795c:	2800      	cmp	r0, #0
1a00795e:	f47f af77 	bne.w	1a007850 <_vfprintf_r+0xb30>
1a007962:	9c2a      	ldr	r4, [sp, #168]	; 0xa8
1a007964:	f10d 0bac 	add.w	fp, sp, #172	; 0xac
1a007968:	e444      	b.n	1a0071f4 <_vfprintf_r+0x4d4>
1a00796a:	aa28      	add	r2, sp, #160	; 0xa0
1a00796c:	9907      	ldr	r1, [sp, #28]
1a00796e:	9805      	ldr	r0, [sp, #20]
1a007970:	f003 f87a 	bl	1a00aa68 <__sprint_r>
1a007974:	2800      	cmp	r0, #0
1a007976:	f47f af6b 	bne.w	1a007850 <_vfprintf_r+0xb30>
1a00797a:	9c2a      	ldr	r4, [sp, #168]	; 0xa8
1a00797c:	f10d 0bac 	add.w	fp, sp, #172	; 0xac
1a007980:	e448      	b.n	1a007214 <_vfprintf_r+0x4f4>
1a007982:	46b1      	mov	r9, r6
1a007984:	9909      	ldr	r1, [sp, #36]	; 0x24
1a007986:	b111      	cbz	r1, 1a00798e <_vfprintf_r+0xc6e>
1a007988:	9805      	ldr	r0, [sp, #20]
1a00798a:	f7fe fbaf 	bl	1a0060ec <_free_r>
1a00798e:	f8d9 2064 	ldr.w	r2, [r9, #100]	; 0x64
1a007992:	f8b9 300c 	ldrh.w	r3, [r9, #12]
1a007996:	07d4      	lsls	r4, r2, #31
1a007998:	d402      	bmi.n	1a0079a0 <_vfprintf_r+0xc80>
1a00799a:	0598      	lsls	r0, r3, #22
1a00799c:	f140 82db 	bpl.w	1a007f56 <_vfprintf_r+0x1236>
1a0079a0:	0659      	lsls	r1, r3, #25
1a0079a2:	f100 8640 	bmi.w	1a008626 <_vfprintf_r+0x1906>
1a0079a6:	9804      	ldr	r0, [sp, #16]
1a0079a8:	b055      	add	sp, #340	; 0x154
1a0079aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
1a0079ae:	bf00      	nop
1a0079b0:	1a00b31c 	.word	0x1a00b31c
1a0079b4:	1a00b330 	.word	0x1a00b330
1a0079b8:	2d10      	cmp	r5, #16
1a0079ba:	9b29      	ldr	r3, [sp, #164]	; 0xa4
1a0079bc:	dd21      	ble.n	1a007a02 <_vfprintf_r+0xce2>
1a0079be:	2610      	movs	r6, #16
1a0079c0:	9f05      	ldr	r7, [sp, #20]
1a0079c2:	f8dd 801c 	ldr.w	r8, [sp, #28]
1a0079c6:	e004      	b.n	1a0079d2 <_vfprintf_r+0xcb2>
1a0079c8:	3d10      	subs	r5, #16
1a0079ca:	2d10      	cmp	r5, #16
1a0079cc:	f10b 0b08 	add.w	fp, fp, #8
1a0079d0:	dd17      	ble.n	1a007a02 <_vfprintf_r+0xce2>
1a0079d2:	3301      	adds	r3, #1
1a0079d4:	4ab3      	ldr	r2, [pc, #716]	; (1a007ca4 <_vfprintf_r+0xf84>)
1a0079d6:	3410      	adds	r4, #16
1a0079d8:	2b07      	cmp	r3, #7
1a0079da:	e9cd 3429 	strd	r3, r4, [sp, #164]	; 0xa4
1a0079de:	e9cb 2600 	strd	r2, r6, [fp]
1a0079e2:	ddf1      	ble.n	1a0079c8 <_vfprintf_r+0xca8>
1a0079e4:	aa28      	add	r2, sp, #160	; 0xa0
1a0079e6:	4641      	mov	r1, r8
1a0079e8:	4638      	mov	r0, r7
1a0079ea:	f003 f83d 	bl	1a00aa68 <__sprint_r>
1a0079ee:	2800      	cmp	r0, #0
1a0079f0:	f040 82c7 	bne.w	1a007f82 <_vfprintf_r+0x1262>
1a0079f4:	3d10      	subs	r5, #16
1a0079f6:	2d10      	cmp	r5, #16
1a0079f8:	e9dd 3429 	ldrd	r3, r4, [sp, #164]	; 0xa4
1a0079fc:	f10d 0bac 	add.w	fp, sp, #172	; 0xac
1a007a00:	dce7      	bgt.n	1a0079d2 <_vfprintf_r+0xcb2>
1a007a02:	3301      	adds	r3, #1
1a007a04:	4aa7      	ldr	r2, [pc, #668]	; (1a007ca4 <_vfprintf_r+0xf84>)
1a007a06:	442c      	add	r4, r5
1a007a08:	2b07      	cmp	r3, #7
1a007a0a:	e9cd 3429 	strd	r3, r4, [sp, #164]	; 0xa4
1a007a0e:	e9cb 2500 	strd	r2, r5, [fp]
1a007a12:	f77f ac23 	ble.w	1a00725c <_vfprintf_r+0x53c>
1a007a16:	aa28      	add	r2, sp, #160	; 0xa0
1a007a18:	9907      	ldr	r1, [sp, #28]
1a007a1a:	9805      	ldr	r0, [sp, #20]
1a007a1c:	f003 f824 	bl	1a00aa68 <__sprint_r>
1a007a20:	2800      	cmp	r0, #0
1a007a22:	f47f af15 	bne.w	1a007850 <_vfprintf_r+0xb30>
1a007a26:	9c2a      	ldr	r4, [sp, #168]	; 0xa8
1a007a28:	e418      	b.n	1a00725c <_vfprintf_r+0x53c>
1a007a2a:	2b01      	cmp	r3, #1
1a007a2c:	f000 8423 	beq.w	1a008276 <_vfprintf_r+0x1556>
1a007a30:	2b02      	cmp	r3, #2
1a007a32:	9e02      	ldr	r6, [sp, #8]
1a007a34:	f47f ab87 	bne.w	1a007146 <_vfprintf_r+0x426>
1a007a38:	9814      	ldr	r0, [sp, #80]	; 0x50
1a007a3a:	af54      	add	r7, sp, #336	; 0x150
1a007a3c:	0923      	lsrs	r3, r4, #4
1a007a3e:	f004 010f 	and.w	r1, r4, #15
1a007a42:	ea43 7305 	orr.w	r3, r3, r5, lsl #28
1a007a46:	092a      	lsrs	r2, r5, #4
1a007a48:	461c      	mov	r4, r3
1a007a4a:	4615      	mov	r5, r2
1a007a4c:	5c43      	ldrb	r3, [r0, r1]
1a007a4e:	f807 3d01 	strb.w	r3, [r7, #-1]!
1a007a52:	ea54 0305 	orrs.w	r3, r4, r5
1a007a56:	d1f1      	bne.n	1a007a3c <_vfprintf_r+0xd1c>
1a007a58:	ab54      	add	r3, sp, #336	; 0x150
1a007a5a:	9602      	str	r6, [sp, #8]
1a007a5c:	1bde      	subs	r6, r3, r7
1a007a5e:	e5c1      	b.n	1a0075e4 <_vfprintf_r+0x8c4>
1a007a60:	9b22      	ldr	r3, [sp, #136]	; 0x88
1a007a62:	2b00      	cmp	r3, #0
1a007a64:	f340 80df 	ble.w	1a007c26 <_vfprintf_r+0xf06>
1a007a68:	9b0e      	ldr	r3, [sp, #56]	; 0x38
1a007a6a:	9a12      	ldr	r2, [sp, #72]	; 0x48
1a007a6c:	4293      	cmp	r3, r2
1a007a6e:	bfa8      	it	ge
1a007a70:	4613      	movge	r3, r2
1a007a72:	2b00      	cmp	r3, #0
1a007a74:	461d      	mov	r5, r3
1a007a76:	dd0d      	ble.n	1a007a94 <_vfprintf_r+0xd74>
1a007a78:	9b29      	ldr	r3, [sp, #164]	; 0xa4
1a007a7a:	f8cb 7000 	str.w	r7, [fp]
1a007a7e:	3301      	adds	r3, #1
1a007a80:	442c      	add	r4, r5
1a007a82:	2b07      	cmp	r3, #7
1a007a84:	942a      	str	r4, [sp, #168]	; 0xa8
1a007a86:	f8cb 5004 	str.w	r5, [fp, #4]
1a007a8a:	9329      	str	r3, [sp, #164]	; 0xa4
1a007a8c:	f300 84fe 	bgt.w	1a00848c <_vfprintf_r+0x176c>
1a007a90:	f10b 0b08 	add.w	fp, fp, #8
1a007a94:	9b0e      	ldr	r3, [sp, #56]	; 0x38
1a007a96:	2d00      	cmp	r5, #0
1a007a98:	bfa8      	it	ge
1a007a9a:	1b5b      	subge	r3, r3, r5
1a007a9c:	2b00      	cmp	r3, #0
1a007a9e:	461d      	mov	r5, r3
1a007aa0:	f300 8290 	bgt.w	1a007fc4 <_vfprintf_r+0x12a4>
1a007aa4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
1a007aa6:	443b      	add	r3, r7
1a007aa8:	4699      	mov	r9, r3
1a007aaa:	9b02      	ldr	r3, [sp, #8]
1a007aac:	0558      	lsls	r0, r3, #21
1a007aae:	f100 8413 	bmi.w	1a0082d8 <_vfprintf_r+0x15b8>
1a007ab2:	9b22      	ldr	r3, [sp, #136]	; 0x88
1a007ab4:	9a12      	ldr	r2, [sp, #72]	; 0x48
1a007ab6:	4293      	cmp	r3, r2
1a007ab8:	db03      	blt.n	1a007ac2 <_vfprintf_r+0xda2>
1a007aba:	9a02      	ldr	r2, [sp, #8]
1a007abc:	07d1      	lsls	r1, r2, #31
1a007abe:	f140 82f7 	bpl.w	1a0080b0 <_vfprintf_r+0x1390>
1a007ac2:	9a29      	ldr	r2, [sp, #164]	; 0xa4
1a007ac4:	9915      	ldr	r1, [sp, #84]	; 0x54
1a007ac6:	f8cb 1000 	str.w	r1, [fp]
1a007aca:	9913      	ldr	r1, [sp, #76]	; 0x4c
1a007acc:	f8cb 1004 	str.w	r1, [fp, #4]
1a007ad0:	3201      	adds	r2, #1
1a007ad2:	440c      	add	r4, r1
1a007ad4:	2a07      	cmp	r2, #7
1a007ad6:	942a      	str	r4, [sp, #168]	; 0xa8
1a007ad8:	9229      	str	r2, [sp, #164]	; 0xa4
1a007ada:	f300 8523 	bgt.w	1a008524 <_vfprintf_r+0x1804>
1a007ade:	f10b 0b08 	add.w	fp, fp, #8
1a007ae2:	9a12      	ldr	r2, [sp, #72]	; 0x48
1a007ae4:	18bd      	adds	r5, r7, r2
1a007ae6:	eba5 0509 	sub.w	r5, r5, r9
1a007aea:	1ad3      	subs	r3, r2, r3
1a007aec:	429d      	cmp	r5, r3
1a007aee:	bfa8      	it	ge
1a007af0:	461d      	movge	r5, r3
1a007af2:	2d00      	cmp	r5, #0
1a007af4:	dd0d      	ble.n	1a007b12 <_vfprintf_r+0xdf2>
1a007af6:	9a29      	ldr	r2, [sp, #164]	; 0xa4
1a007af8:	f8cb 9000 	str.w	r9, [fp]
1a007afc:	3201      	adds	r2, #1
1a007afe:	442c      	add	r4, r5
1a007b00:	2a07      	cmp	r2, #7
1a007b02:	942a      	str	r4, [sp, #168]	; 0xa8
1a007b04:	f8cb 5004 	str.w	r5, [fp, #4]
1a007b08:	9229      	str	r2, [sp, #164]	; 0xa4
1a007b0a:	f300 8546 	bgt.w	1a00859a <_vfprintf_r+0x187a>
1a007b0e:	f10b 0b08 	add.w	fp, fp, #8
1a007b12:	2d00      	cmp	r5, #0
1a007b14:	bfac      	ite	ge
1a007b16:	1b5d      	subge	r5, r3, r5
1a007b18:	461d      	movlt	r5, r3
1a007b1a:	2d00      	cmp	r5, #0
1a007b1c:	f77f ab95 	ble.w	1a00724a <_vfprintf_r+0x52a>
1a007b20:	2d10      	cmp	r5, #16
1a007b22:	9a29      	ldr	r2, [sp, #164]	; 0xa4
1a007b24:	4b60      	ldr	r3, [pc, #384]	; (1a007ca8 <_vfprintf_r+0xf88>)
1a007b26:	f340 823b 	ble.w	1a007fa0 <_vfprintf_r+0x1280>
1a007b2a:	2610      	movs	r6, #16
1a007b2c:	9f05      	ldr	r7, [sp, #20]
1a007b2e:	f8dd 801c 	ldr.w	r8, [sp, #28]
1a007b32:	4699      	mov	r9, r3
1a007b34:	e005      	b.n	1a007b42 <_vfprintf_r+0xe22>
1a007b36:	f10b 0b08 	add.w	fp, fp, #8
1a007b3a:	3d10      	subs	r5, #16
1a007b3c:	2d10      	cmp	r5, #16
1a007b3e:	f340 822e 	ble.w	1a007f9e <_vfprintf_r+0x127e>
1a007b42:	3201      	adds	r2, #1
1a007b44:	3410      	adds	r4, #16
1a007b46:	2a07      	cmp	r2, #7
1a007b48:	e9cd 2429 	strd	r2, r4, [sp, #164]	; 0xa4
1a007b4c:	e9cb 9600 	strd	r9, r6, [fp]
1a007b50:	ddf1      	ble.n	1a007b36 <_vfprintf_r+0xe16>
1a007b52:	aa28      	add	r2, sp, #160	; 0xa0
1a007b54:	4641      	mov	r1, r8
1a007b56:	4638      	mov	r0, r7
1a007b58:	f002 ff86 	bl	1a00aa68 <__sprint_r>
1a007b5c:	2800      	cmp	r0, #0
1a007b5e:	f040 8210 	bne.w	1a007f82 <_vfprintf_r+0x1262>
1a007b62:	e9dd 2429 	ldrd	r2, r4, [sp, #164]	; 0xa4
1a007b66:	f10d 0bac 	add.w	fp, sp, #172	; 0xac
1a007b6a:	e7e6      	b.n	1a007b3a <_vfprintf_r+0xe1a>
1a007b6c:	9a02      	ldr	r2, [sp, #8]
1a007b6e:	07d2      	lsls	r2, r2, #31
1a007b70:	f53f aea4 	bmi.w	1a0078bc <_vfprintf_r+0xb9c>
1a007b74:	2201      	movs	r2, #1
1a007b76:	2d07      	cmp	r5, #7
1a007b78:	f8cb 7000 	str.w	r7, [fp]
1a007b7c:	e9cd 5429 	strd	r5, r4, [sp, #164]	; 0xa4
1a007b80:	f8cb 2004 	str.w	r2, [fp, #4]
1a007b84:	f300 818e 	bgt.w	1a007ea4 <_vfprintf_r+0x1184>
1a007b88:	3302      	adds	r3, #2
1a007b8a:	930a      	str	r3, [sp, #40]	; 0x28
1a007b8c:	f10b 0b10 	add.w	fp, fp, #16
1a007b90:	e6d0      	b.n	1a007934 <_vfprintf_r+0xc14>
1a007b92:	f1b8 0f00 	cmp.w	r8, #0
1a007b96:	f77f aecd 	ble.w	1a007934 <_vfprintf_r+0xc14>
1a007b9a:	f1b8 0f10 	cmp.w	r8, #16
1a007b9e:	4b42      	ldr	r3, [pc, #264]	; (1a007ca8 <_vfprintf_r+0xf88>)
1a007ba0:	f340 8635 	ble.w	1a00880e <_vfprintf_r+0x1aee>
1a007ba4:	461a      	mov	r2, r3
1a007ba6:	464d      	mov	r5, r9
1a007ba8:	4623      	mov	r3, r4
1a007baa:	2710      	movs	r7, #16
1a007bac:	f8dd b01c 	ldr.w	fp, [sp, #28]
1a007bb0:	f8dd 9014 	ldr.w	r9, [sp, #20]
1a007bb4:	4614      	mov	r4, r2
1a007bb6:	e007      	b.n	1a007bc8 <_vfprintf_r+0xea8>
1a007bb8:	3608      	adds	r6, #8
1a007bba:	f1a8 0810 	sub.w	r8, r8, #16
1a007bbe:	f1b8 0f10 	cmp.w	r8, #16
1a007bc2:	f340 815e 	ble.w	1a007e82 <_vfprintf_r+0x1162>
1a007bc6:	3501      	adds	r5, #1
1a007bc8:	3310      	adds	r3, #16
1a007bca:	2d07      	cmp	r5, #7
1a007bcc:	e9cd 5329 	strd	r5, r3, [sp, #164]	; 0xa4
1a007bd0:	e9c6 4700 	strd	r4, r7, [r6]
1a007bd4:	ddf0      	ble.n	1a007bb8 <_vfprintf_r+0xe98>
1a007bd6:	aa28      	add	r2, sp, #160	; 0xa0
1a007bd8:	4659      	mov	r1, fp
1a007bda:	4648      	mov	r0, r9
1a007bdc:	f002 ff44 	bl	1a00aa68 <__sprint_r>
1a007be0:	2800      	cmp	r0, #0
1a007be2:	f040 821d 	bne.w	1a008020 <_vfprintf_r+0x1300>
1a007be6:	e9dd 5329 	ldrd	r5, r3, [sp, #164]	; 0xa4
1a007bea:	ae2b      	add	r6, sp, #172	; 0xac
1a007bec:	e7e5      	b.n	1a007bba <_vfprintf_r+0xe9a>
1a007bee:	aa28      	add	r2, sp, #160	; 0xa0
1a007bf0:	9907      	ldr	r1, [sp, #28]
1a007bf2:	9805      	ldr	r0, [sp, #20]
1a007bf4:	f002 ff38 	bl	1a00aa68 <__sprint_r>
1a007bf8:	2800      	cmp	r0, #0
1a007bfa:	f47f ae29 	bne.w	1a007850 <_vfprintf_r+0xb30>
1a007bfe:	9c2a      	ldr	r4, [sp, #168]	; 0xa8
1a007c00:	f10d 0bac 	add.w	fp, sp, #172	; 0xac
1a007c04:	f7ff bb0f 	b.w	1a007226 <_vfprintf_r+0x506>
1a007c08:	f8d9 0058 	ldr.w	r0, [r9, #88]	; 0x58
1a007c0c:	f7fe fbb6 	bl	1a00637c <__retarget_lock_acquire_recursive>
1a007c10:	f9b9 200c 	ldrsh.w	r2, [r9, #12]
1a007c14:	b293      	uxth	r3, r2
1a007c16:	f7ff b8a3 	b.w	1a006d60 <_vfprintf_r+0x40>
1a007c1a:	9b02      	ldr	r3, [sp, #8]
1a007c1c:	07dd      	lsls	r5, r3, #31
1a007c1e:	f53f ad57 	bmi.w	1a0076d0 <_vfprintf_r+0x9b0>
1a007c22:	f7ff bb12 	b.w	1a00724a <_vfprintf_r+0x52a>
1a007c26:	9a29      	ldr	r2, [sp, #164]	; 0xa4
1a007c28:	4920      	ldr	r1, [pc, #128]	; (1a007cac <_vfprintf_r+0xf8c>)
1a007c2a:	f8cb 1000 	str.w	r1, [fp]
1a007c2e:	3201      	adds	r2, #1
1a007c30:	3401      	adds	r4, #1
1a007c32:	2101      	movs	r1, #1
1a007c34:	2a07      	cmp	r2, #7
1a007c36:	e9cd 2429 	strd	r2, r4, [sp, #164]	; 0xa4
1a007c3a:	f8cb 1004 	str.w	r1, [fp, #4]
1a007c3e:	f300 8409 	bgt.w	1a008454 <_vfprintf_r+0x1734>
1a007c42:	f10b 0b08 	add.w	fp, fp, #8
1a007c46:	2b00      	cmp	r3, #0
1a007c48:	f47f ae05 	bne.w	1a007856 <_vfprintf_r+0xb36>
1a007c4c:	9b02      	ldr	r3, [sp, #8]
1a007c4e:	9a12      	ldr	r2, [sp, #72]	; 0x48
1a007c50:	f003 0301 	and.w	r3, r3, #1
1a007c54:	4313      	orrs	r3, r2
1a007c56:	f43f aaf8 	beq.w	1a00724a <_vfprintf_r+0x52a>
1a007c5a:	9a29      	ldr	r2, [sp, #164]	; 0xa4
1a007c5c:	9b15      	ldr	r3, [sp, #84]	; 0x54
1a007c5e:	f8cb 3000 	str.w	r3, [fp]
1a007c62:	9b13      	ldr	r3, [sp, #76]	; 0x4c
1a007c64:	f8cb 3004 	str.w	r3, [fp, #4]
1a007c68:	3201      	adds	r2, #1
1a007c6a:	441c      	add	r4, r3
1a007c6c:	2a07      	cmp	r2, #7
1a007c6e:	942a      	str	r4, [sp, #168]	; 0xa8
1a007c70:	9229      	str	r2, [sp, #164]	; 0xa4
1a007c72:	f300 82df 	bgt.w	1a008234 <_vfprintf_r+0x1514>
1a007c76:	f10b 0b08 	add.w	fp, fp, #8
1a007c7a:	e5ff      	b.n	1a00787c <_vfprintf_r+0xb5c>
1a007c7c:	af54      	add	r7, sp, #336	; 0x150
1a007c7e:	e4b1      	b.n	1a0075e4 <_vfprintf_r+0x8c4>
1a007c80:	9b02      	ldr	r3, [sp, #8]
1a007c82:	0598      	lsls	r0, r3, #22
1a007c84:	f100 822d 	bmi.w	1a0080e2 <_vfprintf_r+0x13c2>
1a007c88:	2500      	movs	r5, #0
1a007c8a:	f7ff b987 	b.w	1a006f9c <_vfprintf_r+0x27c>
1a007c8e:	9904      	ldr	r1, [sp, #16]
1a007c90:	6812      	ldr	r2, [r2, #0]
1a007c92:	9308      	str	r3, [sp, #32]
1a007c94:	17cd      	asrs	r5, r1, #31
1a007c96:	4608      	mov	r0, r1
1a007c98:	4629      	mov	r1, r5
1a007c9a:	e9c2 0100 	strd	r0, r1, [r2]
1a007c9e:	4657      	mov	r7, sl
1a007ca0:	f7ff baf2 	b.w	1a007288 <_vfprintf_r+0x568>
1a007ca4:	1a00b320 	.word	0x1a00b320
1a007ca8:	1a00b330 	.word	0x1a00b330
1a007cac:	1a00b31c 	.word	0x1a00b31c
1a007cb0:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
1a007cb4:	4602      	mov	r2, r0
1a007cb6:	460b      	mov	r3, r1
1a007cb8:	f003 f82e 	bl	1a00ad18 <__aeabi_dcmpun>
1a007cbc:	2800      	cmp	r0, #0
1a007cbe:	f040 853a 	bne.w	1a008736 <_vfprintf_r+0x1a16>
1a007cc2:	f1b8 0f61 	cmp.w	r8, #97	; 0x61
1a007cc6:	f000 84d0 	beq.w	1a00866a <_vfprintf_r+0x194a>
1a007cca:	f1b8 0f41 	cmp.w	r8, #65	; 0x41
1a007cce:	f000 820c 	beq.w	1a0080ea <_vfprintf_r+0x13ca>
1a007cd2:	f028 0320 	bic.w	r3, r8, #32
1a007cd6:	f1b9 3fff 	cmp.w	r9, #4294967295	; 0xffffffff
1a007cda:	9303      	str	r3, [sp, #12]
1a007cdc:	f000 8500 	beq.w	1a0086e0 <_vfprintf_r+0x19c0>
1a007ce0:	2b47      	cmp	r3, #71	; 0x47
1a007ce2:	d104      	bne.n	1a007cee <_vfprintf_r+0xfce>
1a007ce4:	f1b9 0f00 	cmp.w	r9, #0
1a007ce8:	bf08      	it	eq
1a007cea:	f04f 0901 	moveq.w	r9, #1
1a007cee:	e9dd 4510 	ldrd	r4, r5, [sp, #64]	; 0x40
1a007cf2:	9902      	ldr	r1, [sp, #8]
1a007cf4:	2d00      	cmp	r5, #0
1a007cf6:	f441 7280 	orr.w	r2, r1, #256	; 0x100
1a007cfa:	f2c0 8395 	blt.w	1a008428 <_vfprintf_r+0x1708>
1a007cfe:	2300      	movs	r3, #0
1a007d00:	e9cd 3109 	strd	r3, r1, [sp, #36]	; 0x24
1a007d04:	e9cd 451c 	strd	r4, r5, [sp, #112]	; 0x70
1a007d08:	931e      	str	r3, [sp, #120]	; 0x78
1a007d0a:	9202      	str	r2, [sp, #8]
1a007d0c:	9b03      	ldr	r3, [sp, #12]
1a007d0e:	2b46      	cmp	r3, #70	; 0x46
1a007d10:	f000 83df 	beq.w	1a0084d2 <_vfprintf_r+0x17b2>
1a007d14:	2b45      	cmp	r3, #69	; 0x45
1a007d16:	f000 84d2 	beq.w	1a0086be <_vfprintf_r+0x199e>
1a007d1a:	aa26      	add	r2, sp, #152	; 0x98
1a007d1c:	ab23      	add	r3, sp, #140	; 0x8c
1a007d1e:	e9cd 3200 	strd	r3, r2, [sp]
1a007d22:	2102      	movs	r1, #2
1a007d24:	ab22      	add	r3, sp, #136	; 0x88
1a007d26:	464a      	mov	r2, r9
1a007d28:	ed9d 0b1c 	vldr	d0, [sp, #112]	; 0x70
1a007d2c:	9805      	ldr	r0, [sp, #20]
1a007d2e:	f000 fedf 	bl	1a008af0 <_dtoa_r>
1a007d32:	9b03      	ldr	r3, [sp, #12]
1a007d34:	2b47      	cmp	r3, #71	; 0x47
1a007d36:	4607      	mov	r7, r0
1a007d38:	f040 858d 	bne.w	1a008856 <_vfprintf_r+0x1b36>
1a007d3c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
1a007d3e:	07db      	lsls	r3, r3, #31
1a007d40:	f100 843b 	bmi.w	1a0085ba <_vfprintf_r+0x189a>
1a007d44:	9e26      	ldr	r6, [sp, #152]	; 0x98
1a007d46:	1bf3      	subs	r3, r6, r7
1a007d48:	9312      	str	r3, [sp, #72]	; 0x48
1a007d4a:	9b22      	ldr	r3, [sp, #136]	; 0x88
1a007d4c:	930e      	str	r3, [sp, #56]	; 0x38
1a007d4e:	9b03      	ldr	r3, [sp, #12]
1a007d50:	2b47      	cmp	r3, #71	; 0x47
1a007d52:	f000 8293 	beq.w	1a00827c <_vfprintf_r+0x155c>
1a007d56:	9b03      	ldr	r3, [sp, #12]
1a007d58:	2b46      	cmp	r3, #70	; 0x46
1a007d5a:	f000 83fd 	beq.w	1a008558 <_vfprintf_r+0x1838>
1a007d5e:	9903      	ldr	r1, [sp, #12]
1a007d60:	9b0e      	ldr	r3, [sp, #56]	; 0x38
1a007d62:	2941      	cmp	r1, #65	; 0x41
1a007d64:	f103 32ff 	add.w	r2, r3, #4294967295	; 0xffffffff
1a007d68:	fa5f f388 	uxtb.w	r3, r8
1a007d6c:	bf03      	ittte	eq
1a007d6e:	330f      	addeq	r3, #15
1a007d70:	b2db      	uxtbeq	r3, r3
1a007d72:	2101      	moveq	r1, #1
1a007d74:	2100      	movne	r1, #0
1a007d76:	2a00      	cmp	r2, #0
1a007d78:	f88d 3090 	strb.w	r3, [sp, #144]	; 0x90
1a007d7c:	bfb8      	it	lt
1a007d7e:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
1a007d80:	9222      	str	r2, [sp, #136]	; 0x88
1a007d82:	bfb6      	itet	lt
1a007d84:	f1c3 0201 	rsblt	r2, r3, #1
1a007d88:	232b      	movge	r3, #43	; 0x2b
1a007d8a:	232d      	movlt	r3, #45	; 0x2d
1a007d8c:	2a09      	cmp	r2, #9
1a007d8e:	f88d 3091 	strb.w	r3, [sp, #145]	; 0x91
1a007d92:	f340 84c1 	ble.w	1a008718 <_vfprintf_r+0x19f8>
1a007d96:	f10d 049f 	add.w	r4, sp, #159	; 0x9f
1a007d9a:	4620      	mov	r0, r4
1a007d9c:	4dbe      	ldr	r5, [pc, #760]	; (1a008098 <_vfprintf_r+0x1378>)
1a007d9e:	e001      	b.n	1a007da4 <_vfprintf_r+0x1084>
1a007da0:	4608      	mov	r0, r1
1a007da2:	461a      	mov	r2, r3
1a007da4:	fb85 3102 	smull	r3, r1, r5, r2
1a007da8:	17d3      	asrs	r3, r2, #31
1a007daa:	ebc3 03a1 	rsb	r3, r3, r1, asr #2
1a007dae:	eb03 0183 	add.w	r1, r3, r3, lsl #2
1a007db2:	eba2 0141 	sub.w	r1, r2, r1, lsl #1
1a007db6:	3130      	adds	r1, #48	; 0x30
1a007db8:	2a63      	cmp	r2, #99	; 0x63
1a007dba:	f800 1c01 	strb.w	r1, [r0, #-1]
1a007dbe:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
1a007dc2:	dced      	bgt.n	1a007da0 <_vfprintf_r+0x1080>
1a007dc4:	3330      	adds	r3, #48	; 0x30
1a007dc6:	1e82      	subs	r2, r0, #2
1a007dc8:	b2db      	uxtb	r3, r3
1a007dca:	4294      	cmp	r4, r2
1a007dcc:	f801 3c01 	strb.w	r3, [r1, #-1]
1a007dd0:	f240 8544 	bls.w	1a00885c <_vfprintf_r+0x1b3c>
1a007dd4:	f10d 0292 	add.w	r2, sp, #146	; 0x92
1a007dd8:	e001      	b.n	1a007dde <_vfprintf_r+0x10be>
1a007dda:	f811 3b01 	ldrb.w	r3, [r1], #1
1a007dde:	f802 3b01 	strb.w	r3, [r2], #1
1a007de2:	42a1      	cmp	r1, r4
1a007de4:	d1f9      	bne.n	1a007dda <_vfprintf_r+0x10ba>
1a007de6:	f10d 03a1 	add.w	r3, sp, #161	; 0xa1
1a007dea:	f10d 0292 	add.w	r2, sp, #146	; 0x92
1a007dee:	1a1b      	subs	r3, r3, r0
1a007df0:	4413      	add	r3, r2
1a007df2:	aa24      	add	r2, sp, #144	; 0x90
1a007df4:	1a9b      	subs	r3, r3, r2
1a007df6:	9316      	str	r3, [sp, #88]	; 0x58
1a007df8:	9b12      	ldr	r3, [sp, #72]	; 0x48
1a007dfa:	9a16      	ldr	r2, [sp, #88]	; 0x58
1a007dfc:	2b01      	cmp	r3, #1
1a007dfe:	eb03 0602 	add.w	r6, r3, r2
1a007e02:	f340 84ee 	ble.w	1a0087e2 <_vfprintf_r+0x1ac2>
1a007e06:	9b13      	ldr	r3, [sp, #76]	; 0x4c
1a007e08:	441e      	add	r6, r3
1a007e0a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
1a007e0c:	2200      	movs	r2, #0
1a007e0e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
1a007e12:	f443 7380 	orr.w	r3, r3, #256	; 0x100
1a007e16:	e9cd 220e 	strd	r2, r2, [sp, #56]	; 0x38
1a007e1a:	9302      	str	r3, [sp, #8]
1a007e1c:	ea26 73e6 	bic.w	r3, r6, r6, asr #31
1a007e20:	920c      	str	r2, [sp, #48]	; 0x30
1a007e22:	9303      	str	r3, [sp, #12]
1a007e24:	9b1e      	ldr	r3, [sp, #120]	; 0x78
1a007e26:	2b00      	cmp	r3, #0
1a007e28:	f040 824f 	bne.w	1a0082ca <_vfprintf_r+0x15aa>
1a007e2c:	4699      	mov	r9, r3
1a007e2e:	f89d 2083 	ldrb.w	r2, [sp, #131]	; 0x83
1a007e32:	f7ff b94a 	b.w	1a0070ca <_vfprintf_r+0x3aa>
1a007e36:	9b08      	ldr	r3, [sp, #32]
1a007e38:	1d1a      	adds	r2, r3, #4
1a007e3a:	9b02      	ldr	r3, [sp, #8]
1a007e3c:	06d9      	lsls	r1, r3, #27
1a007e3e:	f100 8504 	bmi.w	1a00884a <_vfprintf_r+0x1b2a>
1a007e42:	9e02      	ldr	r6, [sp, #8]
1a007e44:	4633      	mov	r3, r6
1a007e46:	065b      	lsls	r3, r3, #25
1a007e48:	f140 80ec 	bpl.w	1a008024 <_vfprintf_r+0x1304>
1a007e4c:	9b08      	ldr	r3, [sp, #32]
1a007e4e:	9208      	str	r2, [sp, #32]
1a007e50:	f9b3 4000 	ldrsh.w	r4, [r3]
1a007e54:	17e5      	asrs	r5, r4, #31
1a007e56:	4622      	mov	r2, r4
1a007e58:	462b      	mov	r3, r5
1a007e5a:	f7ff b8eb 	b.w	1a007034 <_vfprintf_r+0x314>
1a007e5e:	4252      	negs	r2, r2
1a007e60:	9206      	str	r2, [sp, #24]
1a007e62:	9308      	str	r3, [sp, #32]
1a007e64:	f7ff b8af 	b.w	1a006fc6 <_vfprintf_r+0x2a6>
1a007e68:	aa28      	add	r2, sp, #160	; 0xa0
1a007e6a:	9907      	ldr	r1, [sp, #28]
1a007e6c:	9805      	ldr	r0, [sp, #20]
1a007e6e:	f002 fdfb 	bl	1a00aa68 <__sprint_r>
1a007e72:	2800      	cmp	r0, #0
1a007e74:	f47f acec 	bne.w	1a007850 <_vfprintf_r+0xb30>
1a007e78:	9c2a      	ldr	r4, [sp, #168]	; 0xa8
1a007e7a:	f10d 0bac 	add.w	fp, sp, #172	; 0xac
1a007e7e:	f7ff b9cd 	b.w	1a00721c <_vfprintf_r+0x4fc>
1a007e82:	4622      	mov	r2, r4
1a007e84:	461c      	mov	r4, r3
1a007e86:	4613      	mov	r3, r2
1a007e88:	462a      	mov	r2, r5
1a007e8a:	3201      	adds	r2, #1
1a007e8c:	920a      	str	r2, [sp, #40]	; 0x28
1a007e8e:	f106 0208 	add.w	r2, r6, #8
1a007e92:	e9c6 3800 	strd	r3, r8, [r6]
1a007e96:	9b0a      	ldr	r3, [sp, #40]	; 0x28
1a007e98:	9329      	str	r3, [sp, #164]	; 0xa4
1a007e9a:	4444      	add	r4, r8
1a007e9c:	2b07      	cmp	r3, #7
1a007e9e:	942a      	str	r4, [sp, #168]	; 0xa8
1a007ea0:	f340 8100 	ble.w	1a0080a4 <_vfprintf_r+0x1384>
1a007ea4:	aa28      	add	r2, sp, #160	; 0xa0
1a007ea6:	9907      	ldr	r1, [sp, #28]
1a007ea8:	9805      	ldr	r0, [sp, #20]
1a007eaa:	f002 fddd 	bl	1a00aa68 <__sprint_r>
1a007eae:	2800      	cmp	r0, #0
1a007eb0:	f47f acce 	bne.w	1a007850 <_vfprintf_r+0xb30>
1a007eb4:	e9dd 3429 	ldrd	r3, r4, [sp, #164]	; 0xa4
1a007eb8:	3301      	adds	r3, #1
1a007eba:	930a      	str	r3, [sp, #40]	; 0x28
1a007ebc:	f10d 0bb4 	add.w	fp, sp, #180	; 0xb4
1a007ec0:	ae2b      	add	r6, sp, #172	; 0xac
1a007ec2:	e537      	b.n	1a007934 <_vfprintf_r+0xc14>
1a007ec4:	aa28      	add	r2, sp, #160	; 0xa0
1a007ec6:	9907      	ldr	r1, [sp, #28]
1a007ec8:	9805      	ldr	r0, [sp, #20]
1a007eca:	f002 fdcd 	bl	1a00aa68 <__sprint_r>
1a007ece:	2800      	cmp	r0, #0
1a007ed0:	f47f acbe 	bne.w	1a007850 <_vfprintf_r+0xb30>
1a007ed4:	9c2a      	ldr	r4, [sp, #168]	; 0xa8
1a007ed6:	f10d 0bac 	add.w	fp, sp, #172	; 0xac
1a007eda:	e409      	b.n	1a0076f0 <_vfprintf_r+0x9d0>
1a007edc:	f043 0320 	orr.w	r3, r3, #32
1a007ee0:	f89a 8001 	ldrb.w	r8, [sl, #1]
1a007ee4:	9302      	str	r3, [sp, #8]
1a007ee6:	f10a 0a01 	add.w	sl, sl, #1
1a007eea:	f7fe bf9d 	b.w	1a006e28 <_vfprintf_r+0x108>
1a007eee:	f443 7300 	orr.w	r3, r3, #512	; 0x200
1a007ef2:	f89a 8001 	ldrb.w	r8, [sl, #1]
1a007ef6:	9302      	str	r3, [sp, #8]
1a007ef8:	f10a 0a01 	add.w	sl, sl, #1
1a007efc:	f7fe bf94 	b.w	1a006e28 <_vfprintf_r+0x108>
1a007f00:	464e      	mov	r6, r9
1a007f02:	2e06      	cmp	r6, #6
1a007f04:	bf28      	it	cs
1a007f06:	2606      	movcs	r6, #6
1a007f08:	46b9      	mov	r9, r7
1a007f0a:	970c      	str	r7, [sp, #48]	; 0x30
1a007f0c:	e9cd 770e 	strd	r7, r7, [sp, #56]	; 0x38
1a007f10:	9709      	str	r7, [sp, #36]	; 0x24
1a007f12:	463a      	mov	r2, r7
1a007f14:	9603      	str	r6, [sp, #12]
1a007f16:	9408      	str	r4, [sp, #32]
1a007f18:	4f60      	ldr	r7, [pc, #384]	; (1a00809c <_vfprintf_r+0x137c>)
1a007f1a:	f7ff b8d6 	b.w	1a0070ca <_vfprintf_r+0x3aa>
1a007f1e:	463c      	mov	r4, r7
1a007f20:	f7fe bf75 	b.w	1a006e0e <_vfprintf_r+0xee>
1a007f24:	aa28      	add	r2, sp, #160	; 0xa0
1a007f26:	9907      	ldr	r1, [sp, #28]
1a007f28:	9805      	ldr	r0, [sp, #20]
1a007f2a:	f002 fd9d 	bl	1a00aa68 <__sprint_r>
1a007f2e:	2800      	cmp	r0, #0
1a007f30:	f47f ac8e 	bne.w	1a007850 <_vfprintf_r+0xb30>
1a007f34:	e9dd 5429 	ldrd	r5, r4, [sp, #164]	; 0xa4
1a007f38:	ae2b      	add	r6, sp, #172	; 0xac
1a007f3a:	e4c9      	b.n	1a0078d0 <_vfprintf_r+0xbb0>
1a007f3c:	aa28      	add	r2, sp, #160	; 0xa0
1a007f3e:	9907      	ldr	r1, [sp, #28]
1a007f40:	9805      	ldr	r0, [sp, #20]
1a007f42:	f002 fd91 	bl	1a00aa68 <__sprint_r>
1a007f46:	2800      	cmp	r0, #0
1a007f48:	f47f ac82 	bne.w	1a007850 <_vfprintf_r+0xb30>
1a007f4c:	e9dd 3429 	ldrd	r3, r4, [sp, #164]	; 0xa4
1a007f50:	ae2b      	add	r6, sp, #172	; 0xac
1a007f52:	930b      	str	r3, [sp, #44]	; 0x2c
1a007f54:	e4c9      	b.n	1a0078ea <_vfprintf_r+0xbca>
1a007f56:	f8d9 0058 	ldr.w	r0, [r9, #88]	; 0x58
1a007f5a:	f7fe fa11 	bl	1a006380 <__retarget_lock_release_recursive>
1a007f5e:	f8b9 300c 	ldrh.w	r3, [r9, #12]
1a007f62:	e51d      	b.n	1a0079a0 <_vfprintf_r+0xc80>
1a007f64:	aa28      	add	r2, sp, #160	; 0xa0
1a007f66:	9907      	ldr	r1, [sp, #28]
1a007f68:	9805      	ldr	r0, [sp, #20]
1a007f6a:	f002 fd7d 	bl	1a00aa68 <__sprint_r>
1a007f6e:	2800      	cmp	r0, #0
1a007f70:	f47f ac6e 	bne.w	1a007850 <_vfprintf_r+0xb30>
1a007f74:	f89d 2083 	ldrb.w	r2, [sp, #131]	; 0x83
1a007f78:	9c2a      	ldr	r4, [sp, #168]	; 0xa8
1a007f7a:	f10d 0bac 	add.w	fp, sp, #172	; 0xac
1a007f7e:	f7ff b929 	b.w	1a0071d4 <_vfprintf_r+0x4b4>
1a007f82:	46c1      	mov	r9, r8
1a007f84:	e4fe      	b.n	1a007984 <_vfprintf_r+0xc64>
1a007f86:	aa28      	add	r2, sp, #160	; 0xa0
1a007f88:	9907      	ldr	r1, [sp, #28]
1a007f8a:	9805      	ldr	r0, [sp, #20]
1a007f8c:	f002 fd6c 	bl	1a00aa68 <__sprint_r>
1a007f90:	2800      	cmp	r0, #0
1a007f92:	f47f ac5d 	bne.w	1a007850 <_vfprintf_r+0xb30>
1a007f96:	f10d 0bac 	add.w	fp, sp, #172	; 0xac
1a007f9a:	f7ff bb93 	b.w	1a0076c4 <_vfprintf_r+0x9a4>
1a007f9e:	464b      	mov	r3, r9
1a007fa0:	3201      	adds	r2, #1
1a007fa2:	442c      	add	r4, r5
1a007fa4:	2a07      	cmp	r2, #7
1a007fa6:	e9cd 2429 	strd	r2, r4, [sp, #164]	; 0xa4
1a007faa:	e9cb 3500 	strd	r3, r5, [fp]
1a007fae:	f77f a94a 	ble.w	1a007246 <_vfprintf_r+0x526>
1a007fb2:	e46d      	b.n	1a007890 <_vfprintf_r+0xb70>
1a007fb4:	9a08      	ldr	r2, [sp, #32]
1a007fb6:	6812      	ldr	r2, [r2, #0]
1a007fb8:	9308      	str	r3, [sp, #32]
1a007fba:	9b04      	ldr	r3, [sp, #16]
1a007fbc:	6013      	str	r3, [r2, #0]
1a007fbe:	4657      	mov	r7, sl
1a007fc0:	f7ff b962 	b.w	1a007288 <_vfprintf_r+0x568>
1a007fc4:	2d10      	cmp	r5, #16
1a007fc6:	9a29      	ldr	r2, [sp, #164]	; 0xa4
1a007fc8:	4b35      	ldr	r3, [pc, #212]	; (1a0080a0 <_vfprintf_r+0x1380>)
1a007fca:	dd50      	ble.n	1a00806e <_vfprintf_r+0x134e>
1a007fcc:	4619      	mov	r1, r3
1a007fce:	2610      	movs	r6, #16
1a007fd0:	4623      	mov	r3, r4
1a007fd2:	f8dd 8014 	ldr.w	r8, [sp, #20]
1a007fd6:	f8dd 901c 	ldr.w	r9, [sp, #28]
1a007fda:	460c      	mov	r4, r1
1a007fdc:	e004      	b.n	1a007fe8 <_vfprintf_r+0x12c8>
1a007fde:	f10b 0b08 	add.w	fp, fp, #8
1a007fe2:	3d10      	subs	r5, #16
1a007fe4:	2d10      	cmp	r5, #16
1a007fe6:	dd3f      	ble.n	1a008068 <_vfprintf_r+0x1348>
1a007fe8:	3201      	adds	r2, #1
1a007fea:	3310      	adds	r3, #16
1a007fec:	2a07      	cmp	r2, #7
1a007fee:	e9cd 2329 	strd	r2, r3, [sp, #164]	; 0xa4
1a007ff2:	e9cb 4600 	strd	r4, r6, [fp]
1a007ff6:	ddf2      	ble.n	1a007fde <_vfprintf_r+0x12be>
1a007ff8:	aa28      	add	r2, sp, #160	; 0xa0
1a007ffa:	4649      	mov	r1, r9
1a007ffc:	4640      	mov	r0, r8
1a007ffe:	f002 fd33 	bl	1a00aa68 <__sprint_r>
1a008002:	2800      	cmp	r0, #0
1a008004:	f47f acbe 	bne.w	1a007984 <_vfprintf_r+0xc64>
1a008008:	e9dd 2329 	ldrd	r2, r3, [sp, #164]	; 0xa4
1a00800c:	f10d 0bac 	add.w	fp, sp, #172	; 0xac
1a008010:	e7e7      	b.n	1a007fe2 <_vfprintf_r+0x12c2>
1a008012:	4638      	mov	r0, r7
1a008014:	f7fe fe14 	bl	1a006c40 <strlen>
1a008018:	46a9      	mov	r9, r5
1a00801a:	4606      	mov	r6, r0
1a00801c:	f7ff b849 	b.w	1a0070b2 <_vfprintf_r+0x392>
1a008020:	46d9      	mov	r9, fp
1a008022:	e4af      	b.n	1a007984 <_vfprintf_r+0xc64>
1a008024:	9e02      	ldr	r6, [sp, #8]
1a008026:	9b08      	ldr	r3, [sp, #32]
1a008028:	f416 7f00 	tst.w	r6, #512	; 0x200
1a00802c:	d051      	beq.n	1a0080d2 <_vfprintf_r+0x13b2>
1a00802e:	f993 4000 	ldrsb.w	r4, [r3]
1a008032:	9208      	str	r2, [sp, #32]
1a008034:	17e5      	asrs	r5, r4, #31
1a008036:	4622      	mov	r2, r4
1a008038:	462b      	mov	r3, r5
1a00803a:	f7fe bffb 	b.w	1a007034 <_vfprintf_r+0x314>
1a00803e:	9e02      	ldr	r6, [sp, #8]
1a008040:	05b7      	lsls	r7, r6, #22
1a008042:	bf47      	ittee	mi
1a008044:	9208      	strmi	r2, [sp, #32]
1a008046:	b2e4      	uxtbmi	r4, r4
1a008048:	9e02      	ldrpl	r6, [sp, #8]
1a00804a:	9208      	strpl	r2, [sp, #32]
1a00804c:	2500      	movs	r5, #0
1a00804e:	f7ff baae 	b.w	1a0075ae <_vfprintf_r+0x88e>
1a008052:	9e02      	ldr	r6, [sp, #8]
1a008054:	9208      	str	r2, [sp, #32]
1a008056:	4633      	mov	r3, r6
1a008058:	059b      	lsls	r3, r3, #22
1a00805a:	bf4c      	ite	mi
1a00805c:	b2e4      	uxtbmi	r4, r4
1a00805e:	9e02      	ldrpl	r6, [sp, #8]
1a008060:	2500      	movs	r5, #0
1a008062:	2301      	movs	r3, #1
1a008064:	f7ff b987 	b.w	1a007376 <_vfprintf_r+0x656>
1a008068:	4621      	mov	r1, r4
1a00806a:	461c      	mov	r4, r3
1a00806c:	460b      	mov	r3, r1
1a00806e:	3201      	adds	r2, #1
1a008070:	442c      	add	r4, r5
1a008072:	2a07      	cmp	r2, #7
1a008074:	e9cd 2429 	strd	r2, r4, [sp, #164]	; 0xa4
1a008078:	e9cb 3500 	strd	r3, r5, [fp]
1a00807c:	f300 80ef 	bgt.w	1a00825e <_vfprintf_r+0x153e>
1a008080:	f10b 0b08 	add.w	fp, fp, #8
1a008084:	e50e      	b.n	1a007aa4 <_vfprintf_r+0xd84>
1a008086:	9805      	ldr	r0, [sp, #20]
1a008088:	aa28      	add	r2, sp, #160	; 0xa0
1a00808a:	4649      	mov	r1, r9
1a00808c:	f002 fcec 	bl	1a00aa68 <__sprint_r>
1a008090:	2800      	cmp	r0, #0
1a008092:	f43f a903 	beq.w	1a00729c <_vfprintf_r+0x57c>
1a008096:	e47a      	b.n	1a00798e <_vfprintf_r+0xc6e>
1a008098:	66666667 	.word	0x66666667
1a00809c:	1a00b314 	.word	0x1a00b314
1a0080a0:	1a00b330 	.word	0x1a00b330
1a0080a4:	3301      	adds	r3, #1
1a0080a6:	930a      	str	r3, [sp, #40]	; 0x28
1a0080a8:	f102 0b08 	add.w	fp, r2, #8
1a0080ac:	4616      	mov	r6, r2
1a0080ae:	e441      	b.n	1a007934 <_vfprintf_r+0xc14>
1a0080b0:	9a12      	ldr	r2, [sp, #72]	; 0x48
1a0080b2:	18bd      	adds	r5, r7, r2
1a0080b4:	eba5 0509 	sub.w	r5, r5, r9
1a0080b8:	1ad3      	subs	r3, r2, r3
1a0080ba:	429d      	cmp	r5, r3
1a0080bc:	bfa8      	it	ge
1a0080be:	461d      	movge	r5, r3
1a0080c0:	e527      	b.n	1a007b12 <_vfprintf_r+0xdf2>
1a0080c2:	9a08      	ldr	r2, [sp, #32]
1a0080c4:	9308      	str	r3, [sp, #32]
1a0080c6:	6812      	ldr	r2, [r2, #0]
1a0080c8:	9b04      	ldr	r3, [sp, #16]
1a0080ca:	8013      	strh	r3, [r2, #0]
1a0080cc:	4657      	mov	r7, sl
1a0080ce:	f7ff b8db 	b.w	1a007288 <_vfprintf_r+0x568>
1a0080d2:	681c      	ldr	r4, [r3, #0]
1a0080d4:	9208      	str	r2, [sp, #32]
1a0080d6:	17e5      	asrs	r5, r4, #31
1a0080d8:	9e02      	ldr	r6, [sp, #8]
1a0080da:	4622      	mov	r2, r4
1a0080dc:	462b      	mov	r3, r5
1a0080de:	f7fe bfa9 	b.w	1a007034 <_vfprintf_r+0x314>
1a0080e2:	b2e4      	uxtb	r4, r4
1a0080e4:	2500      	movs	r5, #0
1a0080e6:	f7fe bf59 	b.w	1a006f9c <_vfprintf_r+0x27c>
1a0080ea:	2330      	movs	r3, #48	; 0x30
1a0080ec:	f88d 3084 	strb.w	r3, [sp, #132]	; 0x84
1a0080f0:	2358      	movs	r3, #88	; 0x58
1a0080f2:	f88d 3085 	strb.w	r3, [sp, #133]	; 0x85
1a0080f6:	9b02      	ldr	r3, [sp, #8]
1a0080f8:	f1b9 0f63 	cmp.w	r9, #99	; 0x63
1a0080fc:	f043 0302 	orr.w	r3, r3, #2
1a008100:	930a      	str	r3, [sp, #40]	; 0x28
1a008102:	f300 82b7 	bgt.w	1a008674 <_vfprintf_r+0x1954>
1a008106:	2300      	movs	r3, #0
1a008108:	9309      	str	r3, [sp, #36]	; 0x24
1a00810a:	af3b      	add	r7, sp, #236	; 0xec
1a00810c:	9a02      	ldr	r2, [sp, #8]
1a00810e:	9b11      	ldr	r3, [sp, #68]	; 0x44
1a008110:	f442 7281 	orr.w	r2, r2, #258	; 0x102
1a008114:	9202      	str	r2, [sp, #8]
1a008116:	2b00      	cmp	r3, #0
1a008118:	f028 0220 	bic.w	r2, r8, #32
1a00811c:	9203      	str	r2, [sp, #12]
1a00811e:	f2c0 8188 	blt.w	1a008432 <_vfprintf_r+0x1712>
1a008122:	ed9d 7b10 	vldr	d7, [sp, #64]	; 0x40
1a008126:	ed8d 7b1c 	vstr	d7, [sp, #112]	; 0x70
1a00812a:	2300      	movs	r3, #0
1a00812c:	931e      	str	r3, [sp, #120]	; 0x78
1a00812e:	f1b8 0f61 	cmp.w	r8, #97	; 0x61
1a008132:	f000 82d9 	beq.w	1a0086e8 <_vfprintf_r+0x19c8>
1a008136:	f1b8 0f41 	cmp.w	r8, #65	; 0x41
1a00813a:	f47f ade7 	bne.w	1a007d0c <_vfprintf_r+0xfec>
1a00813e:	a822      	add	r0, sp, #136	; 0x88
1a008140:	ed9d 0b1c 	vldr	d0, [sp, #112]	; 0x70
1a008144:	f002 fbe4 	bl	1a00a910 <frexp>
1a008148:	2200      	movs	r2, #0
1a00814a:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
1a00814e:	ec51 0b10 	vmov	r0, r1, d0
1a008152:	f7fd f9d7 	bl	1a005504 <__aeabi_dmul>
1a008156:	2200      	movs	r2, #0
1a008158:	2300      	movs	r3, #0
1a00815a:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
1a00815e:	f7fd fc39 	bl	1a0059d4 <__aeabi_dcmpeq>
1a008162:	b108      	cbz	r0, 1a008168 <_vfprintf_r+0x1448>
1a008164:	2301      	movs	r3, #1
1a008166:	9322      	str	r3, [sp, #136]	; 0x88
1a008168:	4bb6      	ldr	r3, [pc, #728]	; (1a008444 <_vfprintf_r+0x1724>)
1a00816a:	930b      	str	r3, [sp, #44]	; 0x2c
1a00816c:	e9cd 8a0e 	strd	r8, sl, [sp, #56]	; 0x38
1a008170:	f109 35ff 	add.w	r5, r9, #4294967295	; 0xffffffff
1a008174:	f8cd 9048 	str.w	r9, [sp, #72]	; 0x48
1a008178:	f8cd b07c 	str.w	fp, [sp, #124]	; 0x7c
1a00817c:	e9dd 890c 	ldrd	r8, r9, [sp, #48]	; 0x30
1a008180:	f8dd b02c 	ldr.w	fp, [sp, #44]	; 0x2c
1a008184:	970c      	str	r7, [sp, #48]	; 0x30
1a008186:	46ba      	mov	sl, r7
1a008188:	e003      	b.n	1a008192 <_vfprintf_r+0x1472>
1a00818a:	f7fd fc23 	bl	1a0059d4 <__aeabi_dcmpeq>
1a00818e:	bb20      	cbnz	r0, 1a0081da <_vfprintf_r+0x14ba>
1a008190:	46b2      	mov	sl, r6
1a008192:	2200      	movs	r2, #0
1a008194:	4bac      	ldr	r3, [pc, #688]	; (1a008448 <_vfprintf_r+0x1728>)
1a008196:	4640      	mov	r0, r8
1a008198:	4649      	mov	r1, r9
1a00819a:	f7fd f9b3 	bl	1a005504 <__aeabi_dmul>
1a00819e:	4689      	mov	r9, r1
1a0081a0:	4680      	mov	r8, r0
1a0081a2:	f002 fdcf 	bl	1a00ad44 <__aeabi_d2iz>
1a0081a6:	4607      	mov	r7, r0
1a0081a8:	f7fd f942 	bl	1a005430 <__aeabi_i2d>
1a0081ac:	4602      	mov	r2, r0
1a0081ae:	460b      	mov	r3, r1
1a0081b0:	4640      	mov	r0, r8
1a0081b2:	4649      	mov	r1, r9
1a0081b4:	f7fc ffee 	bl	1a005194 <__aeabi_dsub>
1a0081b8:	4656      	mov	r6, sl
1a0081ba:	f81b 4007 	ldrb.w	r4, [fp, r7]
1a0081be:	f806 4b01 	strb.w	r4, [r6], #1
1a0081c2:	f1b5 3fff 	cmp.w	r5, #4294967295	; 0xffffffff
1a0081c6:	462c      	mov	r4, r5
1a0081c8:	4680      	mov	r8, r0
1a0081ca:	4689      	mov	r9, r1
1a0081cc:	f04f 0200 	mov.w	r2, #0
1a0081d0:	f04f 0300 	mov.w	r3, #0
1a0081d4:	f105 35ff 	add.w	r5, r5, #4294967295	; 0xffffffff
1a0081d8:	d1d7      	bne.n	1a00818a <_vfprintf_r+0x146a>
1a0081da:	4640      	mov	r0, r8
1a0081dc:	4649      	mov	r1, r9
1a0081de:	2200      	movs	r2, #0
1a0081e0:	4b9a      	ldr	r3, [pc, #616]	; (1a00844c <_vfprintf_r+0x172c>)
1a0081e2:	f8dd 8038 	ldr.w	r8, [sp, #56]	; 0x38
1a0081e6:	f8dd b07c 	ldr.w	fp, [sp, #124]	; 0x7c
1a0081ea:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
1a0081ee:	463d      	mov	r5, r7
1a0081f0:	f8dd 9048 	ldr.w	r9, [sp, #72]	; 0x48
1a0081f4:	9f0c      	ldr	r7, [sp, #48]	; 0x30
1a0081f6:	f8dd a03c 	ldr.w	sl, [sp, #60]	; 0x3c
1a0081fa:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
1a0081fe:	f7fd fc11 	bl	1a005a24 <__aeabi_dcmpgt>
1a008202:	2800      	cmp	r0, #0
1a008204:	f040 8214 	bne.w	1a008630 <_vfprintf_r+0x1910>
1a008208:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
1a00820c:	2200      	movs	r2, #0
1a00820e:	4b8f      	ldr	r3, [pc, #572]	; (1a00844c <_vfprintf_r+0x172c>)
1a008210:	f7fd fbe0 	bl	1a0059d4 <__aeabi_dcmpeq>
1a008214:	b118      	cbz	r0, 1a00821e <_vfprintf_r+0x14fe>
1a008216:	462b      	mov	r3, r5
1a008218:	07db      	lsls	r3, r3, #31
1a00821a:	f100 8209 	bmi.w	1a008630 <_vfprintf_r+0x1910>
1a00821e:	2c00      	cmp	r4, #0
1a008220:	f6ff ad91 	blt.w	1a007d46 <_vfprintf_r+0x1026>
1a008224:	1c63      	adds	r3, r4, #1
1a008226:	4433      	add	r3, r6
1a008228:	2230      	movs	r2, #48	; 0x30
1a00822a:	f806 2b01 	strb.w	r2, [r6], #1
1a00822e:	429e      	cmp	r6, r3
1a008230:	d1fb      	bne.n	1a00822a <_vfprintf_r+0x150a>
1a008232:	e588      	b.n	1a007d46 <_vfprintf_r+0x1026>
1a008234:	aa28      	add	r2, sp, #160	; 0xa0
1a008236:	9907      	ldr	r1, [sp, #28]
1a008238:	9805      	ldr	r0, [sp, #20]
1a00823a:	f002 fc15 	bl	1a00aa68 <__sprint_r>
1a00823e:	2800      	cmp	r0, #0
1a008240:	f47f ab06 	bne.w	1a007850 <_vfprintf_r+0xb30>
1a008244:	9b22      	ldr	r3, [sp, #136]	; 0x88
1a008246:	e9dd 2429 	ldrd	r2, r4, [sp, #164]	; 0xa4
1a00824a:	f10d 0bac 	add.w	fp, sp, #172	; 0xac
1a00824e:	f7ff bb12 	b.w	1a007876 <_vfprintf_r+0xb56>
1a008252:	f8d9 0058 	ldr.w	r0, [r9, #88]	; 0x58
1a008256:	f7fe f893 	bl	1a006380 <__retarget_lock_release_recursive>
1a00825a:	f7fe be6a 	b.w	1a006f32 <_vfprintf_r+0x212>
1a00825e:	aa28      	add	r2, sp, #160	; 0xa0
1a008260:	9907      	ldr	r1, [sp, #28]
1a008262:	9805      	ldr	r0, [sp, #20]
1a008264:	f002 fc00 	bl	1a00aa68 <__sprint_r>
1a008268:	2800      	cmp	r0, #0
1a00826a:	f47f aaf1 	bne.w	1a007850 <_vfprintf_r+0xb30>
1a00826e:	9c2a      	ldr	r4, [sp, #168]	; 0xa8
1a008270:	f10d 0bac 	add.w	fp, sp, #172	; 0xac
1a008274:	e416      	b.n	1a007aa4 <_vfprintf_r+0xd84>
1a008276:	9e02      	ldr	r6, [sp, #8]
1a008278:	f7ff b9ad 	b.w	1a0075d6 <_vfprintf_r+0x8b6>
1a00827c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
1a00827e:	1cde      	adds	r6, r3, #3
1a008280:	db01      	blt.n	1a008286 <_vfprintf_r+0x1566>
1a008282:	4599      	cmp	r9, r3
1a008284:	da05      	bge.n	1a008292 <_vfprintf_r+0x1572>
1a008286:	f1a8 0802 	sub.w	r8, r8, #2
1a00828a:	f028 0320 	bic.w	r3, r8, #32
1a00828e:	9303      	str	r3, [sp, #12]
1a008290:	e565      	b.n	1a007d5e <_vfprintf_r+0x103e>
1a008292:	9b12      	ldr	r3, [sp, #72]	; 0x48
1a008294:	4619      	mov	r1, r3
1a008296:	9b0e      	ldr	r3, [sp, #56]	; 0x38
1a008298:	4299      	cmp	r1, r3
1a00829a:	f300 8174 	bgt.w	1a008586 <_vfprintf_r+0x1866>
1a00829e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
1a0082a0:	07d4      	lsls	r4, r2, #31
1a0082a2:	f140 8254 	bpl.w	1a00874e <_vfprintf_r+0x1a2e>
1a0082a6:	9a13      	ldr	r2, [sp, #76]	; 0x4c
1a0082a8:	189e      	adds	r6, r3, r2
1a0082aa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
1a0082ac:	0558      	lsls	r0, r3, #21
1a0082ae:	d503      	bpl.n	1a0082b8 <_vfprintf_r+0x1598>
1a0082b0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
1a0082b2:	2b00      	cmp	r3, #0
1a0082b4:	f300 824d 	bgt.w	1a008752 <_vfprintf_r+0x1a32>
1a0082b8:	ea26 73e6 	bic.w	r3, r6, r6, asr #31
1a0082bc:	9303      	str	r3, [sp, #12]
1a0082be:	f04f 0867 	mov.w	r8, #103	; 0x67
1a0082c2:	2300      	movs	r3, #0
1a0082c4:	930c      	str	r3, [sp, #48]	; 0x30
1a0082c6:	930f      	str	r3, [sp, #60]	; 0x3c
1a0082c8:	e5ac      	b.n	1a007e24 <_vfprintf_r+0x1104>
1a0082ca:	222d      	movs	r2, #45	; 0x2d
1a0082cc:	f88d 2083 	strb.w	r2, [sp, #131]	; 0x83
1a0082d0:	f04f 0900 	mov.w	r9, #0
1a0082d4:	f7fe befb 	b.w	1a0070ce <_vfprintf_r+0x3ae>
1a0082d8:	9b12      	ldr	r3, [sp, #72]	; 0x48
1a0082da:	f8cd a02c 	str.w	sl, [sp, #44]	; 0x2c
1a0082de:	18fb      	adds	r3, r7, r3
1a0082e0:	930a      	str	r3, [sp, #40]	; 0x28
1a0082e2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
1a0082e4:	970e      	str	r7, [sp, #56]	; 0x38
1a0082e6:	465a      	mov	r2, fp
1a0082e8:	464f      	mov	r7, r9
1a0082ea:	4e59      	ldr	r6, [pc, #356]	; (1a008450 <_vfprintf_r+0x1730>)
1a0082ec:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
1a0082f0:	f8dd a014 	ldr.w	sl, [sp, #20]
1a0082f4:	f8dd b01c 	ldr.w	fp, [sp, #28]
1a0082f8:	f8dd 9064 	ldr.w	r9, [sp, #100]	; 0x64
1a0082fc:	4621      	mov	r1, r4
1a0082fe:	2b00      	cmp	r3, #0
1a008300:	d032      	beq.n	1a008368 <_vfprintf_r+0x1648>
1a008302:	9b0c      	ldr	r3, [sp, #48]	; 0x30
1a008304:	2b00      	cmp	r3, #0
1a008306:	d16e      	bne.n	1a0083e6 <_vfprintf_r+0x16c6>
1a008308:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
1a00830a:	3b01      	subs	r3, #1
1a00830c:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
1a008310:	930f      	str	r3, [sp, #60]	; 0x3c
1a008312:	9b29      	ldr	r3, [sp, #164]	; 0xa4
1a008314:	9817      	ldr	r0, [sp, #92]	; 0x5c
1a008316:	6010      	str	r0, [r2, #0]
1a008318:	3301      	adds	r3, #1
1a00831a:	4449      	add	r1, r9
1a00831c:	2b07      	cmp	r3, #7
1a00831e:	912a      	str	r1, [sp, #168]	; 0xa8
1a008320:	f8c2 9004 	str.w	r9, [r2, #4]
1a008324:	9329      	str	r3, [sp, #164]	; 0xa4
1a008326:	dc62      	bgt.n	1a0083ee <_vfprintf_r+0x16ce>
1a008328:	3208      	adds	r2, #8
1a00832a:	980a      	ldr	r0, [sp, #40]	; 0x28
1a00832c:	f898 3000 	ldrb.w	r3, [r8]
1a008330:	1bc5      	subs	r5, r0, r7
1a008332:	429d      	cmp	r5, r3
1a008334:	bfa8      	it	ge
1a008336:	461d      	movge	r5, r3
1a008338:	2d00      	cmp	r5, #0
1a00833a:	dd0b      	ble.n	1a008354 <_vfprintf_r+0x1634>
1a00833c:	9b29      	ldr	r3, [sp, #164]	; 0xa4
1a00833e:	6017      	str	r7, [r2, #0]
1a008340:	3301      	adds	r3, #1
1a008342:	4429      	add	r1, r5
1a008344:	2b07      	cmp	r3, #7
1a008346:	912a      	str	r1, [sp, #168]	; 0xa8
1a008348:	6055      	str	r5, [r2, #4]
1a00834a:	9329      	str	r3, [sp, #164]	; 0xa4
1a00834c:	dc5a      	bgt.n	1a008404 <_vfprintf_r+0x16e4>
1a00834e:	f898 3000 	ldrb.w	r3, [r8]
1a008352:	3208      	adds	r2, #8
1a008354:	2d00      	cmp	r5, #0
1a008356:	bfac      	ite	ge
1a008358:	1b5d      	subge	r5, r3, r5
1a00835a:	461d      	movlt	r5, r3
1a00835c:	2d00      	cmp	r5, #0
1a00835e:	dc15      	bgt.n	1a00838c <_vfprintf_r+0x166c>
1a008360:	441f      	add	r7, r3
1a008362:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
1a008364:	2b00      	cmp	r3, #0
1a008366:	d1cc      	bne.n	1a008302 <_vfprintf_r+0x15e2>
1a008368:	9b0c      	ldr	r3, [sp, #48]	; 0x30
1a00836a:	2b00      	cmp	r3, #0
1a00836c:	d13b      	bne.n	1a0083e6 <_vfprintf_r+0x16c6>
1a00836e:	46b9      	mov	r9, r7
1a008370:	9b12      	ldr	r3, [sp, #72]	; 0x48
1a008372:	9f0e      	ldr	r7, [sp, #56]	; 0x38
1a008374:	f8dd a02c 	ldr.w	sl, [sp, #44]	; 0x2c
1a008378:	f8cd 8060 	str.w	r8, [sp, #96]	; 0x60
1a00837c:	18fb      	adds	r3, r7, r3
1a00837e:	4599      	cmp	r9, r3
1a008380:	4693      	mov	fp, r2
1a008382:	460c      	mov	r4, r1
1a008384:	bf28      	it	cs
1a008386:	4699      	movcs	r9, r3
1a008388:	f7ff bb93 	b.w	1a007ab2 <_vfprintf_r+0xd92>
1a00838c:	2d10      	cmp	r5, #16
1a00838e:	9829      	ldr	r0, [sp, #164]	; 0xa4
1a008390:	dd1c      	ble.n	1a0083cc <_vfprintf_r+0x16ac>
1a008392:	2410      	movs	r4, #16
1a008394:	e004      	b.n	1a0083a0 <_vfprintf_r+0x1680>
1a008396:	3d10      	subs	r5, #16
1a008398:	2d10      	cmp	r5, #16
1a00839a:	f102 0208 	add.w	r2, r2, #8
1a00839e:	dd15      	ble.n	1a0083cc <_vfprintf_r+0x16ac>
1a0083a0:	3001      	adds	r0, #1
1a0083a2:	3110      	adds	r1, #16
1a0083a4:	2807      	cmp	r0, #7
1a0083a6:	e9cd 0129 	strd	r0, r1, [sp, #164]	; 0xa4
1a0083aa:	e9c2 6400 	strd	r6, r4, [r2]
1a0083ae:	ddf2      	ble.n	1a008396 <_vfprintf_r+0x1676>
1a0083b0:	aa28      	add	r2, sp, #160	; 0xa0
1a0083b2:	4659      	mov	r1, fp
1a0083b4:	4650      	mov	r0, sl
1a0083b6:	f002 fb57 	bl	1a00aa68 <__sprint_r>
1a0083ba:	2800      	cmp	r0, #0
1a0083bc:	f47f ae30 	bne.w	1a008020 <_vfprintf_r+0x1300>
1a0083c0:	3d10      	subs	r5, #16
1a0083c2:	2d10      	cmp	r5, #16
1a0083c4:	e9dd 0129 	ldrd	r0, r1, [sp, #164]	; 0xa4
1a0083c8:	aa2b      	add	r2, sp, #172	; 0xac
1a0083ca:	dce9      	bgt.n	1a0083a0 <_vfprintf_r+0x1680>
1a0083cc:	3001      	adds	r0, #1
1a0083ce:	4429      	add	r1, r5
1a0083d0:	2807      	cmp	r0, #7
1a0083d2:	e9cd 0129 	strd	r0, r1, [sp, #164]	; 0xa4
1a0083d6:	e9c2 6500 	strd	r6, r5, [r2]
1a0083da:	dc49      	bgt.n	1a008470 <_vfprintf_r+0x1750>
1a0083dc:	f898 3000 	ldrb.w	r3, [r8]
1a0083e0:	3208      	adds	r2, #8
1a0083e2:	441f      	add	r7, r3
1a0083e4:	e7bd      	b.n	1a008362 <_vfprintf_r+0x1642>
1a0083e6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
1a0083e8:	3b01      	subs	r3, #1
1a0083ea:	930c      	str	r3, [sp, #48]	; 0x30
1a0083ec:	e791      	b.n	1a008312 <_vfprintf_r+0x15f2>
1a0083ee:	aa28      	add	r2, sp, #160	; 0xa0
1a0083f0:	4659      	mov	r1, fp
1a0083f2:	4650      	mov	r0, sl
1a0083f4:	f002 fb38 	bl	1a00aa68 <__sprint_r>
1a0083f8:	2800      	cmp	r0, #0
1a0083fa:	f47f ae11 	bne.w	1a008020 <_vfprintf_r+0x1300>
1a0083fe:	992a      	ldr	r1, [sp, #168]	; 0xa8
1a008400:	aa2b      	add	r2, sp, #172	; 0xac
1a008402:	e792      	b.n	1a00832a <_vfprintf_r+0x160a>
1a008404:	aa28      	add	r2, sp, #160	; 0xa0
1a008406:	4659      	mov	r1, fp
1a008408:	4650      	mov	r0, sl
1a00840a:	f002 fb2d 	bl	1a00aa68 <__sprint_r>
1a00840e:	2800      	cmp	r0, #0
1a008410:	f47f ae06 	bne.w	1a008020 <_vfprintf_r+0x1300>
1a008414:	f898 3000 	ldrb.w	r3, [r8]
1a008418:	992a      	ldr	r1, [sp, #168]	; 0xa8
1a00841a:	aa2b      	add	r2, sp, #172	; 0xac
1a00841c:	e79a      	b.n	1a008354 <_vfprintf_r+0x1634>
1a00841e:	222d      	movs	r2, #45	; 0x2d
1a008420:	f88d 2083 	strb.w	r2, [sp, #131]	; 0x83
1a008424:	f7ff b87d 	b.w	1a007522 <_vfprintf_r+0x802>
1a008428:	9b02      	ldr	r3, [sp, #8]
1a00842a:	930a      	str	r3, [sp, #40]	; 0x28
1a00842c:	2300      	movs	r3, #0
1a00842e:	9309      	str	r3, [sp, #36]	; 0x24
1a008430:	9202      	str	r2, [sp, #8]
1a008432:	e9dd 1210 	ldrd	r1, r2, [sp, #64]	; 0x40
1a008436:	f102 4300 	add.w	r3, r2, #2147483648	; 0x80000000
1a00843a:	931d      	str	r3, [sp, #116]	; 0x74
1a00843c:	232d      	movs	r3, #45	; 0x2d
1a00843e:	911c      	str	r1, [sp, #112]	; 0x70
1a008440:	931e      	str	r3, [sp, #120]	; 0x78
1a008442:	e674      	b.n	1a00812e <_vfprintf_r+0x140e>
1a008444:	1a00b2ec 	.word	0x1a00b2ec
1a008448:	40300000 	.word	0x40300000
1a00844c:	3fe00000 	.word	0x3fe00000
1a008450:	1a00b330 	.word	0x1a00b330
1a008454:	aa28      	add	r2, sp, #160	; 0xa0
1a008456:	9907      	ldr	r1, [sp, #28]
1a008458:	9805      	ldr	r0, [sp, #20]
1a00845a:	f002 fb05 	bl	1a00aa68 <__sprint_r>
1a00845e:	2800      	cmp	r0, #0
1a008460:	f47f a9f6 	bne.w	1a007850 <_vfprintf_r+0xb30>
1a008464:	9b22      	ldr	r3, [sp, #136]	; 0x88
1a008466:	9c2a      	ldr	r4, [sp, #168]	; 0xa8
1a008468:	f10d 0bac 	add.w	fp, sp, #172	; 0xac
1a00846c:	f7ff bbeb 	b.w	1a007c46 <_vfprintf_r+0xf26>
1a008470:	aa28      	add	r2, sp, #160	; 0xa0
1a008472:	4659      	mov	r1, fp
1a008474:	4650      	mov	r0, sl
1a008476:	f002 faf7 	bl	1a00aa68 <__sprint_r>
1a00847a:	2800      	cmp	r0, #0
1a00847c:	f47f add0 	bne.w	1a008020 <_vfprintf_r+0x1300>
1a008480:	f898 3000 	ldrb.w	r3, [r8]
1a008484:	992a      	ldr	r1, [sp, #168]	; 0xa8
1a008486:	aa2b      	add	r2, sp, #172	; 0xac
1a008488:	441f      	add	r7, r3
1a00848a:	e76a      	b.n	1a008362 <_vfprintf_r+0x1642>
1a00848c:	aa28      	add	r2, sp, #160	; 0xa0
1a00848e:	9907      	ldr	r1, [sp, #28]
1a008490:	9805      	ldr	r0, [sp, #20]
1a008492:	f002 fae9 	bl	1a00aa68 <__sprint_r>
1a008496:	2800      	cmp	r0, #0
1a008498:	f47f a9da 	bne.w	1a007850 <_vfprintf_r+0xb30>
1a00849c:	9c2a      	ldr	r4, [sp, #168]	; 0xa8
1a00849e:	f10d 0bac 	add.w	fp, sp, #172	; 0xac
1a0084a2:	f7ff baf7 	b.w	1a007a94 <_vfprintf_r+0xd74>
1a0084a6:	9b19      	ldr	r3, [sp, #100]	; 0x64
1a0084a8:	9917      	ldr	r1, [sp, #92]	; 0x5c
1a0084aa:	1aff      	subs	r7, r7, r3
1a0084ac:	461a      	mov	r2, r3
1a0084ae:	4638      	mov	r0, r7
1a0084b0:	f002 fa64 	bl	1a00a97c <strncpy>
1a0084b4:	f898 3001 	ldrb.w	r3, [r8, #1]
1a0084b8:	b10b      	cbz	r3, 1a0084be <_vfprintf_r+0x179e>
1a0084ba:	f108 0801 	add.w	r8, r8, #1
1a0084be:	220a      	movs	r2, #10
1a0084c0:	2300      	movs	r3, #0
1a0084c2:	4620      	mov	r0, r4
1a0084c4:	4629      	mov	r1, r5
1a0084c6:	f04f 0a00 	mov.w	sl, #0
1a0084ca:	f7fd fb05 	bl	1a005ad8 <__aeabi_uldivmod>
1a0084ce:	f7ff b8ab 	b.w	1a007628 <_vfprintf_r+0x908>
1a0084d2:	aa26      	add	r2, sp, #152	; 0x98
1a0084d4:	ab23      	add	r3, sp, #140	; 0x8c
1a0084d6:	e9cd 3200 	strd	r3, r2, [sp]
1a0084da:	2103      	movs	r1, #3
1a0084dc:	ab22      	add	r3, sp, #136	; 0x88
1a0084de:	464a      	mov	r2, r9
1a0084e0:	ed9d 0b1c 	vldr	d0, [sp, #112]	; 0x70
1a0084e4:	9805      	ldr	r0, [sp, #20]
1a0084e6:	f000 fb03 	bl	1a008af0 <_dtoa_r>
1a0084ea:	7803      	ldrb	r3, [r0, #0]
1a0084ec:	2b30      	cmp	r3, #48	; 0x30
1a0084ee:	4607      	mov	r7, r0
1a0084f0:	f000 8161 	beq.w	1a0087b6 <_vfprintf_r+0x1a96>
1a0084f4:	9b22      	ldr	r3, [sp, #136]	; 0x88
1a0084f6:	444b      	add	r3, r9
1a0084f8:	18fc      	adds	r4, r7, r3
1a0084fa:	2200      	movs	r2, #0
1a0084fc:	2300      	movs	r3, #0
1a0084fe:	e9dd 011c 	ldrd	r0, r1, [sp, #112]	; 0x70
1a008502:	f7fd fa67 	bl	1a0059d4 <__aeabi_dcmpeq>
1a008506:	b108      	cbz	r0, 1a00850c <_vfprintf_r+0x17ec>
1a008508:	4626      	mov	r6, r4
1a00850a:	e41c      	b.n	1a007d46 <_vfprintf_r+0x1026>
1a00850c:	9e26      	ldr	r6, [sp, #152]	; 0x98
1a00850e:	42a6      	cmp	r6, r4
1a008510:	f4bf ac19 	bcs.w	1a007d46 <_vfprintf_r+0x1026>
1a008514:	2230      	movs	r2, #48	; 0x30
1a008516:	1c73      	adds	r3, r6, #1
1a008518:	9326      	str	r3, [sp, #152]	; 0x98
1a00851a:	7032      	strb	r2, [r6, #0]
1a00851c:	9e26      	ldr	r6, [sp, #152]	; 0x98
1a00851e:	42b4      	cmp	r4, r6
1a008520:	d8f9      	bhi.n	1a008516 <_vfprintf_r+0x17f6>
1a008522:	e410      	b.n	1a007d46 <_vfprintf_r+0x1026>
1a008524:	aa28      	add	r2, sp, #160	; 0xa0
1a008526:	9907      	ldr	r1, [sp, #28]
1a008528:	9805      	ldr	r0, [sp, #20]
1a00852a:	f002 fa9d 	bl	1a00aa68 <__sprint_r>
1a00852e:	2800      	cmp	r0, #0
1a008530:	f47f a98e 	bne.w	1a007850 <_vfprintf_r+0xb30>
1a008534:	9b22      	ldr	r3, [sp, #136]	; 0x88
1a008536:	9c2a      	ldr	r4, [sp, #168]	; 0xa8
1a008538:	f10d 0bac 	add.w	fp, sp, #172	; 0xac
1a00853c:	f7ff bad1 	b.w	1a007ae2 <_vfprintf_r+0xdc2>
1a008540:	464e      	mov	r6, r9
1a008542:	f8cd 900c 	str.w	r9, [sp, #12]
1a008546:	9408      	str	r4, [sp, #32]
1a008548:	4681      	mov	r9, r0
1a00854a:	900c      	str	r0, [sp, #48]	; 0x30
1a00854c:	e9cd 000e 	strd	r0, r0, [sp, #56]	; 0x38
1a008550:	f89d 2083 	ldrb.w	r2, [sp, #131]	; 0x83
1a008554:	f7fe bdb9 	b.w	1a0070ca <_vfprintf_r+0x3aa>
1a008558:	9b0a      	ldr	r3, [sp, #40]	; 0x28
1a00855a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
1a00855c:	f003 0301 	and.w	r3, r3, #1
1a008560:	2a00      	cmp	r2, #0
1a008562:	ea43 0309 	orr.w	r3, r3, r9
1a008566:	f340 8142 	ble.w	1a0087ee <_vfprintf_r+0x1ace>
1a00856a:	2b00      	cmp	r3, #0
1a00856c:	f040 8119 	bne.w	1a0087a2 <_vfprintf_r+0x1a82>
1a008570:	9e0e      	ldr	r6, [sp, #56]	; 0x38
1a008572:	f04f 0866 	mov.w	r8, #102	; 0x66
1a008576:	9b0a      	ldr	r3, [sp, #40]	; 0x28
1a008578:	055a      	lsls	r2, r3, #21
1a00857a:	f100 80ec 	bmi.w	1a008756 <_vfprintf_r+0x1a36>
1a00857e:	ea26 73e6 	bic.w	r3, r6, r6, asr #31
1a008582:	9303      	str	r3, [sp, #12]
1a008584:	e69d      	b.n	1a0082c2 <_vfprintf_r+0x15a2>
1a008586:	e9dd 3212 	ldrd	r3, r2, [sp, #72]	; 0x48
1a00858a:	189e      	adds	r6, r3, r2
1a00858c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
1a00858e:	2b00      	cmp	r3, #0
1a008590:	f340 811e 	ble.w	1a0087d0 <_vfprintf_r+0x1ab0>
1a008594:	f04f 0867 	mov.w	r8, #103	; 0x67
1a008598:	e7ed      	b.n	1a008576 <_vfprintf_r+0x1856>
1a00859a:	aa28      	add	r2, sp, #160	; 0xa0
1a00859c:	9907      	ldr	r1, [sp, #28]
1a00859e:	9805      	ldr	r0, [sp, #20]
1a0085a0:	f002 fa62 	bl	1a00aa68 <__sprint_r>
1a0085a4:	2800      	cmp	r0, #0
1a0085a6:	f47f a953 	bne.w	1a007850 <_vfprintf_r+0xb30>
1a0085aa:	9b22      	ldr	r3, [sp, #136]	; 0x88
1a0085ac:	9a12      	ldr	r2, [sp, #72]	; 0x48
1a0085ae:	9c2a      	ldr	r4, [sp, #168]	; 0xa8
1a0085b0:	1ad3      	subs	r3, r2, r3
1a0085b2:	f10d 0bac 	add.w	fp, sp, #172	; 0xac
1a0085b6:	f7ff baac 	b.w	1a007b12 <_vfprintf_r+0xdf2>
1a0085ba:	eb07 0409 	add.w	r4, r7, r9
1a0085be:	e79c      	b.n	1a0084fa <_vfprintf_r+0x17da>
1a0085c0:	425d      	negs	r5, r3
1a0085c2:	3310      	adds	r3, #16
1a0085c4:	4ba7      	ldr	r3, [pc, #668]	; (1a008864 <_vfprintf_r+0x1b44>)
1a0085c6:	da63      	bge.n	1a008690 <_vfprintf_r+0x1970>
1a0085c8:	4619      	mov	r1, r3
1a0085ca:	2610      	movs	r6, #16
1a0085cc:	4623      	mov	r3, r4
1a0085ce:	f8dd 8014 	ldr.w	r8, [sp, #20]
1a0085d2:	f8dd 901c 	ldr.w	r9, [sp, #28]
1a0085d6:	460c      	mov	r4, r1
1a0085d8:	e004      	b.n	1a0085e4 <_vfprintf_r+0x18c4>
1a0085da:	f10b 0b08 	add.w	fp, fp, #8
1a0085de:	3d10      	subs	r5, #16
1a0085e0:	2d10      	cmp	r5, #16
1a0085e2:	dd52      	ble.n	1a00868a <_vfprintf_r+0x196a>
1a0085e4:	3201      	adds	r2, #1
1a0085e6:	3310      	adds	r3, #16
1a0085e8:	2a07      	cmp	r2, #7
1a0085ea:	e9cd 2329 	strd	r2, r3, [sp, #164]	; 0xa4
1a0085ee:	e9cb 4600 	strd	r4, r6, [fp]
1a0085f2:	ddf2      	ble.n	1a0085da <_vfprintf_r+0x18ba>
1a0085f4:	aa28      	add	r2, sp, #160	; 0xa0
1a0085f6:	4649      	mov	r1, r9
1a0085f8:	4640      	mov	r0, r8
1a0085fa:	f002 fa35 	bl	1a00aa68 <__sprint_r>
1a0085fe:	2800      	cmp	r0, #0
1a008600:	f47f a9c0 	bne.w	1a007984 <_vfprintf_r+0xc64>
1a008604:	e9dd 2329 	ldrd	r2, r3, [sp, #164]	; 0xa4
1a008608:	f10d 0bac 	add.w	fp, sp, #172	; 0xac
1a00860c:	e7e7      	b.n	1a0085de <_vfprintf_r+0x18be>
1a00860e:	f8d9 3064 	ldr.w	r3, [r9, #100]	; 0x64
1a008612:	07db      	lsls	r3, r3, #31
1a008614:	d407      	bmi.n	1a008626 <_vfprintf_r+0x1906>
1a008616:	f8b9 300c 	ldrh.w	r3, [r9, #12]
1a00861a:	059f      	lsls	r7, r3, #22
1a00861c:	d403      	bmi.n	1a008626 <_vfprintf_r+0x1906>
1a00861e:	f8d9 0058 	ldr.w	r0, [r9, #88]	; 0x58
1a008622:	f7fd fead 	bl	1a006380 <__retarget_lock_release_recursive>
1a008626:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
1a00862a:	9304      	str	r3, [sp, #16]
1a00862c:	f7ff b9bb 	b.w	1a0079a6 <_vfprintf_r+0xc86>
1a008630:	9b0e      	ldr	r3, [sp, #56]	; 0x38
1a008632:	9326      	str	r3, [sp, #152]	; 0x98
1a008634:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
1a008636:	f816 2c01 	ldrb.w	r2, [r6, #-1]
1a00863a:	7bd9      	ldrb	r1, [r3, #15]
1a00863c:	428a      	cmp	r2, r1
1a00863e:	4633      	mov	r3, r6
1a008640:	d109      	bne.n	1a008656 <_vfprintf_r+0x1936>
1a008642:	2030      	movs	r0, #48	; 0x30
1a008644:	f803 0c01 	strb.w	r0, [r3, #-1]
1a008648:	9b26      	ldr	r3, [sp, #152]	; 0x98
1a00864a:	1e5a      	subs	r2, r3, #1
1a00864c:	9226      	str	r2, [sp, #152]	; 0x98
1a00864e:	f813 2c01 	ldrb.w	r2, [r3, #-1]
1a008652:	4291      	cmp	r1, r2
1a008654:	d0f6      	beq.n	1a008644 <_vfprintf_r+0x1924>
1a008656:	2a39      	cmp	r2, #57	; 0x39
1a008658:	bf0b      	itete	eq
1a00865a:	9a0b      	ldreq	r2, [sp, #44]	; 0x2c
1a00865c:	3201      	addne	r2, #1
1a00865e:	7a92      	ldrbeq	r2, [r2, #10]
1a008660:	b2d2      	uxtbne	r2, r2
1a008662:	f803 2c01 	strb.w	r2, [r3, #-1]
1a008666:	f7ff bb6e 	b.w	1a007d46 <_vfprintf_r+0x1026>
1a00866a:	2330      	movs	r3, #48	; 0x30
1a00866c:	f88d 3084 	strb.w	r3, [sp, #132]	; 0x84
1a008670:	2378      	movs	r3, #120	; 0x78
1a008672:	e53e      	b.n	1a0080f2 <_vfprintf_r+0x13d2>
1a008674:	f109 0101 	add.w	r1, r9, #1
1a008678:	9805      	ldr	r0, [sp, #20]
1a00867a:	f7fd fe83 	bl	1a006384 <_malloc_r>
1a00867e:	4607      	mov	r7, r0
1a008680:	2800      	cmp	r0, #0
1a008682:	f000 80d5 	beq.w	1a008830 <_vfprintf_r+0x1b10>
1a008686:	9009      	str	r0, [sp, #36]	; 0x24
1a008688:	e540      	b.n	1a00810c <_vfprintf_r+0x13ec>
1a00868a:	4621      	mov	r1, r4
1a00868c:	461c      	mov	r4, r3
1a00868e:	460b      	mov	r3, r1
1a008690:	3201      	adds	r2, #1
1a008692:	442c      	add	r4, r5
1a008694:	2a07      	cmp	r2, #7
1a008696:	e9cd 2429 	strd	r2, r4, [sp, #164]	; 0xa4
1a00869a:	e9cb 3500 	strd	r3, r5, [fp]
1a00869e:	f77f aaea 	ble.w	1a007c76 <_vfprintf_r+0xf56>
1a0086a2:	aa28      	add	r2, sp, #160	; 0xa0
1a0086a4:	9907      	ldr	r1, [sp, #28]
1a0086a6:	9805      	ldr	r0, [sp, #20]
1a0086a8:	f002 f9de 	bl	1a00aa68 <__sprint_r>
1a0086ac:	2800      	cmp	r0, #0
1a0086ae:	f47f a8cf 	bne.w	1a007850 <_vfprintf_r+0xb30>
1a0086b2:	e9dd 2429 	ldrd	r2, r4, [sp, #164]	; 0xa4
1a0086b6:	f10d 0bac 	add.w	fp, sp, #172	; 0xac
1a0086ba:	f7ff b8df 	b.w	1a00787c <_vfprintf_r+0xb5c>
1a0086be:	f109 0401 	add.w	r4, r9, #1
1a0086c2:	a926      	add	r1, sp, #152	; 0x98
1a0086c4:	ab23      	add	r3, sp, #140	; 0x8c
1a0086c6:	e9cd 3100 	strd	r3, r1, [sp]
1a0086ca:	4622      	mov	r2, r4
1a0086cc:	ab22      	add	r3, sp, #136	; 0x88
1a0086ce:	2102      	movs	r1, #2
1a0086d0:	ed9d 0b1c 	vldr	d0, [sp, #112]	; 0x70
1a0086d4:	9805      	ldr	r0, [sp, #20]
1a0086d6:	f000 fa0b 	bl	1a008af0 <_dtoa_r>
1a0086da:	4607      	mov	r7, r0
1a0086dc:	443c      	add	r4, r7
1a0086de:	e70c      	b.n	1a0084fa <_vfprintf_r+0x17da>
1a0086e0:	f04f 0906 	mov.w	r9, #6
1a0086e4:	f7ff bb03 	b.w	1a007cee <_vfprintf_r+0xfce>
1a0086e8:	a822      	add	r0, sp, #136	; 0x88
1a0086ea:	ed9d 0b1c 	vldr	d0, [sp, #112]	; 0x70
1a0086ee:	f002 f90f 	bl	1a00a910 <frexp>
1a0086f2:	2200      	movs	r2, #0
1a0086f4:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
1a0086f8:	ec51 0b10 	vmov	r0, r1, d0
1a0086fc:	f7fc ff02 	bl	1a005504 <__aeabi_dmul>
1a008700:	2200      	movs	r2, #0
1a008702:	2300      	movs	r3, #0
1a008704:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
1a008708:	f7fd f964 	bl	1a0059d4 <__aeabi_dcmpeq>
1a00870c:	b108      	cbz	r0, 1a008712 <_vfprintf_r+0x19f2>
1a00870e:	2301      	movs	r3, #1
1a008710:	9322      	str	r3, [sp, #136]	; 0x88
1a008712:	4b55      	ldr	r3, [pc, #340]	; (1a008868 <_vfprintf_r+0x1b48>)
1a008714:	930b      	str	r3, [sp, #44]	; 0x2c
1a008716:	e529      	b.n	1a00816c <_vfprintf_r+0x144c>
1a008718:	2900      	cmp	r1, #0
1a00871a:	d17b      	bne.n	1a008814 <_vfprintf_r+0x1af4>
1a00871c:	2330      	movs	r3, #48	; 0x30
1a00871e:	f88d 3092 	strb.w	r3, [sp, #146]	; 0x92
1a008722:	f10d 0393 	add.w	r3, sp, #147	; 0x93
1a008726:	3230      	adds	r2, #48	; 0x30
1a008728:	f803 2b01 	strb.w	r2, [r3], #1
1a00872c:	aa24      	add	r2, sp, #144	; 0x90
1a00872e:	1a9b      	subs	r3, r3, r2
1a008730:	9316      	str	r3, [sp, #88]	; 0x58
1a008732:	f7ff bb61 	b.w	1a007df8 <_vfprintf_r+0x10d8>
1a008736:	9b11      	ldr	r3, [sp, #68]	; 0x44
1a008738:	4f4c      	ldr	r7, [pc, #304]	; (1a00886c <_vfprintf_r+0x1b4c>)
1a00873a:	2b00      	cmp	r3, #0
1a00873c:	bfb6      	itet	lt
1a00873e:	222d      	movlt	r2, #45	; 0x2d
1a008740:	f89d 2083 	ldrbge.w	r2, [sp, #131]	; 0x83
1a008744:	f88d 2083 	strblt.w	r2, [sp, #131]	; 0x83
1a008748:	4b49      	ldr	r3, [pc, #292]	; (1a008870 <_vfprintf_r+0x1b50>)
1a00874a:	f7fe beec 	b.w	1a007526 <_vfprintf_r+0x806>
1a00874e:	9e0e      	ldr	r6, [sp, #56]	; 0x38
1a008750:	e5ab      	b.n	1a0082aa <_vfprintf_r+0x158a>
1a008752:	f04f 0867 	mov.w	r8, #103	; 0x67
1a008756:	9818      	ldr	r0, [sp, #96]	; 0x60
1a008758:	2200      	movs	r2, #0
1a00875a:	920c      	str	r2, [sp, #48]	; 0x30
1a00875c:	920f      	str	r2, [sp, #60]	; 0x3c
1a00875e:	7803      	ldrb	r3, [r0, #0]
1a008760:	9a0e      	ldr	r2, [sp, #56]	; 0x38
1a008762:	2bff      	cmp	r3, #255	; 0xff
1a008764:	d00c      	beq.n	1a008780 <_vfprintf_r+0x1a60>
1a008766:	4293      	cmp	r3, r2
1a008768:	da0a      	bge.n	1a008780 <_vfprintf_r+0x1a60>
1a00876a:	7841      	ldrb	r1, [r0, #1]
1a00876c:	1ad2      	subs	r2, r2, r3
1a00876e:	b1a1      	cbz	r1, 1a00879a <_vfprintf_r+0x1a7a>
1a008770:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
1a008772:	3301      	adds	r3, #1
1a008774:	930f      	str	r3, [sp, #60]	; 0x3c
1a008776:	460b      	mov	r3, r1
1a008778:	2bff      	cmp	r3, #255	; 0xff
1a00877a:	f100 0001 	add.w	r0, r0, #1
1a00877e:	d1f2      	bne.n	1a008766 <_vfprintf_r+0x1a46>
1a008780:	920e      	str	r2, [sp, #56]	; 0x38
1a008782:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
1a008784:	9a0c      	ldr	r2, [sp, #48]	; 0x30
1a008786:	9018      	str	r0, [sp, #96]	; 0x60
1a008788:	4413      	add	r3, r2
1a00878a:	9a19      	ldr	r2, [sp, #100]	; 0x64
1a00878c:	fb02 6603 	mla	r6, r2, r3, r6
1a008790:	ea26 73e6 	bic.w	r3, r6, r6, asr #31
1a008794:	9303      	str	r3, [sp, #12]
1a008796:	f7ff bb45 	b.w	1a007e24 <_vfprintf_r+0x1104>
1a00879a:	990c      	ldr	r1, [sp, #48]	; 0x30
1a00879c:	3101      	adds	r1, #1
1a00879e:	910c      	str	r1, [sp, #48]	; 0x30
1a0087a0:	e7df      	b.n	1a008762 <_vfprintf_r+0x1a42>
1a0087a2:	9b13      	ldr	r3, [sp, #76]	; 0x4c
1a0087a4:	18d6      	adds	r6, r2, r3
1a0087a6:	444e      	add	r6, r9
1a0087a8:	f04f 0866 	mov.w	r8, #102	; 0x66
1a0087ac:	e6e3      	b.n	1a008576 <_vfprintf_r+0x1856>
1a0087ae:	f8dd 901c 	ldr.w	r9, [sp, #28]
1a0087b2:	f7ff b8ec 	b.w	1a00798e <_vfprintf_r+0xc6e>
1a0087b6:	2200      	movs	r2, #0
1a0087b8:	2300      	movs	r3, #0
1a0087ba:	e9dd 011c 	ldrd	r0, r1, [sp, #112]	; 0x70
1a0087be:	f7fd f909 	bl	1a0059d4 <__aeabi_dcmpeq>
1a0087c2:	2800      	cmp	r0, #0
1a0087c4:	f47f ae96 	bne.w	1a0084f4 <_vfprintf_r+0x17d4>
1a0087c8:	f1c9 0301 	rsb	r3, r9, #1
1a0087cc:	9322      	str	r3, [sp, #136]	; 0x88
1a0087ce:	e692      	b.n	1a0084f6 <_vfprintf_r+0x17d6>
1a0087d0:	f1c3 0301 	rsb	r3, r3, #1
1a0087d4:	441e      	add	r6, r3
1a0087d6:	ea26 73e6 	bic.w	r3, r6, r6, asr #31
1a0087da:	9303      	str	r3, [sp, #12]
1a0087dc:	f04f 0867 	mov.w	r8, #103	; 0x67
1a0087e0:	e56f      	b.n	1a0082c2 <_vfprintf_r+0x15a2>
1a0087e2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
1a0087e4:	07dd      	lsls	r5, r3, #31
1a0087e6:	f57f ab10 	bpl.w	1a007e0a <_vfprintf_r+0x10ea>
1a0087ea:	f7ff bb0c 	b.w	1a007e06 <_vfprintf_r+0x10e6>
1a0087ee:	b92b      	cbnz	r3, 1a0087fc <_vfprintf_r+0x1adc>
1a0087f0:	2301      	movs	r3, #1
1a0087f2:	9303      	str	r3, [sp, #12]
1a0087f4:	461e      	mov	r6, r3
1a0087f6:	f04f 0866 	mov.w	r8, #102	; 0x66
1a0087fa:	e562      	b.n	1a0082c2 <_vfprintf_r+0x15a2>
1a0087fc:	9b13      	ldr	r3, [sp, #76]	; 0x4c
1a0087fe:	1c5e      	adds	r6, r3, #1
1a008800:	444e      	add	r6, r9
1a008802:	ea26 73e6 	bic.w	r3, r6, r6, asr #31
1a008806:	9303      	str	r3, [sp, #12]
1a008808:	f04f 0866 	mov.w	r8, #102	; 0x66
1a00880c:	e559      	b.n	1a0082c2 <_vfprintf_r+0x15a2>
1a00880e:	465a      	mov	r2, fp
1a008810:	f7ff bb3f 	b.w	1a007e92 <_vfprintf_r+0x1172>
1a008814:	f10d 0392 	add.w	r3, sp, #146	; 0x92
1a008818:	e785      	b.n	1a008726 <_vfprintf_r+0x1a06>
1a00881a:	9b08      	ldr	r3, [sp, #32]
1a00881c:	f89a 8001 	ldrb.w	r8, [sl, #1]
1a008820:	f853 0b04 	ldr.w	r0, [r3], #4
1a008824:	9308      	str	r3, [sp, #32]
1a008826:	4692      	mov	sl, r2
1a008828:	ea40 79e0 	orr.w	r9, r0, r0, asr #31
1a00882c:	f7fe bafc 	b.w	1a006e28 <_vfprintf_r+0x108>
1a008830:	f8dd 901c 	ldr.w	r9, [sp, #28]
1a008834:	f8b9 300c 	ldrh.w	r3, [r9, #12]
1a008838:	f043 0340 	orr.w	r3, r3, #64	; 0x40
1a00883c:	f8a9 300c 	strh.w	r3, [r9, #12]
1a008840:	f7ff b8a5 	b.w	1a00798e <_vfprintf_r+0xc6e>
1a008844:	461e      	mov	r6, r3
1a008846:	f7fe bc15 	b.w	1a007074 <_vfprintf_r+0x354>
1a00884a:	461e      	mov	r6, r3
1a00884c:	f7fe bc5e 	b.w	1a00710c <_vfprintf_r+0x3ec>
1a008850:	461e      	mov	r6, r3
1a008852:	f7fe bc48 	b.w	1a0070e6 <_vfprintf_r+0x3c6>
1a008856:	464c      	mov	r4, r9
1a008858:	443c      	add	r4, r7
1a00885a:	e64e      	b.n	1a0084fa <_vfprintf_r+0x17da>
1a00885c:	2302      	movs	r3, #2
1a00885e:	9316      	str	r3, [sp, #88]	; 0x58
1a008860:	f7ff baca 	b.w	1a007df8 <_vfprintf_r+0x10d8>
1a008864:	1a00b330 	.word	0x1a00b330
1a008868:	1a00b300 	.word	0x1a00b300
1a00886c:	1a00b2e4 	.word	0x1a00b2e4
1a008870:	1a00b2e8 	.word	0x1a00b2e8

1a008874 <__sbprintf>:
1a008874:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
1a008878:	460c      	mov	r4, r1
1a00887a:	f5ad 6d8d 	sub.w	sp, sp, #1128	; 0x468
1a00887e:	8989      	ldrh	r1, [r1, #12]
1a008880:	6e66      	ldr	r6, [r4, #100]	; 0x64
1a008882:	89e5      	ldrh	r5, [r4, #14]
1a008884:	9619      	str	r6, [sp, #100]	; 0x64
1a008886:	f021 0102 	bic.w	r1, r1, #2
1a00888a:	4606      	mov	r6, r0
1a00888c:	69e0      	ldr	r0, [r4, #28]
1a00888e:	f8ad 100c 	strh.w	r1, [sp, #12]
1a008892:	4617      	mov	r7, r2
1a008894:	f44f 6180 	mov.w	r1, #1024	; 0x400
1a008898:	6a62      	ldr	r2, [r4, #36]	; 0x24
1a00889a:	f8ad 500e 	strh.w	r5, [sp, #14]
1a00889e:	4698      	mov	r8, r3
1a0088a0:	ad1a      	add	r5, sp, #104	; 0x68
1a0088a2:	2300      	movs	r3, #0
1a0088a4:	9007      	str	r0, [sp, #28]
1a0088a6:	a816      	add	r0, sp, #88	; 0x58
1a0088a8:	9209      	str	r2, [sp, #36]	; 0x24
1a0088aa:	9306      	str	r3, [sp, #24]
1a0088ac:	9500      	str	r5, [sp, #0]
1a0088ae:	9504      	str	r5, [sp, #16]
1a0088b0:	9102      	str	r1, [sp, #8]
1a0088b2:	9105      	str	r1, [sp, #20]
1a0088b4:	f7fd fd5e 	bl	1a006374 <__retarget_lock_init_recursive>
1a0088b8:	4643      	mov	r3, r8
1a0088ba:	463a      	mov	r2, r7
1a0088bc:	4669      	mov	r1, sp
1a0088be:	4630      	mov	r0, r6
1a0088c0:	f7fe fa2e 	bl	1a006d20 <_vfprintf_r>
1a0088c4:	1e05      	subs	r5, r0, #0
1a0088c6:	db07      	blt.n	1a0088d8 <__sbprintf+0x64>
1a0088c8:	4630      	mov	r0, r6
1a0088ca:	4669      	mov	r1, sp
1a0088cc:	f7fd fb2c 	bl	1a005f28 <_fflush_r>
1a0088d0:	2800      	cmp	r0, #0
1a0088d2:	bf18      	it	ne
1a0088d4:	f04f 35ff 	movne.w	r5, #4294967295	; 0xffffffff
1a0088d8:	f8bd 300c 	ldrh.w	r3, [sp, #12]
1a0088dc:	065b      	lsls	r3, r3, #25
1a0088de:	d503      	bpl.n	1a0088e8 <__sbprintf+0x74>
1a0088e0:	89a3      	ldrh	r3, [r4, #12]
1a0088e2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
1a0088e6:	81a3      	strh	r3, [r4, #12]
1a0088e8:	9816      	ldr	r0, [sp, #88]	; 0x58
1a0088ea:	f7fd fd45 	bl	1a006378 <__retarget_lock_close_recursive>
1a0088ee:	4628      	mov	r0, r5
1a0088f0:	f50d 6d8d 	add.w	sp, sp, #1128	; 0x468
1a0088f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

1a0088f8 <__swsetup_r>:
1a0088f8:	b538      	push	{r3, r4, r5, lr}
1a0088fa:	4b32      	ldr	r3, [pc, #200]	; (1a0089c4 <__swsetup_r+0xcc>)
1a0088fc:	681b      	ldr	r3, [r3, #0]
1a0088fe:	4605      	mov	r5, r0
1a008900:	460c      	mov	r4, r1
1a008902:	b10b      	cbz	r3, 1a008908 <__swsetup_r+0x10>
1a008904:	6b9a      	ldr	r2, [r3, #56]	; 0x38
1a008906:	b312      	cbz	r2, 1a00894e <__swsetup_r+0x56>
1a008908:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
1a00890c:	b293      	uxth	r3, r2
1a00890e:	0718      	lsls	r0, r3, #28
1a008910:	d525      	bpl.n	1a00895e <__swsetup_r+0x66>
1a008912:	6920      	ldr	r0, [r4, #16]
1a008914:	2800      	cmp	r0, #0
1a008916:	d02d      	beq.n	1a008974 <__swsetup_r+0x7c>
1a008918:	f013 0201 	ands.w	r2, r3, #1
1a00891c:	d007      	beq.n	1a00892e <__swsetup_r+0x36>
1a00891e:	6963      	ldr	r3, [r4, #20]
1a008920:	2200      	movs	r2, #0
1a008922:	425b      	negs	r3, r3
1a008924:	61a3      	str	r3, [r4, #24]
1a008926:	60a2      	str	r2, [r4, #8]
1a008928:	b138      	cbz	r0, 1a00893a <__swsetup_r+0x42>
1a00892a:	2000      	movs	r0, #0
1a00892c:	bd38      	pop	{r3, r4, r5, pc}
1a00892e:	0799      	lsls	r1, r3, #30
1a008930:	bf58      	it	pl
1a008932:	6962      	ldrpl	r2, [r4, #20]
1a008934:	60a2      	str	r2, [r4, #8]
1a008936:	2800      	cmp	r0, #0
1a008938:	d1f7      	bne.n	1a00892a <__swsetup_r+0x32>
1a00893a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
1a00893e:	061a      	lsls	r2, r3, #24
1a008940:	d5f4      	bpl.n	1a00892c <__swsetup_r+0x34>
1a008942:	f043 0340 	orr.w	r3, r3, #64	; 0x40
1a008946:	81a3      	strh	r3, [r4, #12]
1a008948:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
1a00894c:	bd38      	pop	{r3, r4, r5, pc}
1a00894e:	4618      	mov	r0, r3
1a008950:	f7fd fb46 	bl	1a005fe0 <__sinit>
1a008954:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
1a008958:	b293      	uxth	r3, r2
1a00895a:	0718      	lsls	r0, r3, #28
1a00895c:	d4d9      	bmi.n	1a008912 <__swsetup_r+0x1a>
1a00895e:	06d9      	lsls	r1, r3, #27
1a008960:	d528      	bpl.n	1a0089b4 <__swsetup_r+0xbc>
1a008962:	0758      	lsls	r0, r3, #29
1a008964:	d412      	bmi.n	1a00898c <__swsetup_r+0x94>
1a008966:	6920      	ldr	r0, [r4, #16]
1a008968:	f042 0308 	orr.w	r3, r2, #8
1a00896c:	81a3      	strh	r3, [r4, #12]
1a00896e:	b29b      	uxth	r3, r3
1a008970:	2800      	cmp	r0, #0
1a008972:	d1d1      	bne.n	1a008918 <__swsetup_r+0x20>
1a008974:	f403 7220 	and.w	r2, r3, #640	; 0x280
1a008978:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
1a00897c:	d0cc      	beq.n	1a008918 <__swsetup_r+0x20>
1a00897e:	4628      	mov	r0, r5
1a008980:	4621      	mov	r1, r4
1a008982:	f001 f9fd 	bl	1a009d80 <__smakebuf_r>
1a008986:	89a3      	ldrh	r3, [r4, #12]
1a008988:	6920      	ldr	r0, [r4, #16]
1a00898a:	e7c5      	b.n	1a008918 <__swsetup_r+0x20>
1a00898c:	6b21      	ldr	r1, [r4, #48]	; 0x30
1a00898e:	b151      	cbz	r1, 1a0089a6 <__swsetup_r+0xae>
1a008990:	f104 0340 	add.w	r3, r4, #64	; 0x40
1a008994:	4299      	cmp	r1, r3
1a008996:	d004      	beq.n	1a0089a2 <__swsetup_r+0xaa>
1a008998:	4628      	mov	r0, r5
1a00899a:	f7fd fba7 	bl	1a0060ec <_free_r>
1a00899e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
1a0089a2:	2300      	movs	r3, #0
1a0089a4:	6323      	str	r3, [r4, #48]	; 0x30
1a0089a6:	2300      	movs	r3, #0
1a0089a8:	6920      	ldr	r0, [r4, #16]
1a0089aa:	6063      	str	r3, [r4, #4]
1a0089ac:	f022 0224 	bic.w	r2, r2, #36	; 0x24
1a0089b0:	6020      	str	r0, [r4, #0]
1a0089b2:	e7d9      	b.n	1a008968 <__swsetup_r+0x70>
1a0089b4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
1a0089b8:	2309      	movs	r3, #9
1a0089ba:	602b      	str	r3, [r5, #0]
1a0089bc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
1a0089c0:	81a2      	strh	r2, [r4, #12]
1a0089c2:	bd38      	pop	{r3, r4, r5, pc}
1a0089c4:	10000054 	.word	0x10000054

1a0089c8 <quorem>:
1a0089c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
1a0089cc:	6903      	ldr	r3, [r0, #16]
1a0089ce:	690f      	ldr	r7, [r1, #16]
1a0089d0:	42bb      	cmp	r3, r7
1a0089d2:	b083      	sub	sp, #12
1a0089d4:	f2c0 8086 	blt.w	1a008ae4 <quorem+0x11c>
1a0089d8:	3f01      	subs	r7, #1
1a0089da:	f101 0614 	add.w	r6, r1, #20
1a0089de:	f100 0a14 	add.w	sl, r0, #20
1a0089e2:	f856 3027 	ldr.w	r3, [r6, r7, lsl #2]
1a0089e6:	f85a 2027 	ldr.w	r2, [sl, r7, lsl #2]
1a0089ea:	00bc      	lsls	r4, r7, #2
1a0089ec:	3301      	adds	r3, #1
1a0089ee:	9400      	str	r4, [sp, #0]
1a0089f0:	eb06 0904 	add.w	r9, r6, r4
1a0089f4:	429a      	cmp	r2, r3
1a0089f6:	4454      	add	r4, sl
1a0089f8:	fbb2 f8f3 	udiv	r8, r2, r3
1a0089fc:	9401      	str	r4, [sp, #4]
1a0089fe:	d33a      	bcc.n	1a008a76 <quorem+0xae>
1a008a00:	2500      	movs	r5, #0
1a008a02:	462a      	mov	r2, r5
1a008a04:	46b6      	mov	lr, r6
1a008a06:	46d4      	mov	ip, sl
1a008a08:	f85e 4b04 	ldr.w	r4, [lr], #4
1a008a0c:	f8dc 3000 	ldr.w	r3, [ip]
1a008a10:	fa1f fb84 	uxth.w	fp, r4
1a008a14:	fb08 550b 	mla	r5, r8, fp, r5
1a008a18:	ea4f 4b15 	mov.w	fp, r5, lsr #16
1a008a1c:	0c24      	lsrs	r4, r4, #16
1a008a1e:	fb08 b404 	mla	r4, r8, r4, fp
1a008a22:	b2ad      	uxth	r5, r5
1a008a24:	1b55      	subs	r5, r2, r5
1a008a26:	b2a2      	uxth	r2, r4
1a008a28:	ebc2 4213 	rsb	r2, r2, r3, lsr #16
1a008a2c:	fa15 f383 	uxtah	r3, r5, r3
1a008a30:	eb02 4223 	add.w	r2, r2, r3, asr #16
1a008a34:	b29b      	uxth	r3, r3
1a008a36:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
1a008a3a:	45f1      	cmp	r9, lr
1a008a3c:	ea4f 4514 	mov.w	r5, r4, lsr #16
1a008a40:	f84c 3b04 	str.w	r3, [ip], #4
1a008a44:	ea4f 4222 	mov.w	r2, r2, asr #16
1a008a48:	d2de      	bcs.n	1a008a08 <quorem+0x40>
1a008a4a:	9b00      	ldr	r3, [sp, #0]
1a008a4c:	f85a 3003 	ldr.w	r3, [sl, r3]
1a008a50:	b98b      	cbnz	r3, 1a008a76 <quorem+0xae>
1a008a52:	9a01      	ldr	r2, [sp, #4]
1a008a54:	1f13      	subs	r3, r2, #4
1a008a56:	459a      	cmp	sl, r3
1a008a58:	d20c      	bcs.n	1a008a74 <quorem+0xac>
1a008a5a:	f852 3c04 	ldr.w	r3, [r2, #-4]
1a008a5e:	b94b      	cbnz	r3, 1a008a74 <quorem+0xac>
1a008a60:	f1a2 0308 	sub.w	r3, r2, #8
1a008a64:	e002      	b.n	1a008a6c <quorem+0xa4>
1a008a66:	681a      	ldr	r2, [r3, #0]
1a008a68:	3b04      	subs	r3, #4
1a008a6a:	b91a      	cbnz	r2, 1a008a74 <quorem+0xac>
1a008a6c:	459a      	cmp	sl, r3
1a008a6e:	f107 37ff 	add.w	r7, r7, #4294967295	; 0xffffffff
1a008a72:	d3f8      	bcc.n	1a008a66 <quorem+0x9e>
1a008a74:	6107      	str	r7, [r0, #16]
1a008a76:	4604      	mov	r4, r0
1a008a78:	f001 fc9c 	bl	1a00a3b4 <__mcmp>
1a008a7c:	2800      	cmp	r0, #0
1a008a7e:	db2d      	blt.n	1a008adc <quorem+0x114>
1a008a80:	f108 0801 	add.w	r8, r8, #1
1a008a84:	4650      	mov	r0, sl
1a008a86:	2300      	movs	r3, #0
1a008a88:	f856 1b04 	ldr.w	r1, [r6], #4
1a008a8c:	6805      	ldr	r5, [r0, #0]
1a008a8e:	b28a      	uxth	r2, r1
1a008a90:	1a9a      	subs	r2, r3, r2
1a008a92:	0c0b      	lsrs	r3, r1, #16
1a008a94:	fa12 f285 	uxtah	r2, r2, r5
1a008a98:	ebc3 4315 	rsb	r3, r3, r5, lsr #16
1a008a9c:	eb03 4322 	add.w	r3, r3, r2, asr #16
1a008aa0:	b292      	uxth	r2, r2
1a008aa2:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
1a008aa6:	45b1      	cmp	r9, r6
1a008aa8:	f840 2b04 	str.w	r2, [r0], #4
1a008aac:	ea4f 4323 	mov.w	r3, r3, asr #16
1a008ab0:	d2ea      	bcs.n	1a008a88 <quorem+0xc0>
1a008ab2:	f85a 2027 	ldr.w	r2, [sl, r7, lsl #2]
1a008ab6:	eb0a 0387 	add.w	r3, sl, r7, lsl #2
1a008aba:	b97a      	cbnz	r2, 1a008adc <quorem+0x114>
1a008abc:	1f1a      	subs	r2, r3, #4
1a008abe:	4592      	cmp	sl, r2
1a008ac0:	d20b      	bcs.n	1a008ada <quorem+0x112>
1a008ac2:	f853 2c04 	ldr.w	r2, [r3, #-4]
1a008ac6:	b942      	cbnz	r2, 1a008ada <quorem+0x112>
1a008ac8:	3b08      	subs	r3, #8
1a008aca:	e002      	b.n	1a008ad2 <quorem+0x10a>
1a008acc:	681a      	ldr	r2, [r3, #0]
1a008ace:	3b04      	subs	r3, #4
1a008ad0:	b91a      	cbnz	r2, 1a008ada <quorem+0x112>
1a008ad2:	459a      	cmp	sl, r3
1a008ad4:	f107 37ff 	add.w	r7, r7, #4294967295	; 0xffffffff
1a008ad8:	d3f8      	bcc.n	1a008acc <quorem+0x104>
1a008ada:	6127      	str	r7, [r4, #16]
1a008adc:	4640      	mov	r0, r8
1a008ade:	b003      	add	sp, #12
1a008ae0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
1a008ae4:	2000      	movs	r0, #0
1a008ae6:	b003      	add	sp, #12
1a008ae8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
1a008aec:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff

1a008af0 <_dtoa_r>:
1a008af0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
1a008af4:	ec57 6b10 	vmov	r6, r7, d0
1a008af8:	b097      	sub	sp, #92	; 0x5c
1a008afa:	6c05      	ldr	r5, [r0, #64]	; 0x40
1a008afc:	9c20      	ldr	r4, [sp, #128]	; 0x80
1a008afe:	9102      	str	r1, [sp, #8]
1a008b00:	4682      	mov	sl, r0
1a008b02:	920a      	str	r2, [sp, #40]	; 0x28
1a008b04:	9307      	str	r3, [sp, #28]
1a008b06:	e9cd 6700 	strd	r6, r7, [sp]
1a008b0a:	b155      	cbz	r5, 1a008b22 <_dtoa_r+0x32>
1a008b0c:	6c42      	ldr	r2, [r0, #68]	; 0x44
1a008b0e:	606a      	str	r2, [r5, #4]
1a008b10:	2301      	movs	r3, #1
1a008b12:	4093      	lsls	r3, r2
1a008b14:	60ab      	str	r3, [r5, #8]
1a008b16:	4629      	mov	r1, r5
1a008b18:	f001 fa60 	bl	1a009fdc <_Bfree>
1a008b1c:	2300      	movs	r3, #0
1a008b1e:	f8ca 3040 	str.w	r3, [sl, #64]	; 0x40
1a008b22:	1e3e      	subs	r6, r7, #0
1a008b24:	bfb4      	ite	lt
1a008b26:	2301      	movlt	r3, #1
1a008b28:	2300      	movge	r3, #0
1a008b2a:	6023      	str	r3, [r4, #0]
1a008b2c:	4b76      	ldr	r3, [pc, #472]	; (1a008d08 <_dtoa_r+0x218>)
1a008b2e:	bfbc      	itt	lt
1a008b30:	f026 4600 	biclt.w	r6, r6, #2147483648	; 0x80000000
1a008b34:	9601      	strlt	r6, [sp, #4]
1a008b36:	43b3      	bics	r3, r6
1a008b38:	f000 80ae 	beq.w	1a008c98 <_dtoa_r+0x1a8>
1a008b3c:	ed9d 7b00 	vldr	d7, [sp]
1a008b40:	2200      	movs	r2, #0
1a008b42:	2300      	movs	r3, #0
1a008b44:	ec51 0b17 	vmov	r0, r1, d7
1a008b48:	ed8d 7b04 	vstr	d7, [sp, #16]
1a008b4c:	f7fc ff42 	bl	1a0059d4 <__aeabi_dcmpeq>
1a008b50:	4605      	mov	r5, r0
1a008b52:	b178      	cbz	r0, 1a008b74 <_dtoa_r+0x84>
1a008b54:	9a07      	ldr	r2, [sp, #28]
1a008b56:	2301      	movs	r3, #1
1a008b58:	6013      	str	r3, [r2, #0]
1a008b5a:	9b21      	ldr	r3, [sp, #132]	; 0x84
1a008b5c:	2b00      	cmp	r3, #0
1a008b5e:	f000 8313 	beq.w	1a009188 <_dtoa_r+0x698>
1a008b62:	4b6a      	ldr	r3, [pc, #424]	; (1a008d0c <_dtoa_r+0x21c>)
1a008b64:	9a21      	ldr	r2, [sp, #132]	; 0x84
1a008b66:	6013      	str	r3, [r2, #0]
1a008b68:	3b01      	subs	r3, #1
1a008b6a:	9303      	str	r3, [sp, #12]
1a008b6c:	9803      	ldr	r0, [sp, #12]
1a008b6e:	b017      	add	sp, #92	; 0x5c
1a008b70:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
1a008b74:	e9dd 7804 	ldrd	r7, r8, [sp, #16]
1a008b78:	aa14      	add	r2, sp, #80	; 0x50
1a008b7a:	a915      	add	r1, sp, #84	; 0x54
1a008b7c:	ec48 7b10 	vmov	d0, r7, r8
1a008b80:	4650      	mov	r0, sl
1a008b82:	f001 fcaf 	bl	1a00a4e4 <__d2b>
1a008b86:	0d34      	lsrs	r4, r6, #20
1a008b88:	4683      	mov	fp, r0
1a008b8a:	f040 809b 	bne.w	1a008cc4 <_dtoa_r+0x1d4>
1a008b8e:	e9dd 5414 	ldrd	r5, r4, [sp, #80]	; 0x50
1a008b92:	442c      	add	r4, r5
1a008b94:	f204 4332 	addw	r3, r4, #1074	; 0x432
1a008b98:	2b20      	cmp	r3, #32
1a008b9a:	f340 83bb 	ble.w	1a009314 <_dtoa_r+0x824>
1a008b9e:	f1c3 0340 	rsb	r3, r3, #64	; 0x40
1a008ba2:	409e      	lsls	r6, r3
1a008ba4:	9b00      	ldr	r3, [sp, #0]
1a008ba6:	f204 4012 	addw	r0, r4, #1042	; 0x412
1a008baa:	fa23 f000 	lsr.w	r0, r3, r0
1a008bae:	4330      	orrs	r0, r6
1a008bb0:	f7fc fc2e 	bl	1a005410 <__aeabi_ui2d>
1a008bb4:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
1a008bb8:	2101      	movs	r1, #1
1a008bba:	4602      	mov	r2, r0
1a008bbc:	3c01      	subs	r4, #1
1a008bbe:	910e      	str	r1, [sp, #56]	; 0x38
1a008bc0:	4610      	mov	r0, r2
1a008bc2:	4619      	mov	r1, r3
1a008bc4:	2200      	movs	r2, #0
1a008bc6:	4b52      	ldr	r3, [pc, #328]	; (1a008d10 <_dtoa_r+0x220>)
1a008bc8:	f7fc fae4 	bl	1a005194 <__aeabi_dsub>
1a008bcc:	a348      	add	r3, pc, #288	; (adr r3, 1a008cf0 <_dtoa_r+0x200>)
1a008bce:	e9d3 2300 	ldrd	r2, r3, [r3]
1a008bd2:	f7fc fc97 	bl	1a005504 <__aeabi_dmul>
1a008bd6:	a348      	add	r3, pc, #288	; (adr r3, 1a008cf8 <_dtoa_r+0x208>)
1a008bd8:	e9d3 2300 	ldrd	r2, r3, [r3]
1a008bdc:	f7fc fadc 	bl	1a005198 <__adddf3>
1a008be0:	4606      	mov	r6, r0
1a008be2:	4620      	mov	r0, r4
1a008be4:	460f      	mov	r7, r1
1a008be6:	f7fc fc23 	bl	1a005430 <__aeabi_i2d>
1a008bea:	a345      	add	r3, pc, #276	; (adr r3, 1a008d00 <_dtoa_r+0x210>)
1a008bec:	e9d3 2300 	ldrd	r2, r3, [r3]
1a008bf0:	f7fc fc88 	bl	1a005504 <__aeabi_dmul>
1a008bf4:	4602      	mov	r2, r0
1a008bf6:	460b      	mov	r3, r1
1a008bf8:	4630      	mov	r0, r6
1a008bfa:	4639      	mov	r1, r7
1a008bfc:	f7fc facc 	bl	1a005198 <__adddf3>
1a008c00:	4606      	mov	r6, r0
1a008c02:	460f      	mov	r7, r1
1a008c04:	f002 f89e 	bl	1a00ad44 <__aeabi_d2iz>
1a008c08:	2200      	movs	r2, #0
1a008c0a:	4681      	mov	r9, r0
1a008c0c:	2300      	movs	r3, #0
1a008c0e:	4630      	mov	r0, r6
1a008c10:	4639      	mov	r1, r7
1a008c12:	f7fc fee9 	bl	1a0059e8 <__aeabi_dcmplt>
1a008c16:	2800      	cmp	r0, #0
1a008c18:	f040 82a9 	bne.w	1a00916e <_dtoa_r+0x67e>
1a008c1c:	1b2c      	subs	r4, r5, r4
1a008c1e:	f1b9 0f16 	cmp.w	r9, #22
1a008c22:	f104 38ff 	add.w	r8, r4, #4294967295	; 0xffffffff
1a008c26:	f200 8296 	bhi.w	1a009156 <_dtoa_r+0x666>
1a008c2a:	4b3a      	ldr	r3, [pc, #232]	; (1a008d14 <_dtoa_r+0x224>)
1a008c2c:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
1a008c30:	e9d3 2300 	ldrd	r2, r3, [r3]
1a008c34:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
1a008c38:	f7fc fed6 	bl	1a0059e8 <__aeabi_dcmplt>
1a008c3c:	2800      	cmp	r0, #0
1a008c3e:	d06f      	beq.n	1a008d20 <_dtoa_r+0x230>
1a008c40:	2300      	movs	r3, #0
1a008c42:	f1b8 0f00 	cmp.w	r8, #0
1a008c46:	f109 39ff 	add.w	r9, r9, #4294967295	; 0xffffffff
1a008c4a:	930d      	str	r3, [sp, #52]	; 0x34
1a008c4c:	f2c0 8289 	blt.w	1a009162 <_dtoa_r+0x672>
1a008c50:	2300      	movs	r3, #0
1a008c52:	9308      	str	r3, [sp, #32]
1a008c54:	f1b9 0f00 	cmp.w	r9, #0
1a008c58:	da68      	bge.n	1a008d2c <_dtoa_r+0x23c>
1a008c5a:	9b08      	ldr	r3, [sp, #32]
1a008c5c:	f8cd 9018 	str.w	r9, [sp, #24]
1a008c60:	eba3 0309 	sub.w	r3, r3, r9
1a008c64:	9308      	str	r3, [sp, #32]
1a008c66:	f1c9 0300 	rsb	r3, r9, #0
1a008c6a:	930c      	str	r3, [sp, #48]	; 0x30
1a008c6c:	9b02      	ldr	r3, [sp, #8]
1a008c6e:	2b09      	cmp	r3, #9
1a008c70:	f04f 0900 	mov.w	r9, #0
1a008c74:	d862      	bhi.n	1a008d3c <_dtoa_r+0x24c>
1a008c76:	2b05      	cmp	r3, #5
1a008c78:	f340 834a 	ble.w	1a009310 <_dtoa_r+0x820>
1a008c7c:	3b04      	subs	r3, #4
1a008c7e:	9302      	str	r3, [sp, #8]
1a008c80:	2400      	movs	r4, #0
1a008c82:	9b02      	ldr	r3, [sp, #8]
1a008c84:	3b02      	subs	r3, #2
1a008c86:	2b03      	cmp	r3, #3
1a008c88:	f200 8641 	bhi.w	1a00990e <_dtoa_r+0xe1e>
1a008c8c:	e8df f013 	tbh	[pc, r3, lsl #1]
1a008c90:	04630466 	.word	0x04630466
1a008c94:	0456043b 	.word	0x0456043b
1a008c98:	9a07      	ldr	r2, [sp, #28]
1a008c9a:	f242 730f 	movw	r3, #9999	; 0x270f
1a008c9e:	6013      	str	r3, [r2, #0]
1a008ca0:	9b00      	ldr	r3, [sp, #0]
1a008ca2:	f3c6 0613 	ubfx	r6, r6, #0, #20
1a008ca6:	4333      	orrs	r3, r6
1a008ca8:	d118      	bne.n	1a008cdc <_dtoa_r+0x1ec>
1a008caa:	9b21      	ldr	r3, [sp, #132]	; 0x84
1a008cac:	2b00      	cmp	r3, #0
1a008cae:	f000 8625 	beq.w	1a0098fc <_dtoa_r+0xe0c>
1a008cb2:	4b19      	ldr	r3, [pc, #100]	; (1a008d18 <_dtoa_r+0x228>)
1a008cb4:	9303      	str	r3, [sp, #12]
1a008cb6:	3308      	adds	r3, #8
1a008cb8:	9a21      	ldr	r2, [sp, #132]	; 0x84
1a008cba:	9803      	ldr	r0, [sp, #12]
1a008cbc:	6013      	str	r3, [r2, #0]
1a008cbe:	b017      	add	sp, #92	; 0x5c
1a008cc0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
1a008cc4:	f3c8 0113 	ubfx	r1, r8, #0, #20
1a008cc8:	f041 537f 	orr.w	r3, r1, #1069547520	; 0x3fc00000
1a008ccc:	950e      	str	r5, [sp, #56]	; 0x38
1a008cce:	463a      	mov	r2, r7
1a008cd0:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
1a008cd4:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
1a008cd8:	9d14      	ldr	r5, [sp, #80]	; 0x50
1a008cda:	e771      	b.n	1a008bc0 <_dtoa_r+0xd0>
1a008cdc:	9b21      	ldr	r3, [sp, #132]	; 0x84
1a008cde:	2b00      	cmp	r3, #0
1a008ce0:	f040 8400 	bne.w	1a0094e4 <_dtoa_r+0x9f4>
1a008ce4:	4b0d      	ldr	r3, [pc, #52]	; (1a008d1c <_dtoa_r+0x22c>)
1a008ce6:	9303      	str	r3, [sp, #12]
1a008ce8:	e740      	b.n	1a008b6c <_dtoa_r+0x7c>
1a008cea:	bf00      	nop
1a008cec:	f3af 8000 	nop.w
1a008cf0:	636f4361 	.word	0x636f4361
1a008cf4:	3fd287a7 	.word	0x3fd287a7
1a008cf8:	8b60c8b3 	.word	0x8b60c8b3
1a008cfc:	3fc68a28 	.word	0x3fc68a28
1a008d00:	509f79fb 	.word	0x509f79fb
1a008d04:	3fd34413 	.word	0x3fd34413
1a008d08:	7ff00000 	.word	0x7ff00000
1a008d0c:	1a00b31d 	.word	0x1a00b31d
1a008d10:	3ff80000 	.word	0x3ff80000
1a008d14:	1a00b378 	.word	0x1a00b378
1a008d18:	1a00b344 	.word	0x1a00b344
1a008d1c:	1a00b340 	.word	0x1a00b340
1a008d20:	f1b8 0f00 	cmp.w	r8, #0
1a008d24:	f2c0 84b6 	blt.w	1a009694 <_dtoa_r+0xba4>
1a008d28:	900d      	str	r0, [sp, #52]	; 0x34
1a008d2a:	9008      	str	r0, [sp, #32]
1a008d2c:	2300      	movs	r3, #0
1a008d2e:	930c      	str	r3, [sp, #48]	; 0x30
1a008d30:	9b02      	ldr	r3, [sp, #8]
1a008d32:	f8cd 9018 	str.w	r9, [sp, #24]
1a008d36:	2b09      	cmp	r3, #9
1a008d38:	44c8      	add	r8, r9
1a008d3a:	d99c      	bls.n	1a008c76 <_dtoa_r+0x186>
1a008d3c:	2300      	movs	r3, #0
1a008d3e:	2401      	movs	r4, #1
1a008d40:	e9cd 340a 	strd	r3, r4, [sp, #40]	; 0x28
1a008d44:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
1a008d48:	9302      	str	r3, [sp, #8]
1a008d4a:	9509      	str	r5, [sp, #36]	; 0x24
1a008d4c:	2100      	movs	r1, #0
1a008d4e:	f8ca 1044 	str.w	r1, [sl, #68]	; 0x44
1a008d52:	950f      	str	r5, [sp, #60]	; 0x3c
1a008d54:	4650      	mov	r0, sl
1a008d56:	f001 f91b 	bl	1a009f90 <_Balloc>
1a008d5a:	2d0e      	cmp	r5, #14
1a008d5c:	9003      	str	r0, [sp, #12]
1a008d5e:	f8ca 0040 	str.w	r0, [sl, #64]	; 0x40
1a008d62:	f200 810a 	bhi.w	1a008f7a <_dtoa_r+0x48a>
1a008d66:	2c00      	cmp	r4, #0
1a008d68:	f000 8107 	beq.w	1a008f7a <_dtoa_r+0x48a>
1a008d6c:	9906      	ldr	r1, [sp, #24]
1a008d6e:	2900      	cmp	r1, #0
1a008d70:	f340 8466 	ble.w	1a009640 <_dtoa_r+0xb50>
1a008d74:	4bb1      	ldr	r3, [pc, #708]	; (1a00903c <_dtoa_r+0x54c>)
1a008d76:	f001 020f 	and.w	r2, r1, #15
1a008d7a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
1a008d7e:	ed93 7b00 	vldr	d7, [r3]
1a008d82:	110c      	asrs	r4, r1, #4
1a008d84:	06e3      	lsls	r3, r4, #27
1a008d86:	ed8d 7b10 	vstr	d7, [sp, #64]	; 0x40
1a008d8a:	f140 8406 	bpl.w	1a00959a <_dtoa_r+0xaaa>
1a008d8e:	4bac      	ldr	r3, [pc, #688]	; (1a009040 <_dtoa_r+0x550>)
1a008d90:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
1a008d94:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
1a008d98:	f7fc fcde 	bl	1a005758 <__aeabi_ddiv>
1a008d9c:	e9cd 0100 	strd	r0, r1, [sp]
1a008da0:	f004 040f 	and.w	r4, r4, #15
1a008da4:	2603      	movs	r6, #3
1a008da6:	b17c      	cbz	r4, 1a008dc8 <_dtoa_r+0x2d8>
1a008da8:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
1a008dac:	4da4      	ldr	r5, [pc, #656]	; (1a009040 <_dtoa_r+0x550>)
1a008dae:	07e7      	lsls	r7, r4, #31
1a008db0:	d504      	bpl.n	1a008dbc <_dtoa_r+0x2cc>
1a008db2:	e9d5 2300 	ldrd	r2, r3, [r5]
1a008db6:	f7fc fba5 	bl	1a005504 <__aeabi_dmul>
1a008dba:	3601      	adds	r6, #1
1a008dbc:	1064      	asrs	r4, r4, #1
1a008dbe:	f105 0508 	add.w	r5, r5, #8
1a008dc2:	d1f4      	bne.n	1a008dae <_dtoa_r+0x2be>
1a008dc4:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
1a008dc8:	e9dd 0100 	ldrd	r0, r1, [sp]
1a008dcc:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
1a008dd0:	f7fc fcc2 	bl	1a005758 <__aeabi_ddiv>
1a008dd4:	e9cd 0100 	strd	r0, r1, [sp]
1a008dd8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
1a008dda:	b153      	cbz	r3, 1a008df2 <_dtoa_r+0x302>
1a008ddc:	e9dd 4500 	ldrd	r4, r5, [sp]
1a008de0:	2200      	movs	r2, #0
1a008de2:	4b98      	ldr	r3, [pc, #608]	; (1a009044 <_dtoa_r+0x554>)
1a008de4:	4620      	mov	r0, r4
1a008de6:	4629      	mov	r1, r5
1a008de8:	f7fc fdfe 	bl	1a0059e8 <__aeabi_dcmplt>
1a008dec:	2800      	cmp	r0, #0
1a008dee:	f040 8521 	bne.w	1a009834 <_dtoa_r+0xd44>
1a008df2:	4630      	mov	r0, r6
1a008df4:	f7fc fb1c 	bl	1a005430 <__aeabi_i2d>
1a008df8:	e9dd 2300 	ldrd	r2, r3, [sp]
1a008dfc:	f7fc fb82 	bl	1a005504 <__aeabi_dmul>
1a008e00:	4b91      	ldr	r3, [pc, #580]	; (1a009048 <_dtoa_r+0x558>)
1a008e02:	2200      	movs	r2, #0
1a008e04:	f7fc f9c8 	bl	1a005198 <__adddf3>
1a008e08:	9b09      	ldr	r3, [sp, #36]	; 0x24
1a008e0a:	4604      	mov	r4, r0
1a008e0c:	f1a1 7550 	sub.w	r5, r1, #54525952	; 0x3400000
1a008e10:	2b00      	cmp	r3, #0
1a008e12:	f000 83f9 	beq.w	1a009608 <_dtoa_r+0xb18>
1a008e16:	9b06      	ldr	r3, [sp, #24]
1a008e18:	9312      	str	r3, [sp, #72]	; 0x48
1a008e1a:	9b09      	ldr	r3, [sp, #36]	; 0x24
1a008e1c:	9310      	str	r3, [sp, #64]	; 0x40
1a008e1e:	e9dd 6700 	ldrd	r6, r7, [sp]
1a008e22:	4639      	mov	r1, r7
1a008e24:	4630      	mov	r0, r6
1a008e26:	f001 ff8d 	bl	1a00ad44 <__aeabi_d2iz>
1a008e2a:	9000      	str	r0, [sp, #0]
1a008e2c:	f7fc fb00 	bl	1a005430 <__aeabi_i2d>
1a008e30:	4602      	mov	r2, r0
1a008e32:	460b      	mov	r3, r1
1a008e34:	4630      	mov	r0, r6
1a008e36:	4639      	mov	r1, r7
1a008e38:	f7fc f9ac 	bl	1a005194 <__aeabi_dsub>
1a008e3c:	4b7f      	ldr	r3, [pc, #508]	; (1a00903c <_dtoa_r+0x54c>)
1a008e3e:	9a00      	ldr	r2, [sp, #0]
1a008e40:	460f      	mov	r7, r1
1a008e42:	9910      	ldr	r1, [sp, #64]	; 0x40
1a008e44:	4606      	mov	r6, r0
1a008e46:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
1a008e4a:	980b      	ldr	r0, [sp, #44]	; 0x2c
1a008e4c:	9903      	ldr	r1, [sp, #12]
1a008e4e:	3230      	adds	r2, #48	; 0x30
1a008e50:	e9cd 4500 	strd	r4, r5, [sp]
1a008e54:	b2d5      	uxtb	r5, r2
1a008e56:	1c4c      	adds	r4, r1, #1
1a008e58:	e953 2302 	ldrd	r2, r3, [r3, #-8]
1a008e5c:	2800      	cmp	r0, #0
1a008e5e:	f000 848d 	beq.w	1a00977c <_dtoa_r+0xc8c>
1a008e62:	2000      	movs	r0, #0
1a008e64:	4979      	ldr	r1, [pc, #484]	; (1a00904c <_dtoa_r+0x55c>)
1a008e66:	f7fc fc77 	bl	1a005758 <__aeabi_ddiv>
1a008e6a:	e9dd 2300 	ldrd	r2, r3, [sp]
1a008e6e:	f7fc f991 	bl	1a005194 <__aeabi_dsub>
1a008e72:	9b03      	ldr	r3, [sp, #12]
1a008e74:	4632      	mov	r2, r6
1a008e76:	701d      	strb	r5, [r3, #0]
1a008e78:	463b      	mov	r3, r7
1a008e7a:	e9cd 0100 	strd	r0, r1, [sp]
1a008e7e:	f7fc fdd1 	bl	1a005a24 <__aeabi_dcmpgt>
1a008e82:	2800      	cmp	r0, #0
1a008e84:	f040 84ca 	bne.w	1a00981c <_dtoa_r+0xd2c>
1a008e88:	4632      	mov	r2, r6
1a008e8a:	463b      	mov	r3, r7
1a008e8c:	2000      	movs	r0, #0
1a008e8e:	496d      	ldr	r1, [pc, #436]	; (1a009044 <_dtoa_r+0x554>)
1a008e90:	f7fc f980 	bl	1a005194 <__aeabi_dsub>
1a008e94:	4602      	mov	r2, r0
1a008e96:	460b      	mov	r3, r1
1a008e98:	e9dd 0100 	ldrd	r0, r1, [sp]
1a008e9c:	f7fc fdc2 	bl	1a005a24 <__aeabi_dcmpgt>
1a008ea0:	2800      	cmp	r0, #0
1a008ea2:	f040 8526 	bne.w	1a0098f2 <_dtoa_r+0xe02>
1a008ea6:	9b10      	ldr	r3, [sp, #64]	; 0x40
1a008ea8:	2b01      	cmp	r3, #1
1a008eaa:	d062      	beq.n	1a008f72 <_dtoa_r+0x482>
1a008eac:	9a03      	ldr	r2, [sp, #12]
1a008eae:	f8cd 9040 	str.w	r9, [sp, #64]	; 0x40
1a008eb2:	4413      	add	r3, r2
1a008eb4:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
1a008eb8:	e9dd 8900 	ldrd	r8, r9, [sp]
1a008ebc:	f8cd b000 	str.w	fp, [sp]
1a008ec0:	46d3      	mov	fp, sl
1a008ec2:	469a      	mov	sl, r3
1a008ec4:	e00c      	b.n	1a008ee0 <_dtoa_r+0x3f0>
1a008ec6:	2000      	movs	r0, #0
1a008ec8:	495e      	ldr	r1, [pc, #376]	; (1a009044 <_dtoa_r+0x554>)
1a008eca:	f7fc f963 	bl	1a005194 <__aeabi_dsub>
1a008ece:	4642      	mov	r2, r8
1a008ed0:	464b      	mov	r3, r9
1a008ed2:	f7fc fd89 	bl	1a0059e8 <__aeabi_dcmplt>
1a008ed6:	2800      	cmp	r0, #0
1a008ed8:	f040 84eb 	bne.w	1a0098b2 <_dtoa_r+0xdc2>
1a008edc:	45a2      	cmp	sl, r4
1a008ede:	d041      	beq.n	1a008f64 <_dtoa_r+0x474>
1a008ee0:	4640      	mov	r0, r8
1a008ee2:	4649      	mov	r1, r9
1a008ee4:	2200      	movs	r2, #0
1a008ee6:	4b5a      	ldr	r3, [pc, #360]	; (1a009050 <_dtoa_r+0x560>)
1a008ee8:	f7fc fb0c 	bl	1a005504 <__aeabi_dmul>
1a008eec:	2200      	movs	r2, #0
1a008eee:	4b58      	ldr	r3, [pc, #352]	; (1a009050 <_dtoa_r+0x560>)
1a008ef0:	4680      	mov	r8, r0
1a008ef2:	4689      	mov	r9, r1
1a008ef4:	4630      	mov	r0, r6
1a008ef6:	4639      	mov	r1, r7
1a008ef8:	f7fc fb04 	bl	1a005504 <__aeabi_dmul>
1a008efc:	460f      	mov	r7, r1
1a008efe:	4606      	mov	r6, r0
1a008f00:	f001 ff20 	bl	1a00ad44 <__aeabi_d2iz>
1a008f04:	4605      	mov	r5, r0
1a008f06:	f7fc fa93 	bl	1a005430 <__aeabi_i2d>
1a008f0a:	4602      	mov	r2, r0
1a008f0c:	460b      	mov	r3, r1
1a008f0e:	4630      	mov	r0, r6
1a008f10:	4639      	mov	r1, r7
1a008f12:	f7fc f93f 	bl	1a005194 <__aeabi_dsub>
1a008f16:	3530      	adds	r5, #48	; 0x30
1a008f18:	b2ed      	uxtb	r5, r5
1a008f1a:	4642      	mov	r2, r8
1a008f1c:	464b      	mov	r3, r9
1a008f1e:	f804 5b01 	strb.w	r5, [r4], #1
1a008f22:	4606      	mov	r6, r0
1a008f24:	460f      	mov	r7, r1
1a008f26:	f7fc fd5f 	bl	1a0059e8 <__aeabi_dcmplt>
1a008f2a:	4632      	mov	r2, r6
1a008f2c:	463b      	mov	r3, r7
1a008f2e:	2800      	cmp	r0, #0
1a008f30:	d0c9      	beq.n	1a008ec6 <_dtoa_r+0x3d6>
1a008f32:	9b12      	ldr	r3, [sp, #72]	; 0x48
1a008f34:	46da      	mov	sl, fp
1a008f36:	3301      	adds	r3, #1
1a008f38:	f8dd b000 	ldr.w	fp, [sp]
1a008f3c:	9306      	str	r3, [sp, #24]
1a008f3e:	4659      	mov	r1, fp
1a008f40:	4650      	mov	r0, sl
1a008f42:	f001 f84b 	bl	1a009fdc <_Bfree>
1a008f46:	2300      	movs	r3, #0
1a008f48:	7023      	strb	r3, [r4, #0]
1a008f4a:	9b07      	ldr	r3, [sp, #28]
1a008f4c:	461a      	mov	r2, r3
1a008f4e:	9b06      	ldr	r3, [sp, #24]
1a008f50:	6013      	str	r3, [r2, #0]
1a008f52:	9b21      	ldr	r3, [sp, #132]	; 0x84
1a008f54:	2b00      	cmp	r3, #0
1a008f56:	f43f ae09 	beq.w	1a008b6c <_dtoa_r+0x7c>
1a008f5a:	9803      	ldr	r0, [sp, #12]
1a008f5c:	601c      	str	r4, [r3, #0]
1a008f5e:	b017      	add	sp, #92	; 0x5c
1a008f60:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
1a008f64:	46da      	mov	sl, fp
1a008f66:	f8dd 9040 	ldr.w	r9, [sp, #64]	; 0x40
1a008f6a:	f8dd 804c 	ldr.w	r8, [sp, #76]	; 0x4c
1a008f6e:	f8dd b000 	ldr.w	fp, [sp]
1a008f72:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
1a008f76:	e9cd 3400 	strd	r3, r4, [sp]
1a008f7a:	9b15      	ldr	r3, [sp, #84]	; 0x54
1a008f7c:	2b00      	cmp	r3, #0
1a008f7e:	f2c0 80c9 	blt.w	1a009114 <_dtoa_r+0x624>
1a008f82:	9a06      	ldr	r2, [sp, #24]
1a008f84:	2a0e      	cmp	r2, #14
1a008f86:	f300 80c5 	bgt.w	1a009114 <_dtoa_r+0x624>
1a008f8a:	4b2c      	ldr	r3, [pc, #176]	; (1a00903c <_dtoa_r+0x54c>)
1a008f8c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
1a008f90:	e9d3 8900 	ldrd	r8, r9, [r3]
1a008f94:	9b0a      	ldr	r3, [sp, #40]	; 0x28
1a008f96:	2b00      	cmp	r3, #0
1a008f98:	da17      	bge.n	1a008fca <_dtoa_r+0x4da>
1a008f9a:	9f09      	ldr	r7, [sp, #36]	; 0x24
1a008f9c:	2f00      	cmp	r7, #0
1a008f9e:	dc14      	bgt.n	1a008fca <_dtoa_r+0x4da>
1a008fa0:	f040 834b 	bne.w	1a00963a <_dtoa_r+0xb4a>
1a008fa4:	2200      	movs	r2, #0
1a008fa6:	4b2b      	ldr	r3, [pc, #172]	; (1a009054 <_dtoa_r+0x564>)
1a008fa8:	4640      	mov	r0, r8
1a008faa:	4649      	mov	r1, r9
1a008fac:	f7fc faaa 	bl	1a005504 <__aeabi_dmul>
1a008fb0:	e9dd 2300 	ldrd	r2, r3, [sp]
1a008fb4:	f7fc fd2c 	bl	1a005a10 <__aeabi_dcmpge>
1a008fb8:	2800      	cmp	r0, #0
1a008fba:	f000 83be 	beq.w	1a00973a <_dtoa_r+0xc4a>
1a008fbe:	9f09      	ldr	r7, [sp, #36]	; 0x24
1a008fc0:	463d      	mov	r5, r7
1a008fc2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
1a008fc4:	9c03      	ldr	r4, [sp, #12]
1a008fc6:	43db      	mvns	r3, r3
1a008fc8:	e260      	b.n	1a00948c <_dtoa_r+0x99c>
1a008fca:	e9dd 4500 	ldrd	r4, r5, [sp]
1a008fce:	4642      	mov	r2, r8
1a008fd0:	464b      	mov	r3, r9
1a008fd2:	4620      	mov	r0, r4
1a008fd4:	4629      	mov	r1, r5
1a008fd6:	f7fc fbbf 	bl	1a005758 <__aeabi_ddiv>
1a008fda:	f001 feb3 	bl	1a00ad44 <__aeabi_d2iz>
1a008fde:	9000      	str	r0, [sp, #0]
1a008fe0:	f7fc fa26 	bl	1a005430 <__aeabi_i2d>
1a008fe4:	4642      	mov	r2, r8
1a008fe6:	464b      	mov	r3, r9
1a008fe8:	f7fc fa8c 	bl	1a005504 <__aeabi_dmul>
1a008fec:	4602      	mov	r2, r0
1a008fee:	460b      	mov	r3, r1
1a008ff0:	4620      	mov	r0, r4
1a008ff2:	4629      	mov	r1, r5
1a008ff4:	f7fc f8ce 	bl	1a005194 <__aeabi_dsub>
1a008ff8:	9b00      	ldr	r3, [sp, #0]
1a008ffa:	9c03      	ldr	r4, [sp, #12]
1a008ffc:	9a06      	ldr	r2, [sp, #24]
1a008ffe:	3330      	adds	r3, #48	; 0x30
1a009000:	f804 3b01 	strb.w	r3, [r4], #1
1a009004:	9b09      	ldr	r3, [sp, #36]	; 0x24
1a009006:	3201      	adds	r2, #1
1a009008:	2b01      	cmp	r3, #1
1a00900a:	4606      	mov	r6, r0
1a00900c:	460f      	mov	r7, r1
1a00900e:	9206      	str	r2, [sp, #24]
1a009010:	d054      	beq.n	1a0090bc <_dtoa_r+0x5cc>
1a009012:	2200      	movs	r2, #0
1a009014:	4b0e      	ldr	r3, [pc, #56]	; (1a009050 <_dtoa_r+0x560>)
1a009016:	f7fc fa75 	bl	1a005504 <__aeabi_dmul>
1a00901a:	2200      	movs	r2, #0
1a00901c:	2300      	movs	r3, #0
1a00901e:	4606      	mov	r6, r0
1a009020:	460f      	mov	r7, r1
1a009022:	f7fc fcd7 	bl	1a0059d4 <__aeabi_dcmpeq>
1a009026:	2800      	cmp	r0, #0
1a009028:	d189      	bne.n	1a008f3e <_dtoa_r+0x44e>
1a00902a:	f8cd b000 	str.w	fp, [sp]
1a00902e:	2501      	movs	r5, #1
1a009030:	f8dd b024 	ldr.w	fp, [sp, #36]	; 0x24
1a009034:	f8cd a008 	str.w	sl, [sp, #8]
1a009038:	e019      	b.n	1a00906e <_dtoa_r+0x57e>
1a00903a:	bf00      	nop
1a00903c:	1a00b378 	.word	0x1a00b378
1a009040:	1a00b350 	.word	0x1a00b350
1a009044:	3ff00000 	.word	0x3ff00000
1a009048:	401c0000 	.word	0x401c0000
1a00904c:	3fe00000 	.word	0x3fe00000
1a009050:	40240000 	.word	0x40240000
1a009054:	40140000 	.word	0x40140000
1a009058:	f7fc fa54 	bl	1a005504 <__aeabi_dmul>
1a00905c:	2200      	movs	r2, #0
1a00905e:	2300      	movs	r3, #0
1a009060:	4606      	mov	r6, r0
1a009062:	460f      	mov	r7, r1
1a009064:	f7fc fcb6 	bl	1a0059d4 <__aeabi_dcmpeq>
1a009068:	2800      	cmp	r0, #0
1a00906a:	f040 835c 	bne.w	1a009726 <_dtoa_r+0xc36>
1a00906e:	4642      	mov	r2, r8
1a009070:	464b      	mov	r3, r9
1a009072:	4630      	mov	r0, r6
1a009074:	4639      	mov	r1, r7
1a009076:	f7fc fb6f 	bl	1a005758 <__aeabi_ddiv>
1a00907a:	f001 fe63 	bl	1a00ad44 <__aeabi_d2iz>
1a00907e:	4682      	mov	sl, r0
1a009080:	f7fc f9d6 	bl	1a005430 <__aeabi_i2d>
1a009084:	4642      	mov	r2, r8
1a009086:	464b      	mov	r3, r9
1a009088:	f7fc fa3c 	bl	1a005504 <__aeabi_dmul>
1a00908c:	4602      	mov	r2, r0
1a00908e:	460b      	mov	r3, r1
1a009090:	4630      	mov	r0, r6
1a009092:	4639      	mov	r1, r7
1a009094:	f7fc f87e 	bl	1a005194 <__aeabi_dsub>
1a009098:	3501      	adds	r5, #1
1a00909a:	f10a 0c30 	add.w	ip, sl, #48	; 0x30
1a00909e:	45ab      	cmp	fp, r5
1a0090a0:	4606      	mov	r6, r0
1a0090a2:	460f      	mov	r7, r1
1a0090a4:	f04f 0200 	mov.w	r2, #0
1a0090a8:	4ba7      	ldr	r3, [pc, #668]	; (1a009348 <_dtoa_r+0x858>)
1a0090aa:	f804 cb01 	strb.w	ip, [r4], #1
1a0090ae:	d1d3      	bne.n	1a009058 <_dtoa_r+0x568>
1a0090b0:	f8dd b000 	ldr.w	fp, [sp]
1a0090b4:	f8cd a000 	str.w	sl, [sp]
1a0090b8:	f8dd a008 	ldr.w	sl, [sp, #8]
1a0090bc:	4632      	mov	r2, r6
1a0090be:	463b      	mov	r3, r7
1a0090c0:	4630      	mov	r0, r6
1a0090c2:	4639      	mov	r1, r7
1a0090c4:	f7fc f868 	bl	1a005198 <__adddf3>
1a0090c8:	4642      	mov	r2, r8
1a0090ca:	464b      	mov	r3, r9
1a0090cc:	4606      	mov	r6, r0
1a0090ce:	460f      	mov	r7, r1
1a0090d0:	f7fc fca8 	bl	1a005a24 <__aeabi_dcmpgt>
1a0090d4:	b960      	cbnz	r0, 1a0090f0 <_dtoa_r+0x600>
1a0090d6:	4642      	mov	r2, r8
1a0090d8:	464b      	mov	r3, r9
1a0090da:	4630      	mov	r0, r6
1a0090dc:	4639      	mov	r1, r7
1a0090de:	f7fc fc79 	bl	1a0059d4 <__aeabi_dcmpeq>
1a0090e2:	2800      	cmp	r0, #0
1a0090e4:	f43f af2b 	beq.w	1a008f3e <_dtoa_r+0x44e>
1a0090e8:	9b00      	ldr	r3, [sp, #0]
1a0090ea:	07db      	lsls	r3, r3, #31
1a0090ec:	f57f af27 	bpl.w	1a008f3e <_dtoa_r+0x44e>
1a0090f0:	f814 5c01 	ldrb.w	r5, [r4, #-1]
1a0090f4:	9a03      	ldr	r2, [sp, #12]
1a0090f6:	1e63      	subs	r3, r4, #1
1a0090f8:	e004      	b.n	1a009104 <_dtoa_r+0x614>
1a0090fa:	429a      	cmp	r2, r3
1a0090fc:	f000 83c0 	beq.w	1a009880 <_dtoa_r+0xd90>
1a009100:	f813 5d01 	ldrb.w	r5, [r3, #-1]!
1a009104:	2d39      	cmp	r5, #57	; 0x39
1a009106:	f103 0401 	add.w	r4, r3, #1
1a00910a:	d0f6      	beq.n	1a0090fa <_dtoa_r+0x60a>
1a00910c:	1c6a      	adds	r2, r5, #1
1a00910e:	b2d2      	uxtb	r2, r2
1a009110:	701a      	strb	r2, [r3, #0]
1a009112:	e714      	b.n	1a008f3e <_dtoa_r+0x44e>
1a009114:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
1a009116:	2a00      	cmp	r2, #0
1a009118:	d03c      	beq.n	1a009194 <_dtoa_r+0x6a4>
1a00911a:	9a02      	ldr	r2, [sp, #8]
1a00911c:	2a01      	cmp	r2, #1
1a00911e:	f340 8258 	ble.w	1a0095d2 <_dtoa_r+0xae2>
1a009122:	9b09      	ldr	r3, [sp, #36]	; 0x24
1a009124:	1e5e      	subs	r6, r3, #1
1a009126:	9b0c      	ldr	r3, [sp, #48]	; 0x30
1a009128:	42b3      	cmp	r3, r6
1a00912a:	f280 8234 	bge.w	1a009596 <_dtoa_r+0xaa6>
1a00912e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
1a009130:	960c      	str	r6, [sp, #48]	; 0x30
1a009132:	1af3      	subs	r3, r6, r3
1a009134:	4499      	add	r9, r3
1a009136:	2600      	movs	r6, #0
1a009138:	9b09      	ldr	r3, [sp, #36]	; 0x24
1a00913a:	2b00      	cmp	r3, #0
1a00913c:	f2c0 82f8 	blt.w	1a009730 <_dtoa_r+0xc40>
1a009140:	9a08      	ldr	r2, [sp, #32]
1a009142:	4614      	mov	r4, r2
1a009144:	441a      	add	r2, r3
1a009146:	4498      	add	r8, r3
1a009148:	9208      	str	r2, [sp, #32]
1a00914a:	2101      	movs	r1, #1
1a00914c:	4650      	mov	r0, sl
1a00914e:	f000 ffe5 	bl	1a00a11c <__i2b>
1a009152:	4605      	mov	r5, r0
1a009154:	e021      	b.n	1a00919a <_dtoa_r+0x6aa>
1a009156:	2301      	movs	r3, #1
1a009158:	f1b8 0f00 	cmp.w	r8, #0
1a00915c:	930d      	str	r3, [sp, #52]	; 0x34
1a00915e:	f6bf ad77 	bge.w	1a008c50 <_dtoa_r+0x160>
1a009162:	f1c4 0301 	rsb	r3, r4, #1
1a009166:	9308      	str	r3, [sp, #32]
1a009168:	f04f 0800 	mov.w	r8, #0
1a00916c:	e572      	b.n	1a008c54 <_dtoa_r+0x164>
1a00916e:	4648      	mov	r0, r9
1a009170:	f7fc f95e 	bl	1a005430 <__aeabi_i2d>
1a009174:	4632      	mov	r2, r6
1a009176:	463b      	mov	r3, r7
1a009178:	f7fc fc2c 	bl	1a0059d4 <__aeabi_dcmpeq>
1a00917c:	2800      	cmp	r0, #0
1a00917e:	f47f ad4d 	bne.w	1a008c1c <_dtoa_r+0x12c>
1a009182:	f109 39ff 	add.w	r9, r9, #4294967295	; 0xffffffff
1a009186:	e549      	b.n	1a008c1c <_dtoa_r+0x12c>
1a009188:	4b70      	ldr	r3, [pc, #448]	; (1a00934c <_dtoa_r+0x85c>)
1a00918a:	9303      	str	r3, [sp, #12]
1a00918c:	9803      	ldr	r0, [sp, #12]
1a00918e:	b017      	add	sp, #92	; 0x5c
1a009190:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
1a009194:	9e0c      	ldr	r6, [sp, #48]	; 0x30
1a009196:	9c08      	ldr	r4, [sp, #32]
1a009198:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
1a00919a:	2c00      	cmp	r4, #0
1a00919c:	dd0c      	ble.n	1a0091b8 <_dtoa_r+0x6c8>
1a00919e:	f1b8 0f00 	cmp.w	r8, #0
1a0091a2:	dd09      	ble.n	1a0091b8 <_dtoa_r+0x6c8>
1a0091a4:	4544      	cmp	r4, r8
1a0091a6:	9a08      	ldr	r2, [sp, #32]
1a0091a8:	4623      	mov	r3, r4
1a0091aa:	bfa8      	it	ge
1a0091ac:	4643      	movge	r3, r8
1a0091ae:	1ad2      	subs	r2, r2, r3
1a0091b0:	9208      	str	r2, [sp, #32]
1a0091b2:	1ae4      	subs	r4, r4, r3
1a0091b4:	eba8 0803 	sub.w	r8, r8, r3
1a0091b8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
1a0091ba:	b1d3      	cbz	r3, 1a0091f2 <_dtoa_r+0x702>
1a0091bc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
1a0091be:	2b00      	cmp	r3, #0
1a0091c0:	f000 8189 	beq.w	1a0094d6 <_dtoa_r+0x9e6>
1a0091c4:	2e00      	cmp	r6, #0
1a0091c6:	dd10      	ble.n	1a0091ea <_dtoa_r+0x6fa>
1a0091c8:	4629      	mov	r1, r5
1a0091ca:	4632      	mov	r2, r6
1a0091cc:	4650      	mov	r0, sl
1a0091ce:	f001 f847 	bl	1a00a260 <__pow5mult>
1a0091d2:	465a      	mov	r2, fp
1a0091d4:	4601      	mov	r1, r0
1a0091d6:	4605      	mov	r5, r0
1a0091d8:	4650      	mov	r0, sl
1a0091da:	f000 ffa9 	bl	1a00a130 <__multiply>
1a0091de:	4659      	mov	r1, fp
1a0091e0:	4607      	mov	r7, r0
1a0091e2:	4650      	mov	r0, sl
1a0091e4:	f000 fefa 	bl	1a009fdc <_Bfree>
1a0091e8:	46bb      	mov	fp, r7
1a0091ea:	9b0c      	ldr	r3, [sp, #48]	; 0x30
1a0091ec:	1b9a      	subs	r2, r3, r6
1a0091ee:	f040 8173 	bne.w	1a0094d8 <_dtoa_r+0x9e8>
1a0091f2:	2101      	movs	r1, #1
1a0091f4:	4650      	mov	r0, sl
1a0091f6:	f000 ff91 	bl	1a00a11c <__i2b>
1a0091fa:	f1b9 0f00 	cmp.w	r9, #0
1a0091fe:	4607      	mov	r7, r0
1a009200:	f300 808e 	bgt.w	1a009320 <_dtoa_r+0x830>
1a009204:	9b02      	ldr	r3, [sp, #8]
1a009206:	2b01      	cmp	r3, #1
1a009208:	f340 8171 	ble.w	1a0094ee <_dtoa_r+0x9fe>
1a00920c:	2600      	movs	r6, #0
1a00920e:	2001      	movs	r0, #1
1a009210:	f1b9 0f00 	cmp.w	r9, #0
1a009214:	f040 808f 	bne.w	1a009336 <_dtoa_r+0x846>
1a009218:	4440      	add	r0, r8
1a00921a:	f010 001f 	ands.w	r0, r0, #31
1a00921e:	d075      	beq.n	1a00930c <_dtoa_r+0x81c>
1a009220:	f1c0 0320 	rsb	r3, r0, #32
1a009224:	2b04      	cmp	r3, #4
1a009226:	f340 836d 	ble.w	1a009904 <_dtoa_r+0xe14>
1a00922a:	f1c0 001c 	rsb	r0, r0, #28
1a00922e:	9b08      	ldr	r3, [sp, #32]
1a009230:	4403      	add	r3, r0
1a009232:	9308      	str	r3, [sp, #32]
1a009234:	4404      	add	r4, r0
1a009236:	4480      	add	r8, r0
1a009238:	9b08      	ldr	r3, [sp, #32]
1a00923a:	2b00      	cmp	r3, #0
1a00923c:	dd05      	ble.n	1a00924a <_dtoa_r+0x75a>
1a00923e:	4659      	mov	r1, fp
1a009240:	461a      	mov	r2, r3
1a009242:	4650      	mov	r0, sl
1a009244:	f001 f85c 	bl	1a00a300 <__lshift>
1a009248:	4683      	mov	fp, r0
1a00924a:	f1b8 0f00 	cmp.w	r8, #0
1a00924e:	dd05      	ble.n	1a00925c <_dtoa_r+0x76c>
1a009250:	4639      	mov	r1, r7
1a009252:	4642      	mov	r2, r8
1a009254:	4650      	mov	r0, sl
1a009256:	f001 f853 	bl	1a00a300 <__lshift>
1a00925a:	4607      	mov	r7, r0
1a00925c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
1a00925e:	2b00      	cmp	r3, #0
1a009260:	f040 811e 	bne.w	1a0094a0 <_dtoa_r+0x9b0>
1a009264:	9b09      	ldr	r3, [sp, #36]	; 0x24
1a009266:	2b00      	cmp	r3, #0
1a009268:	f340 80f5 	ble.w	1a009456 <_dtoa_r+0x966>
1a00926c:	9b06      	ldr	r3, [sp, #24]
1a00926e:	3301      	adds	r3, #1
1a009270:	9306      	str	r3, [sp, #24]
1a009272:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
1a009274:	2b00      	cmp	r3, #0
1a009276:	d177      	bne.n	1a009368 <_dtoa_r+0x878>
1a009278:	9c03      	ldr	r4, [sp, #12]
1a00927a:	f8dd 8024 	ldr.w	r8, [sp, #36]	; 0x24
1a00927e:	2601      	movs	r6, #1
1a009280:	e003      	b.n	1a00928a <_dtoa_r+0x79a>
1a009282:	f000 feb5 	bl	1a009ff0 <__multadd>
1a009286:	3601      	adds	r6, #1
1a009288:	4683      	mov	fp, r0
1a00928a:	4639      	mov	r1, r7
1a00928c:	4658      	mov	r0, fp
1a00928e:	f7ff fb9b 	bl	1a0089c8 <quorem>
1a009292:	4546      	cmp	r6, r8
1a009294:	f100 0930 	add.w	r9, r0, #48	; 0x30
1a009298:	f804 9b01 	strb.w	r9, [r4], #1
1a00929c:	f04f 0300 	mov.w	r3, #0
1a0092a0:	f04f 020a 	mov.w	r2, #10
1a0092a4:	4659      	mov	r1, fp
1a0092a6:	4650      	mov	r0, sl
1a0092a8:	dbeb      	blt.n	1a009282 <_dtoa_r+0x792>
1a0092aa:	2300      	movs	r3, #0
1a0092ac:	9300      	str	r3, [sp, #0]
1a0092ae:	4659      	mov	r1, fp
1a0092b0:	2201      	movs	r2, #1
1a0092b2:	4650      	mov	r0, sl
1a0092b4:	f001 f824 	bl	1a00a300 <__lshift>
1a0092b8:	4639      	mov	r1, r7
1a0092ba:	4683      	mov	fp, r0
1a0092bc:	f001 f87a 	bl	1a00a3b4 <__mcmp>
1a0092c0:	2800      	cmp	r0, #0
1a0092c2:	f814 2c01 	ldrb.w	r2, [r4, #-1]
1a0092c6:	f340 816f 	ble.w	1a0095a8 <_dtoa_r+0xab8>
1a0092ca:	1e63      	subs	r3, r4, #1
1a0092cc:	9903      	ldr	r1, [sp, #12]
1a0092ce:	e004      	b.n	1a0092da <_dtoa_r+0x7ea>
1a0092d0:	4299      	cmp	r1, r3
1a0092d2:	f000 8177 	beq.w	1a0095c4 <_dtoa_r+0xad4>
1a0092d6:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
1a0092da:	2a39      	cmp	r2, #57	; 0x39
1a0092dc:	f103 0401 	add.w	r4, r3, #1
1a0092e0:	d0f6      	beq.n	1a0092d0 <_dtoa_r+0x7e0>
1a0092e2:	3201      	adds	r2, #1
1a0092e4:	701a      	strb	r2, [r3, #0]
1a0092e6:	4639      	mov	r1, r7
1a0092e8:	4650      	mov	r0, sl
1a0092ea:	f000 fe77 	bl	1a009fdc <_Bfree>
1a0092ee:	2d00      	cmp	r5, #0
1a0092f0:	f43f ae25 	beq.w	1a008f3e <_dtoa_r+0x44e>
1a0092f4:	9900      	ldr	r1, [sp, #0]
1a0092f6:	b121      	cbz	r1, 1a009302 <_dtoa_r+0x812>
1a0092f8:	42a9      	cmp	r1, r5
1a0092fa:	d002      	beq.n	1a009302 <_dtoa_r+0x812>
1a0092fc:	4650      	mov	r0, sl
1a0092fe:	f000 fe6d 	bl	1a009fdc <_Bfree>
1a009302:	4629      	mov	r1, r5
1a009304:	4650      	mov	r0, sl
1a009306:	f000 fe69 	bl	1a009fdc <_Bfree>
1a00930a:	e618      	b.n	1a008f3e <_dtoa_r+0x44e>
1a00930c:	201c      	movs	r0, #28
1a00930e:	e78e      	b.n	1a00922e <_dtoa_r+0x73e>
1a009310:	2401      	movs	r4, #1
1a009312:	e4b6      	b.n	1a008c82 <_dtoa_r+0x192>
1a009314:	f1c3 0620 	rsb	r6, r3, #32
1a009318:	9b00      	ldr	r3, [sp, #0]
1a00931a:	fa03 f006 	lsl.w	r0, r3, r6
1a00931e:	e447      	b.n	1a008bb0 <_dtoa_r+0xc0>
1a009320:	4601      	mov	r1, r0
1a009322:	464a      	mov	r2, r9
1a009324:	4650      	mov	r0, sl
1a009326:	f000 ff9b 	bl	1a00a260 <__pow5mult>
1a00932a:	9b02      	ldr	r3, [sp, #8]
1a00932c:	2b01      	cmp	r3, #1
1a00932e:	4607      	mov	r7, r0
1a009330:	f340 81b2 	ble.w	1a009698 <_dtoa_r+0xba8>
1a009334:	2600      	movs	r6, #0
1a009336:	693b      	ldr	r3, [r7, #16]
1a009338:	eb07 0383 	add.w	r3, r7, r3, lsl #2
1a00933c:	6918      	ldr	r0, [r3, #16]
1a00933e:	f000 fe9d 	bl	1a00a07c <__hi0bits>
1a009342:	f1c0 0020 	rsb	r0, r0, #32
1a009346:	e767      	b.n	1a009218 <_dtoa_r+0x728>
1a009348:	40240000 	.word	0x40240000
1a00934c:	1a00b31c 	.word	0x1a00b31c
1a009350:	4629      	mov	r1, r5
1a009352:	2300      	movs	r3, #0
1a009354:	220a      	movs	r2, #10
1a009356:	4650      	mov	r0, sl
1a009358:	f000 fe4a 	bl	1a009ff0 <__multadd>
1a00935c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
1a00935e:	2b00      	cmp	r3, #0
1a009360:	4605      	mov	r5, r0
1a009362:	f340 82c1 	ble.w	1a0098e8 <_dtoa_r+0xdf8>
1a009366:	9309      	str	r3, [sp, #36]	; 0x24
1a009368:	2c00      	cmp	r4, #0
1a00936a:	f300 810d 	bgt.w	1a009588 <_dtoa_r+0xa98>
1a00936e:	2e00      	cmp	r6, #0
1a009370:	f040 81c5 	bne.w	1a0096fe <_dtoa_r+0xc0e>
1a009374:	46a8      	mov	r8, r5
1a009376:	9b00      	ldr	r3, [sp, #0]
1a009378:	9902      	ldr	r1, [sp, #8]
1a00937a:	9e03      	ldr	r6, [sp, #12]
1a00937c:	f003 0201 	and.w	r2, r3, #1
1a009380:	920b      	str	r2, [sp, #44]	; 0x2c
1a009382:	430a      	orrs	r2, r1
1a009384:	920a      	str	r2, [sp, #40]	; 0x28
1a009386:	9a09      	ldr	r2, [sp, #36]	; 0x24
1a009388:	1e73      	subs	r3, r6, #1
1a00938a:	441a      	add	r2, r3
1a00938c:	9209      	str	r2, [sp, #36]	; 0x24
1a00938e:	463c      	mov	r4, r7
1a009390:	4621      	mov	r1, r4
1a009392:	4658      	mov	r0, fp
1a009394:	f7ff fb18 	bl	1a0089c8 <quorem>
1a009398:	4629      	mov	r1, r5
1a00939a:	9000      	str	r0, [sp, #0]
1a00939c:	4658      	mov	r0, fp
1a00939e:	f001 f809 	bl	1a00a3b4 <__mcmp>
1a0093a2:	4642      	mov	r2, r8
1a0093a4:	4607      	mov	r7, r0
1a0093a6:	4621      	mov	r1, r4
1a0093a8:	4650      	mov	r0, sl
1a0093aa:	f001 f81f 	bl	1a00a3ec <__mdiff>
1a0093ae:	9b00      	ldr	r3, [sp, #0]
1a0093b0:	f103 0230 	add.w	r2, r3, #48	; 0x30
1a0093b4:	68c3      	ldr	r3, [r0, #12]
1a0093b6:	4681      	mov	r9, r0
1a0093b8:	2b00      	cmp	r3, #0
1a0093ba:	d13e      	bne.n	1a00943a <_dtoa_r+0x94a>
1a0093bc:	4601      	mov	r1, r0
1a0093be:	4658      	mov	r0, fp
1a0093c0:	9208      	str	r2, [sp, #32]
1a0093c2:	f000 fff7 	bl	1a00a3b4 <__mcmp>
1a0093c6:	4649      	mov	r1, r9
1a0093c8:	9004      	str	r0, [sp, #16]
1a0093ca:	4650      	mov	r0, sl
1a0093cc:	f000 fe06 	bl	1a009fdc <_Bfree>
1a0093d0:	9b04      	ldr	r3, [sp, #16]
1a0093d2:	9a08      	ldr	r2, [sp, #32]
1a0093d4:	b91b      	cbnz	r3, 1a0093de <_dtoa_r+0x8ee>
1a0093d6:	990a      	ldr	r1, [sp, #40]	; 0x28
1a0093d8:	2900      	cmp	r1, #0
1a0093da:	f000 8271 	beq.w	1a0098c0 <_dtoa_r+0xdd0>
1a0093de:	2f00      	cmp	r7, #0
1a0093e0:	f106 0901 	add.w	r9, r6, #1
1a0093e4:	f2c0 816e 	blt.w	1a0096c4 <_dtoa_r+0xbd4>
1a0093e8:	9902      	ldr	r1, [sp, #8]
1a0093ea:	430f      	orrs	r7, r1
1a0093ec:	990b      	ldr	r1, [sp, #44]	; 0x2c
1a0093ee:	4339      	orrs	r1, r7
1a0093f0:	f000 8168 	beq.w	1a0096c4 <_dtoa_r+0xbd4>
1a0093f4:	2b00      	cmp	r3, #0
1a0093f6:	f300 81a2 	bgt.w	1a00973e <_dtoa_r+0xc4e>
1a0093fa:	9b09      	ldr	r3, [sp, #36]	; 0x24
1a0093fc:	7032      	strb	r2, [r6, #0]
1a0093fe:	42b3      	cmp	r3, r6
1a009400:	f000 81a9 	beq.w	1a009756 <_dtoa_r+0xc66>
1a009404:	4659      	mov	r1, fp
1a009406:	2300      	movs	r3, #0
1a009408:	220a      	movs	r2, #10
1a00940a:	4650      	mov	r0, sl
1a00940c:	f000 fdf0 	bl	1a009ff0 <__multadd>
1a009410:	4545      	cmp	r5, r8
1a009412:	4683      	mov	fp, r0
1a009414:	4629      	mov	r1, r5
1a009416:	f04f 0300 	mov.w	r3, #0
1a00941a:	f04f 020a 	mov.w	r2, #10
1a00941e:	4650      	mov	r0, sl
1a009420:	d013      	beq.n	1a00944a <_dtoa_r+0x95a>
1a009422:	f000 fde5 	bl	1a009ff0 <__multadd>
1a009426:	4641      	mov	r1, r8
1a009428:	4605      	mov	r5, r0
1a00942a:	2300      	movs	r3, #0
1a00942c:	220a      	movs	r2, #10
1a00942e:	4650      	mov	r0, sl
1a009430:	f000 fdde 	bl	1a009ff0 <__multadd>
1a009434:	464e      	mov	r6, r9
1a009436:	4680      	mov	r8, r0
1a009438:	e7aa      	b.n	1a009390 <_dtoa_r+0x8a0>
1a00943a:	4601      	mov	r1, r0
1a00943c:	4650      	mov	r0, sl
1a00943e:	9204      	str	r2, [sp, #16]
1a009440:	f000 fdcc 	bl	1a009fdc <_Bfree>
1a009444:	2301      	movs	r3, #1
1a009446:	9a04      	ldr	r2, [sp, #16]
1a009448:	e7c9      	b.n	1a0093de <_dtoa_r+0x8ee>
1a00944a:	f000 fdd1 	bl	1a009ff0 <__multadd>
1a00944e:	464e      	mov	r6, r9
1a009450:	4605      	mov	r5, r0
1a009452:	4680      	mov	r8, r0
1a009454:	e79c      	b.n	1a009390 <_dtoa_r+0x8a0>
1a009456:	9b02      	ldr	r3, [sp, #8]
1a009458:	2b02      	cmp	r3, #2
1a00945a:	f340 8082 	ble.w	1a009562 <_dtoa_r+0xa72>
1a00945e:	9b09      	ldr	r3, [sp, #36]	; 0x24
1a009460:	2b00      	cmp	r3, #0
1a009462:	f47f adae 	bne.w	1a008fc2 <_dtoa_r+0x4d2>
1a009466:	4639      	mov	r1, r7
1a009468:	2205      	movs	r2, #5
1a00946a:	4650      	mov	r0, sl
1a00946c:	f000 fdc0 	bl	1a009ff0 <__multadd>
1a009470:	4601      	mov	r1, r0
1a009472:	4607      	mov	r7, r0
1a009474:	4658      	mov	r0, fp
1a009476:	f000 ff9d 	bl	1a00a3b4 <__mcmp>
1a00947a:	2800      	cmp	r0, #0
1a00947c:	f77f ada1 	ble.w	1a008fc2 <_dtoa_r+0x4d2>
1a009480:	9c03      	ldr	r4, [sp, #12]
1a009482:	9b06      	ldr	r3, [sp, #24]
1a009484:	2231      	movs	r2, #49	; 0x31
1a009486:	f804 2b01 	strb.w	r2, [r4], #1
1a00948a:	3301      	adds	r3, #1
1a00948c:	3301      	adds	r3, #1
1a00948e:	4639      	mov	r1, r7
1a009490:	4650      	mov	r0, sl
1a009492:	9306      	str	r3, [sp, #24]
1a009494:	f000 fda2 	bl	1a009fdc <_Bfree>
1a009498:	2d00      	cmp	r5, #0
1a00949a:	f47f af32 	bne.w	1a009302 <_dtoa_r+0x812>
1a00949e:	e54e      	b.n	1a008f3e <_dtoa_r+0x44e>
1a0094a0:	4639      	mov	r1, r7
1a0094a2:	4658      	mov	r0, fp
1a0094a4:	f000 ff86 	bl	1a00a3b4 <__mcmp>
1a0094a8:	2800      	cmp	r0, #0
1a0094aa:	f6bf aedb 	bge.w	1a009264 <_dtoa_r+0x774>
1a0094ae:	4659      	mov	r1, fp
1a0094b0:	2300      	movs	r3, #0
1a0094b2:	220a      	movs	r2, #10
1a0094b4:	4650      	mov	r0, sl
1a0094b6:	f000 fd9b 	bl	1a009ff0 <__multadd>
1a0094ba:	9b06      	ldr	r3, [sp, #24]
1a0094bc:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
1a0094c0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
1a0094c2:	4683      	mov	fp, r0
1a0094c4:	2b00      	cmp	r3, #0
1a0094c6:	f47f af43 	bne.w	1a009350 <_dtoa_r+0x860>
1a0094ca:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
1a0094cc:	2b00      	cmp	r3, #0
1a0094ce:	f340 8202 	ble.w	1a0098d6 <_dtoa_r+0xde6>
1a0094d2:	9309      	str	r3, [sp, #36]	; 0x24
1a0094d4:	e6d0      	b.n	1a009278 <_dtoa_r+0x788>
1a0094d6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
1a0094d8:	4659      	mov	r1, fp
1a0094da:	4650      	mov	r0, sl
1a0094dc:	f000 fec0 	bl	1a00a260 <__pow5mult>
1a0094e0:	4683      	mov	fp, r0
1a0094e2:	e686      	b.n	1a0091f2 <_dtoa_r+0x702>
1a0094e4:	4b9f      	ldr	r3, [pc, #636]	; (1a009764 <_dtoa_r+0xc74>)
1a0094e6:	9303      	str	r3, [sp, #12]
1a0094e8:	3303      	adds	r3, #3
1a0094ea:	f7ff bbe5 	b.w	1a008cb8 <_dtoa_r+0x1c8>
1a0094ee:	e9dd 1200 	ldrd	r1, r2, [sp]
1a0094f2:	2900      	cmp	r1, #0
1a0094f4:	f47f ae8a 	bne.w	1a00920c <_dtoa_r+0x71c>
1a0094f8:	f3c2 0313 	ubfx	r3, r2, #0, #20
1a0094fc:	2b00      	cmp	r3, #0
1a0094fe:	f000 80d5 	beq.w	1a0096ac <_dtoa_r+0xbbc>
1a009502:	9e00      	ldr	r6, [sp, #0]
1a009504:	e683      	b.n	1a00920e <_dtoa_r+0x71e>
1a009506:	2301      	movs	r3, #1
1a009508:	930b      	str	r3, [sp, #44]	; 0x2c
1a00950a:	980a      	ldr	r0, [sp, #40]	; 0x28
1a00950c:	2800      	cmp	r0, #0
1a00950e:	dd46      	ble.n	1a00959e <_dtoa_r+0xaae>
1a009510:	900f      	str	r0, [sp, #60]	; 0x3c
1a009512:	9009      	str	r0, [sp, #36]	; 0x24
1a009514:	2100      	movs	r1, #0
1a009516:	2817      	cmp	r0, #23
1a009518:	f8ca 1044 	str.w	r1, [sl, #68]	; 0x44
1a00951c:	9d09      	ldr	r5, [sp, #36]	; 0x24
1a00951e:	f77f ac19 	ble.w	1a008d54 <_dtoa_r+0x264>
1a009522:	2201      	movs	r2, #1
1a009524:	2304      	movs	r3, #4
1a009526:	005b      	lsls	r3, r3, #1
1a009528:	f103 0614 	add.w	r6, r3, #20
1a00952c:	42b0      	cmp	r0, r6
1a00952e:	4611      	mov	r1, r2
1a009530:	f102 0201 	add.w	r2, r2, #1
1a009534:	d2f7      	bcs.n	1a009526 <_dtoa_r+0xa36>
1a009536:	f8ca 1044 	str.w	r1, [sl, #68]	; 0x44
1a00953a:	e40b      	b.n	1a008d54 <_dtoa_r+0x264>
1a00953c:	2301      	movs	r3, #1
1a00953e:	930b      	str	r3, [sp, #44]	; 0x2c
1a009540:	9b0a      	ldr	r3, [sp, #40]	; 0x28
1a009542:	9a06      	ldr	r2, [sp, #24]
1a009544:	4413      	add	r3, r2
1a009546:	930f      	str	r3, [sp, #60]	; 0x3c
1a009548:	3301      	adds	r3, #1
1a00954a:	2b01      	cmp	r3, #1
1a00954c:	4618      	mov	r0, r3
1a00954e:	9309      	str	r3, [sp, #36]	; 0x24
1a009550:	bfb8      	it	lt
1a009552:	2001      	movlt	r0, #1
1a009554:	e7de      	b.n	1a009514 <_dtoa_r+0xa24>
1a009556:	2300      	movs	r3, #0
1a009558:	930b      	str	r3, [sp, #44]	; 0x2c
1a00955a:	e7f1      	b.n	1a009540 <_dtoa_r+0xa50>
1a00955c:	2300      	movs	r3, #0
1a00955e:	930b      	str	r3, [sp, #44]	; 0x2c
1a009560:	e7d3      	b.n	1a00950a <_dtoa_r+0xa1a>
1a009562:	9b06      	ldr	r3, [sp, #24]
1a009564:	3301      	adds	r3, #1
1a009566:	9306      	str	r3, [sp, #24]
1a009568:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
1a00956a:	2b00      	cmp	r3, #0
1a00956c:	f47f aefc 	bne.w	1a009368 <_dtoa_r+0x878>
1a009570:	4639      	mov	r1, r7
1a009572:	4658      	mov	r0, fp
1a009574:	f7ff fa28 	bl	1a0089c8 <quorem>
1a009578:	9c03      	ldr	r4, [sp, #12]
1a00957a:	f100 0930 	add.w	r9, r0, #48	; 0x30
1a00957e:	2300      	movs	r3, #0
1a009580:	f804 9b01 	strb.w	r9, [r4], #1
1a009584:	9300      	str	r3, [sp, #0]
1a009586:	e692      	b.n	1a0092ae <_dtoa_r+0x7be>
1a009588:	4629      	mov	r1, r5
1a00958a:	4622      	mov	r2, r4
1a00958c:	4650      	mov	r0, sl
1a00958e:	f000 feb7 	bl	1a00a300 <__lshift>
1a009592:	4605      	mov	r5, r0
1a009594:	e6eb      	b.n	1a00936e <_dtoa_r+0x87e>
1a009596:	1b9e      	subs	r6, r3, r6
1a009598:	e5ce      	b.n	1a009138 <_dtoa_r+0x648>
1a00959a:	2602      	movs	r6, #2
1a00959c:	e403      	b.n	1a008da6 <_dtoa_r+0x2b6>
1a00959e:	2501      	movs	r5, #1
1a0095a0:	e9cd 5509 	strd	r5, r5, [sp, #36]	; 0x24
1a0095a4:	f7ff bbd2 	b.w	1a008d4c <_dtoa_r+0x25c>
1a0095a8:	d103      	bne.n	1a0095b2 <_dtoa_r+0xac2>
1a0095aa:	f019 0f01 	tst.w	r9, #1
1a0095ae:	f47f ae8c 	bne.w	1a0092ca <_dtoa_r+0x7da>
1a0095b2:	1e63      	subs	r3, r4, #1
1a0095b4:	e001      	b.n	1a0095ba <_dtoa_r+0xaca>
1a0095b6:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
1a0095ba:	2a30      	cmp	r2, #48	; 0x30
1a0095bc:	f103 0401 	add.w	r4, r3, #1
1a0095c0:	d0f9      	beq.n	1a0095b6 <_dtoa_r+0xac6>
1a0095c2:	e690      	b.n	1a0092e6 <_dtoa_r+0x7f6>
1a0095c4:	9a06      	ldr	r2, [sp, #24]
1a0095c6:	3201      	adds	r2, #1
1a0095c8:	9206      	str	r2, [sp, #24]
1a0095ca:	9a03      	ldr	r2, [sp, #12]
1a0095cc:	2331      	movs	r3, #49	; 0x31
1a0095ce:	7013      	strb	r3, [r2, #0]
1a0095d0:	e689      	b.n	1a0092e6 <_dtoa_r+0x7f6>
1a0095d2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
1a0095d4:	2a00      	cmp	r2, #0
1a0095d6:	f000 8126 	beq.w	1a009826 <_dtoa_r+0xd36>
1a0095da:	f203 4333 	addw	r3, r3, #1075	; 0x433
1a0095de:	9a08      	ldr	r2, [sp, #32]
1a0095e0:	9e0c      	ldr	r6, [sp, #48]	; 0x30
1a0095e2:	4614      	mov	r4, r2
1a0095e4:	441a      	add	r2, r3
1a0095e6:	4498      	add	r8, r3
1a0095e8:	9208      	str	r2, [sp, #32]
1a0095ea:	e5ae      	b.n	1a00914a <_dtoa_r+0x65a>
1a0095ec:	4630      	mov	r0, r6
1a0095ee:	f7fb ff1f 	bl	1a005430 <__aeabi_i2d>
1a0095f2:	e9dd 2300 	ldrd	r2, r3, [sp]
1a0095f6:	f7fb ff85 	bl	1a005504 <__aeabi_dmul>
1a0095fa:	2200      	movs	r2, #0
1a0095fc:	4b5a      	ldr	r3, [pc, #360]	; (1a009768 <_dtoa_r+0xc78>)
1a0095fe:	f7fb fdcb 	bl	1a005198 <__adddf3>
1a009602:	4604      	mov	r4, r0
1a009604:	f1a1 7550 	sub.w	r5, r1, #54525952	; 0x3400000
1a009608:	2200      	movs	r2, #0
1a00960a:	4b58      	ldr	r3, [pc, #352]	; (1a00976c <_dtoa_r+0xc7c>)
1a00960c:	e9dd 0100 	ldrd	r0, r1, [sp]
1a009610:	f7fb fdc0 	bl	1a005194 <__aeabi_dsub>
1a009614:	4622      	mov	r2, r4
1a009616:	462b      	mov	r3, r5
1a009618:	4606      	mov	r6, r0
1a00961a:	460f      	mov	r7, r1
1a00961c:	f7fc fa02 	bl	1a005a24 <__aeabi_dcmpgt>
1a009620:	2800      	cmp	r0, #0
1a009622:	f040 8089 	bne.w	1a009738 <_dtoa_r+0xc48>
1a009626:	4622      	mov	r2, r4
1a009628:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
1a00962c:	4630      	mov	r0, r6
1a00962e:	4639      	mov	r1, r7
1a009630:	f7fc f9da 	bl	1a0059e8 <__aeabi_dcmplt>
1a009634:	2800      	cmp	r0, #0
1a009636:	f43f ac9c 	beq.w	1a008f72 <_dtoa_r+0x482>
1a00963a:	2700      	movs	r7, #0
1a00963c:	463d      	mov	r5, r7
1a00963e:	e4c0      	b.n	1a008fc2 <_dtoa_r+0x4d2>
1a009640:	f000 80f5 	beq.w	1a00982e <_dtoa_r+0xd3e>
1a009644:	9b06      	ldr	r3, [sp, #24]
1a009646:	425c      	negs	r4, r3
1a009648:	4b49      	ldr	r3, [pc, #292]	; (1a009770 <_dtoa_r+0xc80>)
1a00964a:	f004 020f 	and.w	r2, r4, #15
1a00964e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
1a009652:	e9d3 2300 	ldrd	r2, r3, [r3]
1a009656:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
1a00965a:	f7fb ff53 	bl	1a005504 <__aeabi_dmul>
1a00965e:	1124      	asrs	r4, r4, #4
1a009660:	e9cd 0100 	strd	r0, r1, [sp]
1a009664:	f000 80e3 	beq.w	1a00982e <_dtoa_r+0xd3e>
1a009668:	4d42      	ldr	r5, [pc, #264]	; (1a009774 <_dtoa_r+0xc84>)
1a00966a:	2300      	movs	r3, #0
1a00966c:	2602      	movs	r6, #2
1a00966e:	07e2      	lsls	r2, r4, #31
1a009670:	d505      	bpl.n	1a00967e <_dtoa_r+0xb8e>
1a009672:	e9d5 2300 	ldrd	r2, r3, [r5]
1a009676:	f7fb ff45 	bl	1a005504 <__aeabi_dmul>
1a00967a:	3601      	adds	r6, #1
1a00967c:	2301      	movs	r3, #1
1a00967e:	1064      	asrs	r4, r4, #1
1a009680:	f105 0508 	add.w	r5, r5, #8
1a009684:	d1f3      	bne.n	1a00966e <_dtoa_r+0xb7e>
1a009686:	2b00      	cmp	r3, #0
1a009688:	f43f aba6 	beq.w	1a008dd8 <_dtoa_r+0x2e8>
1a00968c:	e9cd 0100 	strd	r0, r1, [sp]
1a009690:	f7ff bba2 	b.w	1a008dd8 <_dtoa_r+0x2e8>
1a009694:	900d      	str	r0, [sp, #52]	; 0x34
1a009696:	e564      	b.n	1a009162 <_dtoa_r+0x672>
1a009698:	e9dd 1200 	ldrd	r1, r2, [sp]
1a00969c:	2900      	cmp	r1, #0
1a00969e:	f47f ae49 	bne.w	1a009334 <_dtoa_r+0x844>
1a0096a2:	f3c2 0313 	ubfx	r3, r2, #0, #20
1a0096a6:	2b00      	cmp	r3, #0
1a0096a8:	f47f ae44 	bne.w	1a009334 <_dtoa_r+0x844>
1a0096ac:	4e32      	ldr	r6, [pc, #200]	; (1a009778 <_dtoa_r+0xc88>)
1a0096ae:	4016      	ands	r6, r2
1a0096b0:	2e00      	cmp	r6, #0
1a0096b2:	f43f adac 	beq.w	1a00920e <_dtoa_r+0x71e>
1a0096b6:	9b08      	ldr	r3, [sp, #32]
1a0096b8:	3301      	adds	r3, #1
1a0096ba:	9308      	str	r3, [sp, #32]
1a0096bc:	f108 0801 	add.w	r8, r8, #1
1a0096c0:	2601      	movs	r6, #1
1a0096c2:	e5a4      	b.n	1a00920e <_dtoa_r+0x71e>
1a0096c4:	2b00      	cmp	r3, #0
1a0096c6:	4627      	mov	r7, r4
1a0096c8:	464c      	mov	r4, r9
1a0096ca:	4691      	mov	r9, r2
1a0096cc:	dd12      	ble.n	1a0096f4 <_dtoa_r+0xc04>
1a0096ce:	4659      	mov	r1, fp
1a0096d0:	2201      	movs	r2, #1
1a0096d2:	4650      	mov	r0, sl
1a0096d4:	f000 fe14 	bl	1a00a300 <__lshift>
1a0096d8:	4639      	mov	r1, r7
1a0096da:	4683      	mov	fp, r0
1a0096dc:	f000 fe6a 	bl	1a00a3b4 <__mcmp>
1a0096e0:	2800      	cmp	r0, #0
1a0096e2:	f340 80df 	ble.w	1a0098a4 <_dtoa_r+0xdb4>
1a0096e6:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
1a0096ea:	f000 80d0 	beq.w	1a00988e <_dtoa_r+0xd9e>
1a0096ee:	9b00      	ldr	r3, [sp, #0]
1a0096f0:	f103 0931 	add.w	r9, r3, #49	; 0x31
1a0096f4:	9500      	str	r5, [sp, #0]
1a0096f6:	f886 9000 	strb.w	r9, [r6]
1a0096fa:	4645      	mov	r5, r8
1a0096fc:	e5f3      	b.n	1a0092e6 <_dtoa_r+0x7f6>
1a0096fe:	6869      	ldr	r1, [r5, #4]
1a009700:	4650      	mov	r0, sl
1a009702:	f000 fc45 	bl	1a009f90 <_Balloc>
1a009706:	692b      	ldr	r3, [r5, #16]
1a009708:	3302      	adds	r3, #2
1a00970a:	009a      	lsls	r2, r3, #2
1a00970c:	4604      	mov	r4, r0
1a00970e:	f105 010c 	add.w	r1, r5, #12
1a009712:	300c      	adds	r0, #12
1a009714:	f7fd f8ee 	bl	1a0068f4 <memcpy>
1a009718:	4621      	mov	r1, r4
1a00971a:	2201      	movs	r2, #1
1a00971c:	4650      	mov	r0, sl
1a00971e:	f000 fdef 	bl	1a00a300 <__lshift>
1a009722:	4680      	mov	r8, r0
1a009724:	e627      	b.n	1a009376 <_dtoa_r+0x886>
1a009726:	f8dd b000 	ldr.w	fp, [sp]
1a00972a:	f8dd a008 	ldr.w	sl, [sp, #8]
1a00972e:	e406      	b.n	1a008f3e <_dtoa_r+0x44e>
1a009730:	e9dd 3208 	ldrd	r3, r2, [sp, #32]
1a009734:	1a9c      	subs	r4, r3, r2
1a009736:	e508      	b.n	1a00914a <_dtoa_r+0x65a>
1a009738:	2700      	movs	r7, #0
1a00973a:	463d      	mov	r5, r7
1a00973c:	e6a0      	b.n	1a009480 <_dtoa_r+0x990>
1a00973e:	2a39      	cmp	r2, #57	; 0x39
1a009740:	4627      	mov	r7, r4
1a009742:	464c      	mov	r4, r9
1a009744:	f000 80a3 	beq.w	1a00988e <_dtoa_r+0xd9e>
1a009748:	f102 0901 	add.w	r9, r2, #1
1a00974c:	9500      	str	r5, [sp, #0]
1a00974e:	f886 9000 	strb.w	r9, [r6]
1a009752:	4645      	mov	r5, r8
1a009754:	e5c7      	b.n	1a0092e6 <_dtoa_r+0x7f6>
1a009756:	4627      	mov	r7, r4
1a009758:	9500      	str	r5, [sp, #0]
1a00975a:	464c      	mov	r4, r9
1a00975c:	4645      	mov	r5, r8
1a00975e:	4691      	mov	r9, r2
1a009760:	e5a5      	b.n	1a0092ae <_dtoa_r+0x7be>
1a009762:	bf00      	nop
1a009764:	1a00b340 	.word	0x1a00b340
1a009768:	401c0000 	.word	0x401c0000
1a00976c:	40140000 	.word	0x40140000
1a009770:	1a00b378 	.word	0x1a00b378
1a009774:	1a00b350 	.word	0x1a00b350
1a009778:	7ff00000 	.word	0x7ff00000
1a00977c:	e9dd 0100 	ldrd	r0, r1, [sp]
1a009780:	f7fb fec0 	bl	1a005504 <__aeabi_dmul>
1a009784:	9b03      	ldr	r3, [sp, #12]
1a009786:	701d      	strb	r5, [r3, #0]
1a009788:	9b10      	ldr	r3, [sp, #64]	; 0x40
1a00978a:	2b01      	cmp	r3, #1
1a00978c:	e9cd 0100 	strd	r0, r1, [sp]
1a009790:	d023      	beq.n	1a0097da <_dtoa_r+0xcea>
1a009792:	9b10      	ldr	r3, [sp, #64]	; 0x40
1a009794:	9a03      	ldr	r2, [sp, #12]
1a009796:	f8cd 9040 	str.w	r9, [sp, #64]	; 0x40
1a00979a:	4413      	add	r3, r2
1a00979c:	46c1      	mov	r9, r8
1a00979e:	4698      	mov	r8, r3
1a0097a0:	2200      	movs	r2, #0
1a0097a2:	4b64      	ldr	r3, [pc, #400]	; (1a009934 <_dtoa_r+0xe44>)
1a0097a4:	4630      	mov	r0, r6
1a0097a6:	4639      	mov	r1, r7
1a0097a8:	f7fb feac 	bl	1a005504 <__aeabi_dmul>
1a0097ac:	460f      	mov	r7, r1
1a0097ae:	4606      	mov	r6, r0
1a0097b0:	f001 fac8 	bl	1a00ad44 <__aeabi_d2iz>
1a0097b4:	4605      	mov	r5, r0
1a0097b6:	f7fb fe3b 	bl	1a005430 <__aeabi_i2d>
1a0097ba:	3530      	adds	r5, #48	; 0x30
1a0097bc:	4602      	mov	r2, r0
1a0097be:	460b      	mov	r3, r1
1a0097c0:	4630      	mov	r0, r6
1a0097c2:	4639      	mov	r1, r7
1a0097c4:	f7fb fce6 	bl	1a005194 <__aeabi_dsub>
1a0097c8:	f804 5b01 	strb.w	r5, [r4], #1
1a0097cc:	45a0      	cmp	r8, r4
1a0097ce:	4606      	mov	r6, r0
1a0097d0:	460f      	mov	r7, r1
1a0097d2:	d1e5      	bne.n	1a0097a0 <_dtoa_r+0xcb0>
1a0097d4:	46c8      	mov	r8, r9
1a0097d6:	f8dd 9040 	ldr.w	r9, [sp, #64]	; 0x40
1a0097da:	4b57      	ldr	r3, [pc, #348]	; (1a009938 <_dtoa_r+0xe48>)
1a0097dc:	2200      	movs	r2, #0
1a0097de:	e9dd 0100 	ldrd	r0, r1, [sp]
1a0097e2:	f7fb fcd9 	bl	1a005198 <__adddf3>
1a0097e6:	4632      	mov	r2, r6
1a0097e8:	463b      	mov	r3, r7
1a0097ea:	f7fc f8fd 	bl	1a0059e8 <__aeabi_dcmplt>
1a0097ee:	2800      	cmp	r0, #0
1a0097f0:	d152      	bne.n	1a009898 <_dtoa_r+0xda8>
1a0097f2:	e9dd 2300 	ldrd	r2, r3, [sp]
1a0097f6:	2000      	movs	r0, #0
1a0097f8:	494f      	ldr	r1, [pc, #316]	; (1a009938 <_dtoa_r+0xe48>)
1a0097fa:	f7fb fccb 	bl	1a005194 <__aeabi_dsub>
1a0097fe:	4632      	mov	r2, r6
1a009800:	463b      	mov	r3, r7
1a009802:	f7fc f90f 	bl	1a005a24 <__aeabi_dcmpgt>
1a009806:	2800      	cmp	r0, #0
1a009808:	f43f abb3 	beq.w	1a008f72 <_dtoa_r+0x482>
1a00980c:	e000      	b.n	1a009810 <_dtoa_r+0xd20>
1a00980e:	4614      	mov	r4, r2
1a009810:	f814 3c01 	ldrb.w	r3, [r4, #-1]
1a009814:	2b30      	cmp	r3, #48	; 0x30
1a009816:	f104 32ff 	add.w	r2, r4, #4294967295	; 0xffffffff
1a00981a:	d0f8      	beq.n	1a00980e <_dtoa_r+0xd1e>
1a00981c:	9b12      	ldr	r3, [sp, #72]	; 0x48
1a00981e:	3301      	adds	r3, #1
1a009820:	9306      	str	r3, [sp, #24]
1a009822:	f7ff bb8c 	b.w	1a008f3e <_dtoa_r+0x44e>
1a009826:	9b14      	ldr	r3, [sp, #80]	; 0x50
1a009828:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
1a00982c:	e6d7      	b.n	1a0095de <_dtoa_r+0xaee>
1a00982e:	2602      	movs	r6, #2
1a009830:	f7ff bad2 	b.w	1a008dd8 <_dtoa_r+0x2e8>
1a009834:	9b09      	ldr	r3, [sp, #36]	; 0x24
1a009836:	2b00      	cmp	r3, #0
1a009838:	f43f aed8 	beq.w	1a0095ec <_dtoa_r+0xafc>
1a00983c:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
1a00983e:	2f00      	cmp	r7, #0
1a009840:	f77f ab97 	ble.w	1a008f72 <_dtoa_r+0x482>
1a009844:	2200      	movs	r2, #0
1a009846:	4b3b      	ldr	r3, [pc, #236]	; (1a009934 <_dtoa_r+0xe44>)
1a009848:	4620      	mov	r0, r4
1a00984a:	4629      	mov	r1, r5
1a00984c:	f7fb fe5a 	bl	1a005504 <__aeabi_dmul>
1a009850:	4604      	mov	r4, r0
1a009852:	460d      	mov	r5, r1
1a009854:	1c70      	adds	r0, r6, #1
1a009856:	e9cd 4500 	strd	r4, r5, [sp]
1a00985a:	f7fb fde9 	bl	1a005430 <__aeabi_i2d>
1a00985e:	4622      	mov	r2, r4
1a009860:	462b      	mov	r3, r5
1a009862:	f7fb fe4f 	bl	1a005504 <__aeabi_dmul>
1a009866:	4b35      	ldr	r3, [pc, #212]	; (1a00993c <_dtoa_r+0xe4c>)
1a009868:	2200      	movs	r2, #0
1a00986a:	f7fb fc95 	bl	1a005198 <__adddf3>
1a00986e:	9b06      	ldr	r3, [sp, #24]
1a009870:	9710      	str	r7, [sp, #64]	; 0x40
1a009872:	3b01      	subs	r3, #1
1a009874:	4604      	mov	r4, r0
1a009876:	f1a1 7550 	sub.w	r5, r1, #54525952	; 0x3400000
1a00987a:	9312      	str	r3, [sp, #72]	; 0x48
1a00987c:	f7ff bacf 	b.w	1a008e1e <_dtoa_r+0x32e>
1a009880:	9a06      	ldr	r2, [sp, #24]
1a009882:	3201      	adds	r2, #1
1a009884:	9206      	str	r2, [sp, #24]
1a009886:	2231      	movs	r2, #49	; 0x31
1a009888:	701a      	strb	r2, [r3, #0]
1a00988a:	f7ff bb58 	b.w	1a008f3e <_dtoa_r+0x44e>
1a00988e:	2239      	movs	r2, #57	; 0x39
1a009890:	9500      	str	r5, [sp, #0]
1a009892:	7032      	strb	r2, [r6, #0]
1a009894:	4645      	mov	r5, r8
1a009896:	e518      	b.n	1a0092ca <_dtoa_r+0x7da>
1a009898:	9b12      	ldr	r3, [sp, #72]	; 0x48
1a00989a:	3301      	adds	r3, #1
1a00989c:	9306      	str	r3, [sp, #24]
1a00989e:	f814 5c01 	ldrb.w	r5, [r4, #-1]
1a0098a2:	e427      	b.n	1a0090f4 <_dtoa_r+0x604>
1a0098a4:	f47f af26 	bne.w	1a0096f4 <_dtoa_r+0xc04>
1a0098a8:	f019 0f01 	tst.w	r9, #1
1a0098ac:	f47f af1b 	bne.w	1a0096e6 <_dtoa_r+0xbf6>
1a0098b0:	e720      	b.n	1a0096f4 <_dtoa_r+0xc04>
1a0098b2:	9b12      	ldr	r3, [sp, #72]	; 0x48
1a0098b4:	3301      	adds	r3, #1
1a0098b6:	46da      	mov	sl, fp
1a0098b8:	9306      	str	r3, [sp, #24]
1a0098ba:	f8dd b000 	ldr.w	fp, [sp]
1a0098be:	e419      	b.n	1a0090f4 <_dtoa_r+0x604>
1a0098c0:	2a39      	cmp	r2, #57	; 0x39
1a0098c2:	463b      	mov	r3, r7
1a0098c4:	4691      	mov	r9, r2
1a0098c6:	4627      	mov	r7, r4
1a0098c8:	f106 0401 	add.w	r4, r6, #1
1a0098cc:	d0df      	beq.n	1a00988e <_dtoa_r+0xd9e>
1a0098ce:	2b00      	cmp	r3, #0
1a0098d0:	f73f af0d 	bgt.w	1a0096ee <_dtoa_r+0xbfe>
1a0098d4:	e70e      	b.n	1a0096f4 <_dtoa_r+0xc04>
1a0098d6:	9b02      	ldr	r3, [sp, #8]
1a0098d8:	2b02      	cmp	r3, #2
1a0098da:	f77f ae49 	ble.w	1a009570 <_dtoa_r+0xa80>
1a0098de:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
1a0098e0:	9309      	str	r3, [sp, #36]	; 0x24
1a0098e2:	f8cd 8018 	str.w	r8, [sp, #24]
1a0098e6:	e5ba      	b.n	1a00945e <_dtoa_r+0x96e>
1a0098e8:	9b02      	ldr	r3, [sp, #8]
1a0098ea:	2b02      	cmp	r3, #2
1a0098ec:	dcf7      	bgt.n	1a0098de <_dtoa_r+0xdee>
1a0098ee:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
1a0098f0:	e539      	b.n	1a009366 <_dtoa_r+0x876>
1a0098f2:	9b12      	ldr	r3, [sp, #72]	; 0x48
1a0098f4:	3301      	adds	r3, #1
1a0098f6:	9306      	str	r3, [sp, #24]
1a0098f8:	f7ff bbfc 	b.w	1a0090f4 <_dtoa_r+0x604>
1a0098fc:	4b10      	ldr	r3, [pc, #64]	; (1a009940 <_dtoa_r+0xe50>)
1a0098fe:	9303      	str	r3, [sp, #12]
1a009900:	f7ff b934 	b.w	1a008b6c <_dtoa_r+0x7c>
1a009904:	f43f ac98 	beq.w	1a009238 <_dtoa_r+0x748>
1a009908:	f1c0 003c 	rsb	r0, r0, #60	; 0x3c
1a00990c:	e48f      	b.n	1a00922e <_dtoa_r+0x73e>
1a00990e:	2400      	movs	r4, #0
1a009910:	f8ca 4044 	str.w	r4, [sl, #68]	; 0x44
1a009914:	4621      	mov	r1, r4
1a009916:	4650      	mov	r0, sl
1a009918:	f000 fb3a 	bl	1a009f90 <_Balloc>
1a00991c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
1a009920:	e9cd 3409 	strd	r3, r4, [sp, #36]	; 0x24
1a009924:	930f      	str	r3, [sp, #60]	; 0x3c
1a009926:	2301      	movs	r3, #1
1a009928:	9003      	str	r0, [sp, #12]
1a00992a:	f8ca 0040 	str.w	r0, [sl, #64]	; 0x40
1a00992e:	930b      	str	r3, [sp, #44]	; 0x2c
1a009930:	f7ff bb23 	b.w	1a008f7a <_dtoa_r+0x48a>
1a009934:	40240000 	.word	0x40240000
1a009938:	3fe00000 	.word	0x3fe00000
1a00993c:	401c0000 	.word	0x401c0000
1a009940:	1a00b344 	.word	0x1a00b344

1a009944 <_fclose_r>:
1a009944:	b570      	push	{r4, r5, r6, lr}
1a009946:	2900      	cmp	r1, #0
1a009948:	d04a      	beq.n	1a0099e0 <_fclose_r+0x9c>
1a00994a:	4605      	mov	r5, r0
1a00994c:	460c      	mov	r4, r1
1a00994e:	b110      	cbz	r0, 1a009956 <_fclose_r+0x12>
1a009950:	6b83      	ldr	r3, [r0, #56]	; 0x38
1a009952:	2b00      	cmp	r3, #0
1a009954:	d047      	beq.n	1a0099e6 <_fclose_r+0xa2>
1a009956:	6e63      	ldr	r3, [r4, #100]	; 0x64
1a009958:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
1a00995c:	07d8      	lsls	r0, r3, #31
1a00995e:	d532      	bpl.n	1a0099c6 <_fclose_r+0x82>
1a009960:	2a00      	cmp	r2, #0
1a009962:	d03d      	beq.n	1a0099e0 <_fclose_r+0x9c>
1a009964:	4621      	mov	r1, r4
1a009966:	4628      	mov	r0, r5
1a009968:	f7fc fa38 	bl	1a005ddc <__sflush_r>
1a00996c:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
1a00996e:	4606      	mov	r6, r0
1a009970:	b133      	cbz	r3, 1a009980 <_fclose_r+0x3c>
1a009972:	69e1      	ldr	r1, [r4, #28]
1a009974:	4628      	mov	r0, r5
1a009976:	4798      	blx	r3
1a009978:	2800      	cmp	r0, #0
1a00997a:	bfb8      	it	lt
1a00997c:	f04f 36ff 	movlt.w	r6, #4294967295	; 0xffffffff
1a009980:	89a3      	ldrh	r3, [r4, #12]
1a009982:	061a      	lsls	r2, r3, #24
1a009984:	d43c      	bmi.n	1a009a00 <_fclose_r+0xbc>
1a009986:	6b21      	ldr	r1, [r4, #48]	; 0x30
1a009988:	b141      	cbz	r1, 1a00999c <_fclose_r+0x58>
1a00998a:	f104 0340 	add.w	r3, r4, #64	; 0x40
1a00998e:	4299      	cmp	r1, r3
1a009990:	d002      	beq.n	1a009998 <_fclose_r+0x54>
1a009992:	4628      	mov	r0, r5
1a009994:	f7fc fbaa 	bl	1a0060ec <_free_r>
1a009998:	2300      	movs	r3, #0
1a00999a:	6323      	str	r3, [r4, #48]	; 0x30
1a00999c:	6c61      	ldr	r1, [r4, #68]	; 0x44
1a00999e:	b121      	cbz	r1, 1a0099aa <_fclose_r+0x66>
1a0099a0:	4628      	mov	r0, r5
1a0099a2:	f7fc fba3 	bl	1a0060ec <_free_r>
1a0099a6:	2300      	movs	r3, #0
1a0099a8:	6463      	str	r3, [r4, #68]	; 0x44
1a0099aa:	f7fc fb43 	bl	1a006034 <__sfp_lock_acquire>
1a0099ae:	6e63      	ldr	r3, [r4, #100]	; 0x64
1a0099b0:	2200      	movs	r2, #0
1a0099b2:	07db      	lsls	r3, r3, #31
1a0099b4:	81a2      	strh	r2, [r4, #12]
1a0099b6:	d528      	bpl.n	1a009a0a <_fclose_r+0xc6>
1a0099b8:	6da0      	ldr	r0, [r4, #88]	; 0x58
1a0099ba:	f7fc fcdd 	bl	1a006378 <__retarget_lock_close_recursive>
1a0099be:	f7fc fb3f 	bl	1a006040 <__sfp_lock_release>
1a0099c2:	4630      	mov	r0, r6
1a0099c4:	bd70      	pop	{r4, r5, r6, pc}
1a0099c6:	0591      	lsls	r1, r2, #22
1a0099c8:	d4cc      	bmi.n	1a009964 <_fclose_r+0x20>
1a0099ca:	6da0      	ldr	r0, [r4, #88]	; 0x58
1a0099cc:	f7fc fcd6 	bl	1a00637c <__retarget_lock_acquire_recursive>
1a0099d0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
1a0099d4:	2b00      	cmp	r3, #0
1a0099d6:	d1c5      	bne.n	1a009964 <_fclose_r+0x20>
1a0099d8:	6e66      	ldr	r6, [r4, #100]	; 0x64
1a0099da:	f016 0601 	ands.w	r6, r6, #1
1a0099de:	d00a      	beq.n	1a0099f6 <_fclose_r+0xb2>
1a0099e0:	2600      	movs	r6, #0
1a0099e2:	4630      	mov	r0, r6
1a0099e4:	bd70      	pop	{r4, r5, r6, pc}
1a0099e6:	f7fc fafb 	bl	1a005fe0 <__sinit>
1a0099ea:	6e63      	ldr	r3, [r4, #100]	; 0x64
1a0099ec:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
1a0099f0:	07d8      	lsls	r0, r3, #31
1a0099f2:	d4b5      	bmi.n	1a009960 <_fclose_r+0x1c>
1a0099f4:	e7e7      	b.n	1a0099c6 <_fclose_r+0x82>
1a0099f6:	6da0      	ldr	r0, [r4, #88]	; 0x58
1a0099f8:	f7fc fcc2 	bl	1a006380 <__retarget_lock_release_recursive>
1a0099fc:	4630      	mov	r0, r6
1a0099fe:	bd70      	pop	{r4, r5, r6, pc}
1a009a00:	6921      	ldr	r1, [r4, #16]
1a009a02:	4628      	mov	r0, r5
1a009a04:	f7fc fb72 	bl	1a0060ec <_free_r>
1a009a08:	e7bd      	b.n	1a009986 <_fclose_r+0x42>
1a009a0a:	6da0      	ldr	r0, [r4, #88]	; 0x58
1a009a0c:	f7fc fcb8 	bl	1a006380 <__retarget_lock_release_recursive>
1a009a10:	e7d2      	b.n	1a0099b8 <_fclose_r+0x74>
1a009a12:	bf00      	nop

1a009a14 <__sfvwrite_r>:
1a009a14:	6893      	ldr	r3, [r2, #8]
1a009a16:	2b00      	cmp	r3, #0
1a009a18:	f000 8102 	beq.w	1a009c20 <__sfvwrite_r+0x20c>
1a009a1c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
1a009a20:	f9b1 300c 	ldrsh.w	r3, [r1, #12]
1a009a24:	b29b      	uxth	r3, r3
1a009a26:	460c      	mov	r4, r1
1a009a28:	0719      	lsls	r1, r3, #28
1a009a2a:	b083      	sub	sp, #12
1a009a2c:	4682      	mov	sl, r0
1a009a2e:	4690      	mov	r8, r2
1a009a30:	d535      	bpl.n	1a009a9e <__sfvwrite_r+0x8a>
1a009a32:	6922      	ldr	r2, [r4, #16]
1a009a34:	b39a      	cbz	r2, 1a009a9e <__sfvwrite_r+0x8a>
1a009a36:	f013 0202 	ands.w	r2, r3, #2
1a009a3a:	f8d8 6000 	ldr.w	r6, [r8]
1a009a3e:	d03d      	beq.n	1a009abc <__sfvwrite_r+0xa8>
1a009a40:	2700      	movs	r7, #0
1a009a42:	f8d4 b024 	ldr.w	fp, [r4, #36]	; 0x24
1a009a46:	f8d4 c01c 	ldr.w	ip, [r4, #28]
1a009a4a:	f8df 92cc 	ldr.w	r9, [pc, #716]	; 1a009d18 <__sfvwrite_r+0x304>
1a009a4e:	463d      	mov	r5, r7
1a009a50:	454d      	cmp	r5, r9
1a009a52:	462b      	mov	r3, r5
1a009a54:	463a      	mov	r2, r7
1a009a56:	bf28      	it	cs
1a009a58:	464b      	movcs	r3, r9
1a009a5a:	4661      	mov	r1, ip
1a009a5c:	4650      	mov	r0, sl
1a009a5e:	b1d5      	cbz	r5, 1a009a96 <__sfvwrite_r+0x82>
1a009a60:	47d8      	blx	fp
1a009a62:	2800      	cmp	r0, #0
1a009a64:	f340 80d2 	ble.w	1a009c0c <__sfvwrite_r+0x1f8>
1a009a68:	f8d8 3008 	ldr.w	r3, [r8, #8]
1a009a6c:	1a1b      	subs	r3, r3, r0
1a009a6e:	4407      	add	r7, r0
1a009a70:	1a2d      	subs	r5, r5, r0
1a009a72:	f8c8 3008 	str.w	r3, [r8, #8]
1a009a76:	2b00      	cmp	r3, #0
1a009a78:	f000 80b7 	beq.w	1a009bea <__sfvwrite_r+0x1d6>
1a009a7c:	f8d4 c01c 	ldr.w	ip, [r4, #28]
1a009a80:	f8d4 b024 	ldr.w	fp, [r4, #36]	; 0x24
1a009a84:	454d      	cmp	r5, r9
1a009a86:	462b      	mov	r3, r5
1a009a88:	463a      	mov	r2, r7
1a009a8a:	bf28      	it	cs
1a009a8c:	464b      	movcs	r3, r9
1a009a8e:	4661      	mov	r1, ip
1a009a90:	4650      	mov	r0, sl
1a009a92:	2d00      	cmp	r5, #0
1a009a94:	d1e4      	bne.n	1a009a60 <__sfvwrite_r+0x4c>
1a009a96:	e9d6 7500 	ldrd	r7, r5, [r6]
1a009a9a:	3608      	adds	r6, #8
1a009a9c:	e7d8      	b.n	1a009a50 <__sfvwrite_r+0x3c>
1a009a9e:	4621      	mov	r1, r4
1a009aa0:	4650      	mov	r0, sl
1a009aa2:	f7fe ff29 	bl	1a0088f8 <__swsetup_r>
1a009aa6:	2800      	cmp	r0, #0
1a009aa8:	f040 8130 	bne.w	1a009d0c <__sfvwrite_r+0x2f8>
1a009aac:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
1a009ab0:	f8d8 6000 	ldr.w	r6, [r8]
1a009ab4:	b29b      	uxth	r3, r3
1a009ab6:	f013 0202 	ands.w	r2, r3, #2
1a009aba:	d1c1      	bne.n	1a009a40 <__sfvwrite_r+0x2c>
1a009abc:	f013 0901 	ands.w	r9, r3, #1
1a009ac0:	f040 80b0 	bne.w	1a009c24 <__sfvwrite_r+0x210>
1a009ac4:	68a7      	ldr	r7, [r4, #8]
1a009ac6:	6820      	ldr	r0, [r4, #0]
1a009ac8:	464d      	mov	r5, r9
1a009aca:	2d00      	cmp	r5, #0
1a009acc:	d054      	beq.n	1a009b78 <__sfvwrite_r+0x164>
1a009ace:	059a      	lsls	r2, r3, #22
1a009ad0:	f140 80bc 	bpl.w	1a009c4c <__sfvwrite_r+0x238>
1a009ad4:	42af      	cmp	r7, r5
1a009ad6:	46bb      	mov	fp, r7
1a009ad8:	f200 80e7 	bhi.w	1a009caa <__sfvwrite_r+0x296>
1a009adc:	f413 6f90 	tst.w	r3, #1152	; 0x480
1a009ae0:	d02f      	beq.n	1a009b42 <__sfvwrite_r+0x12e>
1a009ae2:	e9d4 1704 	ldrd	r1, r7, [r4, #16]
1a009ae6:	eb07 0747 	add.w	r7, r7, r7, lsl #1
1a009aea:	eba0 0b01 	sub.w	fp, r0, r1
1a009aee:	eb07 77d7 	add.w	r7, r7, r7, lsr #31
1a009af2:	1c68      	adds	r0, r5, #1
1a009af4:	107f      	asrs	r7, r7, #1
1a009af6:	4458      	add	r0, fp
1a009af8:	42b8      	cmp	r0, r7
1a009afa:	463a      	mov	r2, r7
1a009afc:	bf84      	itt	hi
1a009afe:	4607      	movhi	r7, r0
1a009b00:	463a      	movhi	r2, r7
1a009b02:	055b      	lsls	r3, r3, #21
1a009b04:	f140 80e9 	bpl.w	1a009cda <__sfvwrite_r+0x2c6>
1a009b08:	4611      	mov	r1, r2
1a009b0a:	4650      	mov	r0, sl
1a009b0c:	f7fc fc3a 	bl	1a006384 <_malloc_r>
1a009b10:	2800      	cmp	r0, #0
1a009b12:	f000 80f5 	beq.w	1a009d00 <__sfvwrite_r+0x2ec>
1a009b16:	465a      	mov	r2, fp
1a009b18:	6921      	ldr	r1, [r4, #16]
1a009b1a:	9001      	str	r0, [sp, #4]
1a009b1c:	f7fc feea 	bl	1a0068f4 <memcpy>
1a009b20:	89a2      	ldrh	r2, [r4, #12]
1a009b22:	9b01      	ldr	r3, [sp, #4]
1a009b24:	f422 6290 	bic.w	r2, r2, #1152	; 0x480
1a009b28:	f042 0280 	orr.w	r2, r2, #128	; 0x80
1a009b2c:	81a2      	strh	r2, [r4, #12]
1a009b2e:	eba7 020b 	sub.w	r2, r7, fp
1a009b32:	eb03 000b 	add.w	r0, r3, fp
1a009b36:	6167      	str	r7, [r4, #20]
1a009b38:	6123      	str	r3, [r4, #16]
1a009b3a:	6020      	str	r0, [r4, #0]
1a009b3c:	60a2      	str	r2, [r4, #8]
1a009b3e:	462f      	mov	r7, r5
1a009b40:	46ab      	mov	fp, r5
1a009b42:	465a      	mov	r2, fp
1a009b44:	4649      	mov	r1, r9
1a009b46:	f000 f9bb 	bl	1a009ec0 <memmove>
1a009b4a:	68a2      	ldr	r2, [r4, #8]
1a009b4c:	6823      	ldr	r3, [r4, #0]
1a009b4e:	1bd2      	subs	r2, r2, r7
1a009b50:	445b      	add	r3, fp
1a009b52:	462f      	mov	r7, r5
1a009b54:	60a2      	str	r2, [r4, #8]
1a009b56:	6023      	str	r3, [r4, #0]
1a009b58:	2500      	movs	r5, #0
1a009b5a:	f8d8 3008 	ldr.w	r3, [r8, #8]
1a009b5e:	1bdb      	subs	r3, r3, r7
1a009b60:	44b9      	add	r9, r7
1a009b62:	f8c8 3008 	str.w	r3, [r8, #8]
1a009b66:	2b00      	cmp	r3, #0
1a009b68:	d03f      	beq.n	1a009bea <__sfvwrite_r+0x1d6>
1a009b6a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
1a009b6e:	68a7      	ldr	r7, [r4, #8]
1a009b70:	6820      	ldr	r0, [r4, #0]
1a009b72:	b29b      	uxth	r3, r3
1a009b74:	2d00      	cmp	r5, #0
1a009b76:	d1aa      	bne.n	1a009ace <__sfvwrite_r+0xba>
1a009b78:	e9d6 9500 	ldrd	r9, r5, [r6]
1a009b7c:	3608      	adds	r6, #8
1a009b7e:	e7a4      	b.n	1a009aca <__sfvwrite_r+0xb6>
1a009b80:	f10b 0308 	add.w	r3, fp, #8
1a009b84:	e953 6702 	ldrd	r6, r7, [r3, #-8]
1a009b88:	469b      	mov	fp, r3
1a009b8a:	3308      	adds	r3, #8
1a009b8c:	2f00      	cmp	r7, #0
1a009b8e:	d0f9      	beq.n	1a009b84 <__sfvwrite_r+0x170>
1a009b90:	463a      	mov	r2, r7
1a009b92:	210a      	movs	r1, #10
1a009b94:	4630      	mov	r0, r6
1a009b96:	f000 f943 	bl	1a009e20 <memchr>
1a009b9a:	2800      	cmp	r0, #0
1a009b9c:	d053      	beq.n	1a009c46 <__sfvwrite_r+0x232>
1a009b9e:	3001      	adds	r0, #1
1a009ba0:	eba0 0906 	sub.w	r9, r0, r6
1a009ba4:	464b      	mov	r3, r9
1a009ba6:	e9d4 1204 	ldrd	r1, r2, [r4, #16]
1a009baa:	6820      	ldr	r0, [r4, #0]
1a009bac:	42bb      	cmp	r3, r7
1a009bae:	bf28      	it	cs
1a009bb0:	463b      	movcs	r3, r7
1a009bb2:	4288      	cmp	r0, r1
1a009bb4:	d903      	bls.n	1a009bbe <__sfvwrite_r+0x1aa>
1a009bb6:	68a5      	ldr	r5, [r4, #8]
1a009bb8:	4415      	add	r5, r2
1a009bba:	42ab      	cmp	r3, r5
1a009bbc:	dc19      	bgt.n	1a009bf2 <__sfvwrite_r+0x1de>
1a009bbe:	429a      	cmp	r2, r3
1a009bc0:	dc7d      	bgt.n	1a009cbe <__sfvwrite_r+0x2aa>
1a009bc2:	4613      	mov	r3, r2
1a009bc4:	6a65      	ldr	r5, [r4, #36]	; 0x24
1a009bc6:	69e1      	ldr	r1, [r4, #28]
1a009bc8:	4632      	mov	r2, r6
1a009bca:	4650      	mov	r0, sl
1a009bcc:	47a8      	blx	r5
1a009bce:	1e05      	subs	r5, r0, #0
1a009bd0:	dd1c      	ble.n	1a009c0c <__sfvwrite_r+0x1f8>
1a009bd2:	ebb9 0905 	subs.w	r9, r9, r5
1a009bd6:	d06b      	beq.n	1a009cb0 <__sfvwrite_r+0x29c>
1a009bd8:	2001      	movs	r0, #1
1a009bda:	f8d8 3008 	ldr.w	r3, [r8, #8]
1a009bde:	1b5b      	subs	r3, r3, r5
1a009be0:	442e      	add	r6, r5
1a009be2:	1b7f      	subs	r7, r7, r5
1a009be4:	f8c8 3008 	str.w	r3, [r8, #8]
1a009be8:	bb13      	cbnz	r3, 1a009c30 <__sfvwrite_r+0x21c>
1a009bea:	2000      	movs	r0, #0
1a009bec:	b003      	add	sp, #12
1a009bee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
1a009bf2:	4631      	mov	r1, r6
1a009bf4:	462a      	mov	r2, r5
1a009bf6:	f000 f963 	bl	1a009ec0 <memmove>
1a009bfa:	6823      	ldr	r3, [r4, #0]
1a009bfc:	442b      	add	r3, r5
1a009bfe:	6023      	str	r3, [r4, #0]
1a009c00:	4621      	mov	r1, r4
1a009c02:	4650      	mov	r0, sl
1a009c04:	f7fc f990 	bl	1a005f28 <_fflush_r>
1a009c08:	2800      	cmp	r0, #0
1a009c0a:	d0e2      	beq.n	1a009bd2 <__sfvwrite_r+0x1be>
1a009c0c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
1a009c10:	f043 0340 	orr.w	r3, r3, #64	; 0x40
1a009c14:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
1a009c18:	81a3      	strh	r3, [r4, #12]
1a009c1a:	b003      	add	sp, #12
1a009c1c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
1a009c20:	2000      	movs	r0, #0
1a009c22:	4770      	bx	lr
1a009c24:	4633      	mov	r3, r6
1a009c26:	4691      	mov	r9, r2
1a009c28:	4610      	mov	r0, r2
1a009c2a:	4617      	mov	r7, r2
1a009c2c:	464e      	mov	r6, r9
1a009c2e:	469b      	mov	fp, r3
1a009c30:	2f00      	cmp	r7, #0
1a009c32:	d0a5      	beq.n	1a009b80 <__sfvwrite_r+0x16c>
1a009c34:	2800      	cmp	r0, #0
1a009c36:	d1b5      	bne.n	1a009ba4 <__sfvwrite_r+0x190>
1a009c38:	463a      	mov	r2, r7
1a009c3a:	210a      	movs	r1, #10
1a009c3c:	4630      	mov	r0, r6
1a009c3e:	f000 f8ef 	bl	1a009e20 <memchr>
1a009c42:	2800      	cmp	r0, #0
1a009c44:	d1ab      	bne.n	1a009b9e <__sfvwrite_r+0x18a>
1a009c46:	1c7b      	adds	r3, r7, #1
1a009c48:	4699      	mov	r9, r3
1a009c4a:	e7ac      	b.n	1a009ba6 <__sfvwrite_r+0x192>
1a009c4c:	6923      	ldr	r3, [r4, #16]
1a009c4e:	4283      	cmp	r3, r0
1a009c50:	d315      	bcc.n	1a009c7e <__sfvwrite_r+0x26a>
1a009c52:	6961      	ldr	r1, [r4, #20]
1a009c54:	42a9      	cmp	r1, r5
1a009c56:	d812      	bhi.n	1a009c7e <__sfvwrite_r+0x26a>
1a009c58:	4b2e      	ldr	r3, [pc, #184]	; (1a009d14 <__sfvwrite_r+0x300>)
1a009c5a:	6a67      	ldr	r7, [r4, #36]	; 0x24
1a009c5c:	429d      	cmp	r5, r3
1a009c5e:	bf94      	ite	ls
1a009c60:	462b      	movls	r3, r5
1a009c62:	f06f 4300 	mvnhi.w	r3, #2147483648	; 0x80000000
1a009c66:	464a      	mov	r2, r9
1a009c68:	fb93 f3f1 	sdiv	r3, r3, r1
1a009c6c:	4650      	mov	r0, sl
1a009c6e:	fb01 f303 	mul.w	r3, r1, r3
1a009c72:	69e1      	ldr	r1, [r4, #28]
1a009c74:	47b8      	blx	r7
1a009c76:	1e07      	subs	r7, r0, #0
1a009c78:	ddc8      	ble.n	1a009c0c <__sfvwrite_r+0x1f8>
1a009c7a:	1bed      	subs	r5, r5, r7
1a009c7c:	e76d      	b.n	1a009b5a <__sfvwrite_r+0x146>
1a009c7e:	42af      	cmp	r7, r5
1a009c80:	bf28      	it	cs
1a009c82:	462f      	movcs	r7, r5
1a009c84:	463a      	mov	r2, r7
1a009c86:	4649      	mov	r1, r9
1a009c88:	f000 f91a 	bl	1a009ec0 <memmove>
1a009c8c:	68a3      	ldr	r3, [r4, #8]
1a009c8e:	6822      	ldr	r2, [r4, #0]
1a009c90:	1bdb      	subs	r3, r3, r7
1a009c92:	443a      	add	r2, r7
1a009c94:	60a3      	str	r3, [r4, #8]
1a009c96:	6022      	str	r2, [r4, #0]
1a009c98:	2b00      	cmp	r3, #0
1a009c9a:	d1ee      	bne.n	1a009c7a <__sfvwrite_r+0x266>
1a009c9c:	4621      	mov	r1, r4
1a009c9e:	4650      	mov	r0, sl
1a009ca0:	f7fc f942 	bl	1a005f28 <_fflush_r>
1a009ca4:	2800      	cmp	r0, #0
1a009ca6:	d0e8      	beq.n	1a009c7a <__sfvwrite_r+0x266>
1a009ca8:	e7b0      	b.n	1a009c0c <__sfvwrite_r+0x1f8>
1a009caa:	462f      	mov	r7, r5
1a009cac:	46ab      	mov	fp, r5
1a009cae:	e748      	b.n	1a009b42 <__sfvwrite_r+0x12e>
1a009cb0:	4621      	mov	r1, r4
1a009cb2:	4650      	mov	r0, sl
1a009cb4:	f7fc f938 	bl	1a005f28 <_fflush_r>
1a009cb8:	2800      	cmp	r0, #0
1a009cba:	d08e      	beq.n	1a009bda <__sfvwrite_r+0x1c6>
1a009cbc:	e7a6      	b.n	1a009c0c <__sfvwrite_r+0x1f8>
1a009cbe:	461a      	mov	r2, r3
1a009cc0:	4631      	mov	r1, r6
1a009cc2:	9301      	str	r3, [sp, #4]
1a009cc4:	f000 f8fc 	bl	1a009ec0 <memmove>
1a009cc8:	9b01      	ldr	r3, [sp, #4]
1a009cca:	68a1      	ldr	r1, [r4, #8]
1a009ccc:	6822      	ldr	r2, [r4, #0]
1a009cce:	1ac9      	subs	r1, r1, r3
1a009cd0:	441a      	add	r2, r3
1a009cd2:	60a1      	str	r1, [r4, #8]
1a009cd4:	6022      	str	r2, [r4, #0]
1a009cd6:	461d      	mov	r5, r3
1a009cd8:	e77b      	b.n	1a009bd2 <__sfvwrite_r+0x1be>
1a009cda:	4650      	mov	r0, sl
1a009cdc:	f000 fc62 	bl	1a00a5a4 <_realloc_r>
1a009ce0:	4603      	mov	r3, r0
1a009ce2:	2800      	cmp	r0, #0
1a009ce4:	f47f af23 	bne.w	1a009b2e <__sfvwrite_r+0x11a>
1a009ce8:	6921      	ldr	r1, [r4, #16]
1a009cea:	4650      	mov	r0, sl
1a009cec:	f7fc f9fe 	bl	1a0060ec <_free_r>
1a009cf0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
1a009cf4:	220c      	movs	r2, #12
1a009cf6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
1a009cfa:	f8ca 2000 	str.w	r2, [sl]
1a009cfe:	e787      	b.n	1a009c10 <__sfvwrite_r+0x1fc>
1a009d00:	230c      	movs	r3, #12
1a009d02:	f8ca 3000 	str.w	r3, [sl]
1a009d06:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
1a009d0a:	e781      	b.n	1a009c10 <__sfvwrite_r+0x1fc>
1a009d0c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
1a009d10:	e76c      	b.n	1a009bec <__sfvwrite_r+0x1d8>
1a009d12:	bf00      	nop
1a009d14:	7ffffffe 	.word	0x7ffffffe
1a009d18:	7ffffc00 	.word	0x7ffffc00

1a009d1c <_localeconv_r>:
1a009d1c:	4800      	ldr	r0, [pc, #0]	; (1a009d20 <_localeconv_r+0x4>)
1a009d1e:	4770      	bx	lr
1a009d20:	10000980 	.word	0x10000980

1a009d24 <__swhatbuf_r>:
1a009d24:	b570      	push	{r4, r5, r6, lr}
1a009d26:	460c      	mov	r4, r1
1a009d28:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
1a009d2c:	2900      	cmp	r1, #0
1a009d2e:	b096      	sub	sp, #88	; 0x58
1a009d30:	4615      	mov	r5, r2
1a009d32:	461e      	mov	r6, r3
1a009d34:	db14      	blt.n	1a009d60 <__swhatbuf_r+0x3c>
1a009d36:	466a      	mov	r2, sp
1a009d38:	f7f6 fe09 	bl	1a00094e <_fstat_r>
1a009d3c:	2800      	cmp	r0, #0
1a009d3e:	db0f      	blt.n	1a009d60 <__swhatbuf_r+0x3c>
1a009d40:	9a01      	ldr	r2, [sp, #4]
1a009d42:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
1a009d46:	f5a2 5200 	sub.w	r2, r2, #8192	; 0x2000
1a009d4a:	fab2 f282 	clz	r2, r2
1a009d4e:	0952      	lsrs	r2, r2, #5
1a009d50:	f44f 6380 	mov.w	r3, #1024	; 0x400
1a009d54:	f44f 6000 	mov.w	r0, #2048	; 0x800
1a009d58:	6032      	str	r2, [r6, #0]
1a009d5a:	602b      	str	r3, [r5, #0]
1a009d5c:	b016      	add	sp, #88	; 0x58
1a009d5e:	bd70      	pop	{r4, r5, r6, pc}
1a009d60:	89a2      	ldrh	r2, [r4, #12]
1a009d62:	2300      	movs	r3, #0
1a009d64:	f012 0080 	ands.w	r0, r2, #128	; 0x80
1a009d68:	6033      	str	r3, [r6, #0]
1a009d6a:	d004      	beq.n	1a009d76 <__swhatbuf_r+0x52>
1a009d6c:	2240      	movs	r2, #64	; 0x40
1a009d6e:	4618      	mov	r0, r3
1a009d70:	602a      	str	r2, [r5, #0]
1a009d72:	b016      	add	sp, #88	; 0x58
1a009d74:	bd70      	pop	{r4, r5, r6, pc}
1a009d76:	f44f 6380 	mov.w	r3, #1024	; 0x400
1a009d7a:	602b      	str	r3, [r5, #0]
1a009d7c:	b016      	add	sp, #88	; 0x58
1a009d7e:	bd70      	pop	{r4, r5, r6, pc}

1a009d80 <__smakebuf_r>:
1a009d80:	898a      	ldrh	r2, [r1, #12]
1a009d82:	0792      	lsls	r2, r2, #30
1a009d84:	460b      	mov	r3, r1
1a009d86:	d506      	bpl.n	1a009d96 <__smakebuf_r+0x16>
1a009d88:	f101 0243 	add.w	r2, r1, #67	; 0x43
1a009d8c:	2101      	movs	r1, #1
1a009d8e:	601a      	str	r2, [r3, #0]
1a009d90:	e9c3 2104 	strd	r2, r1, [r3, #16]
1a009d94:	4770      	bx	lr
1a009d96:	b570      	push	{r4, r5, r6, lr}
1a009d98:	b082      	sub	sp, #8
1a009d9a:	ab01      	add	r3, sp, #4
1a009d9c:	466a      	mov	r2, sp
1a009d9e:	460c      	mov	r4, r1
1a009da0:	4606      	mov	r6, r0
1a009da2:	f7ff ffbf 	bl	1a009d24 <__swhatbuf_r>
1a009da6:	9900      	ldr	r1, [sp, #0]
1a009da8:	4605      	mov	r5, r0
1a009daa:	4630      	mov	r0, r6
1a009dac:	f7fc faea 	bl	1a006384 <_malloc_r>
1a009db0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
1a009db4:	b170      	cbz	r0, 1a009dd4 <__smakebuf_r+0x54>
1a009db6:	4916      	ldr	r1, [pc, #88]	; (1a009e10 <__smakebuf_r+0x90>)
1a009db8:	63f1      	str	r1, [r6, #60]	; 0x3c
1a009dba:	9a01      	ldr	r2, [sp, #4]
1a009dbc:	9900      	ldr	r1, [sp, #0]
1a009dbe:	6020      	str	r0, [r4, #0]
1a009dc0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
1a009dc4:	81a3      	strh	r3, [r4, #12]
1a009dc6:	e9c4 0104 	strd	r0, r1, [r4, #16]
1a009dca:	b98a      	cbnz	r2, 1a009df0 <__smakebuf_r+0x70>
1a009dcc:	432b      	orrs	r3, r5
1a009dce:	81a3      	strh	r3, [r4, #12]
1a009dd0:	b002      	add	sp, #8
1a009dd2:	bd70      	pop	{r4, r5, r6, pc}
1a009dd4:	059a      	lsls	r2, r3, #22
1a009dd6:	d4fb      	bmi.n	1a009dd0 <__smakebuf_r+0x50>
1a009dd8:	f023 0303 	bic.w	r3, r3, #3
1a009ddc:	f104 0243 	add.w	r2, r4, #67	; 0x43
1a009de0:	f043 0302 	orr.w	r3, r3, #2
1a009de4:	2101      	movs	r1, #1
1a009de6:	81a3      	strh	r3, [r4, #12]
1a009de8:	6022      	str	r2, [r4, #0]
1a009dea:	e9c4 2104 	strd	r2, r1, [r4, #16]
1a009dee:	e7ef      	b.n	1a009dd0 <__smakebuf_r+0x50>
1a009df0:	4630      	mov	r0, r6
1a009df2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
1a009df6:	f7f6 fdaf 	bl	1a000958 <_isatty_r>
1a009dfa:	b910      	cbnz	r0, 1a009e02 <__smakebuf_r+0x82>
1a009dfc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
1a009e00:	e7e4      	b.n	1a009dcc <__smakebuf_r+0x4c>
1a009e02:	89a3      	ldrh	r3, [r4, #12]
1a009e04:	f023 0303 	bic.w	r3, r3, #3
1a009e08:	f043 0301 	orr.w	r3, r3, #1
1a009e0c:	b21b      	sxth	r3, r3
1a009e0e:	e7dd      	b.n	1a009dcc <__smakebuf_r+0x4c>
1a009e10:	1a005fd5 	.word	0x1a005fd5
1a009e14:	ffffffff 	.word	0xffffffff
1a009e18:	ffffffff 	.word	0xffffffff
1a009e1c:	ffffffff 	.word	0xffffffff

1a009e20 <memchr>:
1a009e20:	f001 01ff 	and.w	r1, r1, #255	; 0xff
1a009e24:	2a10      	cmp	r2, #16
1a009e26:	db2b      	blt.n	1a009e80 <memchr+0x60>
1a009e28:	f010 0f07 	tst.w	r0, #7
1a009e2c:	d008      	beq.n	1a009e40 <memchr+0x20>
1a009e2e:	f810 3b01 	ldrb.w	r3, [r0], #1
1a009e32:	3a01      	subs	r2, #1
1a009e34:	428b      	cmp	r3, r1
1a009e36:	d02d      	beq.n	1a009e94 <memchr+0x74>
1a009e38:	f010 0f07 	tst.w	r0, #7
1a009e3c:	b342      	cbz	r2, 1a009e90 <memchr+0x70>
1a009e3e:	d1f6      	bne.n	1a009e2e <memchr+0xe>
1a009e40:	b4f0      	push	{r4, r5, r6, r7}
1a009e42:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
1a009e46:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
1a009e4a:	f022 0407 	bic.w	r4, r2, #7
1a009e4e:	f07f 0700 	mvns.w	r7, #0
1a009e52:	2300      	movs	r3, #0
1a009e54:	e8f0 5602 	ldrd	r5, r6, [r0], #8
1a009e58:	3c08      	subs	r4, #8
1a009e5a:	ea85 0501 	eor.w	r5, r5, r1
1a009e5e:	ea86 0601 	eor.w	r6, r6, r1
1a009e62:	fa85 f547 	uadd8	r5, r5, r7
1a009e66:	faa3 f587 	sel	r5, r3, r7
1a009e6a:	fa86 f647 	uadd8	r6, r6, r7
1a009e6e:	faa5 f687 	sel	r6, r5, r7
1a009e72:	b98e      	cbnz	r6, 1a009e98 <memchr+0x78>
1a009e74:	d1ee      	bne.n	1a009e54 <memchr+0x34>
1a009e76:	bcf0      	pop	{r4, r5, r6, r7}
1a009e78:	f001 01ff 	and.w	r1, r1, #255	; 0xff
1a009e7c:	f002 0207 	and.w	r2, r2, #7
1a009e80:	b132      	cbz	r2, 1a009e90 <memchr+0x70>
1a009e82:	f810 3b01 	ldrb.w	r3, [r0], #1
1a009e86:	3a01      	subs	r2, #1
1a009e88:	ea83 0301 	eor.w	r3, r3, r1
1a009e8c:	b113      	cbz	r3, 1a009e94 <memchr+0x74>
1a009e8e:	d1f8      	bne.n	1a009e82 <memchr+0x62>
1a009e90:	2000      	movs	r0, #0
1a009e92:	4770      	bx	lr
1a009e94:	3801      	subs	r0, #1
1a009e96:	4770      	bx	lr
1a009e98:	2d00      	cmp	r5, #0
1a009e9a:	bf06      	itte	eq
1a009e9c:	4635      	moveq	r5, r6
1a009e9e:	3803      	subeq	r0, #3
1a009ea0:	3807      	subne	r0, #7
1a009ea2:	f015 0f01 	tst.w	r5, #1
1a009ea6:	d107      	bne.n	1a009eb8 <memchr+0x98>
1a009ea8:	3001      	adds	r0, #1
1a009eaa:	f415 7f80 	tst.w	r5, #256	; 0x100
1a009eae:	bf02      	ittt	eq
1a009eb0:	3001      	addeq	r0, #1
1a009eb2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
1a009eb6:	3001      	addeq	r0, #1
1a009eb8:	bcf0      	pop	{r4, r5, r6, r7}
1a009eba:	3801      	subs	r0, #1
1a009ebc:	4770      	bx	lr
1a009ebe:	bf00      	nop

1a009ec0 <memmove>:
1a009ec0:	4288      	cmp	r0, r1
1a009ec2:	b4f0      	push	{r4, r5, r6, r7}
1a009ec4:	d90d      	bls.n	1a009ee2 <memmove+0x22>
1a009ec6:	188b      	adds	r3, r1, r2
1a009ec8:	4283      	cmp	r3, r0
1a009eca:	d90a      	bls.n	1a009ee2 <memmove+0x22>
1a009ecc:	1884      	adds	r4, r0, r2
1a009ece:	b132      	cbz	r2, 1a009ede <memmove+0x1e>
1a009ed0:	4622      	mov	r2, r4
1a009ed2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
1a009ed6:	f802 4d01 	strb.w	r4, [r2, #-1]!
1a009eda:	4299      	cmp	r1, r3
1a009edc:	d1f9      	bne.n	1a009ed2 <memmove+0x12>
1a009ede:	bcf0      	pop	{r4, r5, r6, r7}
1a009ee0:	4770      	bx	lr
1a009ee2:	2a0f      	cmp	r2, #15
1a009ee4:	d80e      	bhi.n	1a009f04 <memmove+0x44>
1a009ee6:	4603      	mov	r3, r0
1a009ee8:	1e54      	subs	r4, r2, #1
1a009eea:	2a00      	cmp	r2, #0
1a009eec:	d0f7      	beq.n	1a009ede <memmove+0x1e>
1a009eee:	3401      	adds	r4, #1
1a009ef0:	440c      	add	r4, r1
1a009ef2:	3b01      	subs	r3, #1
1a009ef4:	f811 2b01 	ldrb.w	r2, [r1], #1
1a009ef8:	f803 2f01 	strb.w	r2, [r3, #1]!
1a009efc:	42a1      	cmp	r1, r4
1a009efe:	d1f9      	bne.n	1a009ef4 <memmove+0x34>
1a009f00:	bcf0      	pop	{r4, r5, r6, r7}
1a009f02:	4770      	bx	lr
1a009f04:	ea40 0301 	orr.w	r3, r0, r1
1a009f08:	079b      	lsls	r3, r3, #30
1a009f0a:	d13b      	bne.n	1a009f84 <memmove+0xc4>
1a009f0c:	f1a2 0710 	sub.w	r7, r2, #16
1a009f10:	093f      	lsrs	r7, r7, #4
1a009f12:	f101 0620 	add.w	r6, r1, #32
1a009f16:	eb06 1607 	add.w	r6, r6, r7, lsl #4
1a009f1a:	f101 0310 	add.w	r3, r1, #16
1a009f1e:	f100 0410 	add.w	r4, r0, #16
1a009f22:	f853 5c10 	ldr.w	r5, [r3, #-16]
1a009f26:	f844 5c10 	str.w	r5, [r4, #-16]
1a009f2a:	f853 5c0c 	ldr.w	r5, [r3, #-12]
1a009f2e:	f844 5c0c 	str.w	r5, [r4, #-12]
1a009f32:	f853 5c08 	ldr.w	r5, [r3, #-8]
1a009f36:	f844 5c08 	str.w	r5, [r4, #-8]
1a009f3a:	f853 5c04 	ldr.w	r5, [r3, #-4]
1a009f3e:	f844 5c04 	str.w	r5, [r4, #-4]
1a009f42:	3310      	adds	r3, #16
1a009f44:	42b3      	cmp	r3, r6
1a009f46:	f104 0410 	add.w	r4, r4, #16
1a009f4a:	d1ea      	bne.n	1a009f22 <memmove+0x62>
1a009f4c:	1c7b      	adds	r3, r7, #1
1a009f4e:	011b      	lsls	r3, r3, #4
1a009f50:	f012 0f0c 	tst.w	r2, #12
1a009f54:	4419      	add	r1, r3
1a009f56:	f002 050f 	and.w	r5, r2, #15
1a009f5a:	4403      	add	r3, r0
1a009f5c:	d015      	beq.n	1a009f8a <memmove+0xca>
1a009f5e:	3d04      	subs	r5, #4
1a009f60:	08ad      	lsrs	r5, r5, #2
1a009f62:	eb03 0c85 	add.w	ip, r3, r5, lsl #2
1a009f66:	1f1c      	subs	r4, r3, #4
1a009f68:	460e      	mov	r6, r1
1a009f6a:	f856 7b04 	ldr.w	r7, [r6], #4
1a009f6e:	f844 7f04 	str.w	r7, [r4, #4]!
1a009f72:	4564      	cmp	r4, ip
1a009f74:	d1f9      	bne.n	1a009f6a <memmove+0xaa>
1a009f76:	3501      	adds	r5, #1
1a009f78:	00ad      	lsls	r5, r5, #2
1a009f7a:	442b      	add	r3, r5
1a009f7c:	4429      	add	r1, r5
1a009f7e:	f002 0203 	and.w	r2, r2, #3
1a009f82:	e7b1      	b.n	1a009ee8 <memmove+0x28>
1a009f84:	1e54      	subs	r4, r2, #1
1a009f86:	4603      	mov	r3, r0
1a009f88:	e7b1      	b.n	1a009eee <memmove+0x2e>
1a009f8a:	462a      	mov	r2, r5
1a009f8c:	e7ac      	b.n	1a009ee8 <memmove+0x28>
1a009f8e:	bf00      	nop

1a009f90 <_Balloc>:
1a009f90:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
1a009f92:	b570      	push	{r4, r5, r6, lr}
1a009f94:	4605      	mov	r5, r0
1a009f96:	460c      	mov	r4, r1
1a009f98:	b14b      	cbz	r3, 1a009fae <_Balloc+0x1e>
1a009f9a:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
1a009f9e:	b180      	cbz	r0, 1a009fc2 <_Balloc+0x32>
1a009fa0:	6802      	ldr	r2, [r0, #0]
1a009fa2:	f843 2024 	str.w	r2, [r3, r4, lsl #2]
1a009fa6:	2300      	movs	r3, #0
1a009fa8:	e9c0 3303 	strd	r3, r3, [r0, #12]
1a009fac:	bd70      	pop	{r4, r5, r6, pc}
1a009fae:	2221      	movs	r2, #33	; 0x21
1a009fb0:	2104      	movs	r1, #4
1a009fb2:	f000 fd63 	bl	1a00aa7c <_calloc_r>
1a009fb6:	4603      	mov	r3, r0
1a009fb8:	64e8      	str	r0, [r5, #76]	; 0x4c
1a009fba:	2800      	cmp	r0, #0
1a009fbc:	d1ed      	bne.n	1a009f9a <_Balloc+0xa>
1a009fbe:	2000      	movs	r0, #0
1a009fc0:	bd70      	pop	{r4, r5, r6, pc}
1a009fc2:	2101      	movs	r1, #1
1a009fc4:	fa01 f604 	lsl.w	r6, r1, r4
1a009fc8:	1d72      	adds	r2, r6, #5
1a009fca:	4628      	mov	r0, r5
1a009fcc:	0092      	lsls	r2, r2, #2
1a009fce:	f000 fd55 	bl	1a00aa7c <_calloc_r>
1a009fd2:	2800      	cmp	r0, #0
1a009fd4:	d0f3      	beq.n	1a009fbe <_Balloc+0x2e>
1a009fd6:	e9c0 4601 	strd	r4, r6, [r0, #4]
1a009fda:	e7e4      	b.n	1a009fa6 <_Balloc+0x16>

1a009fdc <_Bfree>:
1a009fdc:	b131      	cbz	r1, 1a009fec <_Bfree+0x10>
1a009fde:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
1a009fe0:	684a      	ldr	r2, [r1, #4]
1a009fe2:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
1a009fe6:	6008      	str	r0, [r1, #0]
1a009fe8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
1a009fec:	4770      	bx	lr
1a009fee:	bf00      	nop

1a009ff0 <__multadd>:
1a009ff0:	b5f0      	push	{r4, r5, r6, r7, lr}
1a009ff2:	690c      	ldr	r4, [r1, #16]
1a009ff4:	b083      	sub	sp, #12
1a009ff6:	460d      	mov	r5, r1
1a009ff8:	4606      	mov	r6, r0
1a009ffa:	f101 0c14 	add.w	ip, r1, #20
1a009ffe:	2700      	movs	r7, #0
1a00a000:	f8dc 0000 	ldr.w	r0, [ip]
1a00a004:	b281      	uxth	r1, r0
1a00a006:	fb02 3301 	mla	r3, r2, r1, r3
1a00a00a:	0c19      	lsrs	r1, r3, #16
1a00a00c:	0c00      	lsrs	r0, r0, #16
1a00a00e:	fb02 1000 	mla	r0, r2, r0, r1
1a00a012:	b29b      	uxth	r3, r3
1a00a014:	3701      	adds	r7, #1
1a00a016:	eb03 4300 	add.w	r3, r3, r0, lsl #16
1a00a01a:	42bc      	cmp	r4, r7
1a00a01c:	f84c 3b04 	str.w	r3, [ip], #4
1a00a020:	ea4f 4310 	mov.w	r3, r0, lsr #16
1a00a024:	dcec      	bgt.n	1a00a000 <__multadd+0x10>
1a00a026:	b13b      	cbz	r3, 1a00a038 <__multadd+0x48>
1a00a028:	68aa      	ldr	r2, [r5, #8]
1a00a02a:	42a2      	cmp	r2, r4
1a00a02c:	dd07      	ble.n	1a00a03e <__multadd+0x4e>
1a00a02e:	eb05 0284 	add.w	r2, r5, r4, lsl #2
1a00a032:	3401      	adds	r4, #1
1a00a034:	6153      	str	r3, [r2, #20]
1a00a036:	612c      	str	r4, [r5, #16]
1a00a038:	4628      	mov	r0, r5
1a00a03a:	b003      	add	sp, #12
1a00a03c:	bdf0      	pop	{r4, r5, r6, r7, pc}
1a00a03e:	6869      	ldr	r1, [r5, #4]
1a00a040:	9301      	str	r3, [sp, #4]
1a00a042:	3101      	adds	r1, #1
1a00a044:	4630      	mov	r0, r6
1a00a046:	f7ff ffa3 	bl	1a009f90 <_Balloc>
1a00a04a:	692a      	ldr	r2, [r5, #16]
1a00a04c:	3202      	adds	r2, #2
1a00a04e:	f105 010c 	add.w	r1, r5, #12
1a00a052:	4607      	mov	r7, r0
1a00a054:	0092      	lsls	r2, r2, #2
1a00a056:	300c      	adds	r0, #12
1a00a058:	f7fc fc4c 	bl	1a0068f4 <memcpy>
1a00a05c:	6cf2      	ldr	r2, [r6, #76]	; 0x4c
1a00a05e:	6869      	ldr	r1, [r5, #4]
1a00a060:	9b01      	ldr	r3, [sp, #4]
1a00a062:	f852 0021 	ldr.w	r0, [r2, r1, lsl #2]
1a00a066:	6028      	str	r0, [r5, #0]
1a00a068:	f842 5021 	str.w	r5, [r2, r1, lsl #2]
1a00a06c:	463d      	mov	r5, r7
1a00a06e:	eb05 0284 	add.w	r2, r5, r4, lsl #2
1a00a072:	3401      	adds	r4, #1
1a00a074:	6153      	str	r3, [r2, #20]
1a00a076:	612c      	str	r4, [r5, #16]
1a00a078:	e7de      	b.n	1a00a038 <__multadd+0x48>
1a00a07a:	bf00      	nop

1a00a07c <__hi0bits>:
1a00a07c:	0c02      	lsrs	r2, r0, #16
1a00a07e:	0412      	lsls	r2, r2, #16
1a00a080:	4603      	mov	r3, r0
1a00a082:	b9ca      	cbnz	r2, 1a00a0b8 <__hi0bits+0x3c>
1a00a084:	0403      	lsls	r3, r0, #16
1a00a086:	2010      	movs	r0, #16
1a00a088:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
1a00a08c:	bf04      	itt	eq
1a00a08e:	021b      	lsleq	r3, r3, #8
1a00a090:	3008      	addeq	r0, #8
1a00a092:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
1a00a096:	bf04      	itt	eq
1a00a098:	011b      	lsleq	r3, r3, #4
1a00a09a:	3004      	addeq	r0, #4
1a00a09c:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
1a00a0a0:	bf04      	itt	eq
1a00a0a2:	009b      	lsleq	r3, r3, #2
1a00a0a4:	3002      	addeq	r0, #2
1a00a0a6:	2b00      	cmp	r3, #0
1a00a0a8:	db05      	blt.n	1a00a0b6 <__hi0bits+0x3a>
1a00a0aa:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
1a00a0ae:	f100 0001 	add.w	r0, r0, #1
1a00a0b2:	bf08      	it	eq
1a00a0b4:	2020      	moveq	r0, #32
1a00a0b6:	4770      	bx	lr
1a00a0b8:	2000      	movs	r0, #0
1a00a0ba:	e7e5      	b.n	1a00a088 <__hi0bits+0xc>

1a00a0bc <__lo0bits>:
1a00a0bc:	6803      	ldr	r3, [r0, #0]
1a00a0be:	f013 0207 	ands.w	r2, r3, #7
1a00a0c2:	4601      	mov	r1, r0
1a00a0c4:	d007      	beq.n	1a00a0d6 <__lo0bits+0x1a>
1a00a0c6:	07da      	lsls	r2, r3, #31
1a00a0c8:	d420      	bmi.n	1a00a10c <__lo0bits+0x50>
1a00a0ca:	0798      	lsls	r0, r3, #30
1a00a0cc:	d522      	bpl.n	1a00a114 <__lo0bits+0x58>
1a00a0ce:	085b      	lsrs	r3, r3, #1
1a00a0d0:	600b      	str	r3, [r1, #0]
1a00a0d2:	2001      	movs	r0, #1
1a00a0d4:	4770      	bx	lr
1a00a0d6:	b298      	uxth	r0, r3
1a00a0d8:	b9b0      	cbnz	r0, 1a00a108 <__lo0bits+0x4c>
1a00a0da:	0c1b      	lsrs	r3, r3, #16
1a00a0dc:	2010      	movs	r0, #16
1a00a0de:	f013 0fff 	tst.w	r3, #255	; 0xff
1a00a0e2:	bf04      	itt	eq
1a00a0e4:	0a1b      	lsreq	r3, r3, #8
1a00a0e6:	3008      	addeq	r0, #8
1a00a0e8:	071a      	lsls	r2, r3, #28
1a00a0ea:	bf04      	itt	eq
1a00a0ec:	091b      	lsreq	r3, r3, #4
1a00a0ee:	3004      	addeq	r0, #4
1a00a0f0:	079a      	lsls	r2, r3, #30
1a00a0f2:	bf04      	itt	eq
1a00a0f4:	089b      	lsreq	r3, r3, #2
1a00a0f6:	3002      	addeq	r0, #2
1a00a0f8:	07da      	lsls	r2, r3, #31
1a00a0fa:	d403      	bmi.n	1a00a104 <__lo0bits+0x48>
1a00a0fc:	085b      	lsrs	r3, r3, #1
1a00a0fe:	f100 0001 	add.w	r0, r0, #1
1a00a102:	d005      	beq.n	1a00a110 <__lo0bits+0x54>
1a00a104:	600b      	str	r3, [r1, #0]
1a00a106:	4770      	bx	lr
1a00a108:	4610      	mov	r0, r2
1a00a10a:	e7e8      	b.n	1a00a0de <__lo0bits+0x22>
1a00a10c:	2000      	movs	r0, #0
1a00a10e:	4770      	bx	lr
1a00a110:	2020      	movs	r0, #32
1a00a112:	4770      	bx	lr
1a00a114:	089b      	lsrs	r3, r3, #2
1a00a116:	600b      	str	r3, [r1, #0]
1a00a118:	2002      	movs	r0, #2
1a00a11a:	4770      	bx	lr

1a00a11c <__i2b>:
1a00a11c:	b510      	push	{r4, lr}
1a00a11e:	460c      	mov	r4, r1
1a00a120:	2101      	movs	r1, #1
1a00a122:	f7ff ff35 	bl	1a009f90 <_Balloc>
1a00a126:	2201      	movs	r2, #1
1a00a128:	e9c0 2404 	strd	r2, r4, [r0, #16]
1a00a12c:	bd10      	pop	{r4, pc}
1a00a12e:	bf00      	nop

1a00a130 <__multiply>:
1a00a130:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
1a00a134:	690e      	ldr	r6, [r1, #16]
1a00a136:	6917      	ldr	r7, [r2, #16]
1a00a138:	42be      	cmp	r6, r7
1a00a13a:	b083      	sub	sp, #12
1a00a13c:	460c      	mov	r4, r1
1a00a13e:	4615      	mov	r5, r2
1a00a140:	db05      	blt.n	1a00a14e <__multiply+0x1e>
1a00a142:	463a      	mov	r2, r7
1a00a144:	462b      	mov	r3, r5
1a00a146:	4637      	mov	r7, r6
1a00a148:	460d      	mov	r5, r1
1a00a14a:	4616      	mov	r6, r2
1a00a14c:	461c      	mov	r4, r3
1a00a14e:	e9d5 1301 	ldrd	r1, r3, [r5, #4]
1a00a152:	eb07 0806 	add.w	r8, r7, r6
1a00a156:	4543      	cmp	r3, r8
1a00a158:	bfb8      	it	lt
1a00a15a:	3101      	addlt	r1, #1
1a00a15c:	f7ff ff18 	bl	1a009f90 <_Balloc>
1a00a160:	f100 0a14 	add.w	sl, r0, #20
1a00a164:	eb0a 0988 	add.w	r9, sl, r8, lsl #2
1a00a168:	45ca      	cmp	sl, r9
1a00a16a:	9000      	str	r0, [sp, #0]
1a00a16c:	d205      	bcs.n	1a00a17a <__multiply+0x4a>
1a00a16e:	4653      	mov	r3, sl
1a00a170:	2100      	movs	r1, #0
1a00a172:	f843 1b04 	str.w	r1, [r3], #4
1a00a176:	4599      	cmp	r9, r3
1a00a178:	d8fb      	bhi.n	1a00a172 <__multiply+0x42>
1a00a17a:	f104 0e14 	add.w	lr, r4, #20
1a00a17e:	eb0e 0b86 	add.w	fp, lr, r6, lsl #2
1a00a182:	f105 0314 	add.w	r3, r5, #20
1a00a186:	45de      	cmp	lr, fp
1a00a188:	eb03 0787 	add.w	r7, r3, r7, lsl #2
1a00a18c:	d253      	bcs.n	1a00a236 <__multiply+0x106>
1a00a18e:	f8cd 8004 	str.w	r8, [sp, #4]
1a00a192:	4698      	mov	r8, r3
1a00a194:	e005      	b.n	1a00a1a2 <__multiply+0x72>
1a00a196:	0c09      	lsrs	r1, r1, #16
1a00a198:	d128      	bne.n	1a00a1ec <__multiply+0xbc>
1a00a19a:	45f3      	cmp	fp, lr
1a00a19c:	f10a 0a04 	add.w	sl, sl, #4
1a00a1a0:	d947      	bls.n	1a00a232 <__multiply+0x102>
1a00a1a2:	f85e 1b04 	ldr.w	r1, [lr], #4
1a00a1a6:	b28e      	uxth	r6, r1
1a00a1a8:	2e00      	cmp	r6, #0
1a00a1aa:	d0f4      	beq.n	1a00a196 <__multiply+0x66>
1a00a1ac:	4645      	mov	r5, r8
1a00a1ae:	4654      	mov	r4, sl
1a00a1b0:	2300      	movs	r3, #0
1a00a1b2:	f855 1b04 	ldr.w	r1, [r5], #4
1a00a1b6:	6820      	ldr	r0, [r4, #0]
1a00a1b8:	b28a      	uxth	r2, r1
1a00a1ba:	fa1f fc80 	uxth.w	ip, r0
1a00a1be:	fb06 c202 	mla	r2, r6, r2, ip
1a00a1c2:	0c09      	lsrs	r1, r1, #16
1a00a1c4:	0c00      	lsrs	r0, r0, #16
1a00a1c6:	4413      	add	r3, r2
1a00a1c8:	fb06 0201 	mla	r2, r6, r1, r0
1a00a1cc:	eb02 4213 	add.w	r2, r2, r3, lsr #16
1a00a1d0:	b29b      	uxth	r3, r3
1a00a1d2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
1a00a1d6:	42af      	cmp	r7, r5
1a00a1d8:	f844 3b04 	str.w	r3, [r4], #4
1a00a1dc:	ea4f 4312 	mov.w	r3, r2, lsr #16
1a00a1e0:	d8e7      	bhi.n	1a00a1b2 <__multiply+0x82>
1a00a1e2:	6023      	str	r3, [r4, #0]
1a00a1e4:	f85e 1c04 	ldr.w	r1, [lr, #-4]
1a00a1e8:	0c09      	lsrs	r1, r1, #16
1a00a1ea:	d0d6      	beq.n	1a00a19a <__multiply+0x6a>
1a00a1ec:	f8da 3000 	ldr.w	r3, [sl]
1a00a1f0:	4640      	mov	r0, r8
1a00a1f2:	461a      	mov	r2, r3
1a00a1f4:	4654      	mov	r4, sl
1a00a1f6:	f04f 0c00 	mov.w	ip, #0
1a00a1fa:	8805      	ldrh	r5, [r0, #0]
1a00a1fc:	0c12      	lsrs	r2, r2, #16
1a00a1fe:	fb01 2205 	mla	r2, r1, r5, r2
1a00a202:	4494      	add	ip, r2
1a00a204:	b29b      	uxth	r3, r3
1a00a206:	ea43 430c 	orr.w	r3, r3, ip, lsl #16
1a00a20a:	f844 3b04 	str.w	r3, [r4], #4
1a00a20e:	f850 3b04 	ldr.w	r3, [r0], #4
1a00a212:	6822      	ldr	r2, [r4, #0]
1a00a214:	0c1b      	lsrs	r3, r3, #16
1a00a216:	b295      	uxth	r5, r2
1a00a218:	fb01 5303 	mla	r3, r1, r3, r5
1a00a21c:	eb03 431c 	add.w	r3, r3, ip, lsr #16
1a00a220:	4287      	cmp	r7, r0
1a00a222:	ea4f 4c13 	mov.w	ip, r3, lsr #16
1a00a226:	d8e8      	bhi.n	1a00a1fa <__multiply+0xca>
1a00a228:	45f3      	cmp	fp, lr
1a00a22a:	6023      	str	r3, [r4, #0]
1a00a22c:	f10a 0a04 	add.w	sl, sl, #4
1a00a230:	d8b7      	bhi.n	1a00a1a2 <__multiply+0x72>
1a00a232:	f8dd 8004 	ldr.w	r8, [sp, #4]
1a00a236:	f1b8 0f00 	cmp.w	r8, #0
1a00a23a:	dd0b      	ble.n	1a00a254 <__multiply+0x124>
1a00a23c:	f859 3c04 	ldr.w	r3, [r9, #-4]
1a00a240:	f1a9 0904 	sub.w	r9, r9, #4
1a00a244:	b11b      	cbz	r3, 1a00a24e <__multiply+0x11e>
1a00a246:	e005      	b.n	1a00a254 <__multiply+0x124>
1a00a248:	f859 3d04 	ldr.w	r3, [r9, #-4]!
1a00a24c:	b913      	cbnz	r3, 1a00a254 <__multiply+0x124>
1a00a24e:	f1b8 0801 	subs.w	r8, r8, #1
1a00a252:	d1f9      	bne.n	1a00a248 <__multiply+0x118>
1a00a254:	9800      	ldr	r0, [sp, #0]
1a00a256:	f8c0 8010 	str.w	r8, [r0, #16]
1a00a25a:	b003      	add	sp, #12
1a00a25c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

1a00a260 <__pow5mult>:
1a00a260:	f012 0303 	ands.w	r3, r2, #3
1a00a264:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
1a00a268:	4614      	mov	r4, r2
1a00a26a:	4607      	mov	r7, r0
1a00a26c:	d12e      	bne.n	1a00a2cc <__pow5mult+0x6c>
1a00a26e:	460d      	mov	r5, r1
1a00a270:	10a4      	asrs	r4, r4, #2
1a00a272:	d01c      	beq.n	1a00a2ae <__pow5mult+0x4e>
1a00a274:	6cbe      	ldr	r6, [r7, #72]	; 0x48
1a00a276:	b396      	cbz	r6, 1a00a2de <__pow5mult+0x7e>
1a00a278:	07e3      	lsls	r3, r4, #31
1a00a27a:	f04f 0800 	mov.w	r8, #0
1a00a27e:	d406      	bmi.n	1a00a28e <__pow5mult+0x2e>
1a00a280:	1064      	asrs	r4, r4, #1
1a00a282:	d014      	beq.n	1a00a2ae <__pow5mult+0x4e>
1a00a284:	6830      	ldr	r0, [r6, #0]
1a00a286:	b1a8      	cbz	r0, 1a00a2b4 <__pow5mult+0x54>
1a00a288:	4606      	mov	r6, r0
1a00a28a:	07e3      	lsls	r3, r4, #31
1a00a28c:	d5f8      	bpl.n	1a00a280 <__pow5mult+0x20>
1a00a28e:	4632      	mov	r2, r6
1a00a290:	4629      	mov	r1, r5
1a00a292:	4638      	mov	r0, r7
1a00a294:	f7ff ff4c 	bl	1a00a130 <__multiply>
1a00a298:	b1b5      	cbz	r5, 1a00a2c8 <__pow5mult+0x68>
1a00a29a:	686a      	ldr	r2, [r5, #4]
1a00a29c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
1a00a29e:	1064      	asrs	r4, r4, #1
1a00a2a0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
1a00a2a4:	6029      	str	r1, [r5, #0]
1a00a2a6:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
1a00a2aa:	4605      	mov	r5, r0
1a00a2ac:	d1ea      	bne.n	1a00a284 <__pow5mult+0x24>
1a00a2ae:	4628      	mov	r0, r5
1a00a2b0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
1a00a2b4:	4632      	mov	r2, r6
1a00a2b6:	4631      	mov	r1, r6
1a00a2b8:	4638      	mov	r0, r7
1a00a2ba:	f7ff ff39 	bl	1a00a130 <__multiply>
1a00a2be:	6030      	str	r0, [r6, #0]
1a00a2c0:	f8c0 8000 	str.w	r8, [r0]
1a00a2c4:	4606      	mov	r6, r0
1a00a2c6:	e7e0      	b.n	1a00a28a <__pow5mult+0x2a>
1a00a2c8:	4605      	mov	r5, r0
1a00a2ca:	e7d9      	b.n	1a00a280 <__pow5mult+0x20>
1a00a2cc:	3b01      	subs	r3, #1
1a00a2ce:	4a0b      	ldr	r2, [pc, #44]	; (1a00a2fc <__pow5mult+0x9c>)
1a00a2d0:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
1a00a2d4:	2300      	movs	r3, #0
1a00a2d6:	f7ff fe8b 	bl	1a009ff0 <__multadd>
1a00a2da:	4605      	mov	r5, r0
1a00a2dc:	e7c8      	b.n	1a00a270 <__pow5mult+0x10>
1a00a2de:	2101      	movs	r1, #1
1a00a2e0:	4638      	mov	r0, r7
1a00a2e2:	f7ff fe55 	bl	1a009f90 <_Balloc>
1a00a2e6:	f240 2371 	movw	r3, #625	; 0x271
1a00a2ea:	6143      	str	r3, [r0, #20]
1a00a2ec:	2201      	movs	r2, #1
1a00a2ee:	2300      	movs	r3, #0
1a00a2f0:	6102      	str	r2, [r0, #16]
1a00a2f2:	4606      	mov	r6, r0
1a00a2f4:	64b8      	str	r0, [r7, #72]	; 0x48
1a00a2f6:	6003      	str	r3, [r0, #0]
1a00a2f8:	e7be      	b.n	1a00a278 <__pow5mult+0x18>
1a00a2fa:	bf00      	nop
1a00a2fc:	1a00b440 	.word	0x1a00b440

1a00a300 <__lshift>:
1a00a300:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
1a00a304:	690e      	ldr	r6, [r1, #16]
1a00a306:	460d      	mov	r5, r1
1a00a308:	ea4f 1962 	mov.w	r9, r2, asr #5
1a00a30c:	e9d1 1301 	ldrd	r1, r3, [r1, #4]
1a00a310:	444e      	add	r6, r9
1a00a312:	1c74      	adds	r4, r6, #1
1a00a314:	429c      	cmp	r4, r3
1a00a316:	4690      	mov	r8, r2
1a00a318:	4607      	mov	r7, r0
1a00a31a:	dd04      	ble.n	1a00a326 <__lshift+0x26>
1a00a31c:	005b      	lsls	r3, r3, #1
1a00a31e:	429c      	cmp	r4, r3
1a00a320:	f101 0101 	add.w	r1, r1, #1
1a00a324:	dcfa      	bgt.n	1a00a31c <__lshift+0x1c>
1a00a326:	4638      	mov	r0, r7
1a00a328:	f7ff fe32 	bl	1a009f90 <_Balloc>
1a00a32c:	f1b9 0f00 	cmp.w	r9, #0
1a00a330:	f100 0c14 	add.w	ip, r0, #20
1a00a334:	dd0e      	ble.n	1a00a354 <__lshift+0x54>
1a00a336:	f109 0905 	add.w	r9, r9, #5
1a00a33a:	ea4f 0989 	mov.w	r9, r9, lsl #2
1a00a33e:	eb00 0109 	add.w	r1, r0, r9
1a00a342:	4663      	mov	r3, ip
1a00a344:	2200      	movs	r2, #0
1a00a346:	f843 2b04 	str.w	r2, [r3], #4
1a00a34a:	428b      	cmp	r3, r1
1a00a34c:	d1fb      	bne.n	1a00a346 <__lshift+0x46>
1a00a34e:	f1a9 0914 	sub.w	r9, r9, #20
1a00a352:	44cc      	add	ip, r9
1a00a354:	6929      	ldr	r1, [r5, #16]
1a00a356:	f105 0314 	add.w	r3, r5, #20
1a00a35a:	f018 081f 	ands.w	r8, r8, #31
1a00a35e:	eb03 0e81 	add.w	lr, r3, r1, lsl #2
1a00a362:	d01d      	beq.n	1a00a3a0 <__lshift+0xa0>
1a00a364:	f1c8 0920 	rsb	r9, r8, #32
1a00a368:	2200      	movs	r2, #0
1a00a36a:	6819      	ldr	r1, [r3, #0]
1a00a36c:	fa01 f108 	lsl.w	r1, r1, r8
1a00a370:	4311      	orrs	r1, r2
1a00a372:	f84c 1b04 	str.w	r1, [ip], #4
1a00a376:	f853 2b04 	ldr.w	r2, [r3], #4
1a00a37a:	4573      	cmp	r3, lr
1a00a37c:	fa22 f209 	lsr.w	r2, r2, r9
1a00a380:	d3f3      	bcc.n	1a00a36a <__lshift+0x6a>
1a00a382:	f8cc 2000 	str.w	r2, [ip]
1a00a386:	2a00      	cmp	r2, #0
1a00a388:	bf18      	it	ne
1a00a38a:	4626      	movne	r6, r4
1a00a38c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
1a00a38e:	686a      	ldr	r2, [r5, #4]
1a00a390:	6106      	str	r6, [r0, #16]
1a00a392:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
1a00a396:	6029      	str	r1, [r5, #0]
1a00a398:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
1a00a39c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
1a00a3a0:	f1ac 0c04 	sub.w	ip, ip, #4
1a00a3a4:	f853 2b04 	ldr.w	r2, [r3], #4
1a00a3a8:	f84c 2f04 	str.w	r2, [ip, #4]!
1a00a3ac:	459e      	cmp	lr, r3
1a00a3ae:	d8f9      	bhi.n	1a00a3a4 <__lshift+0xa4>
1a00a3b0:	e7ec      	b.n	1a00a38c <__lshift+0x8c>
1a00a3b2:	bf00      	nop

1a00a3b4 <__mcmp>:
1a00a3b4:	b430      	push	{r4, r5}
1a00a3b6:	690b      	ldr	r3, [r1, #16]
1a00a3b8:	4605      	mov	r5, r0
1a00a3ba:	6900      	ldr	r0, [r0, #16]
1a00a3bc:	1ac0      	subs	r0, r0, r3
1a00a3be:	d110      	bne.n	1a00a3e2 <__mcmp+0x2e>
1a00a3c0:	009b      	lsls	r3, r3, #2
1a00a3c2:	3514      	adds	r5, #20
1a00a3c4:	3114      	adds	r1, #20
1a00a3c6:	4419      	add	r1, r3
1a00a3c8:	442b      	add	r3, r5
1a00a3ca:	e001      	b.n	1a00a3d0 <__mcmp+0x1c>
1a00a3cc:	429d      	cmp	r5, r3
1a00a3ce:	d208      	bcs.n	1a00a3e2 <__mcmp+0x2e>
1a00a3d0:	f853 4d04 	ldr.w	r4, [r3, #-4]!
1a00a3d4:	f851 2d04 	ldr.w	r2, [r1, #-4]!
1a00a3d8:	4294      	cmp	r4, r2
1a00a3da:	d0f7      	beq.n	1a00a3cc <__mcmp+0x18>
1a00a3dc:	d203      	bcs.n	1a00a3e6 <__mcmp+0x32>
1a00a3de:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
1a00a3e2:	bc30      	pop	{r4, r5}
1a00a3e4:	4770      	bx	lr
1a00a3e6:	2001      	movs	r0, #1
1a00a3e8:	bc30      	pop	{r4, r5}
1a00a3ea:	4770      	bx	lr

1a00a3ec <__mdiff>:
1a00a3ec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
1a00a3f0:	460f      	mov	r7, r1
1a00a3f2:	690d      	ldr	r5, [r1, #16]
1a00a3f4:	6911      	ldr	r1, [r2, #16]
1a00a3f6:	1a6d      	subs	r5, r5, r1
1a00a3f8:	2d00      	cmp	r5, #0
1a00a3fa:	4690      	mov	r8, r2
1a00a3fc:	4684      	mov	ip, r0
1a00a3fe:	f107 0414 	add.w	r4, r7, #20
1a00a402:	f102 0614 	add.w	r6, r2, #20
1a00a406:	d114      	bne.n	1a00a432 <__mdiff+0x46>
1a00a408:	0089      	lsls	r1, r1, #2
1a00a40a:	1863      	adds	r3, r4, r1
1a00a40c:	4431      	add	r1, r6
1a00a40e:	e001      	b.n	1a00a414 <__mdiff+0x28>
1a00a410:	42a3      	cmp	r3, r4
1a00a412:	d95d      	bls.n	1a00a4d0 <__mdiff+0xe4>
1a00a414:	f853 0d04 	ldr.w	r0, [r3, #-4]!
1a00a418:	f851 2d04 	ldr.w	r2, [r1, #-4]!
1a00a41c:	4290      	cmp	r0, r2
1a00a41e:	d0f7      	beq.n	1a00a410 <__mdiff+0x24>
1a00a420:	d209      	bcs.n	1a00a436 <__mdiff+0x4a>
1a00a422:	4622      	mov	r2, r4
1a00a424:	463b      	mov	r3, r7
1a00a426:	4634      	mov	r4, r6
1a00a428:	4647      	mov	r7, r8
1a00a42a:	4616      	mov	r6, r2
1a00a42c:	4698      	mov	r8, r3
1a00a42e:	2501      	movs	r5, #1
1a00a430:	e001      	b.n	1a00a436 <__mdiff+0x4a>
1a00a432:	dbf6      	blt.n	1a00a422 <__mdiff+0x36>
1a00a434:	2500      	movs	r5, #0
1a00a436:	4660      	mov	r0, ip
1a00a438:	6879      	ldr	r1, [r7, #4]
1a00a43a:	f7ff fda9 	bl	1a009f90 <_Balloc>
1a00a43e:	693f      	ldr	r7, [r7, #16]
1a00a440:	f8d8 3010 	ldr.w	r3, [r8, #16]
1a00a444:	60c5      	str	r5, [r0, #12]
1a00a446:	eb06 0e83 	add.w	lr, r6, r3, lsl #2
1a00a44a:	eb04 0c87 	add.w	ip, r4, r7, lsl #2
1a00a44e:	f100 0514 	add.w	r5, r0, #20
1a00a452:	2200      	movs	r2, #0
1a00a454:	e000      	b.n	1a00a458 <__mdiff+0x6c>
1a00a456:	460d      	mov	r5, r1
1a00a458:	f856 1b04 	ldr.w	r1, [r6], #4
1a00a45c:	f854 8b04 	ldr.w	r8, [r4], #4
1a00a460:	fa1f f981 	uxth.w	r9, r1
1a00a464:	fa12 f388 	uxtah	r3, r2, r8
1a00a468:	0c0a      	lsrs	r2, r1, #16
1a00a46a:	eba3 0309 	sub.w	r3, r3, r9
1a00a46e:	ebc2 4218 	rsb	r2, r2, r8, lsr #16
1a00a472:	eb02 4223 	add.w	r2, r2, r3, asr #16
1a00a476:	4629      	mov	r1, r5
1a00a478:	b29b      	uxth	r3, r3
1a00a47a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
1a00a47e:	45b6      	cmp	lr, r6
1a00a480:	ea4f 4222 	mov.w	r2, r2, asr #16
1a00a484:	f841 3b04 	str.w	r3, [r1], #4
1a00a488:	46a0      	mov	r8, r4
1a00a48a:	d8e4      	bhi.n	1a00a456 <__mdiff+0x6a>
1a00a48c:	45a4      	cmp	ip, r4
1a00a48e:	d916      	bls.n	1a00a4be <__mdiff+0xd2>
1a00a490:	460e      	mov	r6, r1
1a00a492:	f858 5b04 	ldr.w	r5, [r8], #4
1a00a496:	fa12 f385 	uxtah	r3, r2, r5
1a00a49a:	141a      	asrs	r2, r3, #16
1a00a49c:	eb02 4215 	add.w	r2, r2, r5, lsr #16
1a00a4a0:	b29b      	uxth	r3, r3
1a00a4a2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
1a00a4a6:	45c4      	cmp	ip, r8
1a00a4a8:	f846 3b04 	str.w	r3, [r6], #4
1a00a4ac:	ea4f 4222 	mov.w	r2, r2, asr #16
1a00a4b0:	d8ef      	bhi.n	1a00a492 <__mdiff+0xa6>
1a00a4b2:	f10c 35ff 	add.w	r5, ip, #4294967295	; 0xffffffff
1a00a4b6:	1b2d      	subs	r5, r5, r4
1a00a4b8:	f025 0503 	bic.w	r5, r5, #3
1a00a4bc:	440d      	add	r5, r1
1a00a4be:	b923      	cbnz	r3, 1a00a4ca <__mdiff+0xde>
1a00a4c0:	f855 3d04 	ldr.w	r3, [r5, #-4]!
1a00a4c4:	3f01      	subs	r7, #1
1a00a4c6:	2b00      	cmp	r3, #0
1a00a4c8:	d0fa      	beq.n	1a00a4c0 <__mdiff+0xd4>
1a00a4ca:	6107      	str	r7, [r0, #16]
1a00a4cc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
1a00a4d0:	4660      	mov	r0, ip
1a00a4d2:	2100      	movs	r1, #0
1a00a4d4:	f7ff fd5c 	bl	1a009f90 <_Balloc>
1a00a4d8:	2201      	movs	r2, #1
1a00a4da:	2300      	movs	r3, #0
1a00a4dc:	e9c0 2304 	strd	r2, r3, [r0, #16]
1a00a4e0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

1a00a4e4 <__d2b>:
1a00a4e4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
1a00a4e8:	460f      	mov	r7, r1
1a00a4ea:	b083      	sub	sp, #12
1a00a4ec:	2101      	movs	r1, #1
1a00a4ee:	ec55 4b10 	vmov	r4, r5, d0
1a00a4f2:	4616      	mov	r6, r2
1a00a4f4:	f7ff fd4c 	bl	1a009f90 <_Balloc>
1a00a4f8:	f3c5 580a 	ubfx	r8, r5, #20, #11
1a00a4fc:	4681      	mov	r9, r0
1a00a4fe:	f3c5 0313 	ubfx	r3, r5, #0, #20
1a00a502:	f1b8 0f00 	cmp.w	r8, #0
1a00a506:	d001      	beq.n	1a00a50c <__d2b+0x28>
1a00a508:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
1a00a50c:	2c00      	cmp	r4, #0
1a00a50e:	9301      	str	r3, [sp, #4]
1a00a510:	d02b      	beq.n	1a00a56a <__d2b+0x86>
1a00a512:	4668      	mov	r0, sp
1a00a514:	9400      	str	r4, [sp, #0]
1a00a516:	f7ff fdd1 	bl	1a00a0bc <__lo0bits>
1a00a51a:	b9d0      	cbnz	r0, 1a00a552 <__d2b+0x6e>
1a00a51c:	e9dd 2300 	ldrd	r2, r3, [sp]
1a00a520:	f8c9 2014 	str.w	r2, [r9, #20]
1a00a524:	2b00      	cmp	r3, #0
1a00a526:	bf14      	ite	ne
1a00a528:	2102      	movne	r1, #2
1a00a52a:	2101      	moveq	r1, #1
1a00a52c:	f8c9 3018 	str.w	r3, [r9, #24]
1a00a530:	f8c9 1010 	str.w	r1, [r9, #16]
1a00a534:	f1b8 0f00 	cmp.w	r8, #0
1a00a538:	d024      	beq.n	1a00a584 <__d2b+0xa0>
1a00a53a:	f2a8 4833 	subw	r8, r8, #1075	; 0x433
1a00a53e:	eb08 0300 	add.w	r3, r8, r0
1a00a542:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
1a00a546:	603b      	str	r3, [r7, #0]
1a00a548:	6030      	str	r0, [r6, #0]
1a00a54a:	4648      	mov	r0, r9
1a00a54c:	b003      	add	sp, #12
1a00a54e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
1a00a552:	e9dd 1300 	ldrd	r1, r3, [sp]
1a00a556:	f1c0 0220 	rsb	r2, r0, #32
1a00a55a:	fa03 f202 	lsl.w	r2, r3, r2
1a00a55e:	430a      	orrs	r2, r1
1a00a560:	40c3      	lsrs	r3, r0
1a00a562:	9301      	str	r3, [sp, #4]
1a00a564:	f8c9 2014 	str.w	r2, [r9, #20]
1a00a568:	e7dc      	b.n	1a00a524 <__d2b+0x40>
1a00a56a:	a801      	add	r0, sp, #4
1a00a56c:	f7ff fda6 	bl	1a00a0bc <__lo0bits>
1a00a570:	9b01      	ldr	r3, [sp, #4]
1a00a572:	f8c9 3014 	str.w	r3, [r9, #20]
1a00a576:	2101      	movs	r1, #1
1a00a578:	3020      	adds	r0, #32
1a00a57a:	f8c9 1010 	str.w	r1, [r9, #16]
1a00a57e:	f1b8 0f00 	cmp.w	r8, #0
1a00a582:	d1da      	bne.n	1a00a53a <__d2b+0x56>
1a00a584:	eb09 0381 	add.w	r3, r9, r1, lsl #2
1a00a588:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
1a00a58c:	6038      	str	r0, [r7, #0]
1a00a58e:	6918      	ldr	r0, [r3, #16]
1a00a590:	f7ff fd74 	bl	1a00a07c <__hi0bits>
1a00a594:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
1a00a598:	6030      	str	r0, [r6, #0]
1a00a59a:	4648      	mov	r0, r9
1a00a59c:	b003      	add	sp, #12
1a00a59e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
1a00a5a2:	bf00      	nop

1a00a5a4 <_realloc_r>:
1a00a5a4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
1a00a5a8:	4617      	mov	r7, r2
1a00a5aa:	2900      	cmp	r1, #0
1a00a5ac:	f000 80bb 	beq.w	1a00a726 <_realloc_r+0x182>
1a00a5b0:	f107 040b 	add.w	r4, r7, #11
1a00a5b4:	4681      	mov	r9, r0
1a00a5b6:	460d      	mov	r5, r1
1a00a5b8:	f7fc fa86 	bl	1a006ac8 <__malloc_lock>
1a00a5bc:	2c16      	cmp	r4, #22
1a00a5be:	d85e      	bhi.n	1a00a67e <_realloc_r+0xda>
1a00a5c0:	2410      	movs	r4, #16
1a00a5c2:	4622      	mov	r2, r4
1a00a5c4:	42a7      	cmp	r7, r4
1a00a5c6:	d85f      	bhi.n	1a00a688 <_realloc_r+0xe4>
1a00a5c8:	f855 ec04 	ldr.w	lr, [r5, #-4]
1a00a5cc:	f02e 0603 	bic.w	r6, lr, #3
1a00a5d0:	f1a5 0808 	sub.w	r8, r5, #8
1a00a5d4:	4296      	cmp	r6, r2
1a00a5d6:	eb08 0a06 	add.w	sl, r8, r6
1a00a5da:	f280 8081 	bge.w	1a00a6e0 <_realloc_r+0x13c>
1a00a5de:	4bcb      	ldr	r3, [pc, #812]	; (1a00a90c <_realloc_r+0x368>)
1a00a5e0:	f8da 0004 	ldr.w	r0, [sl, #4]
1a00a5e4:	6899      	ldr	r1, [r3, #8]
1a00a5e6:	4551      	cmp	r1, sl
1a00a5e8:	f000 80b5 	beq.w	1a00a756 <_realloc_r+0x1b2>
1a00a5ec:	f020 0301 	bic.w	r3, r0, #1
1a00a5f0:	4453      	add	r3, sl
1a00a5f2:	685b      	ldr	r3, [r3, #4]
1a00a5f4:	07db      	lsls	r3, r3, #31
1a00a5f6:	f100 808a 	bmi.w	1a00a70e <_realloc_r+0x16a>
1a00a5fa:	f020 0003 	bic.w	r0, r0, #3
1a00a5fe:	1833      	adds	r3, r6, r0
1a00a600:	4293      	cmp	r3, r2
1a00a602:	f280 8112 	bge.w	1a00a82a <_realloc_r+0x286>
1a00a606:	f01e 0f01 	tst.w	lr, #1
1a00a60a:	d10f      	bne.n	1a00a62c <_realloc_r+0x88>
1a00a60c:	f855 3c08 	ldr.w	r3, [r5, #-8]
1a00a610:	eba8 0b03 	sub.w	fp, r8, r3
1a00a614:	f8db 1004 	ldr.w	r1, [fp, #4]
1a00a618:	f021 0103 	bic.w	r1, r1, #3
1a00a61c:	4408      	add	r0, r1
1a00a61e:	1983      	adds	r3, r0, r6
1a00a620:	4293      	cmp	r3, r2
1a00a622:	f280 8116 	bge.w	1a00a852 <_realloc_r+0x2ae>
1a00a626:	1873      	adds	r3, r6, r1
1a00a628:	4293      	cmp	r3, r2
1a00a62a:	da34      	bge.n	1a00a696 <_realloc_r+0xf2>
1a00a62c:	4639      	mov	r1, r7
1a00a62e:	4648      	mov	r0, r9
1a00a630:	f7fb fea8 	bl	1a006384 <_malloc_r>
1a00a634:	4607      	mov	r7, r0
1a00a636:	b1e0      	cbz	r0, 1a00a672 <_realloc_r+0xce>
1a00a638:	f855 3c04 	ldr.w	r3, [r5, #-4]
1a00a63c:	f023 0301 	bic.w	r3, r3, #1
1a00a640:	4443      	add	r3, r8
1a00a642:	f1a0 0208 	sub.w	r2, r0, #8
1a00a646:	4293      	cmp	r3, r2
1a00a648:	f000 80f7 	beq.w	1a00a83a <_realloc_r+0x296>
1a00a64c:	1f32      	subs	r2, r6, #4
1a00a64e:	2a24      	cmp	r2, #36	; 0x24
1a00a650:	f200 80fb 	bhi.w	1a00a84a <_realloc_r+0x2a6>
1a00a654:	2a13      	cmp	r2, #19
1a00a656:	6829      	ldr	r1, [r5, #0]
1a00a658:	f200 80c9 	bhi.w	1a00a7ee <_realloc_r+0x24a>
1a00a65c:	4603      	mov	r3, r0
1a00a65e:	462a      	mov	r2, r5
1a00a660:	6019      	str	r1, [r3, #0]
1a00a662:	6851      	ldr	r1, [r2, #4]
1a00a664:	6059      	str	r1, [r3, #4]
1a00a666:	6892      	ldr	r2, [r2, #8]
1a00a668:	609a      	str	r2, [r3, #8]
1a00a66a:	4629      	mov	r1, r5
1a00a66c:	4648      	mov	r0, r9
1a00a66e:	f7fb fd3d 	bl	1a0060ec <_free_r>
1a00a672:	4648      	mov	r0, r9
1a00a674:	f7fc fa2e 	bl	1a006ad4 <__malloc_unlock>
1a00a678:	4638      	mov	r0, r7
1a00a67a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
1a00a67e:	f024 0407 	bic.w	r4, r4, #7
1a00a682:	2c00      	cmp	r4, #0
1a00a684:	4622      	mov	r2, r4
1a00a686:	da9d      	bge.n	1a00a5c4 <_realloc_r+0x20>
1a00a688:	230c      	movs	r3, #12
1a00a68a:	f8c9 3000 	str.w	r3, [r9]
1a00a68e:	2700      	movs	r7, #0
1a00a690:	4638      	mov	r0, r7
1a00a692:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
1a00a696:	465f      	mov	r7, fp
1a00a698:	f8db 100c 	ldr.w	r1, [fp, #12]
1a00a69c:	f857 0f08 	ldr.w	r0, [r7, #8]!
1a00a6a0:	1f32      	subs	r2, r6, #4
1a00a6a2:	2a24      	cmp	r2, #36	; 0x24
1a00a6a4:	60c1      	str	r1, [r0, #12]
1a00a6a6:	eb0b 0a03 	add.w	sl, fp, r3
1a00a6aa:	6088      	str	r0, [r1, #8]
1a00a6ac:	f200 80d9 	bhi.w	1a00a862 <_realloc_r+0x2be>
1a00a6b0:	2a13      	cmp	r2, #19
1a00a6b2:	6829      	ldr	r1, [r5, #0]
1a00a6b4:	f240 80d3 	bls.w	1a00a85e <_realloc_r+0x2ba>
1a00a6b8:	f8cb 1008 	str.w	r1, [fp, #8]
1a00a6bc:	6869      	ldr	r1, [r5, #4]
1a00a6be:	f8cb 100c 	str.w	r1, [fp, #12]
1a00a6c2:	2a1b      	cmp	r2, #27
1a00a6c4:	68a9      	ldr	r1, [r5, #8]
1a00a6c6:	f200 80e0 	bhi.w	1a00a88a <_realloc_r+0x2e6>
1a00a6ca:	f10b 0210 	add.w	r2, fp, #16
1a00a6ce:	3508      	adds	r5, #8
1a00a6d0:	6011      	str	r1, [r2, #0]
1a00a6d2:	6869      	ldr	r1, [r5, #4]
1a00a6d4:	6051      	str	r1, [r2, #4]
1a00a6d6:	68a9      	ldr	r1, [r5, #8]
1a00a6d8:	6091      	str	r1, [r2, #8]
1a00a6da:	461e      	mov	r6, r3
1a00a6dc:	46d8      	mov	r8, fp
1a00a6de:	463d      	mov	r5, r7
1a00a6e0:	f8d8 3004 	ldr.w	r3, [r8, #4]
1a00a6e4:	1b32      	subs	r2, r6, r4
1a00a6e6:	2a0f      	cmp	r2, #15
1a00a6e8:	f003 0301 	and.w	r3, r3, #1
1a00a6ec:	d820      	bhi.n	1a00a730 <_realloc_r+0x18c>
1a00a6ee:	4333      	orrs	r3, r6
1a00a6f0:	f8c8 3004 	str.w	r3, [r8, #4]
1a00a6f4:	f8da 3004 	ldr.w	r3, [sl, #4]
1a00a6f8:	f043 0301 	orr.w	r3, r3, #1
1a00a6fc:	f8ca 3004 	str.w	r3, [sl, #4]
1a00a700:	4648      	mov	r0, r9
1a00a702:	462f      	mov	r7, r5
1a00a704:	f7fc f9e6 	bl	1a006ad4 <__malloc_unlock>
1a00a708:	4638      	mov	r0, r7
1a00a70a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
1a00a70e:	f01e 0f01 	tst.w	lr, #1
1a00a712:	d18b      	bne.n	1a00a62c <_realloc_r+0x88>
1a00a714:	f855 3c08 	ldr.w	r3, [r5, #-8]
1a00a718:	eba8 0b03 	sub.w	fp, r8, r3
1a00a71c:	f8db 1004 	ldr.w	r1, [fp, #4]
1a00a720:	f021 0103 	bic.w	r1, r1, #3
1a00a724:	e77f      	b.n	1a00a626 <_realloc_r+0x82>
1a00a726:	4611      	mov	r1, r2
1a00a728:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
1a00a72c:	f7fb be2a 	b.w	1a006384 <_malloc_r>
1a00a730:	eb08 0104 	add.w	r1, r8, r4
1a00a734:	4323      	orrs	r3, r4
1a00a736:	f042 0201 	orr.w	r2, r2, #1
1a00a73a:	f8c8 3004 	str.w	r3, [r8, #4]
1a00a73e:	604a      	str	r2, [r1, #4]
1a00a740:	f8da 3004 	ldr.w	r3, [sl, #4]
1a00a744:	f043 0301 	orr.w	r3, r3, #1
1a00a748:	3108      	adds	r1, #8
1a00a74a:	f8ca 3004 	str.w	r3, [sl, #4]
1a00a74e:	4648      	mov	r0, r9
1a00a750:	f7fb fccc 	bl	1a0060ec <_free_r>
1a00a754:	e7d4      	b.n	1a00a700 <_realloc_r+0x15c>
1a00a756:	f020 0003 	bic.w	r0, r0, #3
1a00a75a:	1831      	adds	r1, r6, r0
1a00a75c:	f104 0c10 	add.w	ip, r4, #16
1a00a760:	4561      	cmp	r1, ip
1a00a762:	da4f      	bge.n	1a00a804 <_realloc_r+0x260>
1a00a764:	f01e 0f01 	tst.w	lr, #1
1a00a768:	f47f af60 	bne.w	1a00a62c <_realloc_r+0x88>
1a00a76c:	f855 1c08 	ldr.w	r1, [r5, #-8]
1a00a770:	eba8 0b01 	sub.w	fp, r8, r1
1a00a774:	f8db 1004 	ldr.w	r1, [fp, #4]
1a00a778:	f021 0103 	bic.w	r1, r1, #3
1a00a77c:	4408      	add	r0, r1
1a00a77e:	eb00 0a06 	add.w	sl, r0, r6
1a00a782:	45d4      	cmp	ip, sl
1a00a784:	f73f af4f 	bgt.w	1a00a626 <_realloc_r+0x82>
1a00a788:	465f      	mov	r7, fp
1a00a78a:	f8db 100c 	ldr.w	r1, [fp, #12]
1a00a78e:	f857 0f08 	ldr.w	r0, [r7, #8]!
1a00a792:	1f32      	subs	r2, r6, #4
1a00a794:	2a24      	cmp	r2, #36	; 0x24
1a00a796:	60c1      	str	r1, [r0, #12]
1a00a798:	6088      	str	r0, [r1, #8]
1a00a79a:	f200 8099 	bhi.w	1a00a8d0 <_realloc_r+0x32c>
1a00a79e:	2a13      	cmp	r2, #19
1a00a7a0:	6829      	ldr	r1, [r5, #0]
1a00a7a2:	f240 8093 	bls.w	1a00a8cc <_realloc_r+0x328>
1a00a7a6:	f8cb 1008 	str.w	r1, [fp, #8]
1a00a7aa:	6869      	ldr	r1, [r5, #4]
1a00a7ac:	f8cb 100c 	str.w	r1, [fp, #12]
1a00a7b0:	2a1b      	cmp	r2, #27
1a00a7b2:	68a9      	ldr	r1, [r5, #8]
1a00a7b4:	f200 8092 	bhi.w	1a00a8dc <_realloc_r+0x338>
1a00a7b8:	f10b 0210 	add.w	r2, fp, #16
1a00a7bc:	3508      	adds	r5, #8
1a00a7be:	6011      	str	r1, [r2, #0]
1a00a7c0:	6869      	ldr	r1, [r5, #4]
1a00a7c2:	6051      	str	r1, [r2, #4]
1a00a7c4:	68a9      	ldr	r1, [r5, #8]
1a00a7c6:	6091      	str	r1, [r2, #8]
1a00a7c8:	eb0b 0104 	add.w	r1, fp, r4
1a00a7cc:	ebaa 0204 	sub.w	r2, sl, r4
1a00a7d0:	f042 0201 	orr.w	r2, r2, #1
1a00a7d4:	6099      	str	r1, [r3, #8]
1a00a7d6:	604a      	str	r2, [r1, #4]
1a00a7d8:	f8db 3004 	ldr.w	r3, [fp, #4]
1a00a7dc:	f003 0301 	and.w	r3, r3, #1
1a00a7e0:	431c      	orrs	r4, r3
1a00a7e2:	4648      	mov	r0, r9
1a00a7e4:	f8cb 4004 	str.w	r4, [fp, #4]
1a00a7e8:	f7fc f974 	bl	1a006ad4 <__malloc_unlock>
1a00a7ec:	e750      	b.n	1a00a690 <_realloc_r+0xec>
1a00a7ee:	6001      	str	r1, [r0, #0]
1a00a7f0:	686b      	ldr	r3, [r5, #4]
1a00a7f2:	6043      	str	r3, [r0, #4]
1a00a7f4:	2a1b      	cmp	r2, #27
1a00a7f6:	d83c      	bhi.n	1a00a872 <_realloc_r+0x2ce>
1a00a7f8:	f105 0208 	add.w	r2, r5, #8
1a00a7fc:	f100 0308 	add.w	r3, r0, #8
1a00a800:	68a9      	ldr	r1, [r5, #8]
1a00a802:	e72d      	b.n	1a00a660 <_realloc_r+0xbc>
1a00a804:	eb08 0004 	add.w	r0, r8, r4
1a00a808:	1b0a      	subs	r2, r1, r4
1a00a80a:	f042 0201 	orr.w	r2, r2, #1
1a00a80e:	6098      	str	r0, [r3, #8]
1a00a810:	6042      	str	r2, [r0, #4]
1a00a812:	f855 3c04 	ldr.w	r3, [r5, #-4]
1a00a816:	f003 0301 	and.w	r3, r3, #1
1a00a81a:	431c      	orrs	r4, r3
1a00a81c:	4648      	mov	r0, r9
1a00a81e:	f845 4c04 	str.w	r4, [r5, #-4]
1a00a822:	f7fc f957 	bl	1a006ad4 <__malloc_unlock>
1a00a826:	462f      	mov	r7, r5
1a00a828:	e732      	b.n	1a00a690 <_realloc_r+0xec>
1a00a82a:	e9da 1202 	ldrd	r1, r2, [sl, #8]
1a00a82e:	461e      	mov	r6, r3
1a00a830:	60ca      	str	r2, [r1, #12]
1a00a832:	eb08 0a03 	add.w	sl, r8, r3
1a00a836:	6091      	str	r1, [r2, #8]
1a00a838:	e752      	b.n	1a00a6e0 <_realloc_r+0x13c>
1a00a83a:	f850 3c04 	ldr.w	r3, [r0, #-4]
1a00a83e:	f023 0303 	bic.w	r3, r3, #3
1a00a842:	441e      	add	r6, r3
1a00a844:	eb08 0a06 	add.w	sl, r8, r6
1a00a848:	e74a      	b.n	1a00a6e0 <_realloc_r+0x13c>
1a00a84a:	4629      	mov	r1, r5
1a00a84c:	f7ff fb38 	bl	1a009ec0 <memmove>
1a00a850:	e70b      	b.n	1a00a66a <_realloc_r+0xc6>
1a00a852:	e9da 1202 	ldrd	r1, r2, [sl, #8]
1a00a856:	465f      	mov	r7, fp
1a00a858:	60ca      	str	r2, [r1, #12]
1a00a85a:	6091      	str	r1, [r2, #8]
1a00a85c:	e71c      	b.n	1a00a698 <_realloc_r+0xf4>
1a00a85e:	463a      	mov	r2, r7
1a00a860:	e736      	b.n	1a00a6d0 <_realloc_r+0x12c>
1a00a862:	4629      	mov	r1, r5
1a00a864:	4638      	mov	r0, r7
1a00a866:	461e      	mov	r6, r3
1a00a868:	46d8      	mov	r8, fp
1a00a86a:	f7ff fb29 	bl	1a009ec0 <memmove>
1a00a86e:	463d      	mov	r5, r7
1a00a870:	e736      	b.n	1a00a6e0 <_realloc_r+0x13c>
1a00a872:	68ab      	ldr	r3, [r5, #8]
1a00a874:	6083      	str	r3, [r0, #8]
1a00a876:	68eb      	ldr	r3, [r5, #12]
1a00a878:	60c3      	str	r3, [r0, #12]
1a00a87a:	2a24      	cmp	r2, #36	; 0x24
1a00a87c:	d011      	beq.n	1a00a8a2 <_realloc_r+0x2fe>
1a00a87e:	f105 0210 	add.w	r2, r5, #16
1a00a882:	f100 0310 	add.w	r3, r0, #16
1a00a886:	6929      	ldr	r1, [r5, #16]
1a00a888:	e6ea      	b.n	1a00a660 <_realloc_r+0xbc>
1a00a88a:	f8cb 1010 	str.w	r1, [fp, #16]
1a00a88e:	68e9      	ldr	r1, [r5, #12]
1a00a890:	f8cb 1014 	str.w	r1, [fp, #20]
1a00a894:	2a24      	cmp	r2, #36	; 0x24
1a00a896:	d00e      	beq.n	1a00a8b6 <_realloc_r+0x312>
1a00a898:	6929      	ldr	r1, [r5, #16]
1a00a89a:	f10b 0218 	add.w	r2, fp, #24
1a00a89e:	3510      	adds	r5, #16
1a00a8a0:	e716      	b.n	1a00a6d0 <_realloc_r+0x12c>
1a00a8a2:	692b      	ldr	r3, [r5, #16]
1a00a8a4:	6103      	str	r3, [r0, #16]
1a00a8a6:	696b      	ldr	r3, [r5, #20]
1a00a8a8:	6143      	str	r3, [r0, #20]
1a00a8aa:	69a9      	ldr	r1, [r5, #24]
1a00a8ac:	f105 0218 	add.w	r2, r5, #24
1a00a8b0:	f100 0318 	add.w	r3, r0, #24
1a00a8b4:	e6d4      	b.n	1a00a660 <_realloc_r+0xbc>
1a00a8b6:	692a      	ldr	r2, [r5, #16]
1a00a8b8:	f8cb 2018 	str.w	r2, [fp, #24]
1a00a8bc:	696a      	ldr	r2, [r5, #20]
1a00a8be:	f8cb 201c 	str.w	r2, [fp, #28]
1a00a8c2:	69a9      	ldr	r1, [r5, #24]
1a00a8c4:	f10b 0220 	add.w	r2, fp, #32
1a00a8c8:	3518      	adds	r5, #24
1a00a8ca:	e701      	b.n	1a00a6d0 <_realloc_r+0x12c>
1a00a8cc:	463a      	mov	r2, r7
1a00a8ce:	e776      	b.n	1a00a7be <_realloc_r+0x21a>
1a00a8d0:	4629      	mov	r1, r5
1a00a8d2:	4638      	mov	r0, r7
1a00a8d4:	f7ff faf4 	bl	1a009ec0 <memmove>
1a00a8d8:	4b0c      	ldr	r3, [pc, #48]	; (1a00a90c <_realloc_r+0x368>)
1a00a8da:	e775      	b.n	1a00a7c8 <_realloc_r+0x224>
1a00a8dc:	f8cb 1010 	str.w	r1, [fp, #16]
1a00a8e0:	68e9      	ldr	r1, [r5, #12]
1a00a8e2:	f8cb 1014 	str.w	r1, [fp, #20]
1a00a8e6:	2a24      	cmp	r2, #36	; 0x24
1a00a8e8:	d004      	beq.n	1a00a8f4 <_realloc_r+0x350>
1a00a8ea:	6929      	ldr	r1, [r5, #16]
1a00a8ec:	f10b 0218 	add.w	r2, fp, #24
1a00a8f0:	3510      	adds	r5, #16
1a00a8f2:	e764      	b.n	1a00a7be <_realloc_r+0x21a>
1a00a8f4:	692a      	ldr	r2, [r5, #16]
1a00a8f6:	f8cb 2018 	str.w	r2, [fp, #24]
1a00a8fa:	696a      	ldr	r2, [r5, #20]
1a00a8fc:	f8cb 201c 	str.w	r2, [fp, #28]
1a00a900:	69a9      	ldr	r1, [r5, #24]
1a00a902:	f10b 0220 	add.w	r2, fp, #32
1a00a906:	3518      	adds	r5, #24
1a00a908:	e759      	b.n	1a00a7be <_realloc_r+0x21a>
1a00a90a:	bf00      	nop
1a00a90c:	10000480 	.word	0x10000480

1a00a910 <frexp>:
1a00a910:	ec53 2b10 	vmov	r2, r3, d0
1a00a914:	b570      	push	{r4, r5, r6, lr}
1a00a916:	4e16      	ldr	r6, [pc, #88]	; (1a00a970 <frexp+0x60>)
1a00a918:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
1a00a91c:	2500      	movs	r5, #0
1a00a91e:	42b1      	cmp	r1, r6
1a00a920:	4604      	mov	r4, r0
1a00a922:	6005      	str	r5, [r0, #0]
1a00a924:	dc21      	bgt.n	1a00a96a <frexp+0x5a>
1a00a926:	ee10 6a10 	vmov	r6, s0
1a00a92a:	430e      	orrs	r6, r1
1a00a92c:	d01d      	beq.n	1a00a96a <frexp+0x5a>
1a00a92e:	4e11      	ldr	r6, [pc, #68]	; (1a00a974 <frexp+0x64>)
1a00a930:	401e      	ands	r6, r3
1a00a932:	4618      	mov	r0, r3
1a00a934:	b966      	cbnz	r6, 1a00a950 <frexp+0x40>
1a00a936:	4619      	mov	r1, r3
1a00a938:	2200      	movs	r2, #0
1a00a93a:	ee10 0a10 	vmov	r0, s0
1a00a93e:	4b0e      	ldr	r3, [pc, #56]	; (1a00a978 <frexp+0x68>)
1a00a940:	f7fa fde0 	bl	1a005504 <__aeabi_dmul>
1a00a944:	f06f 0535 	mvn.w	r5, #53	; 0x35
1a00a948:	4602      	mov	r2, r0
1a00a94a:	4608      	mov	r0, r1
1a00a94c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
1a00a950:	f020 40ff 	bic.w	r0, r0, #2139095040	; 0x7f800000
1a00a954:	1509      	asrs	r1, r1, #20
1a00a956:	f420 00e0 	bic.w	r0, r0, #7340032	; 0x700000
1a00a95a:	f2a1 31fe 	subw	r1, r1, #1022	; 0x3fe
1a00a95e:	f040 537f 	orr.w	r3, r0, #1069547520	; 0x3fc00000
1a00a962:	4429      	add	r1, r5
1a00a964:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
1a00a968:	6021      	str	r1, [r4, #0]
1a00a96a:	ec43 2b10 	vmov	d0, r2, r3
1a00a96e:	bd70      	pop	{r4, r5, r6, pc}
1a00a970:	7fefffff 	.word	0x7fefffff
1a00a974:	7ff00000 	.word	0x7ff00000
1a00a978:	43500000 	.word	0x43500000

1a00a97c <strncpy>:
1a00a97c:	b470      	push	{r4, r5, r6}
1a00a97e:	ea40 0401 	orr.w	r4, r0, r1
1a00a982:	07a3      	lsls	r3, r4, #30
1a00a984:	d127      	bne.n	1a00a9d6 <strncpy+0x5a>
1a00a986:	2a03      	cmp	r2, #3
1a00a988:	d925      	bls.n	1a00a9d6 <strncpy+0x5a>
1a00a98a:	460b      	mov	r3, r1
1a00a98c:	4606      	mov	r6, r0
1a00a98e:	4619      	mov	r1, r3
1a00a990:	f853 5b04 	ldr.w	r5, [r3], #4
1a00a994:	f1a5 3401 	sub.w	r4, r5, #16843009	; 0x1010101
1a00a998:	ea24 0405 	bic.w	r4, r4, r5
1a00a99c:	f014 3f80 	tst.w	r4, #2155905152	; 0x80808080
1a00a9a0:	d106      	bne.n	1a00a9b0 <strncpy+0x34>
1a00a9a2:	3a04      	subs	r2, #4
1a00a9a4:	2a03      	cmp	r2, #3
1a00a9a6:	f846 5b04 	str.w	r5, [r6], #4
1a00a9aa:	4619      	mov	r1, r3
1a00a9ac:	d8ef      	bhi.n	1a00a98e <strncpy+0x12>
1a00a9ae:	b182      	cbz	r2, 1a00a9d2 <strncpy+0x56>
1a00a9b0:	4633      	mov	r3, r6
1a00a9b2:	780c      	ldrb	r4, [r1, #0]
1a00a9b4:	f803 4b01 	strb.w	r4, [r3], #1
1a00a9b8:	1e55      	subs	r5, r2, #1
1a00a9ba:	b174      	cbz	r4, 1a00a9da <strncpy+0x5e>
1a00a9bc:	4432      	add	r2, r6
1a00a9be:	442e      	add	r6, r5
1a00a9c0:	e005      	b.n	1a00a9ce <strncpy+0x52>
1a00a9c2:	f811 4f01 	ldrb.w	r4, [r1, #1]!
1a00a9c6:	1af5      	subs	r5, r6, r3
1a00a9c8:	f803 4b01 	strb.w	r4, [r3], #1
1a00a9cc:	b12c      	cbz	r4, 1a00a9da <strncpy+0x5e>
1a00a9ce:	429a      	cmp	r2, r3
1a00a9d0:	d1f7      	bne.n	1a00a9c2 <strncpy+0x46>
1a00a9d2:	bc70      	pop	{r4, r5, r6}
1a00a9d4:	4770      	bx	lr
1a00a9d6:	4606      	mov	r6, r0
1a00a9d8:	e7e9      	b.n	1a00a9ae <strncpy+0x32>
1a00a9da:	2d00      	cmp	r5, #0
1a00a9dc:	d0f9      	beq.n	1a00a9d2 <strncpy+0x56>
1a00a9de:	441d      	add	r5, r3
1a00a9e0:	2200      	movs	r2, #0
1a00a9e2:	f803 2b01 	strb.w	r2, [r3], #1
1a00a9e6:	42ab      	cmp	r3, r5
1a00a9e8:	d1fb      	bne.n	1a00a9e2 <strncpy+0x66>
1a00a9ea:	bc70      	pop	{r4, r5, r6}
1a00a9ec:	4770      	bx	lr
1a00a9ee:	bf00      	nop

1a00a9f0 <__sprint_r.part.0>:
1a00a9f0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
1a00a9f4:	6e4b      	ldr	r3, [r1, #100]	; 0x64
1a00a9f6:	049c      	lsls	r4, r3, #18
1a00a9f8:	4693      	mov	fp, r2
1a00a9fa:	d52d      	bpl.n	1a00aa58 <__sprint_r.part.0+0x68>
1a00a9fc:	6893      	ldr	r3, [r2, #8]
1a00a9fe:	6812      	ldr	r2, [r2, #0]
1a00aa00:	b343      	cbz	r3, 1a00aa54 <__sprint_r.part.0+0x64>
1a00aa02:	460e      	mov	r6, r1
1a00aa04:	4607      	mov	r7, r0
1a00aa06:	f102 0908 	add.w	r9, r2, #8
1a00aa0a:	e959 5a02 	ldrd	r5, sl, [r9, #-8]
1a00aa0e:	ea5f 089a 	movs.w	r8, sl, lsr #2
1a00aa12:	d015      	beq.n	1a00aa40 <__sprint_r.part.0+0x50>
1a00aa14:	3d04      	subs	r5, #4
1a00aa16:	2400      	movs	r4, #0
1a00aa18:	e001      	b.n	1a00aa1e <__sprint_r.part.0+0x2e>
1a00aa1a:	45a0      	cmp	r8, r4
1a00aa1c:	d00e      	beq.n	1a00aa3c <__sprint_r.part.0+0x4c>
1a00aa1e:	4632      	mov	r2, r6
1a00aa20:	f855 1f04 	ldr.w	r1, [r5, #4]!
1a00aa24:	4638      	mov	r0, r7
1a00aa26:	f000 f8a9 	bl	1a00ab7c <_fputwc_r>
1a00aa2a:	1c43      	adds	r3, r0, #1
1a00aa2c:	f104 0401 	add.w	r4, r4, #1
1a00aa30:	d1f3      	bne.n	1a00aa1a <__sprint_r.part.0+0x2a>
1a00aa32:	2300      	movs	r3, #0
1a00aa34:	e9cb 3301 	strd	r3, r3, [fp, #4]
1a00aa38:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
1a00aa3c:	f8db 3008 	ldr.w	r3, [fp, #8]
1a00aa40:	f02a 0a03 	bic.w	sl, sl, #3
1a00aa44:	eba3 030a 	sub.w	r3, r3, sl
1a00aa48:	f8cb 3008 	str.w	r3, [fp, #8]
1a00aa4c:	f109 0908 	add.w	r9, r9, #8
1a00aa50:	2b00      	cmp	r3, #0
1a00aa52:	d1da      	bne.n	1a00aa0a <__sprint_r.part.0+0x1a>
1a00aa54:	2000      	movs	r0, #0
1a00aa56:	e7ec      	b.n	1a00aa32 <__sprint_r.part.0+0x42>
1a00aa58:	f7fe ffdc 	bl	1a009a14 <__sfvwrite_r>
1a00aa5c:	2300      	movs	r3, #0
1a00aa5e:	e9cb 3301 	strd	r3, r3, [fp, #4]
1a00aa62:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
1a00aa66:	bf00      	nop

1a00aa68 <__sprint_r>:
1a00aa68:	6893      	ldr	r3, [r2, #8]
1a00aa6a:	b10b      	cbz	r3, 1a00aa70 <__sprint_r+0x8>
1a00aa6c:	f7ff bfc0 	b.w	1a00a9f0 <__sprint_r.part.0>
1a00aa70:	b410      	push	{r4}
1a00aa72:	4618      	mov	r0, r3
1a00aa74:	6053      	str	r3, [r2, #4]
1a00aa76:	f85d 4b04 	ldr.w	r4, [sp], #4
1a00aa7a:	4770      	bx	lr

1a00aa7c <_calloc_r>:
1a00aa7c:	b510      	push	{r4, lr}
1a00aa7e:	fb02 f101 	mul.w	r1, r2, r1
1a00aa82:	f7fb fc7f 	bl	1a006384 <_malloc_r>
1a00aa86:	4604      	mov	r4, r0
1a00aa88:	b168      	cbz	r0, 1a00aaa6 <_calloc_r+0x2a>
1a00aa8a:	f850 2c04 	ldr.w	r2, [r0, #-4]
1a00aa8e:	f022 0203 	bic.w	r2, r2, #3
1a00aa92:	3a04      	subs	r2, #4
1a00aa94:	2a24      	cmp	r2, #36	; 0x24
1a00aa96:	d818      	bhi.n	1a00aaca <_calloc_r+0x4e>
1a00aa98:	2a13      	cmp	r2, #19
1a00aa9a:	d806      	bhi.n	1a00aaaa <_calloc_r+0x2e>
1a00aa9c:	4602      	mov	r2, r0
1a00aa9e:	2300      	movs	r3, #0
1a00aaa0:	e9c2 3300 	strd	r3, r3, [r2]
1a00aaa4:	6093      	str	r3, [r2, #8]
1a00aaa6:	4620      	mov	r0, r4
1a00aaa8:	bd10      	pop	{r4, pc}
1a00aaaa:	2300      	movs	r3, #0
1a00aaac:	2a1b      	cmp	r2, #27
1a00aaae:	e9c0 3300 	strd	r3, r3, [r0]
1a00aab2:	d90f      	bls.n	1a00aad4 <_calloc_r+0x58>
1a00aab4:	2a24      	cmp	r2, #36	; 0x24
1a00aab6:	e9c0 3302 	strd	r3, r3, [r0, #8]
1a00aaba:	bf12      	itee	ne
1a00aabc:	f100 0210 	addne.w	r2, r0, #16
1a00aac0:	e9c0 3304 	strdeq	r3, r3, [r0, #16]
1a00aac4:	f100 0218 	addeq.w	r2, r0, #24
1a00aac8:	e7e9      	b.n	1a00aa9e <_calloc_r+0x22>
1a00aaca:	2100      	movs	r1, #0
1a00aacc:	f7fb ffac 	bl	1a006a28 <memset>
1a00aad0:	4620      	mov	r0, r4
1a00aad2:	bd10      	pop	{r4, pc}
1a00aad4:	f100 0208 	add.w	r2, r0, #8
1a00aad8:	e7e1      	b.n	1a00aa9e <_calloc_r+0x22>
1a00aada:	bf00      	nop

1a00aadc <__fputwc>:
1a00aadc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
1a00aae0:	b082      	sub	sp, #8
1a00aae2:	4680      	mov	r8, r0
1a00aae4:	4689      	mov	r9, r1
1a00aae6:	4614      	mov	r4, r2
1a00aae8:	f000 f87a 	bl	1a00abe0 <__locale_mb_cur_max>
1a00aaec:	2801      	cmp	r0, #1
1a00aaee:	d103      	bne.n	1a00aaf8 <__fputwc+0x1c>
1a00aaf0:	f109 33ff 	add.w	r3, r9, #4294967295	; 0xffffffff
1a00aaf4:	2bfe      	cmp	r3, #254	; 0xfe
1a00aaf6:	d933      	bls.n	1a00ab60 <__fputwc+0x84>
1a00aaf8:	464a      	mov	r2, r9
1a00aafa:	f104 035c 	add.w	r3, r4, #92	; 0x5c
1a00aafe:	a901      	add	r1, sp, #4
1a00ab00:	4640      	mov	r0, r8
1a00ab02:	f000 f8e1 	bl	1a00acc8 <_wcrtomb_r>
1a00ab06:	1c42      	adds	r2, r0, #1
1a00ab08:	4606      	mov	r6, r0
1a00ab0a:	d02f      	beq.n	1a00ab6c <__fputwc+0x90>
1a00ab0c:	b320      	cbz	r0, 1a00ab58 <__fputwc+0x7c>
1a00ab0e:	f89d c004 	ldrb.w	ip, [sp, #4]
1a00ab12:	2500      	movs	r5, #0
1a00ab14:	f10d 0a04 	add.w	sl, sp, #4
1a00ab18:	e009      	b.n	1a00ab2e <__fputwc+0x52>
1a00ab1a:	6823      	ldr	r3, [r4, #0]
1a00ab1c:	1c5a      	adds	r2, r3, #1
1a00ab1e:	6022      	str	r2, [r4, #0]
1a00ab20:	f883 c000 	strb.w	ip, [r3]
1a00ab24:	3501      	adds	r5, #1
1a00ab26:	42b5      	cmp	r5, r6
1a00ab28:	d216      	bcs.n	1a00ab58 <__fputwc+0x7c>
1a00ab2a:	f815 c00a 	ldrb.w	ip, [r5, sl]
1a00ab2e:	68a3      	ldr	r3, [r4, #8]
1a00ab30:	3b01      	subs	r3, #1
1a00ab32:	2b00      	cmp	r3, #0
1a00ab34:	60a3      	str	r3, [r4, #8]
1a00ab36:	daf0      	bge.n	1a00ab1a <__fputwc+0x3e>
1a00ab38:	69a7      	ldr	r7, [r4, #24]
1a00ab3a:	42bb      	cmp	r3, r7
1a00ab3c:	4661      	mov	r1, ip
1a00ab3e:	4622      	mov	r2, r4
1a00ab40:	4640      	mov	r0, r8
1a00ab42:	db02      	blt.n	1a00ab4a <__fputwc+0x6e>
1a00ab44:	f1bc 0f0a 	cmp.w	ip, #10
1a00ab48:	d1e7      	bne.n	1a00ab1a <__fputwc+0x3e>
1a00ab4a:	f000 f865 	bl	1a00ac18 <__swbuf_r>
1a00ab4e:	1c43      	adds	r3, r0, #1
1a00ab50:	d1e8      	bne.n	1a00ab24 <__fputwc+0x48>
1a00ab52:	b002      	add	sp, #8
1a00ab54:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
1a00ab58:	4648      	mov	r0, r9
1a00ab5a:	b002      	add	sp, #8
1a00ab5c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
1a00ab60:	fa5f fc89 	uxtb.w	ip, r9
1a00ab64:	4606      	mov	r6, r0
1a00ab66:	f88d c004 	strb.w	ip, [sp, #4]
1a00ab6a:	e7d2      	b.n	1a00ab12 <__fputwc+0x36>
1a00ab6c:	89a3      	ldrh	r3, [r4, #12]
1a00ab6e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
1a00ab72:	81a3      	strh	r3, [r4, #12]
1a00ab74:	b002      	add	sp, #8
1a00ab76:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
1a00ab7a:	bf00      	nop

1a00ab7c <_fputwc_r>:
1a00ab7c:	b530      	push	{r4, r5, lr}
1a00ab7e:	4605      	mov	r5, r0
1a00ab80:	6e50      	ldr	r0, [r2, #100]	; 0x64
1a00ab82:	f9b2 300c 	ldrsh.w	r3, [r2, #12]
1a00ab86:	07c0      	lsls	r0, r0, #31
1a00ab88:	4614      	mov	r4, r2
1a00ab8a:	b083      	sub	sp, #12
1a00ab8c:	b29a      	uxth	r2, r3
1a00ab8e:	d401      	bmi.n	1a00ab94 <_fputwc_r+0x18>
1a00ab90:	0590      	lsls	r0, r2, #22
1a00ab92:	d51c      	bpl.n	1a00abce <_fputwc_r+0x52>
1a00ab94:	0490      	lsls	r0, r2, #18
1a00ab96:	d406      	bmi.n	1a00aba6 <_fputwc_r+0x2a>
1a00ab98:	6e62      	ldr	r2, [r4, #100]	; 0x64
1a00ab9a:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
1a00ab9e:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
1a00aba2:	81a3      	strh	r3, [r4, #12]
1a00aba4:	6662      	str	r2, [r4, #100]	; 0x64
1a00aba6:	4628      	mov	r0, r5
1a00aba8:	4622      	mov	r2, r4
1a00abaa:	f7ff ff97 	bl	1a00aadc <__fputwc>
1a00abae:	6e63      	ldr	r3, [r4, #100]	; 0x64
1a00abb0:	07da      	lsls	r2, r3, #31
1a00abb2:	4605      	mov	r5, r0
1a00abb4:	d402      	bmi.n	1a00abbc <_fputwc_r+0x40>
1a00abb6:	89a3      	ldrh	r3, [r4, #12]
1a00abb8:	059b      	lsls	r3, r3, #22
1a00abba:	d502      	bpl.n	1a00abc2 <_fputwc_r+0x46>
1a00abbc:	4628      	mov	r0, r5
1a00abbe:	b003      	add	sp, #12
1a00abc0:	bd30      	pop	{r4, r5, pc}
1a00abc2:	6da0      	ldr	r0, [r4, #88]	; 0x58
1a00abc4:	f7fb fbdc 	bl	1a006380 <__retarget_lock_release_recursive>
1a00abc8:	4628      	mov	r0, r5
1a00abca:	b003      	add	sp, #12
1a00abcc:	bd30      	pop	{r4, r5, pc}
1a00abce:	6da0      	ldr	r0, [r4, #88]	; 0x58
1a00abd0:	9101      	str	r1, [sp, #4]
1a00abd2:	f7fb fbd3 	bl	1a00637c <__retarget_lock_acquire_recursive>
1a00abd6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
1a00abda:	9901      	ldr	r1, [sp, #4]
1a00abdc:	b29a      	uxth	r2, r3
1a00abde:	e7d9      	b.n	1a00ab94 <_fputwc_r+0x18>

1a00abe0 <__locale_mb_cur_max>:
1a00abe0:	4b01      	ldr	r3, [pc, #4]	; (1a00abe8 <__locale_mb_cur_max+0x8>)
1a00abe2:	f893 0128 	ldrb.w	r0, [r3, #296]	; 0x128
1a00abe6:	4770      	bx	lr
1a00abe8:	10000890 	.word	0x10000890

1a00abec <__ascii_mbtowc>:
1a00abec:	b082      	sub	sp, #8
1a00abee:	b149      	cbz	r1, 1a00ac04 <__ascii_mbtowc+0x18>
1a00abf0:	b15a      	cbz	r2, 1a00ac0a <__ascii_mbtowc+0x1e>
1a00abf2:	b16b      	cbz	r3, 1a00ac10 <__ascii_mbtowc+0x24>
1a00abf4:	7813      	ldrb	r3, [r2, #0]
1a00abf6:	600b      	str	r3, [r1, #0]
1a00abf8:	7812      	ldrb	r2, [r2, #0]
1a00abfa:	1c10      	adds	r0, r2, #0
1a00abfc:	bf18      	it	ne
1a00abfe:	2001      	movne	r0, #1
1a00ac00:	b002      	add	sp, #8
1a00ac02:	4770      	bx	lr
1a00ac04:	a901      	add	r1, sp, #4
1a00ac06:	2a00      	cmp	r2, #0
1a00ac08:	d1f3      	bne.n	1a00abf2 <__ascii_mbtowc+0x6>
1a00ac0a:	4610      	mov	r0, r2
1a00ac0c:	b002      	add	sp, #8
1a00ac0e:	4770      	bx	lr
1a00ac10:	f06f 0001 	mvn.w	r0, #1
1a00ac14:	e7f4      	b.n	1a00ac00 <__ascii_mbtowc+0x14>
1a00ac16:	bf00      	nop

1a00ac18 <__swbuf_r>:
1a00ac18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1a00ac1a:	460d      	mov	r5, r1
1a00ac1c:	4614      	mov	r4, r2
1a00ac1e:	4606      	mov	r6, r0
1a00ac20:	b110      	cbz	r0, 1a00ac28 <__swbuf_r+0x10>
1a00ac22:	6b83      	ldr	r3, [r0, #56]	; 0x38
1a00ac24:	2b00      	cmp	r3, #0
1a00ac26:	d043      	beq.n	1a00acb0 <__swbuf_r+0x98>
1a00ac28:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
1a00ac2c:	69a3      	ldr	r3, [r4, #24]
1a00ac2e:	60a3      	str	r3, [r4, #8]
1a00ac30:	b291      	uxth	r1, r2
1a00ac32:	0708      	lsls	r0, r1, #28
1a00ac34:	d51b      	bpl.n	1a00ac6e <__swbuf_r+0x56>
1a00ac36:	6923      	ldr	r3, [r4, #16]
1a00ac38:	b1cb      	cbz	r3, 1a00ac6e <__swbuf_r+0x56>
1a00ac3a:	b2ed      	uxtb	r5, r5
1a00ac3c:	0489      	lsls	r1, r1, #18
1a00ac3e:	462f      	mov	r7, r5
1a00ac40:	d522      	bpl.n	1a00ac88 <__swbuf_r+0x70>
1a00ac42:	6822      	ldr	r2, [r4, #0]
1a00ac44:	6961      	ldr	r1, [r4, #20]
1a00ac46:	1ad3      	subs	r3, r2, r3
1a00ac48:	4299      	cmp	r1, r3
1a00ac4a:	dd29      	ble.n	1a00aca0 <__swbuf_r+0x88>
1a00ac4c:	3301      	adds	r3, #1
1a00ac4e:	68a1      	ldr	r1, [r4, #8]
1a00ac50:	1c50      	adds	r0, r2, #1
1a00ac52:	3901      	subs	r1, #1
1a00ac54:	60a1      	str	r1, [r4, #8]
1a00ac56:	6020      	str	r0, [r4, #0]
1a00ac58:	7015      	strb	r5, [r2, #0]
1a00ac5a:	6962      	ldr	r2, [r4, #20]
1a00ac5c:	429a      	cmp	r2, r3
1a00ac5e:	d02a      	beq.n	1a00acb6 <__swbuf_r+0x9e>
1a00ac60:	89a3      	ldrh	r3, [r4, #12]
1a00ac62:	07db      	lsls	r3, r3, #31
1a00ac64:	d501      	bpl.n	1a00ac6a <__swbuf_r+0x52>
1a00ac66:	2d0a      	cmp	r5, #10
1a00ac68:	d025      	beq.n	1a00acb6 <__swbuf_r+0x9e>
1a00ac6a:	4638      	mov	r0, r7
1a00ac6c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1a00ac6e:	4621      	mov	r1, r4
1a00ac70:	4630      	mov	r0, r6
1a00ac72:	f7fd fe41 	bl	1a0088f8 <__swsetup_r>
1a00ac76:	bb20      	cbnz	r0, 1a00acc2 <__swbuf_r+0xaa>
1a00ac78:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
1a00ac7c:	6923      	ldr	r3, [r4, #16]
1a00ac7e:	b291      	uxth	r1, r2
1a00ac80:	b2ed      	uxtb	r5, r5
1a00ac82:	0489      	lsls	r1, r1, #18
1a00ac84:	462f      	mov	r7, r5
1a00ac86:	d4dc      	bmi.n	1a00ac42 <__swbuf_r+0x2a>
1a00ac88:	6e61      	ldr	r1, [r4, #100]	; 0x64
1a00ac8a:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
1a00ac8e:	f421 5100 	bic.w	r1, r1, #8192	; 0x2000
1a00ac92:	81a2      	strh	r2, [r4, #12]
1a00ac94:	6822      	ldr	r2, [r4, #0]
1a00ac96:	6661      	str	r1, [r4, #100]	; 0x64
1a00ac98:	6961      	ldr	r1, [r4, #20]
1a00ac9a:	1ad3      	subs	r3, r2, r3
1a00ac9c:	4299      	cmp	r1, r3
1a00ac9e:	dcd5      	bgt.n	1a00ac4c <__swbuf_r+0x34>
1a00aca0:	4621      	mov	r1, r4
1a00aca2:	4630      	mov	r0, r6
1a00aca4:	f7fb f940 	bl	1a005f28 <_fflush_r>
1a00aca8:	b958      	cbnz	r0, 1a00acc2 <__swbuf_r+0xaa>
1a00acaa:	6822      	ldr	r2, [r4, #0]
1a00acac:	2301      	movs	r3, #1
1a00acae:	e7ce      	b.n	1a00ac4e <__swbuf_r+0x36>
1a00acb0:	f7fb f996 	bl	1a005fe0 <__sinit>
1a00acb4:	e7b8      	b.n	1a00ac28 <__swbuf_r+0x10>
1a00acb6:	4621      	mov	r1, r4
1a00acb8:	4630      	mov	r0, r6
1a00acba:	f7fb f935 	bl	1a005f28 <_fflush_r>
1a00acbe:	2800      	cmp	r0, #0
1a00acc0:	d0d3      	beq.n	1a00ac6a <__swbuf_r+0x52>
1a00acc2:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
1a00acc6:	e7d0      	b.n	1a00ac6a <__swbuf_r+0x52>

1a00acc8 <_wcrtomb_r>:
1a00acc8:	b5f0      	push	{r4, r5, r6, r7, lr}
1a00acca:	4c0b      	ldr	r4, [pc, #44]	; (1a00acf8 <_wcrtomb_r+0x30>)
1a00accc:	b085      	sub	sp, #20
1a00acce:	4606      	mov	r6, r0
1a00acd0:	f8d4 40e0 	ldr.w	r4, [r4, #224]	; 0xe0
1a00acd4:	461f      	mov	r7, r3
1a00acd6:	b121      	cbz	r1, 1a00ace2 <_wcrtomb_r+0x1a>
1a00acd8:	47a0      	blx	r4
1a00acda:	1c43      	adds	r3, r0, #1
1a00acdc:	d006      	beq.n	1a00acec <_wcrtomb_r+0x24>
1a00acde:	b005      	add	sp, #20
1a00ace0:	bdf0      	pop	{r4, r5, r6, r7, pc}
1a00ace2:	460a      	mov	r2, r1
1a00ace4:	a901      	add	r1, sp, #4
1a00ace6:	47a0      	blx	r4
1a00ace8:	1c43      	adds	r3, r0, #1
1a00acea:	d1f8      	bne.n	1a00acde <_wcrtomb_r+0x16>
1a00acec:	2200      	movs	r2, #0
1a00acee:	238a      	movs	r3, #138	; 0x8a
1a00acf0:	603a      	str	r2, [r7, #0]
1a00acf2:	6033      	str	r3, [r6, #0]
1a00acf4:	b005      	add	sp, #20
1a00acf6:	bdf0      	pop	{r4, r5, r6, r7, pc}
1a00acf8:	10000890 	.word	0x10000890

1a00acfc <__ascii_wctomb>:
1a00acfc:	b149      	cbz	r1, 1a00ad12 <__ascii_wctomb+0x16>
1a00acfe:	2aff      	cmp	r2, #255	; 0xff
1a00ad00:	d802      	bhi.n	1a00ad08 <__ascii_wctomb+0xc>
1a00ad02:	700a      	strb	r2, [r1, #0]
1a00ad04:	2001      	movs	r0, #1
1a00ad06:	4770      	bx	lr
1a00ad08:	238a      	movs	r3, #138	; 0x8a
1a00ad0a:	6003      	str	r3, [r0, #0]
1a00ad0c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
1a00ad10:	4770      	bx	lr
1a00ad12:	4608      	mov	r0, r1
1a00ad14:	4770      	bx	lr
1a00ad16:	bf00      	nop

1a00ad18 <__aeabi_dcmpun>:
1a00ad18:	ea4f 0c41 	mov.w	ip, r1, lsl #1
1a00ad1c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
1a00ad20:	d102      	bne.n	1a00ad28 <__aeabi_dcmpun+0x10>
1a00ad22:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
1a00ad26:	d10a      	bne.n	1a00ad3e <__aeabi_dcmpun+0x26>
1a00ad28:	ea4f 0c43 	mov.w	ip, r3, lsl #1
1a00ad2c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
1a00ad30:	d102      	bne.n	1a00ad38 <__aeabi_dcmpun+0x20>
1a00ad32:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
1a00ad36:	d102      	bne.n	1a00ad3e <__aeabi_dcmpun+0x26>
1a00ad38:	f04f 0000 	mov.w	r0, #0
1a00ad3c:	4770      	bx	lr
1a00ad3e:	f04f 0001 	mov.w	r0, #1
1a00ad42:	4770      	bx	lr

1a00ad44 <__aeabi_d2iz>:
1a00ad44:	ea4f 0241 	mov.w	r2, r1, lsl #1
1a00ad48:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
1a00ad4c:	d215      	bcs.n	1a00ad7a <__aeabi_d2iz+0x36>
1a00ad4e:	d511      	bpl.n	1a00ad74 <__aeabi_d2iz+0x30>
1a00ad50:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
1a00ad54:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
1a00ad58:	d912      	bls.n	1a00ad80 <__aeabi_d2iz+0x3c>
1a00ad5a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
1a00ad5e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
1a00ad62:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
1a00ad66:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
1a00ad6a:	fa23 f002 	lsr.w	r0, r3, r2
1a00ad6e:	bf18      	it	ne
1a00ad70:	4240      	negne	r0, r0
1a00ad72:	4770      	bx	lr
1a00ad74:	f04f 0000 	mov.w	r0, #0
1a00ad78:	4770      	bx	lr
1a00ad7a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
1a00ad7e:	d105      	bne.n	1a00ad8c <__aeabi_d2iz+0x48>
1a00ad80:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
1a00ad84:	bf08      	it	eq
1a00ad86:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
1a00ad8a:	4770      	bx	lr
1a00ad8c:	f04f 0000 	mov.w	r0, #0
1a00ad90:	4770      	bx	lr
1a00ad92:	bf00      	nop
1a00ad94:	65206553 	.word	0x65206553
1a00ad98:	72657073 	.word	0x72657073
1a00ad9c:	6c652061 	.word	0x6c652061
1a00ada0:	63636120 	.word	0x63636120
1a00ada4:	616e6f69 	.word	0x616e6f69
1a00ada8:	65642072 	.word	0x65642072
1a00adac:	6f62206c 	.word	0x6f62206c
1a00adb0:	206e6f74 	.word	0x206e6f74
1a00adb4:	69206564 	.word	0x69206564
1a00adb8:	6963696e 	.word	0x6963696e
1a00adbc:	00000d6f 	.word	0x00000d6f
1a00adc0:	696d6f43 	.word	0x696d6f43
1a00adc4:	6f7a6e65 	.word	0x6f7a6e65
1a00adc8:	20656420 	.word	0x20656420
1a00adcc:	736e6573 	.word	0x736e6573
1a00add0:	0d6f6461 	.word	0x0d6f6461
1a00add4:	ffffff00 	.word	0xffffff00
1a00add8:	65206553 	.word	0x65206553
1a00addc:	72657073 	.word	0x72657073
1a00ade0:	20612061 	.word	0x20612061
1a00ade4:	20657571 	.word	0x20657571
1a00ade8:	75206c65 	.word	0x75206c65
1a00adec:	72617573 	.word	0x72617573
1a00adf0:	65206f69 	.word	0x65206f69
1a00adf4:	69726373 	.word	0x69726373
1a00adf8:	6c206162 	.word	0x6c206162
1a00adfc:	61632061 	.word	0x61632061
1a00ae00:	6469746e 	.word	0x6469746e
1a00ae04:	64206461 	.word	0x64206461
1a00ae08:	656d2065 	.word	0x656d2065
1a00ae0c:	736f7274 	.word	0x736f7274
1a00ae10:	65757120 	.word	0x65757120
1a00ae14:	69757120 	.word	0x69757120
1a00ae18:	20657265 	.word	0x20657265
1a00ae1c:	736e6573 	.word	0x736e6573
1a00ae20:	0d2c7261 	.word	0x0d2c7261
1a00ae24:	00000000 	.word	0x00000000
1a00ae28:	72206553 	.word	0x72206553
1a00ae2c:	62696365 	.word	0x62696365
1a00ae30:	6c206f69 	.word	0x6c206f69
1a00ae34:	61632061 	.word	0x61632061
1a00ae38:	6469746e 	.word	0x6469746e
1a00ae3c:	64206461 	.word	0x64206461
1a00ae40:	656d2065 	.word	0x656d2065
1a00ae44:	736f7274 	.word	0x736f7274
1a00ae48:	65757120 	.word	0x65757120
1a00ae4c:	69757120 	.word	0x69757120
1a00ae50:	20657265 	.word	0x20657265
1a00ae54:	736e6573 	.word	0x736e6573
1a00ae58:	0d2c7261 	.word	0x0d2c7261
1a00ae5c:	ffffff00 	.word	0xffffff00
1a00ae60:	69757165 	.word	0x69757165
1a00ae64:	6f436f70 	.word	0x6f436f70
1a00ae68:	6769666e 	.word	0x6769666e
1a00ae6c:	00000000 	.word	0x00000000
1a00ae70:	31636554 	.word	0x31636554
1a00ae74:	ffffff00 	.word	0xffffff00
1a00ae78:	6964654d 	.word	0x6964654d
1a00ae7c:	64206164 	.word	0x64206164
1a00ae80:	616c2065 	.word	0x616c2065
1a00ae84:	746c6120 	.word	0x746c6120
1a00ae88:	20617275 	.word	0x20617275
1a00ae8c:	206c6564 	.word	0x206c6564
1a00ae90:	74736170 	.word	0x74736170
1a00ae94:	6f63206f 	.word	0x6f63206f
1a00ae98:	7266206e 	.word	0x7266206e
1a00ae9c:	54526565 	.word	0x54526565
1a00aea0:	7920534f 	.word	0x7920534f
1a00aea4:	50417320 	.word	0x50417320
1a00aea8:	000d2e49 	.word	0x000d2e49
1a00aeac:	6e656942 	.word	0x6e656942
1a00aeb0:	696e6576 	.word	0x696e6576
1a00aeb4:	00736f64 	.word	0x00736f64
1a00aeb8:	646e6148 	.word	0x646e6148
1a00aebc:	6c72656c 	.word	0x6c72656c
1a00aec0:	75746365 	.word	0x75746365
1a00aec4:	65536172 	.word	0x65536172
1a00aec8:	726f736e 	.word	0x726f736e
1a00aecc:	52497365 	.word	0x52497365
1a00aed0:	00000000 	.word	0x00000000
1a00aed4:	0064636c 	.word	0x0064636c
1a00aed8:	75746c41 	.word	0x75746c41
1a00aedc:	70206172 	.word	0x70206172
1a00aee0:	656d6f72 	.word	0x656d6f72
1a00aee4:	006f6964 	.word	0x006f6964
1a00aee8:	006d6320 	.word	0x006d6320
1a00aeec:	6f746f42 	.word	0x6f746f42
1a00aef0:	6e69206e 	.word	0x6e69206e
1a00aef4:	6f696369 	.word	0x6f696369
1a00aef8:	62696c20 	.word	0x62696c20
1a00aefc:	64617265 	.word	0x64617265
1a00af00:	ff000d6f 	.word	0xff000d6f

1a00af04 <num.13836>:
1a00af04:	33323130 37363534 62613938 66656463     0123456789abcdef
1a00af14:	6a696867 6e6d6c6b 7271706f 76757473     ghijklmnopqrstuv
1a00af24:	7a797877 ffffff00 6120614c 7275746c     wxyz....La altur
1a00af34:	72702061 64656d6f 64206f69 70206c65     a promedio del p
1a00af44:	6f747361 206e6520 65206d6d 25203a73     asto en mm es: %
1a00af54:	0d0a2069 ffffff00                       i ......

1a00af5c <s>:
1a00af5c:	0e1f0f20 6c707041 74616369 206e6f69      ...Application 
1a00af6c:	6c6c614d 4620636f 656c6961 6f482064     Malloc Failed Ho
1a00af7c:	0d216b6f 00000000 7362696c 6572662f     ok!.....libs/fre
1a00af8c:	6f747265 6f732f73 65637275 6f6f682f     ertos/source/hoo
1a00af9c:	632e736b ffffff00 70410a0d 63696c70     ks.c......Applic
1a00afac:	6f697461 7453206e 206b6361 7265764f     ation Stack Over
1a00afbc:	776f6c66 6f202121 6154206e 203a6b73     flow!! on Task: 
1a00afcc:	0a0d7325 ffffff00 41760a0d 72657373     %s........vAsser
1a00afdc:	6c614374 2864656c 200a0d29 4c4c2020     tCalled()..   LL
1a00afec:	20656e69 626d754e 3d207265 0d642520     ine Number = %d.
1a00affc:	2020200a 656c6946 6d614e20 203d2065     .   File Name = 
1a00b00c:	0a0d7325 ff000a0d 454c4449 ffffff00     %s......IDLE....
1a00b01c:	51726d54 ffffff00 20726d54 00637653     TmrQ....Tmr Svc.

1a00b02c <ExtRateIn>:
1a00b02c:	00000000                                ....

1a00b030 <GpioButtons>:
1a00b030:	08000400 09010900                       ........

1a00b038 <GpioLeds>:
1a00b038:	01050005 0e000205 0c010b01              ............

1a00b044 <GpioPorts>:
1a00b044:	03030003 0f050403 05031005 07030603     ................
1a00b054:	ffff0802                                ....

1a00b058 <OscRateIn>:
1a00b058:	00b71b00                                ....

1a00b05c <InitClkStates>:
1a00b05c:	01010f01                                ....

1a00b060 <pinmuxing>:
1a00b060:	00440002 00440102 00440202 00400a02     ..D...D...D...@.
1a00b070:	00400b02 00400c02 00500001 00500101     ..@...@...P...P.
1a00b080:	00500201 00500601 00500106 00500406     ..P...P...P...P.
1a00b090:	00500506 00540706 00540806 00500906     ..P...T...T...P.
1a00b0a0:	00500a06 00500b06 00500c06 00f0040f     ..P...P...P.....
1a00b0b0:	00d50301 00d50401 00160107 00560207     ..............V.
1a00b0c0:	00520302 00520402 00520509 00570609     ..R...R...R...W.
1a00b0d0:	00570206                                ..W.

1a00b0d4 <UART_BClock>:
1a00b0d4:	01a201c2 01620182                       ......b.

1a00b0dc <UART_PClock>:
1a00b0dc:	00820081 00a200a1 08040201 0f0f0f03     ................
1a00b0ec:	ffff00ff                                ....

1a00b0f0 <periph_to_base>:
1a00b0f0:	00050000 0020000a 00090024 00400040     ...... .$...@.@.
1a00b100:	00600005 000400a6 00c300c0 00e00002     ..`.............
1a00b110:	000100e0 01000100 01200003 00060120     .......... . ...
1a00b120:	01400140 0142000c 00190142 01620162     @.@...B.B...b.b.
1a00b130:	01820013 00120182 01a201a2 01c20011     ................
1a00b140:	001001c2 01e201e2 0202000f 000e0202     ................
1a00b150:	02220222 0223000d 001c0223              "."...#.#...

1a00b15c <InitClkStates>:
1a00b15c:	00010100 00010909 0001090a 01010701     ................
1a00b16c:	00010902 00010906 0101090c 0001090d     ................
1a00b17c:	0001090e 0001090f 00010910 00010911     ................
1a00b18c:	00010912 00010913 00011114 00011119     ................
1a00b19c:	0001111a 0001111b                       ........

1a00b1a4 <lpcUarts>:
1a00b1a4:	40081000 06020406 00180205 40081000     ...@...........@
1a00b1b4:	09070509 00180706 40082000 00000000     ......... .@....
1a00b1c4:	00190000 400c1000 07060107 001a0602     .......@........
1a00b1d4:	400c1000 01010f01 001a0110 400c2000     ...@......... .@
1a00b1e4:	02020302 001b0204                       ........

1a00b1ec <gpioPinsInit>:
1a00b1ec:	02000104 00050701 05010d03 04080100     ................
1a00b1fc:	02020002 02000304 00000403 04070002     ................
1a00b20c:	030c0300 09050402 05040103 04030208     ................
1a00b21c:	04020305 06040504 0802000c 03000b06     ................
1a00b22c:	00090607 07060503 060f0504 03030004     ................
1a00b23c:	02000404 00050404 06040502 04060200     ................
1a00b24c:	0c050408 05040a04 0003010e 14010a00     ................
1a00b25c:	010f0000 0d000012 00001101 0010010c     ................
1a00b26c:	07070300 000f0300 01000001 00000000     ................
1a00b27c:	000a0600 08060603 06100504 04030005     ................
1a00b28c:	03000106 04090400 04010d05 010b0000     ................
1a00b29c:	0200000f 00000001 00010104 02010800     ................
1a00b2ac:	01090000 09010006 05040002 04010200     ................
1a00b2bc:	02020105 02020504 0e00000a 01000b02     ................
1a00b2cc:	000c020b ffff0c01 d494c080 ffff000a     ................
1a00b2dc:	00464e49 00666e69 004e414e 006e616e     INF.inf.NAN.nan.
1a00b2ec:	33323130 37363534 42413938 46454443     0123456789ABCDEF
1a00b2fc:	00000000 33323130 37363534 62613938     ....0123456789ab
1a00b30c:	66656463 00000000 6c756e28 0000296c     cdef....(null)..
1a00b31c:	ffff0030                                0...

1a00b320 <blanks.8693>:
1a00b320:	20202020 20202020 20202020 20202020                     

1a00b330 <zeroes.8694>:
1a00b330:	30303030 30303030 30303030 30303030     0000000000000000
1a00b340:	004e614e 69666e49 7974696e ffffff00     NaN.Infinity....

1a00b350 <__mprec_bigtens>:
1a00b350:	37e08000 4341c379 b5056e17 4693b8b5     ...7y.AC.n.....F
1a00b360:	e93ff9f5 4d384f03 f9301d32 5a827748     ..?..O8M2.0.Hw.Z
1a00b370:	7f73bf3c 75154fdd                       <.s..O.u

1a00b378 <__mprec_tens>:
1a00b378:	00000000 3ff00000 00000000 40240000     .......?......$@
1a00b388:	00000000 40590000 00000000 408f4000     ......Y@.....@.@
1a00b398:	00000000 40c38800 00000000 40f86a00     .......@.....j.@
1a00b3a8:	00000000 412e8480 00000000 416312d0     .......A......cA
1a00b3b8:	00000000 4197d784 00000000 41cdcd65     .......A....e..A
1a00b3c8:	20000000 4202a05f e8000000 42374876     ... _..B....vH7B
1a00b3d8:	a2000000 426d1a94 e5400000 42a2309c     ......mB..@..0.B
1a00b3e8:	1e900000 42d6bcc4 26340000 430c6bf5     .......B..4&.k.C
1a00b3f8:	37e08000 4341c379 85d8a000 43763457     ...7y.AC....W4vC
1a00b408:	674ec800 43abc16d 60913d00 43e158e4     ..Ngm..C.=.`.X.C
1a00b418:	78b58c40 4415af1d d6e2ef50 444b1ae4     @..x...DP.....KD
1a00b428:	064dd592 4480f0cf c7e14af6 44b52d02     ..M....D.J...-.D
1a00b438:	79d99db4 44ea7843                       ...yCx.D

1a00b440 <p05.7442>:
1a00b440:	00000005 00000019 0000007d 00000043     ........}...C...
1a00b450:	49534f50 ffff0058 0000002e              POSIX.......

1a00b45c <_ctype_>:
1a00b45c:	20202000 20202020 28282020 20282828     .         ((((( 
1a00b46c:	20202020 20202020 20202020 20202020                     
1a00b47c:	10108820 10101010 10101010 10101010      ...............
1a00b48c:	04040410 04040404 10040404 10101010     ................
1a00b49c:	41411010 41414141 01010101 01010101     ..AAAAAA........
1a00b4ac:	01010101 01010101 01010101 10101010     ................
1a00b4bc:	42421010 42424242 02020202 02020202     ..BBBBBB........
1a00b4cc:	02020202 02020202 02020202 10101010     ................
1a00b4dc:	00000020 00000000 00000000 00000000      ...............
	...
1a00b55c:	ffffff00                                ....
